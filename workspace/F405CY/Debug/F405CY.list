
F405CY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000120b8  08010008  08010008  00020008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080220c0  080220c0  00040010  2**0
                  CONTENTS
  4 .ARM          00000008  080220c0  080220c0  000320c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080220c8  080220c8  00040010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080220c8  080220c8  000320c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080220cc  080220cc  000320cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080220d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009120  20000010  080220e0  00040010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009130  080220e0  00049130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d40d  00000000  00000000  00040040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000076a0  00000000  00000000  0008d44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002138  00000000  00000000  00094af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dd0  00000000  00000000  00096c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000298f5  00000000  00000000  000989f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026f82  00000000  00000000  000c22ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9df6  00000000  00000000  000e926f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c3065  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008560  00000000  00000000  001c30e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fff0 	.word	0x0800fff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800fff0 	.word	0x0800fff0

080001d0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001d0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001d2:	2b01      	cmp	r3, #1
	IT       LS
 80001d4:	bf98      	it	ls
	BXLS     lr
 80001d6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001dc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001ee:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001f0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001f2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001f4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001fe:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000204:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000208:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800020c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000210:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800021a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800022c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800022e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000230:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800023a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800023c:	2b01      	cmp	r3, #1
	IT       LS
 800023e:	bf98      	it	ls
	BXLS     lr
 8000240:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000246:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000252:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000270:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000276:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800027a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000282:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000284:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000286:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005a2:	4b53      	ldr	r3, [pc, #332]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005a4:	4a53      	ldr	r2, [pc, #332]	; (80006f4 <MX_ADC1_Init+0x164>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005a8:	4b51      	ldr	r3, [pc, #324]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ae:	4b50      	ldr	r3, [pc, #320]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005b4:	4b4e      	ldr	r3, [pc, #312]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ba:	4b4d      	ldr	r3, [pc, #308]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005bc:	2200      	movs	r2, #0
 80005be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c0:	4b4b      	ldr	r3, [pc, #300]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005c8:	4b49      	ldr	r3, [pc, #292]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005d0:	4b47      	ldr	r3, [pc, #284]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005d2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d8:	4b45      	ldr	r3, [pc, #276]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80005de:	4b44      	ldr	r3, [pc, #272]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005e0:	2208      	movs	r2, #8
 80005e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005e4:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ec:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	483f      	ldr	r0, [pc, #252]	; (80006f0 <MX_ADC1_Init+0x160>)
 80005f4:	f001 fa82 	bl	8001afc <HAL_ADC_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80005fe:	f000 fce5 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000602:	230a      	movs	r3, #10
 8000604:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	4837      	ldr	r0, [pc, #220]	; (80006f0 <MX_ADC1_Init+0x160>)
 8000614:	f001 fbbc 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800061e:	f000 fcd5 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000622:	230b      	movs	r3, #11
 8000624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4830      	ldr	r0, [pc, #192]	; (80006f0 <MX_ADC1_Init+0x160>)
 8000630:	f001 fbae 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800063a:	f000 fcc7 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800063e:	230c      	movs	r3, #12
 8000640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000642:	2303      	movs	r3, #3
 8000644:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	4829      	ldr	r0, [pc, #164]	; (80006f0 <MX_ADC1_Init+0x160>)
 800064c:	f001 fba0 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000656:	f000 fcb9 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800065a:	230d      	movs	r3, #13
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4822      	ldr	r0, [pc, #136]	; (80006f0 <MX_ADC1_Init+0x160>)
 8000668:	f001 fb92 	bl	8001d90 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000672:	f000 fcab 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800067a:	2305      	movs	r3, #5
 800067c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	4619      	mov	r1, r3
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <MX_ADC1_Init+0x160>)
 8000684:	f001 fb84 	bl	8001d90 <HAL_ADC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800068e:	f000 fc9d 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000692:	2301      	movs	r3, #1
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_ADC1_Init+0x160>)
 80006a0:	f001 fb76 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80006aa:	f000 fc8f 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_ADC1_Init+0x160>)
 80006bc:	f001 fb68 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80006c6:	f000 fc81 	bl	8000fcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006ca:	2303      	movs	r3, #3
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80006ce:	2308      	movs	r3, #8
 80006d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <MX_ADC1_Init+0x160>)
 80006d8:	f001 fb5a 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80006e2:	f000 fc73 	bl	8000fcc <Error_Handler>
  }

}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20004950 	.word	0x20004950
 80006f4:	40012000 	.word	0x40012000

080006f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a3c      	ldr	r2, [pc, #240]	; (8000808 <HAL_ADC_MspInit+0x110>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d171      	bne.n	80007fe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b3b      	ldr	r3, [pc, #236]	; (800080c <HAL_ADC_MspInit+0x114>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a3a      	ldr	r2, [pc, #232]	; (800080c <HAL_ADC_MspInit+0x114>)
 8000724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <HAL_ADC_MspInit+0x114>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <HAL_ADC_MspInit+0x114>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a33      	ldr	r2, [pc, #204]	; (800080c <HAL_ADC_MspInit+0x114>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <HAL_ADC_MspInit+0x114>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <HAL_ADC_MspInit+0x114>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <HAL_ADC_MspInit+0x114>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <HAL_ADC_MspInit+0x114>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800076e:	230f      	movs	r3, #15
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000772:	2303      	movs	r3, #3
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4823      	ldr	r0, [pc, #140]	; (8000810 <HAL_ADC_MspInit+0x118>)
 8000782:	f003 fa41 	bl	8003c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000786:	230f      	movs	r3, #15
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078a:	2303      	movs	r3, #3
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	481e      	ldr	r0, [pc, #120]	; (8000814 <HAL_ADC_MspInit+0x11c>)
 800079a:	f003 fa35 	bl	8003c08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <HAL_ADC_MspInit+0x124>)
 80007a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007e4:	f002 fe10 	bl	8003408 <HAL_DMA_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80007ee:	f000 fbed 	bl	8000fcc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007f6:	639a      	str	r2, [r3, #56]	; 0x38
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <HAL_ADC_MspInit+0x120>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40012000 	.word	0x40012000
 800080c:	40023800 	.word	0x40023800
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	20004998 	.word	0x20004998
 800081c:	40026410 	.word	0x40026410

08000820 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_CAN1_Init+0x64>)
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <MX_CAN1_Init+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_CAN1_Init+0x64>)
 800082c:	2206      	movs	r2, #6
 800082e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_CAN1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_CAN1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_CAN1_Init+0x64>)
 800083e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000842:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_CAN1_Init+0x64>)
 8000846:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800084a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_CAN1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_CAN1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_CAN1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_CAN1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_CAN1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_CAN1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_CAN1_Init+0x64>)
 8000872:	f001 fd2d 	bl	80022d0 <HAL_CAN_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800087c:	f000 fba6 	bl	8000fcc <Error_Handler>
  }

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200049f8 	.word	0x200049f8
 8000888:	40006400 	.word	0x40006400

0800088c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <HAL_CAN_MspInit+0xa4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d13c      	bne.n	8000928 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008f8:	2309      	movs	r3, #9
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <HAL_CAN_MspInit+0xac>)
 8000904:	f003 f980 	bl	8003c08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2105      	movs	r1, #5
 800090c:	2014      	movs	r0, #20
 800090e:	f002 fc3e 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000912:	2014      	movs	r0, #20
 8000914:	f002 fc57 	bl	80031c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2105      	movs	r1, #5
 800091c:	2015      	movs	r0, #21
 800091e:	f002 fc36 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000922:	2015      	movs	r0, #21
 8000924:	f002 fc4f 	bl	80031c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40006400 	.word	0x40006400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_DAC_Init+0x4c>)
 800094c:	4a0f      	ldr	r2, [pc, #60]	; (800098c <MX_DAC_Init+0x50>)
 800094e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_DAC_Init+0x4c>)
 8000952:	f002 fc4a 	bl	80031ea <HAL_DAC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800095c:	f000 fb36 	bl	8000fcc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_DAC_Init+0x4c>)
 8000970:	f002 fcd8 	bl	8003324 <HAL_DAC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800097a:	f000 fb27 	bl	8000fcc <Error_Handler>
  }

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20004a20 	.word	0x20004a20
 800098c:	40007400 	.word	0x40007400

08000990 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_DAC_MspInit+0x7c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d127      	bne.n	8000a02 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_DAC_MspInit+0x80>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <HAL_DAC_MspInit+0x80>)
 80009bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_DAC_MspInit+0x80>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_DAC_MspInit+0x80>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_DAC_MspInit+0x80>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_DAC_MspInit+0x80>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ea:	2310      	movs	r3, #16
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ee:	2303      	movs	r3, #3
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_DAC_MspInit+0x84>)
 80009fe:	f003 f903 	bl	8003c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40007400 	.word	0x40007400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
void MX_DMA_Init(void) 
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <MX_DMA_Init+0xf0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a38      	ldr	r2, [pc, #224]	; (8000b08 <MX_DMA_Init+0xf0>)
 8000a28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b36      	ldr	r3, [pc, #216]	; (8000b08 <MX_DMA_Init+0xf0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <MX_DMA_Init+0xf0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <MX_DMA_Init+0xf0>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <MX_DMA_Init+0xf0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a58:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <MX_DMA_Init+0xf8>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a76:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a7e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a86:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_INC4;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000aa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_INC4;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000aaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8000ab0:	4816      	ldr	r0, [pc, #88]	; (8000b0c <MX_DMA_Init+0xf4>)
 8000ab2:	f002 fca9 	bl	8003408 <HAL_DMA_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_DMA_Init+0xa8>
  {
    Error_Handler();
 8000abc:	f000 fa86 	bl	8000fcc <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2105      	movs	r1, #5
 8000ac4:	200c      	movs	r0, #12
 8000ac6:	f002 fb62 	bl	800318e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aca:	200c      	movs	r0, #12
 8000acc:	f002 fb7b 	bl	80031c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2105      	movs	r1, #5
 8000ad4:	2038      	movs	r0, #56	; 0x38
 8000ad6:	f002 fb5a 	bl	800318e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ada:	2038      	movs	r0, #56	; 0x38
 8000adc:	f002 fb73 	bl	80031c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2105      	movs	r1, #5
 8000ae4:	2039      	movs	r0, #57	; 0x39
 8000ae6:	f002 fb52 	bl	800318e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000aea:	2039      	movs	r0, #57	; 0x39
 8000aec:	f002 fb6b 	bl	80031c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2105      	movs	r1, #5
 8000af4:	203a      	movs	r0, #58	; 0x3a
 8000af6:	f002 fb4a 	bl	800318e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000afa:	203a      	movs	r0, #58	; 0x3a
 8000afc:	f002 fb63 	bl	80031c6 <HAL_NVIC_EnableIRQ>

}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	20004a34 	.word	0x20004a34
 8000b10:	40026428 	.word	0x40026428

08000b14 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canMsgQueue */
  canMsgQueueHandle = osMessageQueueNew (16, sizeof(CAN_MSG), &canMsgQueue_attributes);
 8000b18:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_FREERTOS_Init+0x68>)
 8000b1a:	2128      	movs	r1, #40	; 0x28
 8000b1c:	2010      	movs	r0, #16
 8000b1e:	f009 faf3 	bl	800a108 <osMessageQueueNew>
 8000b22:	4602      	mov	r2, r0
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_FREERTOS_Init+0x6c>)
 8000b26:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <MX_FREERTOS_Init+0x70>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4816      	ldr	r0, [pc, #88]	; (8000b88 <MX_FREERTOS_Init+0x74>)
 8000b2e:	f009 f91d 	bl	8009d6c <osThreadNew>
 8000b32:	4602      	mov	r2, r0
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_FREERTOS_Init+0x78>)
 8000b36:	601a      	str	r2, [r3, #0]

  /* creation of usart1Task */
  usart1TaskHandle = osThreadNew(StartUsart1Task, NULL, &usart1Task_attributes);
 8000b38:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MX_FREERTOS_Init+0x7c>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4815      	ldr	r0, [pc, #84]	; (8000b94 <MX_FREERTOS_Init+0x80>)
 8000b3e:	f009 f915 	bl	8009d6c <osThreadNew>
 8000b42:	4602      	mov	r2, r0
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_FREERTOS_Init+0x84>)
 8000b46:	601a      	str	r2, [r3, #0]

  /* creation of usart3Task */
  usart3TaskHandle = osThreadNew(StartUsart3Task, NULL, &usart3Task_attributes);
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <MX_FREERTOS_Init+0x88>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <MX_FREERTOS_Init+0x8c>)
 8000b4e:	f009 f90d 	bl	8009d6c <osThreadNew>
 8000b52:	4602      	mov	r2, r0
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_FREERTOS_Init+0x90>)
 8000b56:	601a      	str	r2, [r3, #0]

  /* creation of adcTask */
  adcTaskHandle = osThreadNew(StartAdcTask, NULL, &adcTask_attributes);
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MX_FREERTOS_Init+0x94>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <MX_FREERTOS_Init+0x98>)
 8000b5e:	f009 f905 	bl	8009d6c <osThreadNew>
 8000b62:	4602      	mov	r2, r0
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_FREERTOS_Init+0x9c>)
 8000b66:	601a      	str	r2, [r3, #0]

  /* creation of can1Task */
  can1TaskHandle = osThreadNew(StartCan1Task, NULL, &can1Task_attributes);
 8000b68:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <MX_FREERTOS_Init+0xa0>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <MX_FREERTOS_Init+0xa4>)
 8000b6e:	f009 f8fd 	bl	8009d6c <osThreadNew>
 8000b72:	4602      	mov	r2, r0
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_FREERTOS_Init+0xa8>)
 8000b76:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	08010118 	.word	0x08010118
 8000b80:	20004b58 	.word	0x20004b58
 8000b84:	08010064 	.word	0x08010064
 8000b88:	0800f119 	.word	0x0800f119
 8000b8c:	20004a94 	.word	0x20004a94
 8000b90:	08010088 	.word	0x08010088
 8000b94:	0800f339 	.word	0x0800f339
 8000b98:	20004b60 	.word	0x20004b60
 8000b9c:	080100ac 	.word	0x080100ac
 8000ba0:	08000bc1 	.word	0x08000bc1
 8000ba4:	20004a98 	.word	0x20004a98
 8000ba8:	080100d0 	.word	0x080100d0
 8000bac:	0800f1a1 	.word	0x0800f1a1
 8000bb0:	20004b54 	.word	0x20004b54
 8000bb4:	080100f4 	.word	0x080100f4
 8000bb8:	0800f375 	.word	0x0800f375
 8000bbc:	20004b5c 	.word	0x20004b5c

08000bc0 <StartUsart3Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUsart3Task */
__weak void StartUsart3Task(void *argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsart3Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f009 fa6f 	bl	800a0ac <osDelay>
 8000bce:	e7fb      	b.n	8000bc8 <StartUsart3Task+0x8>

08000bd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b59      	ldr	r3, [pc, #356]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a58      	ldr	r2, [pc, #352]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b56      	ldr	r3, [pc, #344]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b52      	ldr	r3, [pc, #328]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a51      	ldr	r2, [pc, #324]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b4f      	ldr	r3, [pc, #316]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a4a      	ldr	r2, [pc, #296]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a43      	ldr	r2, [pc, #268]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a3c      	ldr	r2, [pc, #240]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b3a      	ldr	r3, [pc, #232]	; (8000d50 <MX_GPIO_Init+0x180>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	4837      	ldr	r0, [pc, #220]	; (8000d54 <MX_GPIO_Init+0x184>)
 8000c78:	f003 f978 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7164 	mov.w	r1, #912	; 0x390
 8000c82:	4835      	ldr	r0, [pc, #212]	; (8000d58 <MX_GPIO_Init+0x188>)
 8000c84:	f003 f972 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13 
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000c8e:	4833      	ldr	r0, [pc, #204]	; (8000d5c <MX_GPIO_Init+0x18c>)
 8000c90:	f003 f96c 	bl	8003f6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9a:	482e      	ldr	r0, [pc, #184]	; (8000d54 <MX_GPIO_Init+0x184>)
 8000c9c:	f003 f966 	bl	8003f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5|GPIO_PIN_12;
 8000ca0:	f243 0320 	movw	r3, #12320	; 0x3020
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4828      	ldr	r0, [pc, #160]	; (8000d58 <MX_GPIO_Init+0x188>)
 8000cb6:	f002 ffa7 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = SPI_CS_Pin|GPIO_PIN_8;
 8000cba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4820      	ldr	r0, [pc, #128]	; (8000d54 <MX_GPIO_Init+0x184>)
 8000cd4:	f002 ff98 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000cd8:	f44f 7364 	mov.w	r3, #912	; 0x390
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4819      	ldr	r0, [pc, #100]	; (8000d58 <MX_GPIO_Init+0x188>)
 8000cf2:	f002 ff89 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4813      	ldr	r0, [pc, #76]	; (8000d5c <MX_GPIO_Init+0x18c>)
 8000d0e:	f002 ff7b 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d12:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_GPIO_Init+0x18c>)
 8000d2c:	f002 ff6c 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d30:	2304      	movs	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000d44:	f002 ff60 	bl	8003c08 <HAL_GPIO_Init>

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	; 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40020400 	.word	0x40020400
 8000d60:	40020c00 	.word	0x40020c00

08000d64 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <MX_I2C2_Init+0x58>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <MX_I2C2_Init+0x5c>)
 8000d72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_I2C2_Init+0x54>)
 8000da4:	f003 f916 	bl	8003fd4 <HAL_I2C_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000dae:	f000 f90d 	bl	8000fcc <Error_Handler>
  }

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20007478 	.word	0x20007478
 8000dbc:	40005800 	.word	0x40005800
 8000dc0:	00061a80 	.word	0x00061a80

08000dc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <HAL_I2C_MspInit+0xa0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d13a      	bne.n	8000e5c <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */
	    __HAL_RCC_I2C2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000df0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e24:	2312      	movs	r3, #18
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e30:	2304      	movs	r3, #4
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480c      	ldr	r0, [pc, #48]	; (8000e6c <HAL_I2C_MspInit+0xa8>)
 8000e3c:	f002 fee4 	bl	8003c08 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000e4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_I2C_MspInit+0xa4>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40005800 	.word	0x40005800
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f000 fe00 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f824 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f7ff fea8 	bl	8000bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e80:	f7ff fdca 	bl	8000a18 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e84:	f000 fc86 	bl	8001794 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e88:	f000 fcae 	bl	80017e8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e8c:	f7ff fb80 	bl	8000590 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000e90:	f000 fa56 	bl	8001340 <MX_TIM2_Init>
  MX_CAN1_Init();
 8000e94:	f7ff fcc4 	bl	8000820 <MX_CAN1_Init>
  MX_DAC_Init();
 8000e98:	f7ff fd50 	bl	800093c <MX_DAC_Init>
  MX_I2C2_Init();
 8000e9c:	f7ff ff62 	bl	8000d64 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000ea0:	f000 f89c 	bl	8000fdc <MX_SPI1_Init>
  MX_TIM3_Init();
 8000ea4:	f000 fa98 	bl	80013d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ea8:	f000 faf4 	bl	8001494 <MX_TIM4_Init>
  MX_TIM14_Init();
 8000eac:	f000 fb66 	bl	800157c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  InitMyApp();
 8000eb0:	f00e f87e 	bl	800efb0 <InitMyApp>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000eb4:	f008 fef2 	bl	8009c9c <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000eb8:	f7ff fe2c 	bl	8000b14 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 8000ebc:	f008 ff22 	bl	8009d04 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <main+0x50>
	...

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	2230      	movs	r2, #48	; 0x30
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00f f883 	bl	800ffde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <SystemClock_Config+0xcc>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <SystemClock_Config+0xcc>)
 8000ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <SystemClock_Config+0xcc>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <SystemClock_Config+0xd0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <SystemClock_Config+0xd0>)
 8000f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <SystemClock_Config+0xd0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f34:	2304      	movs	r3, #4
 8000f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f38:	23a8      	movs	r3, #168	; 0xa8
 8000f3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f40:	2304      	movs	r3, #4
 8000f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f003 fff3 	bl	8004f34 <HAL_RCC_OscConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f54:	f000 f83a 	bl	8000fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	230f      	movs	r3, #15
 8000f5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2105      	movs	r1, #5
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 fa4c 	bl	8005414 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f82:	f000 f823 	bl	8000fcc <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3750      	adds	r7, #80	; 0x50
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000faa:	f000 fd87 	bl	8001abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance==TIM14)//2kHz
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d101      	bne.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  ProcKout();
 8000fb8:	f00c fd80 	bl	800dabc <ProcKout>
  }
  /* USER CODE END Callback 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	40002000 	.word	0x40002000

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_SPI1_Init+0x68>)
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <MX_SPI1_Init+0x6c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_SPI1_Init+0x68>)
 8000fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_SPI1_Init+0x68>)
 8000ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_SPI1_Init+0x68>)
 8000ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_SPI1_Init+0x68>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_SPI1_Init+0x68>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_SPI1_Init+0x68>)
 800100c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001010:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_SPI1_Init+0x68>)
 8001014:	2220      	movs	r2, #32
 8001016:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MX_SPI1_Init+0x68>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_SPI1_Init+0x68>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <MX_SPI1_Init+0x68>)
 8001026:	2200      	movs	r2, #0
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_SPI1_Init+0x68>)
 800102c:	220a      	movs	r2, #10
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_SPI1_Init+0x68>)
 8001032:	f004 fc13 	bl	800585c <HAL_SPI_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800103c:	f7ff ffc6 	bl	8000fcc <Error_Handler>
  }

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200074cc 	.word	0x200074cc
 8001048:	40013000 	.word	0x40013000

0800104c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_SPI_MspInit+0x84>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12b      	bne.n	80010c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010a6:	2360      	movs	r3, #96	; 0x60
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b6:	2305      	movs	r3, #5
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_SPI_MspInit+0x8c>)
 80010c2:	f002 fda1 	bl	8003c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013000 	.word	0x40013000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_MspInit+0x54>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <HAL_MspInit+0x54>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x54>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_MspInit+0x54>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_MspInit+0x54>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_MspInit+0x54>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	210f      	movs	r1, #15
 800111e:	f06f 0001 	mvn.w	r0, #1
 8001122:	f002 f834 	bl	800318e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2019      	movs	r0, #25
 800114a:	f002 f820 	bl	800318e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800114e:	2019      	movs	r0, #25
 8001150:	f002 f839 	bl	80031c6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_InitTick+0xa4>)
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <HAL_InitTick+0xa4>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6453      	str	r3, [r2, #68]	; 0x44
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_InitTick+0xa4>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001170:	f107 0210 	add.w	r2, r7, #16
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f004 fb3c 	bl	80057f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001180:	f004 fb26 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 8001184:	4603      	mov	r3, r0
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	4a13      	ldr	r2, [pc, #76]	; (80011dc <HAL_InitTick+0xa8>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	3b01      	subs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_InitTick+0xac>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <HAL_InitTick+0xb0>)
 800119c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_InitTick+0xac>)
 80011a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_InitTick+0xac>)
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_InitTick+0xac>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_InitTick+0xac>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <HAL_InitTick+0xac>)
 80011ba:	f004 fbb3 	bl	8005924 <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <HAL_InitTick+0xac>)
 80011c6:	f004 fbfc 	bl	80059c2 <HAL_TIM_Base_Start_IT>
 80011ca:	4603      	mov	r3, r0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3730      	adds	r7, #48	; 0x30
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	20007524 	.word	0x20007524
 80011e4:	40010000 	.word	0x40010000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <DMA1_Stream1_IRQHandler+0x10>)
 8001222:	f002 fa89 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20007664 	.word	0x20007664

08001230 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <CAN1_RX0_IRQHandler+0x10>)
 8001236:	f001 fcb3 	bl	8002ba0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200049f8 	.word	0x200049f8

08001244 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <CAN1_RX1_IRQHandler+0x10>)
 800124a:	f001 fca9 	bl	8002ba0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200049f8 	.word	0x200049f8

08001258 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800125e:	f004 fc67 	bl	8005b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20007524 	.word	0x20007524

0800126c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM3_IRQHandler+0x10>)
 8001272:	f004 fc5d 	bl	8005b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200075a4 	.word	0x200075a4

08001280 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <TIM4_IRQHandler+0x10>)
 8001286:	f004 fc53 	bl	8005b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20007564 	.word	0x20007564

08001294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UART1_IDLECallBack();
 8001298:	f00b ff78 	bl	800d18c <UART1_IDLECallBack>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART1_IRQHandler+0x14>)
 800129e:	f005 fb9d 	bl	80069dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20007764 	.word	0x20007764

080012ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	UART1_IDLECallBack();
 80012b0:	f00b ff6c 	bl	800d18c <UART1_IDLECallBack>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <USART3_IRQHandler+0x14>)
 80012b6:	f005 fb91 	bl	80069dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200076c4 	.word	0x200076c4

080012c4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012ca:	f004 fc31 	bl	8005b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20007624 	.word	0x20007624

080012d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <DMA2_Stream0_IRQHandler+0x10>)
 80012de:	f002 fa2b 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20004998 	.word	0x20004998

080012ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <DMA2_Stream1_IRQHandler+0x10>)
 80012f2:	f002 fa21 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20004a34 	.word	0x20004a34

08001300 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA2_Stream2_IRQHandler+0x10>)
 8001306:	f002 fa17 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20007704 	.word	0x20007704

08001314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <SystemInit+0x28>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <SystemInit+0x28>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <SystemInit+0x28>)
 800132a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132e:	609a      	str	r2, [r3, #8]
#endif
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_TIM2_Init+0x94>)
 800135e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001366:	2231      	movs	r2, #49	; 0x31
 8001368:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_TIM2_Init+0x94>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 524;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001372:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8001376:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_TIM2_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001386:	f004 facd 	bl	8005924 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001390:	f7ff fe1c 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_TIM2_Init+0x94>)
 80013a2:	f004 fd69 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013ac:	f7ff fe0e 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013b0:	2320      	movs	r3, #32
 80013b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_TIM2_Init+0x94>)
 80013be:	f005 f8bb 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f7ff fe00 	bl	8000fcc <Error_Handler>
  }

}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200075e4 	.word	0x200075e4

080013d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <MX_TIM3_Init+0xb4>)
 80013f6:	4a26      	ldr	r2, [pc, #152]	; (8001490 <MX_TIM3_Init+0xb8>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <MX_TIM3_Init+0xb4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <MX_TIM3_Init+0xb4>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <MX_TIM3_Init+0xb4>)
 8001408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <MX_TIM3_Init+0xb4>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_TIM3_Init+0xb4>)
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800141a:	481c      	ldr	r0, [pc, #112]	; (800148c <MX_TIM3_Init+0xb4>)
 800141c:	f004 faf5 	bl	8005a0a <HAL_TIM_IC_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001426:	f7ff fdd1 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800142a:	2320      	movs	r3, #32
 800142c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	4814      	ldr	r0, [pc, #80]	; (800148c <MX_TIM3_Init+0xb4>)
 800143a:	f005 f87d 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001444:	f7ff fdc2 	bl	8000fcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001448:	2302      	movs	r3, #2
 800144a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800144c:	2301      	movs	r3, #1
 800144e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	480b      	ldr	r0, [pc, #44]	; (800148c <MX_TIM3_Init+0xb4>)
 8001460:	f004 fc6e 	bl	8005d40 <HAL_TIM_IC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800146a:	f7ff fdaf 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	2204      	movs	r2, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_TIM3_Init+0xb4>)
 8001476:	f004 fc63 	bl	8005d40 <HAL_TIM_IC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001480:	f7ff fda4 	bl	8000fcc <Error_Handler>
  }

}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200075a4 	.word	0x200075a4
 8001490:	40000400 	.word	0x40000400

08001494 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <MX_TIM4_Init+0xe0>)
 80014b2:	4a31      	ldr	r2, [pc, #196]	; (8001578 <MX_TIM4_Init+0xe4>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <MX_TIM4_Init+0xe0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <MX_TIM4_Init+0xe0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <MX_TIM4_Init+0xe0>)
 80014c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <MX_TIM4_Init+0xe0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <MX_TIM4_Init+0xe0>)
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80014d6:	4827      	ldr	r0, [pc, #156]	; (8001574 <MX_TIM4_Init+0xe0>)
 80014d8:	f004 fa97 	bl	8005a0a <HAL_TIM_IC_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80014e2:	f7ff fd73 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014e6:	2320      	movs	r3, #32
 80014e8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4619      	mov	r1, r3
 80014f4:	481f      	ldr	r0, [pc, #124]	; (8001574 <MX_TIM4_Init+0xe0>)
 80014f6:	f005 f81f 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001500:	f7ff fd64 	bl	8000fcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001504:	2302      	movs	r3, #2
 8001506:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001508:	2301      	movs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	4816      	ldr	r0, [pc, #88]	; (8001574 <MX_TIM4_Init+0xe0>)
 800151c:	f004 fc10 	bl	8005d40 <HAL_TIM_IC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001526:	f7ff fd51 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	2204      	movs	r2, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4810      	ldr	r0, [pc, #64]	; (8001574 <MX_TIM4_Init+0xe0>)
 8001532:	f004 fc05 	bl	8005d40 <HAL_TIM_IC_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800153c:	f7ff fd46 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	2208      	movs	r2, #8
 8001544:	4619      	mov	r1, r3
 8001546:	480b      	ldr	r0, [pc, #44]	; (8001574 <MX_TIM4_Init+0xe0>)
 8001548:	f004 fbfa 	bl	8005d40 <HAL_TIM_IC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8001552:	f7ff fd3b 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	220c      	movs	r2, #12
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_TIM4_Init+0xe0>)
 800155e:	f004 fbef 	bl	8005d40 <HAL_TIM_IC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001568:	f7ff fd30 	bl	8000fcc <Error_Handler>
  }

}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20007564 	.word	0x20007564
 8001578:	40000800 	.word	0x40000800

0800157c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_TIM14_Init+0x40>)
 8001582:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <MX_TIM14_Init+0x44>)
 8001584:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 41;
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <MX_TIM14_Init+0x40>)
 8001588:	2229      	movs	r2, #41	; 0x29
 800158a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_TIM14_Init+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_TIM14_Init+0x40>)
 8001594:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001598:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_TIM14_Init+0x40>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_TIM14_Init+0x40>)
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_TIM14_Init+0x40>)
 80015a8:	f004 f9bc 	bl	8005924 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80015b2:	f7ff fd0b 	bl	8000fcc <Error_Handler>
  }

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20007624 	.word	0x20007624
 80015c0:	40002000 	.word	0x40002000

080015c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d4:	d10e      	bne.n	80015f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_TIM_Base_MspInit+0x70>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_TIM_Base_MspInit+0x70>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_TIM_Base_MspInit+0x70>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80015f2:	e01a      	b.n	800162a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM14)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_TIM_Base_MspInit+0x74>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d115      	bne.n	800162a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_TIM_Base_MspInit+0x70>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_TIM_Base_MspInit+0x70>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_TIM_Base_MspInit+0x70>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	202d      	movs	r0, #45	; 0x2d
 8001620:	f001 fdb5 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001624:	202d      	movs	r0, #45	; 0x2d
 8001626:	f001 fdce 	bl	80031c6 <HAL_NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40002000 	.word	0x40002000

0800163c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a49      	ldr	r2, [pc, #292]	; (8001780 <HAL_TIM_IC_MspInit+0x144>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d152      	bne.n	8001704 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b45      	ldr	r3, [pc, #276]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a39      	ldr	r2, [pc, #228]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b2:	2340      	movs	r3, #64	; 0x40
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016c2:	2302      	movs	r3, #2
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	482e      	ldr	r0, [pc, #184]	; (8001788 <HAL_TIM_IC_MspInit+0x14c>)
 80016ce:	f002 fa9b 	bl	8003c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016d2:	2320      	movs	r3, #32
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016da:	2301      	movs	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4827      	ldr	r0, [pc, #156]	; (800178c <HAL_TIM_IC_MspInit+0x150>)
 80016ee:	f002 fa8b 	bl	8003c08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2105      	movs	r1, #5
 80016f6:	201d      	movs	r0, #29
 80016f8:	f001 fd49 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016fc:	201d      	movs	r0, #29
 80016fe:	f001 fd62 	bl	80031c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001702:	e039      	b.n	8001778 <HAL_TIM_IC_MspInit+0x13c>
  else if(tim_icHandle->Instance==TIM4)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <HAL_TIM_IC_MspInit+0x154>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d134      	bne.n	8001778 <HAL_TIM_IC_MspInit+0x13c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_TIM_IC_MspInit+0x148>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001746:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001750:	2301      	movs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001758:	2302      	movs	r3, #2
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	480a      	ldr	r0, [pc, #40]	; (800178c <HAL_TIM_IC_MspInit+0x150>)
 8001764:	f002 fa50 	bl	8003c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2105      	movs	r1, #5
 800176c:	201e      	movs	r0, #30
 800176e:	f001 fd0e 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001772:	201e      	movs	r0, #30
 8001774:	f001 fd27 	bl	80031c6 <HAL_NVIC_EnableIRQ>
}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40000400 	.word	0x40000400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020800 	.word	0x40020800
 800178c:	40020400 	.word	0x40020400
 8001790:	40000800 	.word	0x40000800

08001794 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_USART1_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART1_UART_Init+0x4c>)
 80017cc:	f004 ff44 	bl	8006658 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f7ff fbf9 	bl	8000fcc <Error_Handler>
  }

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20007764 	.word	0x20007764
 80017e4:	40011000 	.word	0x40011000

080017e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <MX_USART3_UART_Init+0x50>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 80017f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_USART3_UART_Init+0x4c>)
 8001820:	f004 ff1a 	bl	8006658 <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800182a:	f7ff fbcf 	bl	8000fcc <Error_Handler>
  }

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200076c4 	.word	0x200076c4
 8001838:	40004800 	.word	0x40004800

0800183c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a69      	ldr	r2, [pc, #420]	; (8001a00 <HAL_UART_MspInit+0x1c4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d163      	bne.n	8001926 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a67      	ldr	r2, [pc, #412]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a60      	ldr	r2, [pc, #384]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001896:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a8:	2307      	movs	r3, #7
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4855      	ldr	r0, [pc, #340]	; (8001a08 <HAL_UART_MspInit+0x1cc>)
 80018b4:	f002 f9a8 	bl	8003c08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80018b8:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018ba:	4a55      	ldr	r2, [pc, #340]	; (8001a10 <HAL_UART_MspInit+0x1d4>)
 80018bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c6:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b4e      	ldr	r3, [pc, #312]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e0:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018ec:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018f8:	4844      	ldr	r0, [pc, #272]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 80018fa:	f001 fd85 	bl	8003408 <HAL_DMA_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001904:	f7ff fb62 	bl	8000fcc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a40      	ldr	r2, [pc, #256]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
 800190e:	4a3f      	ldr	r2, [pc, #252]	; (8001a0c <HAL_UART_MspInit+0x1d0>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2105      	movs	r1, #5
 8001918:	2025      	movs	r0, #37	; 0x25
 800191a:	f001 fc38 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800191e:	2025      	movs	r0, #37	; 0x25
 8001920:	f001 fc51 	bl	80031c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001924:	e067      	b.n	80019f6 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART3)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <HAL_UART_MspInit+0x1d8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d162      	bne.n	80019f6 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 800193a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6313      	str	r3, [r2, #48]	; 0x30
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_UART_MspInit+0x1c8>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001968:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800197a:	2307      	movs	r3, #7
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4824      	ldr	r0, [pc, #144]	; (8001a18 <HAL_UART_MspInit+0x1dc>)
 8001986:	f002 f93f 	bl	8003c08 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 800198c:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <HAL_UART_MspInit+0x1e4>)
 800198e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 8001992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001996:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019aa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019cc:	f001 fd1c 	bl	8003408 <HAL_DMA_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80019d6:	f7ff faf9 	bl	8000fcc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_UART_MspInit+0x1e0>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	2027      	movs	r0, #39	; 0x27
 80019ec:	f001 fbcf 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019f0:	2027      	movs	r0, #39	; 0x27
 80019f2:	f001 fbe8 	bl	80031c6 <HAL_NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	; 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40011000 	.word	0x40011000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	20007704 	.word	0x20007704
 8001a10:	40026440 	.word	0x40026440
 8001a14:	40004800 	.word	0x40004800
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	20007664 	.word	0x20007664
 8001a20:	40026028 	.word	0x40026028

08001a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a2a:	e003      	b.n	8001a34 <LoopCopyDataInit>

08001a2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a32:	3104      	adds	r1, #4

08001a34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a34:	480b      	ldr	r0, [pc, #44]	; (8001a64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a3c:	d3f6      	bcc.n	8001a2c <CopyDataInit>
  ldr  r2, =_sbss
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a40:	e002      	b.n	8001a48 <LoopFillZerobss>

08001a42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a44:	f842 3b04 	str.w	r3, [r2], #4

08001a48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a4c:	d3f9      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a4e:	f7ff fc61 	bl	8001314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f00e fa95 	bl	800ff80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a56:	f7ff fa0b 	bl	8000e70 <main>
  bx  lr    
 8001a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a60:	080220d0 	.word	0x080220d0
  ldr  r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a68:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001a6c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001a70:	20009130 	.word	0x20009130

08001a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <HAL_Init+0x40>)
 8001a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_Init+0x40>)
 8001a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <HAL_Init+0x40>)
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f001 fb69 	bl	8003178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fb44 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aac:	f7ff fb16 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023c00 	.word	0x40023c00

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	200077a4 	.word	0x200077a4

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200077a4 	.word	0x200077a4

08001afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e033      	b.n	8001b7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe fdec 	bl	80006f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b42:	f023 0302 	bic.w	r3, r3, #2
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fa40 	bl	8001fd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
 8001b6a:	e001      	b.n	8001b70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Start_DMA+0x1e>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0cc      	b.n	8001d3c <HAL_ADC_Start_DMA+0x1b8>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d018      	beq.n	8001bea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc8:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <HAL_ADC_Start_DMA+0x1c0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a5e      	ldr	r2, [pc, #376]	; (8001d48 <HAL_ADC_Start_DMA+0x1c4>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9a      	lsrs	r2, r3, #18
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	f040 80a0 	bne.w	8001d3a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c38:	d106      	bne.n	8001c48 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f023 0206 	bic.w	r2, r3, #6
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
 8001c46:	e002      	b.n	8001c4e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_ADC_Start_DMA+0x1c8>)
 8001c58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5e:	4a3c      	ldr	r2, [pc, #240]	; (8001d50 <HAL_ADC_Start_DMA+0x1cc>)
 8001c60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	4a3b      	ldr	r2, [pc, #236]	; (8001d54 <HAL_ADC_Start_DMA+0x1d0>)
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	4a3a      	ldr	r2, [pc, #232]	; (8001d58 <HAL_ADC_Start_DMA+0x1d4>)
 8001c70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	334c      	adds	r3, #76	; 0x4c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f001 fc5a 	bl	8003564 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d12a      	bne.n	8001d12 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <HAL_ADC_Start_DMA+0x1d8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d015      	beq.n	8001cf2 <HAL_ADC_Start_DMA+0x16e>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_ADC_Start_DMA+0x1dc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d105      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x158>
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_ADC_Start_DMA+0x1c8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_ADC_Start_DMA+0x1e0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d129      	bne.n	8001d3a <HAL_ADC_Start_DMA+0x1b6>
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_ADC_Start_DMA+0x1c8>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	d823      	bhi.n	8001d3a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11c      	bne.n	8001d3a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e013      	b.n	8001d3a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_ADC_Start_DMA+0x1d8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d10e      	bne.n	8001d3a <HAL_ADC_Start_DMA+0x1b6>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d107      	bne.n	8001d3a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d38:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000000 	.word	0x20000000
 8001d48:	431bde83 	.word	0x431bde83
 8001d4c:	40012300 	.word	0x40012300
 8001d50:	080021cd 	.word	0x080021cd
 8001d54:	08002287 	.word	0x08002287
 8001d58:	080022a3 	.word	0x080022a3
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	40012100 	.word	0x40012100
 8001d64:	40012200 	.word	0x40012200

08001d68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1c>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e105      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x228>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b09      	cmp	r3, #9
 8001dba:	d925      	bls.n	8001e08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68d9      	ldr	r1, [r3, #12]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1e      	subs	r3, #30
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	400a      	ands	r2, r1
 8001de0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68d9      	ldr	r1, [r3, #12]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	4603      	mov	r3, r0
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4403      	add	r3, r0
 8001dfa:	3b1e      	subs	r3, #30
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	e022      	b.n	8001e4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	400a      	ands	r2, r1
 8001e2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4403      	add	r3, r0
 8001e44:	409a      	lsls	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d824      	bhi.n	8001ea0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b05      	subs	r3, #5
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b05      	subs	r3, #5
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9e:	e04c      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d824      	bhi.n	8001ef2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b23      	subs	r3, #35	; 0x23
 8001eba:	221f      	movs	r2, #31
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43da      	mvns	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b23      	subs	r3, #35	; 0x23
 8001ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef0:	e023      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b41      	subs	r3, #65	; 0x41
 8001f04:	221f      	movs	r2, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b41      	subs	r3, #65	; 0x41
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_ADC_ConfigChannel+0x234>)
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <HAL_ADC_ConfigChannel+0x238>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d109      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1cc>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b12      	cmp	r3, #18
 8001f4e:	d105      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_ADC_ConfigChannel+0x238>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d123      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x21e>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d003      	beq.n	8001f76 <HAL_ADC_ConfigChannel+0x1e6>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b11      	cmp	r3, #17
 8001f74:	d11b      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b10      	cmp	r3, #16
 8001f88:	d111      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_ADC_ConfigChannel+0x23c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <HAL_ADC_ConfigChannel+0x240>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9a      	lsrs	r2, r3, #18
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40012300 	.word	0x40012300
 8001fc8:	40012000 	.word	0x40012000
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fdc:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <ADC_Init+0x1f0>)
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	021a      	lsls	r2, r3, #8
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800202c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6899      	ldr	r1, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <ADC_Init+0x1f4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d022      	beq.n	80020b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800207a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800209c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	e00f      	b.n	80020d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0202 	bic.w	r2, r2, #2
 80020e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6899      	ldr	r1, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e1b      	ldrb	r3, [r3, #24]
 80020ec:	005a      	lsls	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01b      	beq.n	8002138 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800211e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	3b01      	subs	r3, #1
 800212c:	035a      	lsls	r2, r3, #13
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	e007      	b.n	8002148 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002146:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	3b01      	subs	r3, #1
 8002164:	051a      	lsls	r2, r3, #20
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800217c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6899      	ldr	r1, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800218a:	025a      	lsls	r2, r3, #9
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	029a      	lsls	r2, r3, #10
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40012300 	.word	0x40012300
 80021c8:	0f000001 	.word	0x0f000001

080021cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d13c      	bne.n	8002260 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d12b      	bne.n	8002258 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	d127      	bne.n	8002258 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002220:	2b00      	cmp	r3, #0
 8002222:	d119      	bne.n	8002258 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0220 	bic.w	r2, r2, #32
 8002232:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f00a ff81 	bl	800d160 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800225e:	e00e      	b.n	800227e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7ff fd85 	bl	8001d7c <HAL_ADC_ErrorCallback>
}
 8002272:	e004      	b.n	800227e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7ff fd67 	bl	8001d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f043 0204 	orr.w	r2, r3, #4
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7ff fd5a 	bl	8001d7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0ed      	b.n	80024be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe facc 	bl	800088c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0202 	bic.w	r2, r2, #2
 8002302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002304:	f7ff fbee 	bl	8001ae4 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800230a:	e012      	b.n	8002332 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800230c:	f7ff fbea 	bl	8001ae4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b0a      	cmp	r3, #10
 8002318:	d90b      	bls.n	8002332 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0c5      	b.n	80024be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e5      	bne.n	800230c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002350:	f7ff fbc8 	bl	8001ae4 <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002356:	e012      	b.n	800237e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002358:	f7ff fbc4 	bl	8001ae4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b0a      	cmp	r3, #10
 8002364:	d90b      	bls.n	800237e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2205      	movs	r2, #5
 8002376:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e09f      	b.n	80024be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0e5      	beq.n	8002358 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e1b      	ldrb	r3, [r3, #24]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d108      	bne.n	80023a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e007      	b.n	80023b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7e5b      	ldrb	r3, [r3, #25]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e007      	b.n	80023e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7e9b      	ldrb	r3, [r3, #26]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d108      	bne.n	80023fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e007      	b.n	800240a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0220 	bic.w	r2, r2, #32
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7edb      	ldrb	r3, [r3, #27]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d108      	bne.n	8002424 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0210 	bic.w	r2, r2, #16
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e007      	b.n	8002434 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0210 	orr.w	r2, r2, #16
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7f1b      	ldrb	r3, [r3, #28]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d108      	bne.n	800244e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0208 	orr.w	r2, r2, #8
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e007      	b.n	800245e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0208 	bic.w	r2, r2, #8
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7f5b      	ldrb	r3, [r3, #29]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0204 	orr.w	r2, r2, #4
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e007      	b.n	8002488 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0204 	bic.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	ea42 0103 	orr.w	r1, r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d003      	beq.n	80024ee <HAL_CAN_ConfigFilter+0x26>
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	f040 80be 	bne.w	800266a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_CAN_ConfigFilter+0x1bc>)
 80024f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002508:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	431a      	orrs	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2201      	movs	r2, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	401a      	ands	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d123      	bne.n	8002598 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002572:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3248      	adds	r2, #72	; 0x48
 8002578:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800258c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800258e:	6979      	ldr	r1, [r7, #20]
 8002590:	3348      	adds	r3, #72	; 0x48
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d122      	bne.n	80025e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3248      	adds	r2, #72	; 0x48
 80025c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	3348      	adds	r3, #72	; 0x48
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002600:	e007      	b.n	8002612 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	431a      	orrs	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	401a      	ands	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800262c:	e007      	b.n	800263e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	431a      	orrs	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800265c:	f023 0201 	bic.w	r2, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e006      	b.n	8002678 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40006400 	.word	0x40006400

08002688 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d12e      	bne.n	80026fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026b4:	f7ff fa16 	bl	8001ae4 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026ba:	e012      	b.n	80026e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026bc:	f7ff fa12 	bl	8001ae4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b0a      	cmp	r3, #10
 80026c8:	d90b      	bls.n	80026e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2205      	movs	r2, #5
 80026da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e012      	b.n	8002708 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e5      	bne.n	80026bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e006      	b.n	8002708 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002724:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800272e:	7ffb      	ldrb	r3, [r7, #31]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d003      	beq.n	800273c <HAL_CAN_AddTxMessage+0x2c>
 8002734:	7ffb      	ldrb	r3, [r7, #31]
 8002736:	2b02      	cmp	r3, #2
 8002738:	f040 80b8 	bne.w	80028ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80a0 	beq.w	800289c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	0e1b      	lsrs	r3, r3, #24
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d907      	bls.n	800277c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e09e      	b.n	80028ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800277c:	2201      	movs	r2, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	409a      	lsls	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	6809      	ldr	r1, [r1, #0]
 800279c:	431a      	orrs	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3318      	adds	r3, #24
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	440b      	add	r3, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e00f      	b.n	80027ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3318      	adds	r3, #24
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	440b      	add	r3, r1
 80027c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3318      	adds	r3, #24
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	440b      	add	r3, r1
 80027da:	3304      	adds	r3, #4
 80027dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	7d1b      	ldrb	r3, [r3, #20]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d111      	bne.n	800280a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3318      	adds	r3, #24
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	6811      	ldr	r1, [r2, #0]
 80027fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3318      	adds	r3, #24
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	440b      	add	r3, r1
 8002806:	3304      	adds	r3, #4
 8002808:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3307      	adds	r3, #7
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	061a      	lsls	r2, r3, #24
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3306      	adds	r3, #6
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3305      	adds	r3, #5
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	4313      	orrs	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	3204      	adds	r2, #4
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	4610      	mov	r0, r2
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	ea43 0200 	orr.w	r2, r3, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	440b      	add	r3, r1
 800283c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002840:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3303      	adds	r3, #3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	061a      	lsls	r2, r3, #24
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3302      	adds	r3, #2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3301      	adds	r3, #1
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	4313      	orrs	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	4610      	mov	r0, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	6811      	ldr	r1, [r2, #0]
 8002868:	ea43 0200 	orr.w	r2, r3, r0
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	440b      	add	r3, r1
 8002872:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002876:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3318      	adds	r3, #24
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	4413      	add	r3, r2
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6811      	ldr	r1, [r2, #0]
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3318      	adds	r3, #24
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	440b      	add	r3, r1
 8002896:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e00e      	b.n	80028ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e006      	b.n	80028ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80028da:	7afb      	ldrb	r3, [r7, #11]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d002      	beq.n	80028e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80028e0:	7afb      	ldrb	r3, [r7, #11]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d11d      	bne.n	8002922 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3301      	adds	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3301      	adds	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3301      	adds	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002944:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d003      	beq.n	8002954 <HAL_CAN_GetRxMessage+0x24>
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 80f3 	bne.w	8002b3a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10e      	bne.n	8002978 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0e7      	b.n	8002b48 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0d8      	b.n	8002b48 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	331b      	adds	r3, #27
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4413      	add	r3, r2
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0204 	and.w	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10c      	bne.n	80029ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	331b      	adds	r3, #27
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	4413      	add	r3, r2
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0d5b      	lsrs	r3, r3, #21
 80029c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e00b      	b.n	80029e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	331b      	adds	r3, #27
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	331b      	adds	r3, #27
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0202 	and.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	331b      	adds	r3, #27
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4413      	add	r3, r2
 8002a08:	3304      	adds	r3, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 020f 	and.w	r2, r3, #15
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	331b      	adds	r3, #27
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	4413      	add	r3, r2
 8002a20:	3304      	adds	r3, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	331b      	adds	r3, #27
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4413      	add	r3, r2
 8002a38:	3304      	adds	r3, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0a1a      	lsrs	r2, r3, #8
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0c1a      	lsrs	r2, r3, #16
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0e1a      	lsrs	r2, r3, #24
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	3304      	adds	r3, #4
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0a1a      	lsrs	r2, r3, #8
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	3305      	adds	r3, #5
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0c1a      	lsrs	r2, r3, #16
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	3306      	adds	r3, #6
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e1a      	lsrs	r2, r3, #24
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	3307      	adds	r3, #7
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	e007      	b.n	8002b36 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0220 	orr.w	r2, r2, #32
 8002b34:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e006      	b.n	8002b48 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d002      	beq.n	8002b72 <HAL_CAN_ActivateNotification+0x1e>
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d109      	bne.n	8002b86 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6959      	ldr	r1, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e006      	b.n	8002b94 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d07c      	beq.n	8002ce0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d023      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f97d 	bl	8002f02 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c08:	e016      	b.n	8002c38 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1c:	e00c      	b.n	8002c38 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	e002      	b.n	8002c38 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f983 	bl	8002f3e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d024      	beq.n	8002c8c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f95d 	bl	8002f16 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c5c:	e016      	b.n	8002c8c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e00c      	b.n	8002c8c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	e002      	b.n	8002c8c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f963 	bl	8002f52 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d024      	beq.n	8002ce0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f93d 	bl	8002f2a <HAL_CAN_TxMailbox2CompleteCallback>
 8002cb0:	e016      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	e00c      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd8:	e002      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f943 	bl	8002f66 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2210      	movs	r2, #16
 8002d02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f92a 	bl	8002f7a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f00a f9d6 	bl	800d0f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00c      	beq.n	8002d68 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2210      	movs	r2, #16
 8002d66:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2208      	movs	r2, #8
 8002d82:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f90c 	bl	8002fa2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8f3 	bl	8002f8e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f8f6 	bl	8002fb6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2208      	movs	r2, #8
 8002de4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f8ef 	bl	8002fca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d075      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d06c      	beq.n	8002eda <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03d      	beq.n	8002eda <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d038      	beq.n	8002eda <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e6e:	2b30      	cmp	r3, #48	; 0x30
 8002e70:	d017      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x302>
 8002e72:	2b30      	cmp	r3, #48	; 0x30
 8002e74:	d804      	bhi.n	8002e80 <HAL_CAN_IRQHandler+0x2e0>
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d009      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x2ee>
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d00c      	beq.n	8002e98 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e7e:	e024      	b.n	8002eca <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002e80:	2b50      	cmp	r3, #80	; 0x50
 8002e82:	d018      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x316>
 8002e84:	2b60      	cmp	r3, #96	; 0x60
 8002e86:	d01b      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x320>
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d00f      	beq.n	8002eac <HAL_CAN_IRQHandler+0x30c>
            break;
 8002e8c:	e01d      	b.n	8002eca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e96:	e018      	b.n	8002eca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ea0:	e013      	b.n	8002eca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	f043 0320 	orr.w	r3, r3, #32
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002eaa:	e00e      	b.n	8002eca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002eb4:	e009      	b.n	8002eca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ebe:	e004      	b.n	8002eca <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ec8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ed8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f872 	bl	8002fde <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002efa:	bf00      	nop
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4907      	ldr	r1, [pc, #28]	; (8003090 <__NVIC_EnableIRQ+0x38>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	; (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	; (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003154:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <__NVIC_SystemReset+0x20>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003160:	4903      	ldr	r1, [pc, #12]	; (8003170 <__NVIC_SystemReset+0x20>)
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_SystemReset+0x24>)
 8003164:	4313      	orrs	r3, r2
 8003166:	60cb      	str	r3, [r1, #12]
 8003168:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <__NVIC_SystemReset+0x1c>
 8003170:	e000ed00 	.word	0xe000ed00
 8003174:	05fa0004 	.word	0x05fa0004

08003178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff37 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a0:	f7ff ff4c 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f7ff ff9c 	bl	80030e8 <NVIC_EncodePriority>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff6b 	bl	8003094 <__NVIC_SetPriority>
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff3f 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80031e6:	f7ff ffb3 	bl	8003150 <__NVIC_SystemReset>

080031ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e014      	b.n	8003226 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	791b      	ldrb	r3, [r3, #4]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fd fbbf 	bl	8000990 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	795b      	ldrb	r3, [r3, #5]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_DAC_Start+0x1e>
 8003248:	2302      	movs	r3, #2
 800324a:	e050      	b.n	80032ee <HAL_DAC_Start+0xc0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	409a      	lsls	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d11a      	bne.n	80032a8 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003288:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d127      	bne.n	80032e0 <HAL_DAC_Start+0xb2>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b38      	cmp	r3, #56	; 0x38
 8003294:	d124      	bne.n	80032e0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	e01b      	b.n	80032e0 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b2:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80032be:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032c6:	d10b      	bne.n	80032e0 <HAL_DAC_Start+0xb2>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80032ce:	d107      	bne.n	80032e0 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0202 	orr.w	r2, r2, #2
 80032de:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Returns the DAC channel data output register value */
  if(Channel == DAC_CHANNEL_1)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	e002      	b.n	8003318 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	795b      	ldrb	r3, [r3, #5]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_DAC_ConfigChannel+0x20>
 8003340:	2302      	movs	r3, #2
 8003342:	e036      	b.n	80033b2 <HAL_DAC_ConfigChannel+0x8e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2202      	movs	r2, #2
 800334e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003358:	f640 72fe 	movw	r2, #4094	; 0xffe
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4013      	ands	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	22c0      	movs	r2, #192	; 0xc0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43da      	mvns	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	400a      	ands	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80033be:	b480      	push	{r7}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	3308      	adds	r3, #8
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e004      	b.n	80033f2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3314      	adds	r3, #20
 80033f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	461a      	mov	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7fe fb66 	bl	8001ae4 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e099      	b.n	8003558 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003444:	e00f      	b.n	8003466 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003446:	f7fe fb4d 	bl	8001ae4 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b05      	cmp	r3, #5
 8003452:	d908      	bls.n	8003466 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2203      	movs	r2, #3
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e078      	b.n	8003558 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e8      	bne.n	8003446 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4b38      	ldr	r3, [pc, #224]	; (8003560 <HAL_DMA_Init+0x158>)
 8003480:	4013      	ands	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003492:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d107      	bne.n	80034d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	4313      	orrs	r3, r2
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0307 	bic.w	r3, r3, #7
 80034e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d117      	bne.n	800352a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fb01 	bl	8003b14 <DMA_CheckFifoParam>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2240      	movs	r2, #64	; 0x40
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003526:	2301      	movs	r3, #1
 8003528:	e016      	b.n	8003558 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fab8 	bl	8003aa8 <DMA_CalcBaseAndBitshift>
 8003538:	4603      	mov	r3, r0
 800353a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	223f      	movs	r2, #63	; 0x3f
 8003542:	409a      	lsls	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	f010803f 	.word	0xf010803f

08003564 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_DMA_Start_IT+0x26>
 8003586:	2302      	movs	r3, #2
 8003588:	e040      	b.n	800360c <HAL_DMA_Start_IT+0xa8>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d12f      	bne.n	80035fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fa4a 	bl	8003a4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	223f      	movs	r2, #63	; 0x3f
 80035be:	409a      	lsls	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0216 	orr.w	r2, r2, #22
 80035d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0208 	orr.w	r2, r2, #8
 80035ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e005      	b.n	800360a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003606:	2302      	movs	r3, #2
 8003608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800360a:	7dfb      	ldrb	r3, [r7, #23]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003622:	f7fe fa5f 	bl	8001ae4 <HAL_GetTick>
 8003626:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d008      	beq.n	8003646 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e052      	b.n	80036ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0216 	bic.w	r2, r2, #22
 8003654:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003664:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <HAL_DMA_Abort+0x62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0208 	bic.w	r2, r2, #8
 8003684:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003696:	e013      	b.n	80036c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003698:	f7fe fa24 	bl	8001ae4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d90c      	bls.n	80036c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2203      	movs	r2, #3
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e015      	b.n	80036ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e4      	bne.n	8003698 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	223f      	movs	r2, #63	; 0x3f
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d004      	beq.n	8003712 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e00c      	b.n	800372c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2205      	movs	r2, #5
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003744:	4b92      	ldr	r3, [pc, #584]	; (8003990 <HAL_DMA_IRQHandler+0x258>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a92      	ldr	r2, [pc, #584]	; (8003994 <HAL_DMA_IRQHandler+0x25c>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a9b      	lsrs	r3, r3, #10
 8003750:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	2208      	movs	r2, #8
 8003764:	409a      	lsls	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01a      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	2208      	movs	r2, #8
 8003792:	409a      	lsls	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	2201      	movs	r2, #1
 80037aa:	409a      	lsls	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d012      	beq.n	80037da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	2201      	movs	r2, #1
 80037c8:	409a      	lsls	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f043 0202 	orr.w	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	2204      	movs	r2, #4
 80037e0:	409a      	lsls	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d012      	beq.n	8003810 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	2204      	movs	r2, #4
 80037fe:	409a      	lsls	r2, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	f043 0204 	orr.w	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	2210      	movs	r2, #16
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d043      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d03c      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	2210      	movs	r2, #16
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d018      	beq.n	800387a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d024      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
 8003866:	e01f      	b.n	80038a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
 8003878:	e016      	b.n	80038a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0208 	bic.w	r2, r2, #8
 8003896:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	2220      	movs	r2, #32
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 808e 	beq.w	80039d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8086 	beq.w	80039d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	2220      	movs	r2, #32
 80038d0:	409a      	lsls	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d136      	bne.n	8003950 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0216 	bic.w	r2, r2, #22
 80038f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003900:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_DMA_IRQHandler+0x1da>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0208 	bic.w	r2, r2, #8
 8003920:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	223f      	movs	r2, #63	; 0x3f
 8003928:	409a      	lsls	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d07d      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
        }
        return;
 800394e:	e078      	b.n	8003a42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01c      	beq.n	8003998 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	2b00      	cmp	r3, #0
 8003972:	d030      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
 800397c:	e02b      	b.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d027      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
 800398e:	e022      	b.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
 8003990:	20000000 	.word	0x20000000
 8003994:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10f      	bne.n	80039c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0210 	bic.w	r2, r2, #16
 80039b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d032      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d022      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2205      	movs	r2, #5
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d307      	bcc.n	8003a1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f2      	bne.n	8003a02 <HAL_DMA_IRQHandler+0x2ca>
 8003a1c:	e000      	b.n	8003a20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a42:	bf00      	nop
    }
  }
}
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop

08003a4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d108      	bne.n	8003a8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a8a:	e007      	b.n	8003a9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3b10      	subs	r3, #16
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <DMA_CalcBaseAndBitshift+0x64>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <DMA_CalcBaseAndBitshift+0x68>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d909      	bls.n	8003aea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ae8:	e007      	b.n	8003afa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	aaaaaaab 	.word	0xaaaaaaab
 8003b10:	08010148 	.word	0x08010148

08003b14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11f      	bne.n	8003b6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d855      	bhi.n	8003be0 <DMA_CheckFifoParam+0xcc>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <DMA_CheckFifoParam+0x28>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5f 	.word	0x08003b5f
 8003b44:	08003b4d 	.word	0x08003b4d
 8003b48:	08003be1 	.word	0x08003be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d045      	beq.n	8003be4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5c:	e042      	b.n	8003be4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b66:	d13f      	bne.n	8003be8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e03c      	b.n	8003be8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	d121      	bne.n	8003bbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d836      	bhi.n	8003bec <DMA_CheckFifoParam+0xd8>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <DMA_CheckFifoParam+0x70>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003b9b 	.word	0x08003b9b
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003bad 	.word	0x08003bad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e02f      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d024      	beq.n	8003bf0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e021      	b.n	8003bf0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bb4:	d11e      	bne.n	8003bf4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bba:	e01b      	b.n	8003bf4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d902      	bls.n	8003bc8 <DMA_CheckFifoParam+0xb4>
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d003      	beq.n	8003bce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bc6:	e018      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e015      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bde:	e00b      	b.n	8003bf8 <DMA_CheckFifoParam+0xe4>
      break;
 8003be0:	bf00      	nop
 8003be2:	e00a      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003be4:	bf00      	nop
 8003be6:	e008      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003be8:	bf00      	nop
 8003bea:	e006      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003bec:	bf00      	nop
 8003bee:	e004      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;   
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003bf8:	bf00      	nop
    }
  } 
  
  return status; 
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e16b      	b.n	8003efc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c24:	2201      	movs	r2, #1
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	f040 815a 	bne.w	8003ef6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d00b      	beq.n	8003c62 <HAL_GPIO_Init+0x5a>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d007      	beq.n	8003c62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c56:	2b11      	cmp	r3, #17
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b12      	cmp	r3, #18
 8003c60:	d130      	bne.n	8003cc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c98:	2201      	movs	r2, #1
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 0201 	and.w	r2, r3, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0xfc>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b12      	cmp	r3, #18
 8003d02:	d123      	bne.n	8003d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	08da      	lsrs	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3208      	adds	r2, #8
 8003d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3208      	adds	r2, #8
 8003d46:	69b9      	ldr	r1, [r7, #24]
 8003d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0203 	and.w	r2, r3, #3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80b4 	beq.w	8003ef6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <HAL_GPIO_Init+0x308>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	4a5e      	ldr	r2, [pc, #376]	; (8003f10 <HAL_GPIO_Init+0x308>)
 8003d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d9e:	4b5c      	ldr	r3, [pc, #368]	; (8003f10 <HAL_GPIO_Init+0x308>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003daa:	4a5a      	ldr	r2, [pc, #360]	; (8003f14 <HAL_GPIO_Init+0x30c>)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	3302      	adds	r3, #2
 8003db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a51      	ldr	r2, [pc, #324]	; (8003f18 <HAL_GPIO_Init+0x310>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02b      	beq.n	8003e2e <HAL_GPIO_Init+0x226>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a50      	ldr	r2, [pc, #320]	; (8003f1c <HAL_GPIO_Init+0x314>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d025      	beq.n	8003e2a <HAL_GPIO_Init+0x222>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4f      	ldr	r2, [pc, #316]	; (8003f20 <HAL_GPIO_Init+0x318>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01f      	beq.n	8003e26 <HAL_GPIO_Init+0x21e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4e      	ldr	r2, [pc, #312]	; (8003f24 <HAL_GPIO_Init+0x31c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d019      	beq.n	8003e22 <HAL_GPIO_Init+0x21a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4d      	ldr	r2, [pc, #308]	; (8003f28 <HAL_GPIO_Init+0x320>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_GPIO_Init+0x216>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4c      	ldr	r2, [pc, #304]	; (8003f2c <HAL_GPIO_Init+0x324>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00d      	beq.n	8003e1a <HAL_GPIO_Init+0x212>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a4b      	ldr	r2, [pc, #300]	; (8003f30 <HAL_GPIO_Init+0x328>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <HAL_GPIO_Init+0x20e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4a      	ldr	r2, [pc, #296]	; (8003f34 <HAL_GPIO_Init+0x32c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_GPIO_Init+0x20a>
 8003e0e:	2307      	movs	r3, #7
 8003e10:	e00e      	b.n	8003e30 <HAL_GPIO_Init+0x228>
 8003e12:	2308      	movs	r3, #8
 8003e14:	e00c      	b.n	8003e30 <HAL_GPIO_Init+0x228>
 8003e16:	2306      	movs	r3, #6
 8003e18:	e00a      	b.n	8003e30 <HAL_GPIO_Init+0x228>
 8003e1a:	2305      	movs	r3, #5
 8003e1c:	e008      	b.n	8003e30 <HAL_GPIO_Init+0x228>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	e006      	b.n	8003e30 <HAL_GPIO_Init+0x228>
 8003e22:	2303      	movs	r3, #3
 8003e24:	e004      	b.n	8003e30 <HAL_GPIO_Init+0x228>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e002      	b.n	8003e30 <HAL_GPIO_Init+0x228>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_GPIO_Init+0x228>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	f002 0203 	and.w	r2, r2, #3
 8003e36:	0092      	lsls	r2, r2, #2
 8003e38:	4093      	lsls	r3, r2
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e40:	4934      	ldr	r1, [pc, #208]	; (8003f14 <HAL_GPIO_Init+0x30c>)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	3302      	adds	r3, #2
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e4e:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_GPIO_Init+0x330>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e72:	4a31      	ldr	r2, [pc, #196]	; (8003f38 <HAL_GPIO_Init+0x330>)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e78:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <HAL_GPIO_Init+0x330>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e9c:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <HAL_GPIO_Init+0x330>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ea2:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_GPIO_Init+0x330>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <HAL_GPIO_Init+0x330>)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <HAL_GPIO_Init+0x330>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ef0:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <HAL_GPIO_Init+0x330>)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b0f      	cmp	r3, #15
 8003f00:	f67f ae90 	bls.w	8003c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f04:	bf00      	nop
 8003f06:	3724      	adds	r7, #36	; 0x24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40013800 	.word	0x40013800
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	40020400 	.word	0x40020400
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40021400 	.word	0x40021400
 8003f30:	40021800 	.word	0x40021800
 8003f34:	40021c00 	.word	0x40021c00
 8003f38:	40013c00 	.word	0x40013c00

08003f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	887b      	ldrh	r3, [r7, #2]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	e001      	b.n	8003f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f7c:	787b      	ldrb	r3, [r7, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f88:	e003      	b.n	8003f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f8a:	887b      	ldrh	r3, [r7, #2]
 8003f8c:	041a      	lsls	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	619a      	str	r2, [r3, #24]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d104      	bne.n	8003fc2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	041a      	lsls	r2, r3, #16
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003fc0:	e002      	b.n	8003fc8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	619a      	str	r2, [r3, #24]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e11f      	b.n	8004226 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fee2 	bl	8000dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	; 0x24
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004038:	f001 fbb6 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 800403c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4a7b      	ldr	r2, [pc, #492]	; (8004230 <HAL_I2C_Init+0x25c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d807      	bhi.n	8004058 <HAL_I2C_Init+0x84>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a7a      	ldr	r2, [pc, #488]	; (8004234 <HAL_I2C_Init+0x260>)
 800404c:	4293      	cmp	r3, r2
 800404e:	bf94      	ite	ls
 8004050:	2301      	movls	r3, #1
 8004052:	2300      	movhi	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e006      	b.n	8004066 <HAL_I2C_Init+0x92>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a77      	ldr	r2, [pc, #476]	; (8004238 <HAL_I2C_Init+0x264>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0db      	b.n	8004226 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a72      	ldr	r2, [pc, #456]	; (800423c <HAL_I2C_Init+0x268>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0c9b      	lsrs	r3, r3, #18
 8004078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a64      	ldr	r2, [pc, #400]	; (8004230 <HAL_I2C_Init+0x25c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d802      	bhi.n	80040a8 <HAL_I2C_Init+0xd4>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3301      	adds	r3, #1
 80040a6:	e009      	b.n	80040bc <HAL_I2C_Init+0xe8>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	4a63      	ldr	r2, [pc, #396]	; (8004240 <HAL_I2C_Init+0x26c>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	099b      	lsrs	r3, r3, #6
 80040ba:	3301      	adds	r3, #1
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4956      	ldr	r1, [pc, #344]	; (8004230 <HAL_I2C_Init+0x25c>)
 80040d8:	428b      	cmp	r3, r1
 80040da:	d80d      	bhi.n	80040f8 <HAL_I2C_Init+0x124>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e59      	subs	r1, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	bf38      	it	cc
 80040f4:	2304      	movcc	r3, #4
 80040f6:	e04f      	b.n	8004198 <HAL_I2C_Init+0x1c4>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d111      	bne.n	8004124 <HAL_I2C_Init+0x150>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	440b      	add	r3, r1
 800410e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e012      	b.n	800414a <HAL_I2C_Init+0x176>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e58      	subs	r0, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	0099      	lsls	r1, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Init+0x17e>
 800414e:	2301      	movs	r3, #1
 8004150:	e022      	b.n	8004198 <HAL_I2C_Init+0x1c4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10e      	bne.n	8004178 <HAL_I2C_Init+0x1a4>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1e58      	subs	r0, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	440b      	add	r3, r1
 8004168:	fbb0 f3f3 	udiv	r3, r0, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004176:	e00f      	b.n	8004198 <HAL_I2C_Init+0x1c4>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e58      	subs	r0, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	0099      	lsls	r1, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	fbb0 f3f3 	udiv	r3, r0, r3
 800418e:	3301      	adds	r3, #1
 8004190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	6809      	ldr	r1, [r1, #0]
 800419c:	4313      	orrs	r3, r2
 800419e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6911      	ldr	r1, [r2, #16]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68d2      	ldr	r2, [r2, #12]
 80041d2:	4311      	orrs	r1, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	000186a0 	.word	0x000186a0
 8004234:	001e847f 	.word	0x001e847f
 8004238:	003d08ff 	.word	0x003d08ff
 800423c:	431bde83 	.word	0x431bde83
 8004240:	10624dd3 	.word	0x10624dd3

08004244 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	817b      	strh	r3, [r7, #10]
 8004256:	460b      	mov	r3, r1
 8004258:	813b      	strh	r3, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800425e:	f7fd fc41 	bl	8001ae4 <HAL_GetTick>
 8004262:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	f040 80d9 	bne.w	8004424 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2319      	movs	r3, #25
 8004278:	2201      	movs	r2, #1
 800427a:	496d      	ldr	r1, [pc, #436]	; (8004430 <HAL_I2C_Mem_Write+0x1ec>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fc7b 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	e0cc      	b.n	8004426 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_I2C_Mem_Write+0x56>
 8004296:	2302      	movs	r3, #2
 8004298:	e0c5      	b.n	8004426 <HAL_I2C_Mem_Write+0x1e2>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d007      	beq.n	80042c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2221      	movs	r2, #33	; 0x21
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2240      	movs	r2, #64	; 0x40
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a4d      	ldr	r2, [pc, #308]	; (8004434 <HAL_I2C_Mem_Write+0x1f0>)
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004302:	88f8      	ldrh	r0, [r7, #6]
 8004304:	893a      	ldrh	r2, [r7, #8]
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	4603      	mov	r3, r0
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fab6 	bl	8004884 <I2C_RequestMemoryWrite>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d052      	beq.n	80043c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e081      	b.n	8004426 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fcfc 	bl	8004d24 <I2C_WaitOnTXEFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00d      	beq.n	800434e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b04      	cmp	r3, #4
 8004338:	d107      	bne.n	800434a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e06b      	b.n	8004426 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b04      	cmp	r3, #4
 800438a:	d11b      	bne.n	80043c4 <HAL_I2C_Mem_Write+0x180>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1aa      	bne.n	8004322 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fce8 	bl	8004da6 <I2C_WaitOnBTFFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d107      	bne.n	80043f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e016      	b.n	8004426 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	00100002 	.word	0x00100002
 8004434:	ffff0000 	.word	0xffff0000

08004438 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	; 0x30
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	4608      	mov	r0, r1
 8004442:	4611      	mov	r1, r2
 8004444:	461a      	mov	r2, r3
 8004446:	4603      	mov	r3, r0
 8004448:	817b      	strh	r3, [r7, #10]
 800444a:	460b      	mov	r3, r1
 800444c:	813b      	strh	r3, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004452:	f7fd fb47 	bl	8001ae4 <HAL_GetTick>
 8004456:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b20      	cmp	r3, #32
 8004462:	f040 8208 	bne.w	8004876 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2319      	movs	r3, #25
 800446c:	2201      	movs	r2, #1
 800446e:	497b      	ldr	r1, [pc, #492]	; (800465c <HAL_I2C_Mem_Read+0x224>)
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fb81 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
 800447e:	e1fb      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_I2C_Mem_Read+0x56>
 800448a:	2302      	movs	r3, #2
 800448c:	e1f4      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d007      	beq.n	80044b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2222      	movs	r2, #34	; 0x22
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a5b      	ldr	r2, [pc, #364]	; (8004660 <HAL_I2C_Mem_Read+0x228>)
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044f6:	88f8      	ldrh	r0, [r7, #6]
 80044f8:	893a      	ldrh	r2, [r7, #8]
 80044fa:	8979      	ldrh	r1, [r7, #10]
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4603      	mov	r3, r0
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa50 	bl	80049ac <I2C_RequestMemoryRead>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e1b0      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	d113      	bne.n	8004546 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	623b      	str	r3, [r7, #32]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e184      	b.n	8004850 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	2b01      	cmp	r3, #1
 800454c:	d11b      	bne.n	8004586 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e164      	b.n	8004850 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	2b02      	cmp	r3, #2
 800458c:	d11b      	bne.n	80045c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	e144      	b.n	8004850 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045dc:	e138      	b.n	8004850 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	f200 80f1 	bhi.w	80047ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d123      	bne.n	8004638 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fc17 	bl	8004e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e139      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004636:	e10b      	b.n	8004850 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	2b02      	cmp	r3, #2
 800463e:	d14e      	bne.n	80046de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	2200      	movs	r2, #0
 8004648:	4906      	ldr	r1, [pc, #24]	; (8004664 <HAL_I2C_Mem_Read+0x22c>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fa94 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e10e      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
 800465a:	bf00      	nop
 800465c:	00100002 	.word	0x00100002
 8004660:	ffff0000 	.word	0xffff0000
 8004664:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046dc:	e0b8      	b.n	8004850 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	2200      	movs	r2, #0
 80046e6:	4966      	ldr	r1, [pc, #408]	; (8004880 <HAL_I2C_Mem_Read+0x448>)
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fa45 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0bf      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2200      	movs	r2, #0
 8004742:	494f      	ldr	r1, [pc, #316]	; (8004880 <HAL_I2C_Mem_Read+0x448>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fa17 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e091      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047c8:	e042      	b.n	8004850 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fb2a 	bl	8004e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e04c      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b04      	cmp	r3, #4
 800481c:	d118      	bne.n	8004850 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f aec2 	bne.w	80045de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3728      	adds	r7, #40	; 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	00010004 	.word	0x00010004

08004884 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	461a      	mov	r2, r3
 8004892:	4603      	mov	r3, r0
 8004894:	817b      	strh	r3, [r7, #10]
 8004896:	460b      	mov	r3, r1
 8004898:	813b      	strh	r3, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f95c 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e05f      	b.n	80049a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048e0:	897b      	ldrh	r3, [r7, #10]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	6a3a      	ldr	r2, [r7, #32]
 80048f4:	492c      	ldr	r1, [pc, #176]	; (80049a8 <I2C_RequestMemoryWrite+0x124>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f995 	bl	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e04c      	b.n	80049a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	6a39      	ldr	r1, [r7, #32]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f9ff 	bl	8004d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2b04      	cmp	r3, #4
 8004932:	d107      	bne.n	8004944 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004942:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e02b      	b.n	80049a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d105      	bne.n	800495a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800494e:	893b      	ldrh	r3, [r7, #8]
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]
 8004958:	e021      	b.n	800499e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800495a:	893b      	ldrh	r3, [r7, #8]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	b29b      	uxth	r3, r3
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496a:	6a39      	ldr	r1, [r7, #32]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f9d9 	bl	8004d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	2b04      	cmp	r3, #4
 800497e:	d107      	bne.n	8004990 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e005      	b.n	80049a0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004994:	893b      	ldrh	r3, [r7, #8]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	00010002 	.word	0x00010002

080049ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	461a      	mov	r2, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	817b      	strh	r3, [r7, #10]
 80049be:	460b      	mov	r3, r1
 80049c0:	813b      	strh	r3, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f8c0 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e0a9      	b.n	8004b6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	6a3a      	ldr	r2, [r7, #32]
 8004a2c:	4951      	ldr	r1, [pc, #324]	; (8004b74 <I2C_RequestMemoryRead+0x1c8>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f8f9 	bl	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e096      	b.n	8004b6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	6a39      	ldr	r1, [r7, #32]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f963 	bl	8004d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d107      	bne.n	8004a7c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e075      	b.n	8004b6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d105      	bne.n	8004a92 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a86:	893b      	ldrh	r3, [r7, #8]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]
 8004a90:	e021      	b.n	8004ad6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a92:	893b      	ldrh	r3, [r7, #8]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa2:	6a39      	ldr	r1, [r7, #32]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f93d 	bl	8004d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d107      	bne.n	8004ac8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e04f      	b.n	8004b6c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	6a39      	ldr	r1, [r7, #32]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f922 	bl	8004d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00d      	beq.n	8004b02 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d107      	bne.n	8004afe <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e034      	b.n	8004b6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f82a 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e013      	b.n	8004b6c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b44:	897b      	ldrh	r3, [r7, #10]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	6a3a      	ldr	r2, [r7, #32]
 8004b58:	4906      	ldr	r1, [pc, #24]	; (8004b74 <I2C_RequestMemoryRead+0x1c8>)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f863 	bl	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	00010002 	.word	0x00010002

08004b78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b88:	e025      	b.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d021      	beq.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fc ffa7 	bl	8001ae4 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d116      	bne.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e023      	b.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10d      	bne.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	e00c      	b.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	43da      	mvns	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf0c      	ite	eq
 8004c0e:	2301      	moveq	r3, #1
 8004c10:	2300      	movne	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d0b6      	beq.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c34:	e051      	b.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c44:	d123      	bne.n	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f043 0204 	orr.w	r2, r3, #4
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e046      	b.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d021      	beq.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fc ff25 	bl	8001ae4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d116      	bne.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f043 0220 	orr.w	r2, r3, #32
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e020      	b.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10c      	bne.n	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	43da      	mvns	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e00b      	b.n	8004d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	43da      	mvns	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d18d      	bne.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d30:	e02d      	b.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f8ce 	bl	8004ed4 <I2C_IsAcknowledgeFailed>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e02d      	b.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d021      	beq.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fc fecb 	bl	8001ae4 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d116      	bne.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e007      	b.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d1ca      	bne.n	8004d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004db2:	e02d      	b.n	8004e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f88d 	bl	8004ed4 <I2C_IsAcknowledgeFailed>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e02d      	b.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d021      	beq.n	8004e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dcc:	f7fc fe8a 	bl	8001ae4 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d302      	bcc.n	8004de2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e007      	b.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d1ca      	bne.n	8004db4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e34:	e042      	b.n	8004ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d119      	bne.n	8004e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0210 	mvn.w	r2, #16
 8004e4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e029      	b.n	8004ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e78:	f7fc fe34 	bl	8001ae4 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d116      	bne.n	8004ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d1b5      	bne.n	8004e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eea:	d11b      	bne.n	8004f24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ef4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f043 0204 	orr.w	r2, r3, #4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e25b      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d075      	beq.n	800503e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f52:	4ba3      	ldr	r3, [pc, #652]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d00c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4ba0      	ldr	r3, [pc, #640]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d112      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b9d      	ldr	r3, [pc, #628]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f76:	d10b      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	4b99      	ldr	r3, [pc, #612]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05b      	beq.n	800503c <HAL_RCC_OscConfig+0x108>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d157      	bne.n	800503c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e236      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x74>
 8004f9a:	4b91      	ldr	r3, [pc, #580]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a90      	ldr	r2, [pc, #576]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e01d      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x98>
 8004fb2:	4b8b      	ldr	r3, [pc, #556]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a8a      	ldr	r2, [pc, #552]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b88      	ldr	r3, [pc, #544]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a87      	ldr	r2, [pc, #540]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fcc:	4b84      	ldr	r3, [pc, #528]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a83      	ldr	r2, [pc, #524]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a80      	ldr	r2, [pc, #512]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8004fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7fc fd7a 	bl	8001ae4 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fc fd76 	bl	8001ae4 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	; 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e1fb      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b76      	ldr	r3, [pc, #472]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xc0>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fc fd66 	bl	8001ae4 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800501c:	f7fc fd62 	bl	8001ae4 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	; 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1e7      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502e:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0xe8>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d063      	beq.n	8005112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800504a:	4b65      	ldr	r3, [pc, #404]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b62      	ldr	r3, [pc, #392]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800505e:	2b08      	cmp	r3, #8
 8005060:	d11c      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b5f      	ldr	r3, [pc, #380]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d116      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506e:	4b5c      	ldr	r3, [pc, #368]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e1bb      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005086:	4b56      	ldr	r3, [pc, #344]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4952      	ldr	r1, [pc, #328]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	e03a      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d020      	beq.n	80050e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a4:	4b4f      	ldr	r3, [pc, #316]	; (80051e4 <HAL_RCC_OscConfig+0x2b0>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050aa:	f7fc fd1b 	bl	8001ae4 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b2:	f7fc fd17 	bl	8001ae4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e19c      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c4:	4b46      	ldr	r3, [pc, #280]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d0:	4b43      	ldr	r3, [pc, #268]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4940      	ldr	r1, [pc, #256]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
 80050e4:	e015      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e6:	4b3f      	ldr	r3, [pc, #252]	; (80051e4 <HAL_RCC_OscConfig+0x2b0>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fc fcfa 	bl	8001ae4 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f4:	f7fc fcf6 	bl	8001ae4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e17b      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005106:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d030      	beq.n	8005180 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005126:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <HAL_RCC_OscConfig+0x2b4>)
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fc fcda 	bl	8001ae4 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005134:	f7fc fcd6 	bl	8001ae4 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e15b      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005146:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x200>
 8005152:	e015      	b.n	8005180 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005154:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <HAL_RCC_OscConfig+0x2b4>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fc fcc3 	bl	8001ae4 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005162:	f7fc fcbf 	bl	8001ae4 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e144      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80a0 	beq.w	80052ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800518e:	2300      	movs	r3, #0
 8005190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <HAL_RCC_OscConfig+0x2b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d121      	bne.n	800520e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <HAL_RCC_OscConfig+0x2b8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a07      	ldr	r2, [pc, #28]	; (80051ec <HAL_RCC_OscConfig+0x2b8>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fc fc85 	bl	8001ae4 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	e011      	b.n	8005202 <HAL_RCC_OscConfig+0x2ce>
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800
 80051e4:	42470000 	.word	0x42470000
 80051e8:	42470e80 	.word	0x42470e80
 80051ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f0:	f7fc fc78 	bl	8001ae4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0fd      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	4b81      	ldr	r3, [pc, #516]	; (8005408 <HAL_RCC_OscConfig+0x4d4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d106      	bne.n	8005224 <HAL_RCC_OscConfig+0x2f0>
 8005216:	4b7d      	ldr	r3, [pc, #500]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a7c      	ldr	r2, [pc, #496]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6713      	str	r3, [r2, #112]	; 0x70
 8005222:	e01c      	b.n	800525e <HAL_RCC_OscConfig+0x32a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b05      	cmp	r3, #5
 800522a:	d10c      	bne.n	8005246 <HAL_RCC_OscConfig+0x312>
 800522c:	4b77      	ldr	r3, [pc, #476]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a76      	ldr	r2, [pc, #472]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	4b74      	ldr	r3, [pc, #464]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a73      	ldr	r2, [pc, #460]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	e00b      	b.n	800525e <HAL_RCC_OscConfig+0x32a>
 8005246:	4b71      	ldr	r3, [pc, #452]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a70      	ldr	r2, [pc, #448]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
 8005252:	4b6e      	ldr	r3, [pc, #440]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a6d      	ldr	r2, [pc, #436]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005258:	f023 0304 	bic.w	r3, r3, #4
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d015      	beq.n	8005292 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fc fc3d 	bl	8001ae4 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526c:	e00a      	b.n	8005284 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fc fc39 	bl	8001ae4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	; 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e0bc      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	4b61      	ldr	r3, [pc, #388]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ee      	beq.n	800526e <HAL_RCC_OscConfig+0x33a>
 8005290:	e014      	b.n	80052bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005292:	f7fc fc27 	bl	8001ae4 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fc fc23 	bl	8001ae4 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0a6      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	4b56      	ldr	r3, [pc, #344]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ee      	bne.n	800529a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c2:	4b52      	ldr	r3, [pc, #328]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	4a51      	ldr	r2, [pc, #324]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80052c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8092 	beq.w	80053fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d8:	4b4c      	ldr	r3, [pc, #304]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d05c      	beq.n	800539e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d141      	bne.n	8005370 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ec:	4b48      	ldr	r3, [pc, #288]	; (8005410 <HAL_RCC_OscConfig+0x4dc>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f2:	f7fc fbf7 	bl	8001ae4 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fa:	f7fc fbf3 	bl	8001ae4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e078      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530c:	4b3f      	ldr	r3, [pc, #252]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	019b      	lsls	r3, r3, #6
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	3b01      	subs	r3, #1
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	4933      	ldr	r1, [pc, #204]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 800533e:	4313      	orrs	r3, r2
 8005340:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <HAL_RCC_OscConfig+0x4dc>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fc fbcc 	bl	8001ae4 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005350:	f7fc fbc8 	bl	8001ae4 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e04d      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	4b2a      	ldr	r3, [pc, #168]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x41c>
 800536e:	e045      	b.n	80053fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <HAL_RCC_OscConfig+0x4dc>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005376:	f7fc fbb5 	bl	8001ae4 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537e:	f7fc fbb1 	bl	8001ae4 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e036      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f0      	bne.n	800537e <HAL_RCC_OscConfig+0x44a>
 800539c:	e02e      	b.n	80053fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e029      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <HAL_RCC_OscConfig+0x4d8>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d11c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d115      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053d2:	4013      	ands	r3, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d8:	4293      	cmp	r3, r2
 80053da:	d10d      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d106      	bne.n	80053f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40007000 	.word	0x40007000
 800540c:	40023800 	.word	0x40023800
 8005410:	42470060 	.word	0x42470060

08005414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0cc      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005428:	4b68      	ldr	r3, [pc, #416]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d90c      	bls.n	8005450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b65      	ldr	r3, [pc, #404]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b63      	ldr	r3, [pc, #396]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0b8      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d020      	beq.n	800549e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005468:	4b59      	ldr	r3, [pc, #356]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	4a58      	ldr	r2, [pc, #352]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005480:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a52      	ldr	r2, [pc, #328]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800548a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800548c:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	494d      	ldr	r1, [pc, #308]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d044      	beq.n	8005534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d107      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d119      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e07f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d003      	beq.n	80054d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d107      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e06f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e2:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e067      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4934      	ldr	r1, [pc, #208]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005504:	f7fc faee 	bl	8001ae4 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	e00a      	b.n	8005522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550c:	f7fc faea 	bl	8001ae4 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e04f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 020c 	and.w	r2, r3, #12
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	429a      	cmp	r2, r3
 8005532:	d1eb      	bne.n	800550c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d20c      	bcs.n	800555c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b22      	ldr	r3, [pc, #136]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b20      	ldr	r3, [pc, #128]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e032      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005568:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4916      	ldr	r1, [pc, #88]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005586:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	490e      	ldr	r1, [pc, #56]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800559a:	f000 f821 	bl	80055e0 <HAL_RCC_GetSysClockFreq>
 800559e:	4601      	mov	r1, r0
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	4a0a      	ldr	r2, [pc, #40]	; (80055d4 <HAL_RCC_ClockConfig+0x1c0>)
 80055ac:	5cd3      	ldrb	r3, [r2, r3]
 80055ae:	fa21 f303 	lsr.w	r3, r1, r3
 80055b2:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fb fdba 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023c00 	.word	0x40023c00
 80055d0:	40023800 	.word	0x40023800
 80055d4:	08010130 	.word	0x08010130
 80055d8:	20000000 	.word	0x20000000
 80055dc:	20000004 	.word	0x20000004

080055e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	2300      	movs	r3, #0
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f6:	4b63      	ldr	r3, [pc, #396]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d007      	beq.n	8005612 <HAL_RCC_GetSysClockFreq+0x32>
 8005602:	2b08      	cmp	r3, #8
 8005604:	d008      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x38>
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 80b4 	bne.w	8005774 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800560c:	4b5e      	ldr	r3, [pc, #376]	; (8005788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800560e:	60bb      	str	r3, [r7, #8]
       break;
 8005610:	e0b3      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005612:	4b5e      	ldr	r3, [pc, #376]	; (800578c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005614:	60bb      	str	r3, [r7, #8]
      break;
 8005616:	e0b0      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005618:	4b5a      	ldr	r3, [pc, #360]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005620:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005622:	4b58      	ldr	r3, [pc, #352]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d04a      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562e:	4b55      	ldr	r3, [pc, #340]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	099b      	lsrs	r3, r3, #6
 8005634:	f04f 0400 	mov.w	r4, #0
 8005638:	f240 11ff 	movw	r1, #511	; 0x1ff
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	ea03 0501 	and.w	r5, r3, r1
 8005644:	ea04 0602 	and.w	r6, r4, r2
 8005648:	4629      	mov	r1, r5
 800564a:	4632      	mov	r2, r6
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	f04f 0400 	mov.w	r4, #0
 8005654:	0154      	lsls	r4, r2, #5
 8005656:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800565a:	014b      	lsls	r3, r1, #5
 800565c:	4619      	mov	r1, r3
 800565e:	4622      	mov	r2, r4
 8005660:	1b49      	subs	r1, r1, r5
 8005662:	eb62 0206 	sbc.w	r2, r2, r6
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	0194      	lsls	r4, r2, #6
 8005670:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005674:	018b      	lsls	r3, r1, #6
 8005676:	1a5b      	subs	r3, r3, r1
 8005678:	eb64 0402 	sbc.w	r4, r4, r2
 800567c:	f04f 0100 	mov.w	r1, #0
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	00e2      	lsls	r2, r4, #3
 8005686:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800568a:	00d9      	lsls	r1, r3, #3
 800568c:	460b      	mov	r3, r1
 800568e:	4614      	mov	r4, r2
 8005690:	195b      	adds	r3, r3, r5
 8005692:	eb44 0406 	adc.w	r4, r4, r6
 8005696:	f04f 0100 	mov.w	r1, #0
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	0262      	lsls	r2, r4, #9
 80056a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80056a4:	0259      	lsls	r1, r3, #9
 80056a6:	460b      	mov	r3, r1
 80056a8:	4614      	mov	r4, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	4621      	mov	r1, r4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	461a      	mov	r2, r3
 80056b6:	4623      	mov	r3, r4
 80056b8:	f7fa fdea 	bl	8000290 <__aeabi_uldivmod>
 80056bc:	4603      	mov	r3, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e049      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c4:	4b2f      	ldr	r3, [pc, #188]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	ea03 0501 	and.w	r5, r3, r1
 80056da:	ea04 0602 	and.w	r6, r4, r2
 80056de:	4629      	mov	r1, r5
 80056e0:	4632      	mov	r2, r6
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	0154      	lsls	r4, r2, #5
 80056ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056f0:	014b      	lsls	r3, r1, #5
 80056f2:	4619      	mov	r1, r3
 80056f4:	4622      	mov	r2, r4
 80056f6:	1b49      	subs	r1, r1, r5
 80056f8:	eb62 0206 	sbc.w	r2, r2, r6
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	f04f 0400 	mov.w	r4, #0
 8005704:	0194      	lsls	r4, r2, #6
 8005706:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800570a:	018b      	lsls	r3, r1, #6
 800570c:	1a5b      	subs	r3, r3, r1
 800570e:	eb64 0402 	sbc.w	r4, r4, r2
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	00e2      	lsls	r2, r4, #3
 800571c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005720:	00d9      	lsls	r1, r3, #3
 8005722:	460b      	mov	r3, r1
 8005724:	4614      	mov	r4, r2
 8005726:	195b      	adds	r3, r3, r5
 8005728:	eb44 0406 	adc.w	r4, r4, r6
 800572c:	f04f 0100 	mov.w	r1, #0
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	02a2      	lsls	r2, r4, #10
 8005736:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800573a:	0299      	lsls	r1, r3, #10
 800573c:	460b      	mov	r3, r1
 800573e:	4614      	mov	r4, r2
 8005740:	4618      	mov	r0, r3
 8005742:	4621      	mov	r1, r4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f04f 0400 	mov.w	r4, #0
 800574a:	461a      	mov	r2, r3
 800574c:	4623      	mov	r3, r4
 800574e:	f7fa fd9f 	bl	8000290 <__aeabi_uldivmod>
 8005752:	4603      	mov	r3, r0
 8005754:	460c      	mov	r4, r1
 8005756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	3301      	adds	r3, #1
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	60bb      	str	r3, [r7, #8]
      break;
 8005772:	e002      	b.n	800577a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005776:	60bb      	str	r3, [r7, #8]
      break;
 8005778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800577a:	68bb      	ldr	r3, [r7, #8]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005784:	40023800 	.word	0x40023800
 8005788:	00f42400 	.word	0x00f42400
 800578c:	007a1200 	.word	0x007a1200

08005790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005796:	681b      	ldr	r3, [r3, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000000 	.word	0x20000000

080057a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057ac:	f7ff fff0 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057b0:	4601      	mov	r1, r0
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	0a9b      	lsrs	r3, r3, #10
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4a03      	ldr	r2, [pc, #12]	; (80057cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40023800 	.word	0x40023800
 80057cc:	08010140 	.word	0x08010140

080057d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057d4:	f7ff ffdc 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057d8:	4601      	mov	r1, r0
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	0b5b      	lsrs	r3, r3, #13
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4a03      	ldr	r2, [pc, #12]	; (80057f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40023800 	.word	0x40023800
 80057f4:	08010140 	.word	0x08010140

080057f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	220f      	movs	r2, #15
 8005806:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005808:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0203 	and.w	r2, r3, #3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800582c:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_GetClockConfig+0x5c>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	08db      	lsrs	r3, r3, #3
 8005832:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800583a:	4b07      	ldr	r3, [pc, #28]	; (8005858 <HAL_RCC_GetClockConfig+0x60>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	601a      	str	r2, [r3, #0]
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	40023c00 	.word	0x40023c00

0800585c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e056      	b.n	800591c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fb fbdf 	bl	800104c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	ea42 0103 	orr.w	r1, r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	f003 0104 	and.w	r1, r3, #4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e01d      	b.n	8005972 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fb fe3a 	bl	80015c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f000 fb5e 	bl	8006024 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b06      	cmp	r3, #6
 800599a:	d007      	beq.n	80059ac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b06      	cmp	r3, #6
 80059ea:	d007      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e01d      	b.n	8005a58 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fb fe03 	bl	800163c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f000 faeb 	bl	8006024 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b0c      	cmp	r3, #12
 8005a6e:	d841      	bhi.n	8005af4 <HAL_TIM_IC_Start_IT+0x94>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <HAL_TIM_IC_Start_IT+0x18>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005af5 	.word	0x08005af5
 8005a80:	08005af5 	.word	0x08005af5
 8005a84:	08005af5 	.word	0x08005af5
 8005a88:	08005abf 	.word	0x08005abf
 8005a8c:	08005af5 	.word	0x08005af5
 8005a90:	08005af5 	.word	0x08005af5
 8005a94:	08005af5 	.word	0x08005af5
 8005a98:	08005ad1 	.word	0x08005ad1
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005af5 	.word	0x08005af5
 8005aa4:	08005af5 	.word	0x08005af5
 8005aa8:	08005ae3 	.word	0x08005ae3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0202 	orr.w	r2, r2, #2
 8005aba:	60da      	str	r2, [r3, #12]
      break;
 8005abc:	e01b      	b.n	8005af6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0204 	orr.w	r2, r2, #4
 8005acc:	60da      	str	r2, [r3, #12]
      break;
 8005ace:	e012      	b.n	8005af6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0208 	orr.w	r2, r2, #8
 8005ade:	60da      	str	r2, [r3, #12]
      break;
 8005ae0:	e009      	b.n	8005af6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0210 	orr.w	r2, r2, #16
 8005af0:	60da      	str	r2, [r3, #12]
      break;
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005af4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2201      	movs	r2, #1
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fcf4 	bl	80064ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b06      	cmp	r3, #6
 8005b14:	d007      	beq.n	8005b26 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d122      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d11b      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0202 	mvn.w	r2, #2
 8005b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f007 fb48 	bl	800d208 <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa33 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa3a 	bl	8005ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d122      	bne.n	8005be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d11b      	bne.n	8005be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0204 	mvn.w	r2, #4
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f007 fb1e 	bl	800d208 <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa09 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fa10 	bl	8005ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d122      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d11b      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0208 	mvn.w	r2, #8
 8005c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f007 faf4 	bl	800d208 <HAL_TIM_IC_CaptureCallback>
 8005c20:	e005      	b.n	8005c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9df 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f9e6 	bl	8005ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d122      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d11b      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0210 	mvn.w	r2, #16
 8005c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f007 faca 	bl	800d208 <HAL_TIM_IC_CaptureCallback>
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9b5 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f9bc 	bl	8005ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d10e      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d107      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0201 	mvn.w	r2, #1
 8005cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fb f972 	bl	8000f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b80      	cmp	r3, #128	; 0x80
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	d107      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fcb2 	bl	8006644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d10e      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d107      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f981 	bl	800600e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d10e      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d107      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0220 	mvn.w	r2, #32
 8005d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fc7c 	bl	8006630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e08a      	b.n	8005e70 <HAL_TIM_IC_ConfigChannel+0x130>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6819      	ldr	r1, [r3, #0]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f000 f9f0 	bl	8006164 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 020c 	bic.w	r2, r2, #12
 8005d92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6999      	ldr	r1, [r3, #24]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	619a      	str	r2, [r3, #24]
 8005da6:	e05a      	b.n	8005e5e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d11c      	bne.n	8005de8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6819      	ldr	r1, [r3, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f000 fa74 	bl	80062aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699a      	ldr	r2, [r3, #24]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005dd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6999      	ldr	r1, [r3, #24]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	021a      	lsls	r2, r3, #8
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	619a      	str	r2, [r3, #24]
 8005de6:	e03a      	b.n	8005e5e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d11b      	bne.n	8005e26 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f000 fac1 	bl	8006384 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 020c 	bic.w	r2, r2, #12
 8005e10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69d9      	ldr	r1, [r3, #28]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	61da      	str	r2, [r3, #28]
 8005e24:	e01b      	b.n	8005e5e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f000 fae1 	bl	80063fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69d9      	ldr	r1, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	021a      	lsls	r2, r3, #8
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIM_ConfigClockSource+0x18>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e0a6      	b.n	8005fde <HAL_TIM_ConfigClockSource+0x166>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	d067      	beq.n	8005f98 <HAL_TIM_ConfigClockSource+0x120>
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d80b      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x6c>
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d073      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x140>
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d802      	bhi.n	8005eda <HAL_TIM_ConfigClockSource+0x62>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d06f      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ed8:	e078      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d06c      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x140>
 8005ede:	2b30      	cmp	r3, #48	; 0x30
 8005ee0:	d06a      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005ee2:	e073      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ee4:	2b70      	cmp	r3, #112	; 0x70
 8005ee6:	d00d      	beq.n	8005f04 <HAL_TIM_ConfigClockSource+0x8c>
 8005ee8:	2b70      	cmp	r3, #112	; 0x70
 8005eea:	d804      	bhi.n	8005ef6 <HAL_TIM_ConfigClockSource+0x7e>
 8005eec:	2b50      	cmp	r3, #80	; 0x50
 8005eee:	d033      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0xe0>
 8005ef0:	2b60      	cmp	r3, #96	; 0x60
 8005ef2:	d041      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005ef4:	e06a      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efa:	d066      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x152>
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f00:	d017      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f02:	e063      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f000 faca 	bl	80064ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	609a      	str	r2, [r3, #8]
      break;
 8005f30:	e04c      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f000 fab3 	bl	80064ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f54:	609a      	str	r2, [r3, #8]
      break;
 8005f56:	e039      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6859      	ldr	r1, [r3, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	461a      	mov	r2, r3
 8005f66:	f000 f971 	bl	800624c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2150      	movs	r1, #80	; 0x50
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fa80 	bl	8006476 <TIM_ITRx_SetConfig>
      break;
 8005f76:	e029      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	461a      	mov	r2, r3
 8005f86:	f000 f9cd 	bl	8006324 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2160      	movs	r1, #96	; 0x60
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fa70 	bl	8006476 <TIM_ITRx_SetConfig>
      break;
 8005f96:	e019      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6859      	ldr	r1, [r3, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f000 f951 	bl	800624c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2140      	movs	r1, #64	; 0x40
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fa60 	bl	8006476 <TIM_ITRx_SetConfig>
      break;
 8005fb6:	e009      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f000 fa57 	bl	8006476 <TIM_ITRx_SetConfig>
      break;
 8005fc8:	e000      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a40      	ldr	r2, [pc, #256]	; (8006138 <TIM_Base_SetConfig+0x114>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d00f      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a3d      	ldr	r2, [pc, #244]	; (800613c <TIM_Base_SetConfig+0x118>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00b      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a3c      	ldr	r2, [pc, #240]	; (8006140 <TIM_Base_SetConfig+0x11c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d007      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a3b      	ldr	r2, [pc, #236]	; (8006144 <TIM_Base_SetConfig+0x120>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <TIM_Base_SetConfig+0x124>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2f      	ldr	r2, [pc, #188]	; (8006138 <TIM_Base_SetConfig+0x114>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d02b      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006084:	d027      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2c      	ldr	r2, [pc, #176]	; (800613c <TIM_Base_SetConfig+0x118>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d023      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2b      	ldr	r2, [pc, #172]	; (8006140 <TIM_Base_SetConfig+0x11c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d01f      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2a      	ldr	r2, [pc, #168]	; (8006144 <TIM_Base_SetConfig+0x120>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01b      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a29      	ldr	r2, [pc, #164]	; (8006148 <TIM_Base_SetConfig+0x124>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d017      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a28      	ldr	r2, [pc, #160]	; (800614c <TIM_Base_SetConfig+0x128>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a27      	ldr	r2, [pc, #156]	; (8006150 <TIM_Base_SetConfig+0x12c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00f      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a26      	ldr	r2, [pc, #152]	; (8006154 <TIM_Base_SetConfig+0x130>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00b      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a25      	ldr	r2, [pc, #148]	; (8006158 <TIM_Base_SetConfig+0x134>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d007      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a24      	ldr	r2, [pc, #144]	; (800615c <TIM_Base_SetConfig+0x138>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a23      	ldr	r2, [pc, #140]	; (8006160 <TIM_Base_SetConfig+0x13c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d108      	bne.n	80060e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <TIM_Base_SetConfig+0x114>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a0c      	ldr	r2, [pc, #48]	; (8006148 <TIM_Base_SetConfig+0x124>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d103      	bne.n	8006124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	615a      	str	r2, [r3, #20]
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40010400 	.word	0x40010400
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800
 8006158:	40001800 	.word	0x40001800
 800615c:	40001c00 	.word	0x40001c00
 8006160:	40002000 	.word	0x40002000

08006164 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f023 0201 	bic.w	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a28      	ldr	r2, [pc, #160]	; (8006230 <TIM_TI1_SetConfig+0xcc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01b      	beq.n	80061ca <TIM_TI1_SetConfig+0x66>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d017      	beq.n	80061ca <TIM_TI1_SetConfig+0x66>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a25      	ldr	r2, [pc, #148]	; (8006234 <TIM_TI1_SetConfig+0xd0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <TIM_TI1_SetConfig+0x66>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4a24      	ldr	r2, [pc, #144]	; (8006238 <TIM_TI1_SetConfig+0xd4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00f      	beq.n	80061ca <TIM_TI1_SetConfig+0x66>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a23      	ldr	r2, [pc, #140]	; (800623c <TIM_TI1_SetConfig+0xd8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00b      	beq.n	80061ca <TIM_TI1_SetConfig+0x66>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a22      	ldr	r2, [pc, #136]	; (8006240 <TIM_TI1_SetConfig+0xdc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_TI1_SetConfig+0x66>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a21      	ldr	r2, [pc, #132]	; (8006244 <TIM_TI1_SetConfig+0xe0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_TI1_SetConfig+0x66>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a20      	ldr	r2, [pc, #128]	; (8006248 <TIM_TI1_SetConfig+0xe4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <TIM_TI1_SetConfig+0x6a>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <TIM_TI1_SetConfig+0x6c>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e003      	b.n	80061ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f023 030a 	bic.w	r3, r3, #10
 8006208:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f003 030a 	and.w	r3, r3, #10
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40010400 	.word	0x40010400
 8006244:	40014000 	.word	0x40014000
 8006248:	40001800 	.word	0x40001800

0800624c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 030a 	bic.w	r3, r3, #10
 8006288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f023 0210 	bic.w	r2, r3, #16
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	031b      	lsls	r3, r3, #12
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	621a      	str	r2, [r3, #32]
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f023 0210 	bic.w	r2, r3, #16
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800634e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	031b      	lsls	r3, r3, #12
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006360:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 0303 	bic.w	r3, r3, #3
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	621a      	str	r2, [r3, #32]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006428:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800643a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	031b      	lsls	r3, r3, #12
 8006440:	b29b      	uxth	r3, r3
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800644e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	031b      	lsls	r3, r3, #12
 8006454:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	f043 0307 	orr.w	r3, r3, #7
 8006498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	021a      	lsls	r2, r3, #8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	609a      	str	r2, [r3, #8]
}
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2201      	movs	r2, #1
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	43db      	mvns	r3, r3
 800650e:	401a      	ands	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	fa01 f303 	lsl.w	r3, r1, r3
 8006524:	431a      	orrs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
	...

08006538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800654c:	2302      	movs	r3, #2
 800654e:	e05a      	b.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a21      	ldr	r2, [pc, #132]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d022      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659c:	d01d      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1d      	ldr	r2, [pc, #116]	; (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d018      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1b      	ldr	r2, [pc, #108]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1a      	ldr	r2, [pc, #104]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00e      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a18      	ldr	r2, [pc, #96]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a17      	ldr	r2, [pc, #92]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a15      	ldr	r2, [pc, #84]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d10c      	bne.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40010000 	.word	0x40010000
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40000c00 	.word	0x40000c00
 8006624:	40010400 	.word	0x40010400
 8006628:	40014000 	.word	0x40014000
 800662c:	40001800 	.word	0x40001800

08006630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e03f      	b.n	80066ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fb f8dc 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2224      	movs	r2, #36	; 0x24
 8006688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800669a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fcd3 	bl	8007048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b088      	sub	sp, #32
 80066f6:	af02      	add	r7, sp, #8
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b20      	cmp	r3, #32
 8006710:	f040 8083 	bne.w	800681a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_UART_Transmit+0x2e>
 800671a:	88fb      	ldrh	r3, [r7, #6]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e07b      	b.n	800681c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_UART_Transmit+0x40>
 800672e:	2302      	movs	r3, #2
 8006730:	e074      	b.n	800681c <HAL_UART_Transmit+0x12a>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2221      	movs	r2, #33	; 0x21
 8006744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006748:	f7fb f9cc 	bl	8001ae4 <HAL_GetTick>
 800674c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	88fa      	ldrh	r2, [r7, #6]
 8006752:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	88fa      	ldrh	r2, [r7, #6]
 8006758:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006762:	e042      	b.n	80067ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677a:	d122      	bne.n	80067c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2200      	movs	r2, #0
 8006784:	2180      	movs	r1, #128	; 0x80
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fadc 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e042      	b.n	800681c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	3302      	adds	r3, #2
 80067b6:	60bb      	str	r3, [r7, #8]
 80067b8:	e017      	b.n	80067ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3301      	adds	r3, #1
 80067be:	60bb      	str	r3, [r7, #8]
 80067c0:	e013      	b.n	80067ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2180      	movs	r1, #128	; 0x80
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fab9 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e01f      	b.n	800681c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	60ba      	str	r2, [r7, #8]
 80067e2:	781a      	ldrb	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1b7      	bne.n	8006764 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2200      	movs	r2, #0
 80067fc:	2140      	movs	r1, #64	; 0x40
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 faa0 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e006      	b.n	800681c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
  }
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b20      	cmp	r3, #32
 800683c:	d166      	bne.n	800690c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_UART_Receive_DMA+0x26>
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e05f      	b.n	800690e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_UART_Receive_DMA+0x38>
 8006858:	2302      	movs	r3, #2
 800685a:	e058      	b.n	800690e <HAL_UART_Receive_DMA+0xea>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	88fa      	ldrh	r2, [r7, #6]
 800686e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2222      	movs	r2, #34	; 0x22
 800687a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	4a25      	ldr	r2, [pc, #148]	; (8006918 <HAL_UART_Receive_DMA+0xf4>)
 8006884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688a:	4a24      	ldr	r2, [pc, #144]	; (800691c <HAL_UART_Receive_DMA+0xf8>)
 800688c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006892:	4a23      	ldr	r2, [pc, #140]	; (8006920 <HAL_UART_Receive_DMA+0xfc>)
 8006894:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689a:	2200      	movs	r2, #0
 800689c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4619      	mov	r1, r3
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	f7fc fe55 	bl	8003564 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80068ba:	2300      	movs	r3, #0
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068e6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006906:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e000      	b.n	800690e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800690c:	2302      	movs	r3, #2
  }
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	08006c2d 	.word	0x08006c2d
 800691c:	08006c95 	.word	0x08006c95
 8006920:	08006cb1 	.word	0x08006cb1

08006924 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b80      	cmp	r3, #128	; 0x80
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b21      	cmp	r3, #33	; 0x21
 8006950:	d116      	bne.n	8006980 <HAL_UART_DMAStop+0x5c>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d013      	beq.n	8006980 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006966:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	4618      	mov	r0, r3
 8006976:	f7fc fe4d 	bl	8003614 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa2c 	bl	8006dd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b40      	cmp	r3, #64	; 0x40
 800698c:	bf0c      	ite	eq
 800698e:	2301      	moveq	r3, #1
 8006990:	2300      	movne	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b22      	cmp	r3, #34	; 0x22
 80069a0:	d116      	bne.n	80069d0 <HAL_UART_DMAStop+0xac>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d013      	beq.n	80069d0 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fc fe25 	bl	8003614 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa1a 	bl	8006e04 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10d      	bne.n	8006a2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_UART_IRQHandler+0x52>
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa8c 	bl	8006f44 <UART_Receive_IT>
      return;
 8006a2c:	e0d1      	b.n	8006bd2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80b0 	beq.w	8006b96 <HAL_UART_IRQHandler+0x1ba>
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <HAL_UART_IRQHandler+0x70>
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80a5 	beq.w	8006b96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_UART_IRQHandler+0x90>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a64:	f043 0201 	orr.w	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <HAL_UART_IRQHandler+0xb0>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a84:	f043 0202 	orr.w	r2, r3, #2
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_UART_IRQHandler+0xd0>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa4:	f043 0204 	orr.w	r2, r3, #4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00f      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xfa>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <HAL_UART_IRQHandler+0xee>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	f043 0208 	orr.w	r2, r3, #8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d078      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <HAL_UART_IRQHandler+0x11c>
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa26 	bl	8006f44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <HAL_UART_IRQHandler+0x144>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d031      	beq.n	8006b84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f96f 	bl	8006e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	2b40      	cmp	r3, #64	; 0x40
 8006b32:	d123      	bne.n	8006b7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d013      	beq.n	8006b74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b50:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <HAL_UART_IRQHandler+0x1fc>)
 8006b52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fc fdcb 	bl	80036f4 <HAL_DMA_Abort_IT>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d016      	beq.n	8006b92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b6e:	4610      	mov	r0, r2
 8006b70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b72:	e00e      	b.n	8006b92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f84f 	bl	8006c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7a:	e00a      	b.n	8006b92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f84b 	bl	8006c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b82:	e006      	b.n	8006b92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f847 	bl	8006c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006b90:	e01e      	b.n	8006bd0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b92:	bf00      	nop
    return;
 8006b94:	e01c      	b.n	8006bd0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d008      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x1d6>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f95c 	bl	8006e68 <UART_Transmit_IT>
    return;
 8006bb0:	e00f      	b.n	8006bd2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x1f6>
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9a4 	bl	8006f14 <UART_EndTransmit_IT>
    return;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006bd0:	bf00      	nop
  }
}
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	08006e41 	.word	0x08006e41

08006bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11e      	bne.n	8006c86 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c5c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695a      	ldr	r2, [r3, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0201 	bic.w	r2, r2, #1
 8006c6c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c7c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff ffb2 	bl	8006bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7ff ffae 	bl	8006c04 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ccc:	2b80      	cmp	r3, #128	; 0x80
 8006cce:	bf0c      	ite	eq
 8006cd0:	2301      	moveq	r3, #1
 8006cd2:	2300      	movne	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b21      	cmp	r3, #33	; 0x21
 8006ce2:	d108      	bne.n	8006cf6 <UART_DMAError+0x46>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006cf0:	68b8      	ldr	r0, [r7, #8]
 8006cf2:	f000 f871 	bl	8006dd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	bf0c      	ite	eq
 8006d04:	2301      	moveq	r3, #1
 8006d06:	2300      	movne	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b22      	cmp	r3, #34	; 0x22
 8006d16:	d108      	bne.n	8006d2a <UART_DMAError+0x7a>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d24:	68b8      	ldr	r0, [r7, #8]
 8006d26:	f000 f86d 	bl	8006e04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	f043 0210 	orr.w	r2, r3, #16
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d36:	68b8      	ldr	r0, [r7, #8]
 8006d38:	f7ff ff6e 	bl	8006c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d54:	e02c      	b.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d028      	beq.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d007      	beq.n	8006d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d64:	f7fa febe 	bl	8001ae4 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d21d      	bcs.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0201 	bic.w	r2, r2, #1
 8006d92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e00f      	b.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4013      	ands	r3, r2
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	bf0c      	ite	eq
 8006dc0:	2301      	moveq	r3, #1
 8006dc2:	2300      	movne	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d0c3      	beq.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006dee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695a      	ldr	r2, [r3, #20]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff fedc 	bl	8006c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b21      	cmp	r3, #33	; 0x21
 8006e7a:	d144      	bne.n	8006f06 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e84:	d11a      	bne.n	8006ebc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e9a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	1c9a      	adds	r2, r3, #2
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	621a      	str	r2, [r3, #32]
 8006eae:	e00e      	b.n	8006ece <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	621a      	str	r2, [r3, #32]
 8006eba:	e008      	b.n	8006ece <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	1c59      	adds	r1, r3, #1
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6211      	str	r1, [r2, #32]
 8006ec6:	781a      	ldrb	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4619      	mov	r1, r3
 8006edc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10f      	bne.n	8006f02 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e000      	b.n	8006f08 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f06:	2302      	movs	r3, #2
  }
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fe51 	bl	8006bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b22      	cmp	r3, #34	; 0x22
 8006f56:	d171      	bne.n	800703c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f60:	d123      	bne.n	8006faa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10e      	bne.n	8006f8e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	1c9a      	adds	r2, r3, #2
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f8c:	e029      	b.n	8006fe2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8006fa8:	e01b      	b.n	8006fe2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6858      	ldr	r0, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6291      	str	r1, [r2, #40]	; 0x28
 8006fc2:	b2c2      	uxtb	r2, r0
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e00c      	b.n	8006fe2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	1c58      	adds	r0, r3, #1
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	6288      	str	r0, [r1, #40]	; 0x28
 8006fda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d120      	bne.n	8007038 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0220 	bic.w	r2, r2, #32
 8007004:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007014:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0201 	bic.w	r2, r2, #1
 8007024:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fdde 	bl	8006bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e002      	b.n	800703e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	e000      	b.n	800703e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800703c:	2302      	movs	r3, #2
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800708a:	f023 030c 	bic.w	r3, r3, #12
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	68f9      	ldr	r1, [r7, #12]
 8007094:	430b      	orrs	r3, r1
 8007096:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b6:	f040 818b 	bne.w	80073d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4ac1      	ldr	r2, [pc, #772]	; (80073c4 <UART_SetConfig+0x37c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d005      	beq.n	80070d0 <UART_SetConfig+0x88>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4abf      	ldr	r2, [pc, #764]	; (80073c8 <UART_SetConfig+0x380>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	f040 80bd 	bne.w	800724a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070d0:	f7fe fb7e 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 80070d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	461d      	mov	r5, r3
 80070da:	f04f 0600 	mov.w	r6, #0
 80070de:	46a8      	mov	r8, r5
 80070e0:	46b1      	mov	r9, r6
 80070e2:	eb18 0308 	adds.w	r3, r8, r8
 80070e6:	eb49 0409 	adc.w	r4, r9, r9
 80070ea:	4698      	mov	r8, r3
 80070ec:	46a1      	mov	r9, r4
 80070ee:	eb18 0805 	adds.w	r8, r8, r5
 80070f2:	eb49 0906 	adc.w	r9, r9, r6
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007102:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007106:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800710a:	4688      	mov	r8, r1
 800710c:	4691      	mov	r9, r2
 800710e:	eb18 0005 	adds.w	r0, r8, r5
 8007112:	eb49 0106 	adc.w	r1, r9, r6
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	461d      	mov	r5, r3
 800711c:	f04f 0600 	mov.w	r6, #0
 8007120:	196b      	adds	r3, r5, r5
 8007122:	eb46 0406 	adc.w	r4, r6, r6
 8007126:	461a      	mov	r2, r3
 8007128:	4623      	mov	r3, r4
 800712a:	f7f9 f8b1 	bl	8000290 <__aeabi_uldivmod>
 800712e:	4603      	mov	r3, r0
 8007130:	460c      	mov	r4, r1
 8007132:	461a      	mov	r2, r3
 8007134:	4ba5      	ldr	r3, [pc, #660]	; (80073cc <UART_SetConfig+0x384>)
 8007136:	fba3 2302 	umull	r2, r3, r3, r2
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	461d      	mov	r5, r3
 8007144:	f04f 0600 	mov.w	r6, #0
 8007148:	46a9      	mov	r9, r5
 800714a:	46b2      	mov	sl, r6
 800714c:	eb19 0309 	adds.w	r3, r9, r9
 8007150:	eb4a 040a 	adc.w	r4, sl, sl
 8007154:	4699      	mov	r9, r3
 8007156:	46a2      	mov	sl, r4
 8007158:	eb19 0905 	adds.w	r9, r9, r5
 800715c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007160:	f04f 0100 	mov.w	r1, #0
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800716c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007170:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007174:	4689      	mov	r9, r1
 8007176:	4692      	mov	sl, r2
 8007178:	eb19 0005 	adds.w	r0, r9, r5
 800717c:	eb4a 0106 	adc.w	r1, sl, r6
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	461d      	mov	r5, r3
 8007186:	f04f 0600 	mov.w	r6, #0
 800718a:	196b      	adds	r3, r5, r5
 800718c:	eb46 0406 	adc.w	r4, r6, r6
 8007190:	461a      	mov	r2, r3
 8007192:	4623      	mov	r3, r4
 8007194:	f7f9 f87c 	bl	8000290 <__aeabi_uldivmod>
 8007198:	4603      	mov	r3, r0
 800719a:	460c      	mov	r4, r1
 800719c:	461a      	mov	r2, r3
 800719e:	4b8b      	ldr	r3, [pc, #556]	; (80073cc <UART_SetConfig+0x384>)
 80071a0:	fba3 1302 	umull	r1, r3, r3, r2
 80071a4:	095b      	lsrs	r3, r3, #5
 80071a6:	2164      	movs	r1, #100	; 0x64
 80071a8:	fb01 f303 	mul.w	r3, r1, r3
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	3332      	adds	r3, #50	; 0x32
 80071b2:	4a86      	ldr	r2, [pc, #536]	; (80073cc <UART_SetConfig+0x384>)
 80071b4:	fba2 2303 	umull	r2, r3, r2, r3
 80071b8:	095b      	lsrs	r3, r3, #5
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071c0:	4498      	add	r8, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	461d      	mov	r5, r3
 80071c6:	f04f 0600 	mov.w	r6, #0
 80071ca:	46a9      	mov	r9, r5
 80071cc:	46b2      	mov	sl, r6
 80071ce:	eb19 0309 	adds.w	r3, r9, r9
 80071d2:	eb4a 040a 	adc.w	r4, sl, sl
 80071d6:	4699      	mov	r9, r3
 80071d8:	46a2      	mov	sl, r4
 80071da:	eb19 0905 	adds.w	r9, r9, r5
 80071de:	eb4a 0a06 	adc.w	sl, sl, r6
 80071e2:	f04f 0100 	mov.w	r1, #0
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071f6:	4689      	mov	r9, r1
 80071f8:	4692      	mov	sl, r2
 80071fa:	eb19 0005 	adds.w	r0, r9, r5
 80071fe:	eb4a 0106 	adc.w	r1, sl, r6
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	461d      	mov	r5, r3
 8007208:	f04f 0600 	mov.w	r6, #0
 800720c:	196b      	adds	r3, r5, r5
 800720e:	eb46 0406 	adc.w	r4, r6, r6
 8007212:	461a      	mov	r2, r3
 8007214:	4623      	mov	r3, r4
 8007216:	f7f9 f83b 	bl	8000290 <__aeabi_uldivmod>
 800721a:	4603      	mov	r3, r0
 800721c:	460c      	mov	r4, r1
 800721e:	461a      	mov	r2, r3
 8007220:	4b6a      	ldr	r3, [pc, #424]	; (80073cc <UART_SetConfig+0x384>)
 8007222:	fba3 1302 	umull	r1, r3, r3, r2
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	2164      	movs	r1, #100	; 0x64
 800722a:	fb01 f303 	mul.w	r3, r1, r3
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	3332      	adds	r3, #50	; 0x32
 8007234:	4a65      	ldr	r2, [pc, #404]	; (80073cc <UART_SetConfig+0x384>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	f003 0207 	and.w	r2, r3, #7
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4442      	add	r2, r8
 8007246:	609a      	str	r2, [r3, #8]
 8007248:	e26f      	b.n	800772a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800724a:	f7fe faad 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 800724e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	461d      	mov	r5, r3
 8007254:	f04f 0600 	mov.w	r6, #0
 8007258:	46a8      	mov	r8, r5
 800725a:	46b1      	mov	r9, r6
 800725c:	eb18 0308 	adds.w	r3, r8, r8
 8007260:	eb49 0409 	adc.w	r4, r9, r9
 8007264:	4698      	mov	r8, r3
 8007266:	46a1      	mov	r9, r4
 8007268:	eb18 0805 	adds.w	r8, r8, r5
 800726c:	eb49 0906 	adc.w	r9, r9, r6
 8007270:	f04f 0100 	mov.w	r1, #0
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800727c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007280:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007284:	4688      	mov	r8, r1
 8007286:	4691      	mov	r9, r2
 8007288:	eb18 0005 	adds.w	r0, r8, r5
 800728c:	eb49 0106 	adc.w	r1, r9, r6
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	461d      	mov	r5, r3
 8007296:	f04f 0600 	mov.w	r6, #0
 800729a:	196b      	adds	r3, r5, r5
 800729c:	eb46 0406 	adc.w	r4, r6, r6
 80072a0:	461a      	mov	r2, r3
 80072a2:	4623      	mov	r3, r4
 80072a4:	f7f8 fff4 	bl	8000290 <__aeabi_uldivmod>
 80072a8:	4603      	mov	r3, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	461a      	mov	r2, r3
 80072ae:	4b47      	ldr	r3, [pc, #284]	; (80073cc <UART_SetConfig+0x384>)
 80072b0:	fba3 2302 	umull	r2, r3, r3, r2
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	461d      	mov	r5, r3
 80072be:	f04f 0600 	mov.w	r6, #0
 80072c2:	46a9      	mov	r9, r5
 80072c4:	46b2      	mov	sl, r6
 80072c6:	eb19 0309 	adds.w	r3, r9, r9
 80072ca:	eb4a 040a 	adc.w	r4, sl, sl
 80072ce:	4699      	mov	r9, r3
 80072d0:	46a2      	mov	sl, r4
 80072d2:	eb19 0905 	adds.w	r9, r9, r5
 80072d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80072da:	f04f 0100 	mov.w	r1, #0
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072ee:	4689      	mov	r9, r1
 80072f0:	4692      	mov	sl, r2
 80072f2:	eb19 0005 	adds.w	r0, r9, r5
 80072f6:	eb4a 0106 	adc.w	r1, sl, r6
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	461d      	mov	r5, r3
 8007300:	f04f 0600 	mov.w	r6, #0
 8007304:	196b      	adds	r3, r5, r5
 8007306:	eb46 0406 	adc.w	r4, r6, r6
 800730a:	461a      	mov	r2, r3
 800730c:	4623      	mov	r3, r4
 800730e:	f7f8 ffbf 	bl	8000290 <__aeabi_uldivmod>
 8007312:	4603      	mov	r3, r0
 8007314:	460c      	mov	r4, r1
 8007316:	461a      	mov	r2, r3
 8007318:	4b2c      	ldr	r3, [pc, #176]	; (80073cc <UART_SetConfig+0x384>)
 800731a:	fba3 1302 	umull	r1, r3, r3, r2
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	2164      	movs	r1, #100	; 0x64
 8007322:	fb01 f303 	mul.w	r3, r1, r3
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	3332      	adds	r3, #50	; 0x32
 800732c:	4a27      	ldr	r2, [pc, #156]	; (80073cc <UART_SetConfig+0x384>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800733a:	4498      	add	r8, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	461d      	mov	r5, r3
 8007340:	f04f 0600 	mov.w	r6, #0
 8007344:	46a9      	mov	r9, r5
 8007346:	46b2      	mov	sl, r6
 8007348:	eb19 0309 	adds.w	r3, r9, r9
 800734c:	eb4a 040a 	adc.w	r4, sl, sl
 8007350:	4699      	mov	r9, r3
 8007352:	46a2      	mov	sl, r4
 8007354:	eb19 0905 	adds.w	r9, r9, r5
 8007358:	eb4a 0a06 	adc.w	sl, sl, r6
 800735c:	f04f 0100 	mov.w	r1, #0
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007368:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800736c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007370:	4689      	mov	r9, r1
 8007372:	4692      	mov	sl, r2
 8007374:	eb19 0005 	adds.w	r0, r9, r5
 8007378:	eb4a 0106 	adc.w	r1, sl, r6
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	461d      	mov	r5, r3
 8007382:	f04f 0600 	mov.w	r6, #0
 8007386:	196b      	adds	r3, r5, r5
 8007388:	eb46 0406 	adc.w	r4, r6, r6
 800738c:	461a      	mov	r2, r3
 800738e:	4623      	mov	r3, r4
 8007390:	f7f8 ff7e 	bl	8000290 <__aeabi_uldivmod>
 8007394:	4603      	mov	r3, r0
 8007396:	460c      	mov	r4, r1
 8007398:	461a      	mov	r2, r3
 800739a:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <UART_SetConfig+0x384>)
 800739c:	fba3 1302 	umull	r1, r3, r3, r2
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	2164      	movs	r1, #100	; 0x64
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	3332      	adds	r3, #50	; 0x32
 80073ae:	4a07      	ldr	r2, [pc, #28]	; (80073cc <UART_SetConfig+0x384>)
 80073b0:	fba2 2303 	umull	r2, r3, r2, r3
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	f003 0207 	and.w	r2, r3, #7
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4442      	add	r2, r8
 80073c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80073c2:	e1b2      	b.n	800772a <UART_SetConfig+0x6e2>
 80073c4:	40011000 	.word	0x40011000
 80073c8:	40011400 	.word	0x40011400
 80073cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4ad7      	ldr	r2, [pc, #860]	; (8007734 <UART_SetConfig+0x6ec>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d005      	beq.n	80073e6 <UART_SetConfig+0x39e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4ad6      	ldr	r2, [pc, #856]	; (8007738 <UART_SetConfig+0x6f0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	f040 80d1 	bne.w	8007588 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80073e6:	f7fe f9f3 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 80073ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	469a      	mov	sl, r3
 80073f0:	f04f 0b00 	mov.w	fp, #0
 80073f4:	46d0      	mov	r8, sl
 80073f6:	46d9      	mov	r9, fp
 80073f8:	eb18 0308 	adds.w	r3, r8, r8
 80073fc:	eb49 0409 	adc.w	r4, r9, r9
 8007400:	4698      	mov	r8, r3
 8007402:	46a1      	mov	r9, r4
 8007404:	eb18 080a 	adds.w	r8, r8, sl
 8007408:	eb49 090b 	adc.w	r9, r9, fp
 800740c:	f04f 0100 	mov.w	r1, #0
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007418:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800741c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007420:	4688      	mov	r8, r1
 8007422:	4691      	mov	r9, r2
 8007424:	eb1a 0508 	adds.w	r5, sl, r8
 8007428:	eb4b 0609 	adc.w	r6, fp, r9
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	4619      	mov	r1, r3
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	f04f 0400 	mov.w	r4, #0
 800743e:	0094      	lsls	r4, r2, #2
 8007440:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007444:	008b      	lsls	r3, r1, #2
 8007446:	461a      	mov	r2, r3
 8007448:	4623      	mov	r3, r4
 800744a:	4628      	mov	r0, r5
 800744c:	4631      	mov	r1, r6
 800744e:	f7f8 ff1f 	bl	8000290 <__aeabi_uldivmod>
 8007452:	4603      	mov	r3, r0
 8007454:	460c      	mov	r4, r1
 8007456:	461a      	mov	r2, r3
 8007458:	4bb8      	ldr	r3, [pc, #736]	; (800773c <UART_SetConfig+0x6f4>)
 800745a:	fba3 2302 	umull	r2, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	469b      	mov	fp, r3
 8007468:	f04f 0c00 	mov.w	ip, #0
 800746c:	46d9      	mov	r9, fp
 800746e:	46e2      	mov	sl, ip
 8007470:	eb19 0309 	adds.w	r3, r9, r9
 8007474:	eb4a 040a 	adc.w	r4, sl, sl
 8007478:	4699      	mov	r9, r3
 800747a:	46a2      	mov	sl, r4
 800747c:	eb19 090b 	adds.w	r9, r9, fp
 8007480:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007484:	f04f 0100 	mov.w	r1, #0
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007490:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007494:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007498:	4689      	mov	r9, r1
 800749a:	4692      	mov	sl, r2
 800749c:	eb1b 0509 	adds.w	r5, fp, r9
 80074a0:	eb4c 060a 	adc.w	r6, ip, sl
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	4619      	mov	r1, r3
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	f04f 0400 	mov.w	r4, #0
 80074b6:	0094      	lsls	r4, r2, #2
 80074b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074bc:	008b      	lsls	r3, r1, #2
 80074be:	461a      	mov	r2, r3
 80074c0:	4623      	mov	r3, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	4631      	mov	r1, r6
 80074c6:	f7f8 fee3 	bl	8000290 <__aeabi_uldivmod>
 80074ca:	4603      	mov	r3, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	461a      	mov	r2, r3
 80074d0:	4b9a      	ldr	r3, [pc, #616]	; (800773c <UART_SetConfig+0x6f4>)
 80074d2:	fba3 1302 	umull	r1, r3, r3, r2
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	2164      	movs	r1, #100	; 0x64
 80074da:	fb01 f303 	mul.w	r3, r1, r3
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	3332      	adds	r3, #50	; 0x32
 80074e4:	4a95      	ldr	r2, [pc, #596]	; (800773c <UART_SetConfig+0x6f4>)
 80074e6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074f0:	4498      	add	r8, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	469b      	mov	fp, r3
 80074f6:	f04f 0c00 	mov.w	ip, #0
 80074fa:	46d9      	mov	r9, fp
 80074fc:	46e2      	mov	sl, ip
 80074fe:	eb19 0309 	adds.w	r3, r9, r9
 8007502:	eb4a 040a 	adc.w	r4, sl, sl
 8007506:	4699      	mov	r9, r3
 8007508:	46a2      	mov	sl, r4
 800750a:	eb19 090b 	adds.w	r9, r9, fp
 800750e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007512:	f04f 0100 	mov.w	r1, #0
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800751e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007526:	4689      	mov	r9, r1
 8007528:	4692      	mov	sl, r2
 800752a:	eb1b 0509 	adds.w	r5, fp, r9
 800752e:	eb4c 060a 	adc.w	r6, ip, sl
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	4619      	mov	r1, r3
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	f04f 0400 	mov.w	r4, #0
 8007544:	0094      	lsls	r4, r2, #2
 8007546:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800754a:	008b      	lsls	r3, r1, #2
 800754c:	461a      	mov	r2, r3
 800754e:	4623      	mov	r3, r4
 8007550:	4628      	mov	r0, r5
 8007552:	4631      	mov	r1, r6
 8007554:	f7f8 fe9c 	bl	8000290 <__aeabi_uldivmod>
 8007558:	4603      	mov	r3, r0
 800755a:	460c      	mov	r4, r1
 800755c:	461a      	mov	r2, r3
 800755e:	4b77      	ldr	r3, [pc, #476]	; (800773c <UART_SetConfig+0x6f4>)
 8007560:	fba3 1302 	umull	r1, r3, r3, r2
 8007564:	095b      	lsrs	r3, r3, #5
 8007566:	2164      	movs	r1, #100	; 0x64
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	3332      	adds	r3, #50	; 0x32
 8007572:	4a72      	ldr	r2, [pc, #456]	; (800773c <UART_SetConfig+0x6f4>)
 8007574:	fba2 2303 	umull	r2, r3, r2, r3
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	f003 020f 	and.w	r2, r3, #15
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4442      	add	r2, r8
 8007584:	609a      	str	r2, [r3, #8]
 8007586:	e0d0      	b.n	800772a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7fe f90e 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 800758c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	469a      	mov	sl, r3
 8007592:	f04f 0b00 	mov.w	fp, #0
 8007596:	46d0      	mov	r8, sl
 8007598:	46d9      	mov	r9, fp
 800759a:	eb18 0308 	adds.w	r3, r8, r8
 800759e:	eb49 0409 	adc.w	r4, r9, r9
 80075a2:	4698      	mov	r8, r3
 80075a4:	46a1      	mov	r9, r4
 80075a6:	eb18 080a 	adds.w	r8, r8, sl
 80075aa:	eb49 090b 	adc.w	r9, r9, fp
 80075ae:	f04f 0100 	mov.w	r1, #0
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075c2:	4688      	mov	r8, r1
 80075c4:	4691      	mov	r9, r2
 80075c6:	eb1a 0508 	adds.w	r5, sl, r8
 80075ca:	eb4b 0609 	adc.w	r6, fp, r9
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4619      	mov	r1, r3
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	f04f 0400 	mov.w	r4, #0
 80075e0:	0094      	lsls	r4, r2, #2
 80075e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075e6:	008b      	lsls	r3, r1, #2
 80075e8:	461a      	mov	r2, r3
 80075ea:	4623      	mov	r3, r4
 80075ec:	4628      	mov	r0, r5
 80075ee:	4631      	mov	r1, r6
 80075f0:	f7f8 fe4e 	bl	8000290 <__aeabi_uldivmod>
 80075f4:	4603      	mov	r3, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	461a      	mov	r2, r3
 80075fa:	4b50      	ldr	r3, [pc, #320]	; (800773c <UART_SetConfig+0x6f4>)
 80075fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	469b      	mov	fp, r3
 800760a:	f04f 0c00 	mov.w	ip, #0
 800760e:	46d9      	mov	r9, fp
 8007610:	46e2      	mov	sl, ip
 8007612:	eb19 0309 	adds.w	r3, r9, r9
 8007616:	eb4a 040a 	adc.w	r4, sl, sl
 800761a:	4699      	mov	r9, r3
 800761c:	46a2      	mov	sl, r4
 800761e:	eb19 090b 	adds.w	r9, r9, fp
 8007622:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007626:	f04f 0100 	mov.w	r1, #0
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007632:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007636:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800763a:	4689      	mov	r9, r1
 800763c:	4692      	mov	sl, r2
 800763e:	eb1b 0509 	adds.w	r5, fp, r9
 8007642:	eb4c 060a 	adc.w	r6, ip, sl
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	4619      	mov	r1, r3
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	f04f 0400 	mov.w	r4, #0
 8007658:	0094      	lsls	r4, r2, #2
 800765a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800765e:	008b      	lsls	r3, r1, #2
 8007660:	461a      	mov	r2, r3
 8007662:	4623      	mov	r3, r4
 8007664:	4628      	mov	r0, r5
 8007666:	4631      	mov	r1, r6
 8007668:	f7f8 fe12 	bl	8000290 <__aeabi_uldivmod>
 800766c:	4603      	mov	r3, r0
 800766e:	460c      	mov	r4, r1
 8007670:	461a      	mov	r2, r3
 8007672:	4b32      	ldr	r3, [pc, #200]	; (800773c <UART_SetConfig+0x6f4>)
 8007674:	fba3 1302 	umull	r1, r3, r3, r2
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	2164      	movs	r1, #100	; 0x64
 800767c:	fb01 f303 	mul.w	r3, r1, r3
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	3332      	adds	r3, #50	; 0x32
 8007686:	4a2d      	ldr	r2, [pc, #180]	; (800773c <UART_SetConfig+0x6f4>)
 8007688:	fba2 2303 	umull	r2, r3, r2, r3
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007692:	4498      	add	r8, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	469b      	mov	fp, r3
 8007698:	f04f 0c00 	mov.w	ip, #0
 800769c:	46d9      	mov	r9, fp
 800769e:	46e2      	mov	sl, ip
 80076a0:	eb19 0309 	adds.w	r3, r9, r9
 80076a4:	eb4a 040a 	adc.w	r4, sl, sl
 80076a8:	4699      	mov	r9, r3
 80076aa:	46a2      	mov	sl, r4
 80076ac:	eb19 090b 	adds.w	r9, r9, fp
 80076b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076b4:	f04f 0100 	mov.w	r1, #0
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076c8:	4689      	mov	r9, r1
 80076ca:	4692      	mov	sl, r2
 80076cc:	eb1b 0509 	adds.w	r5, fp, r9
 80076d0:	eb4c 060a 	adc.w	r6, ip, sl
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	4619      	mov	r1, r3
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	f04f 0400 	mov.w	r4, #0
 80076e6:	0094      	lsls	r4, r2, #2
 80076e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076ec:	008b      	lsls	r3, r1, #2
 80076ee:	461a      	mov	r2, r3
 80076f0:	4623      	mov	r3, r4
 80076f2:	4628      	mov	r0, r5
 80076f4:	4631      	mov	r1, r6
 80076f6:	f7f8 fdcb 	bl	8000290 <__aeabi_uldivmod>
 80076fa:	4603      	mov	r3, r0
 80076fc:	460c      	mov	r4, r1
 80076fe:	461a      	mov	r2, r3
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <UART_SetConfig+0x6f4>)
 8007702:	fba3 1302 	umull	r1, r3, r3, r2
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	2164      	movs	r1, #100	; 0x64
 800770a:	fb01 f303 	mul.w	r3, r1, r3
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	3332      	adds	r3, #50	; 0x32
 8007714:	4a09      	ldr	r2, [pc, #36]	; (800773c <UART_SetConfig+0x6f4>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	f003 020f 	and.w	r2, r3, #15
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4442      	add	r2, r8
 8007726:	609a      	str	r2, [r3, #8]
}
 8007728:	e7ff      	b.n	800772a <UART_SetConfig+0x6e2>
 800772a:	bf00      	nop
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	40011000 	.word	0x40011000
 8007738:	40011400 	.word	0x40011400
 800773c:	51eb851f 	.word	0x51eb851f

08007740 <arm_cfft_q15>:
void arm_cfft_q15( 
    const arm_cfft_instance_q15 * S, 
    q15_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	4611      	mov	r1, r2
 800774c:	461a      	mov	r2, r3
 800774e:	460b      	mov	r3, r1
 8007750:	71fb      	strb	r3, [r7, #7]
 8007752:	4613      	mov	r3, r2
 8007754:	71bb      	strb	r3, [r7, #6]
    uint32_t L = S->fftLen;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	617b      	str	r3, [r7, #20]

    if(ifftFlag == 1u)
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d133      	bne.n	80077ca <arm_cfft_q15+0x8a>
    {
        switch (L) 
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007768:	d01e      	beq.n	80077a8 <arm_cfft_q15+0x68>
 800776a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800776e:	d80b      	bhi.n	8007788 <arm_cfft_q15+0x48>
 8007770:	2b20      	cmp	r3, #32
 8007772:	d021      	beq.n	80077b8 <arm_cfft_q15+0x78>
 8007774:	2b20      	cmp	r3, #32
 8007776:	d802      	bhi.n	800777e <arm_cfft_q15+0x3e>
 8007778:	2b10      	cmp	r3, #16
 800777a:	d015      	beq.n	80077a8 <arm_cfft_q15+0x68>
 800777c:	e058      	b.n	8007830 <arm_cfft_q15+0xf0>
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d012      	beq.n	80077a8 <arm_cfft_q15+0x68>
 8007782:	2b80      	cmp	r3, #128	; 0x80
 8007784:	d018      	beq.n	80077b8 <arm_cfft_q15+0x78>
 8007786:	e053      	b.n	8007830 <arm_cfft_q15+0xf0>
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d00c      	beq.n	80077a8 <arm_cfft_q15+0x68>
 800778e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007792:	d803      	bhi.n	800779c <arm_cfft_q15+0x5c>
 8007794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007798:	d00e      	beq.n	80077b8 <arm_cfft_q15+0x78>
 800779a:	e049      	b.n	8007830 <arm_cfft_q15+0xf0>
 800779c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a0:	d00a      	beq.n	80077b8 <arm_cfft_q15+0x78>
 80077a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a6:	d143      	bne.n	8007830 <arm_cfft_q15+0xf0>
        case 16: 
        case 64:
        case 256:
        case 1024:
        case 4096:
            arm_radix4_butterfly_inverse_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	2301      	movs	r3, #1
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	68b8      	ldr	r0, [r7, #8]
 80077b2:	f001 f932 	bl	8008a1a <arm_radix4_butterfly_inverse_q15>
            break;
 80077b6:	e03b      	b.n	8007830 <arm_cfft_q15+0xf0>
            
        case 32:
        case 128:
        case 512:
        case 2048:
            arm_cfft_radix4by2_inverse_q15  ( p1, L, S->pTwiddle );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	461a      	mov	r2, r3
 80077be:	6979      	ldr	r1, [r7, #20]
 80077c0:	68b8      	ldr	r0, [r7, #8]
 80077c2:	f000 f94c 	bl	8007a5e <arm_cfft_radix4by2_inverse_q15>
            break;
 80077c6:	bf00      	nop
 80077c8:	e032      	b.n	8007830 <arm_cfft_q15+0xf0>
        }  
    }
    else
    {
        switch (L) 
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d0:	d01e      	beq.n	8007810 <arm_cfft_q15+0xd0>
 80077d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d6:	d80b      	bhi.n	80077f0 <arm_cfft_q15+0xb0>
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d021      	beq.n	8007820 <arm_cfft_q15+0xe0>
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d802      	bhi.n	80077e6 <arm_cfft_q15+0xa6>
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d015      	beq.n	8007810 <arm_cfft_q15+0xd0>
 80077e4:	e024      	b.n	8007830 <arm_cfft_q15+0xf0>
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d012      	beq.n	8007810 <arm_cfft_q15+0xd0>
 80077ea:	2b80      	cmp	r3, #128	; 0x80
 80077ec:	d018      	beq.n	8007820 <arm_cfft_q15+0xe0>
 80077ee:	e01f      	b.n	8007830 <arm_cfft_q15+0xf0>
 80077f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f4:	d00c      	beq.n	8007810 <arm_cfft_q15+0xd0>
 80077f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077fa:	d803      	bhi.n	8007804 <arm_cfft_q15+0xc4>
 80077fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007800:	d00e      	beq.n	8007820 <arm_cfft_q15+0xe0>
 8007802:	e015      	b.n	8007830 <arm_cfft_q15+0xf0>
 8007804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007808:	d00a      	beq.n	8007820 <arm_cfft_q15+0xe0>
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780e:	d10f      	bne.n	8007830 <arm_cfft_q15+0xf0>
        case 16: 
        case 64:
        case 256:
        case 1024:
        case 4096:
            arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	2301      	movs	r3, #1
 8007816:	6979      	ldr	r1, [r7, #20]
 8007818:	68b8      	ldr	r0, [r7, #8]
 800781a:	f000 fa28 	bl	8007c6e <arm_radix4_butterfly_q15>
            break;
 800781e:	e007      	b.n	8007830 <arm_cfft_q15+0xf0>
            
        case 32:
        case 128:
        case 512:
        case 2048:
            arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	461a      	mov	r2, r3
 8007826:	6979      	ldr	r1, [r7, #20]
 8007828:	68b8      	ldr	r0, [r7, #8]
 800782a:	f000 f810 	bl	800784e <arm_cfft_radix4by2_q15>
            break;
 800782e:	bf00      	nop
        }  
    }
    
    if( bitReverseFlag )
 8007830:	79bb      	ldrb	r3, [r7, #6]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <arm_cfft_q15+0x106>
        arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);    
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8999      	ldrh	r1, [r3, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	461a      	mov	r2, r3
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f7f8 fcfa 	bl	800023a <arm_bitreversal_16>
}
 8007846:	bf00      	nop
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <arm_cfft_radix4by2_q15>:

void arm_cfft_radix4by2_q15(
    q15_t * pSrc,
    uint32_t fftLen,
    const q15_t * pCoef) 
{    
 800784e:	b580      	push	{r7, lr}
 8007850:	b0a4      	sub	sp, #144	; 0x90
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
    uint32_t n2;
    q15_t p0, p1, p2, p3;
#ifndef ARM_MATH_CM0_FAMILY
    q31_t T, S, R;
    q31_t coeff, out1, out2;
    const q15_t *pC = pCoef;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    q15_t *pSi = pSrc;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    q15_t *pSl = pSrc + fftLen;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#else
    uint32_t ia, l;
    q15_t xt, yt, cosVal, sinVal;
#endif
    
    n2 = fftLen >> 1; 
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef ARM_MATH_CM0_FAMILY

    for (i = n2; i > 0; i--)
 8007878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800787a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800787e:	e06e      	b.n	800795e <arm_cfft_radix4by2_q15+0x110>
    {
        coeff = _SIMD32_OFFSET(pC);
 8007880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	673b      	str	r3, [r7, #112]	; 0x70
        pC += 2;
 8007888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800788c:	3304      	adds	r3, #4
 800788e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        T = _SIMD32_OFFSET(pSi);
 8007892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	66fb      	str	r3, [r7, #108]	; 0x6c
        T = __SHADD16(T, 0); // this is just a SIMD arithmetic shift right by 1
 800789a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789c:	61fb      	str	r3, [r7, #28]
 800789e:	2300      	movs	r3, #0
 80078a0:	61bb      	str	r3, [r7, #24]

__STATIC_FORCEINLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	fa93 f322 	shadd16	r3, r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
  return(result);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	66fb      	str	r3, [r7, #108]	; 0x6c

        S = _SIMD32_OFFSET(pSl);
 80078b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	66bb      	str	r3, [r7, #104]	; 0x68
        S = __SHADD16(S, 0); // this is just a SIMD arithmetic shift right by 1
 80078b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80078bc:	2300      	movs	r3, #0
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c4:	fa93 f322 	shadd16	r3, r3, r2
 80078c8:	623b      	str	r3, [r7, #32]
  return(result);
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	66bb      	str	r3, [r7, #104]	; 0x68

        R = __QSUB16(T, S);
 80078ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078d2:	637a      	str	r2, [r7, #52]	; 0x34
 80078d4:	633b      	str	r3, [r7, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80078d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078da:	fad3 f312 	qsub16	r3, r3, r2
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	667b      	str	r3, [r7, #100]	; 0x64

        _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
 80078e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078e8:	643a      	str	r2, [r7, #64]	; 0x40
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80078ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078f0:	fa93 f322 	shadd16	r3, r3, r2
 80078f4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	461a      	mov	r2, r3
 80078fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078fe:	601a      	str	r2, [r3, #0]
        pSi += 2;
 8007900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007904:	3304      	adds	r3, #4
 8007906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    #ifndef ARM_MATH_BIG_ENDIAN

        out1 = __SMUAD(coeff, R) >> 16;
 800790a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800790c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800790e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007910:	64bb      	str	r3, [r7, #72]	; 0x48

__STATIC_FORCEINLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007916:	fb23 f302 	smuad	r3, r3, r2
 800791a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800791c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800791e:	0c1b      	lsrs	r3, r3, #16
 8007920:	663b      	str	r3, [r7, #96]	; 0x60
        out2 = __SMUSDX(coeff, R);
 8007922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007926:	65ba      	str	r2, [r7, #88]	; 0x58
 8007928:	657b      	str	r3, [r7, #84]	; 0x54

__STATIC_FORCEINLINE uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800792a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800792c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800792e:	fb43 f312 	smusdx	r3, r3, r2
 8007932:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8007934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007936:	65fb      	str	r3, [r7, #92]	; 0x5c
        out2 = __SMUAD(coeff, R);

    #endif //     #ifndef ARM_MATH_BIG_ENDIAN

        _SIMD32_OFFSET(pSl) =
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8007938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800793a:	0c1b      	lsrs	r3, r3, #16
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007940:	b292      	uxth	r2, r2
 8007942:	431a      	orrs	r2, r3
        _SIMD32_OFFSET(pSl) =
 8007944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007948:	601a      	str	r2, [r3, #0]
        pSl += 2;
 800794a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800794e:	3304      	adds	r3, #4
 8007950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    for (i = n2; i > 0; i--)
 8007954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007958:	3b01      	subs	r3, #1
 800795a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800795e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d18c      	bne.n	8007880 <arm_cfft_radix4by2_q15+0x32>
    } 
    
#endif //    #ifndef ARM_MATH_CM0_FAMILY
    
    // first col
    arm_radix4_butterfly_q15( pSrc, n2, (q15_t*)pCoef, 2u);
 8007966:	2302      	movs	r3, #2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f97e 	bl	8007c6e <arm_radix4_butterfly_q15>
    // second col
    arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2u);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	18d0      	adds	r0, r2, r3
 800797a:	2302      	movs	r3, #2
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007980:	f000 f975 	bl	8007c6e <arm_radix4_butterfly_q15>
			
    for (i = 0; i < fftLen >> 1; i++)
 8007984:	2300      	movs	r3, #0
 8007986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800798a:	e05e      	b.n	8007a4a <arm_cfft_radix4by2_q15+0x1fc>
    {
        p0 = pSrc[4*i+0];
 800798c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4413      	add	r3, r2
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        p1 = pSrc[4*i+1];
 800799c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	3302      	adds	r3, #2
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        p2 = pSrc[4*i+2];
 80079ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	3304      	adds	r3, #4
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        p3 = pSrc[4*i+3];
 80079c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	3306      	adds	r3, #6
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        
        p0 <<= 1;
 80079d2:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        p1 <<= 1;
 80079dc:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        p2 <<= 1;
 80079e6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        p3 <<= 1;
 80079f0:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        
        pSrc[4*i+0] = p0;
 80079fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007a08:	801a      	strh	r2, [r3, #0]
        pSrc[4*i+1] = p1;
 8007a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	3302      	adds	r3, #2
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8007a1a:	801a      	strh	r2, [r3, #0]
        pSrc[4*i+2] = p2;
 8007a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	3304      	adds	r3, #4
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a2c:	801a      	strh	r2, [r3, #0]
        pSrc[4*i+3] = p3;
 8007a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	3306      	adds	r3, #6
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8007a3e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < fftLen >> 1; i++)
 8007a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a44:	3301      	adds	r3, #1
 8007a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d39a      	bcc.n	800798c <arm_cfft_radix4by2_q15+0x13e>
    }
}
 8007a56:	bf00      	nop
 8007a58:	3790      	adds	r7, #144	; 0x90
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <arm_cfft_radix4by2_inverse_q15>:

void arm_cfft_radix4by2_inverse_q15(
    q15_t * pSrc,
    uint32_t fftLen,
    const q15_t * pCoef) 
{    
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b0a4      	sub	sp, #144	; 0x90
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
    uint32_t n2;
    q15_t p0, p1, p2, p3;
#ifndef ARM_MATH_CM0_FAMILY
    q31_t T, S, R;
    q31_t coeff, out1, out2;
    const q15_t *pC = pCoef;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    q15_t *pSi = pSrc;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    q15_t *pSl = pSrc + fftLen;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#else
    uint32_t ia, l;
    q15_t xt, yt, cosVal, sinVal;
#endif
    
    n2 = fftLen >> 1; 
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	085b      	lsrs	r3, r3, #1
 8007a86:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef ARM_MATH_CM0_FAMILY

    for (i = n2; i > 0; i--)
 8007a88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a8e:	e06e      	b.n	8007b6e <arm_cfft_radix4by2_inverse_q15+0x110>
    {
        coeff = _SIMD32_OFFSET(pC);
 8007a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	673b      	str	r3, [r7, #112]	; 0x70
        pC += 2;
 8007a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        T = _SIMD32_OFFSET(pSi);
 8007aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
        T = __SHADD16(T, 0); // this is just a SIMD arithmetic shift right by 1
 8007aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	fa93 f322 	shadd16	r3, r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
  return(result);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	66fb      	str	r3, [r7, #108]	; 0x6c

        S = _SIMD32_OFFSET(pSl);
 8007ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	66bb      	str	r3, [r7, #104]	; 0x68
        S = __SHADD16(S, 0); // this is just a SIMD arithmetic shift right by 1
 8007ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8007acc:	2300      	movs	r3, #0
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad4:	fa93 f322 	shadd16	r3, r3, r2
 8007ad8:	623b      	str	r3, [r7, #32]
  return(result);
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	66bb      	str	r3, [r7, #104]	; 0x68

        R = __QSUB16(T, S);
 8007ade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ae2:	637a      	str	r2, [r7, #52]	; 0x34
 8007ae4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aea:	fad3 f312 	qsub16	r3, r3, r2
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	667b      	str	r3, [r7, #100]	; 0x64

        _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
 8007af4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007af8:	643a      	str	r2, [r7, #64]	; 0x40
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b00:	fa93 f322 	shadd16	r3, r3, r2
 8007b04:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b0e:	601a      	str	r2, [r3, #0]
        pSi += 2;
 8007b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b14:	3304      	adds	r3, #4
 8007b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    #ifndef ARM_MATH_BIG_ENDIAN

        out1 = __SMUSD(coeff, R) >> 16;
 8007b1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b1e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b20:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b26:	fb43 f302 	smusd	r3, r3, r2
 8007b2a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8007b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	663b      	str	r3, [r7, #96]	; 0x60
        out2 = __SMUADX(coeff, R);
 8007b32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b36:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b38:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b3e:	fb23 f312 	smuadx	r3, r3, r2
 8007b42:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8007b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b46:	65fb      	str	r3, [r7, #92]	; 0x5c
        out2 = __SMUSD(__QSUB(0, coeff), R);

    #endif //     #ifndef ARM_MATH_BIG_ENDIAN

        _SIMD32_OFFSET(pSl) =
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);        
 8007b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b4a:	0c1b      	lsrs	r3, r3, #16
 8007b4c:	041b      	lsls	r3, r3, #16
 8007b4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b50:	b292      	uxth	r2, r2
 8007b52:	431a      	orrs	r2, r3
        _SIMD32_OFFSET(pSl) =
 8007b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b58:	601a      	str	r2, [r3, #0]
        pSl += 2;
 8007b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b5e:	3304      	adds	r3, #4
 8007b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    for (i = n2; i > 0; i--)
 8007b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d18c      	bne.n	8007a90 <arm_cfft_radix4by2_inverse_q15+0x32>
    } 
    
#endif //    #ifndef ARM_MATH_CM0_FAMILY

    // first col
    arm_radix4_butterfly_inverse_q15( pSrc, n2, (q15_t*)pCoef, 2u);
 8007b76:	2302      	movs	r3, #2
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 ff4c 	bl	8008a1a <arm_radix4_butterfly_inverse_q15>
    // second col
    arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2u);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	18d0      	adds	r0, r2, r3
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b90:	f000 ff43 	bl	8008a1a <arm_radix4_butterfly_inverse_q15>
			
    for (i = 0; i < fftLen >> 1; i++)
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b9a:	e05e      	b.n	8007c5a <arm_cfft_radix4by2_inverse_q15+0x1fc>
    {
        p0 = pSrc[4*i+0];
 8007b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        p1 = pSrc[4*i+1];
 8007bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        p2 = pSrc[4*i+2];
 8007bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	4413      	add	r3, r2
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        p3 = pSrc[4*i+3];
 8007bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	3306      	adds	r3, #6
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        
        p0 <<= 1;
 8007be2:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        p1 <<= 1;
 8007bec:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
        p2 <<= 1;
 8007bf6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        p3 <<= 1;
 8007c00:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        
        pSrc[4*i+0] = p0;
 8007c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007c18:	801a      	strh	r2, [r3, #0]
        pSrc[4*i+1] = p1;
 8007c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	3302      	adds	r3, #2
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8007c2a:	801a      	strh	r2, [r3, #0]
        pSrc[4*i+2] = p2;
 8007c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c30:	00db      	lsls	r3, r3, #3
 8007c32:	3304      	adds	r3, #4
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c3c:	801a      	strh	r2, [r3, #0]
        pSrc[4*i+3] = p3;
 8007c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	3306      	adds	r3, #6
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8007c4e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < fftLen >> 1; i++)
 8007c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c54:	3301      	adds	r3, #1
 8007c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	085b      	lsrs	r3, r3, #1
 8007c5e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d39a      	bcc.n	8007b9c <arm_cfft_radix4by2_inverse_q15+0x13e>
    }
}
 8007c66:	bf00      	nop
 8007c68:	3790      	adds	r7, #144	; 0x90
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <arm_radix4_butterfly_q15>:
void arm_radix4_butterfly_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  q15_t * pCoef16,
  uint32_t twidCoefModifier)
{
 8007c6e:	b490      	push	{r4, r7}
 8007c70:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	f107 040c 	add.w	r4, r7, #12
 8007c7a:	6020      	str	r0, [r4, #0]
 8007c7c:	f107 0008 	add.w	r0, r7, #8
 8007c80:	6001      	str	r1, [r0, #0]
 8007c82:	1d39      	adds	r1, r7, #4
 8007c84:	600a      	str	r2, [r1, #0]
 8007c86:	463a      	mov	r2, r7
 8007c88:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8007c8a:	f107 0308 	add.w	r3, r7, #8
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
  n1 = n2;
 8007c94:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8007c98:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0

  /* n2 = fftLen/4 */
  n2 >>= 2u;
 8007c9c:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8007ca0:	089b      	lsrs	r3, r3, #2
 8007ca2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4

  /* Index for twiddle coefficient */
  ic = 0u;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

  /* Index for input read and output write */
  j = n2;
 8007cac:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8007cb0:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
  
  pSi0 = pSrc16;
 8007cb4:	f107 030c 	add.w	r3, r7, #12
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
  pSi1 = pSi0 + 2 * n2;
 8007cbe:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8007cc8:	4413      	add	r3, r2
 8007cca:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
  pSi2 = pSi1 + 2 * n2;
 8007cce:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007cd8:	4413      	add	r3, r2
 8007cda:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
  pSi3 = pSi2 + 2 * n2;
 8007cde:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8007ce8:	4413      	add	r3, r2
 8007cea:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
  {
    /*  Butterfly implementation */

    /*  Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = _SIMD32_OFFSET(pSi0);
 8007cee:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0); // this is just a SIMD arithmetic shift right by 1
 8007cf8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007cfc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007d0a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	fa93 f222 	shadd16	r2, r3, r2
 8007d1a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007d1e:	601a      	str	r2, [r3, #0]
  return(result);
 8007d20:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0); // it turns out doing this twice is 2 cycles, the alternative takes 3 cycles
 8007d2a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007d2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007d3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	fa93 f222 	shadd16	r2, r3, r2
 8007d4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d50:	601a      	str	r2, [r3, #0]
  return(result);
 8007d52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    //in = ((int16_t) (T & 0xFFFF)) >> 2;       // alternative code that takes 3 cycles
    //T = ((T >> 2) & 0xFFFF0000) | (in & 0xFFFF);

    /* Read yc (real), xc(imag) input */
    S = _SIMD32_OFFSET(pSi2);
 8007d5c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    S = __SHADD16(S, 0);
 8007d66:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8007d6a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007d78:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8007d82:	6812      	ldr	r2, [r2, #0]
 8007d84:	fa93 f222 	shadd16	r2, r3, r2
 8007d88:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007d8c:	601a      	str	r2, [r3, #0]
  return(result);
 8007d8e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    S = __SHADD16(S, 0);
 8007d98:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8007d9c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007daa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8007db4:	6812      	ldr	r2, [r2, #0]
 8007db6:	fa93 f222 	shadd16	r2, r3, r2
 8007dba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007dbe:	601a      	str	r2, [r3, #0]
  return(result);
 8007dc0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8007dca:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8007dce:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8007dd2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8007dd6:	6019      	str	r1, [r3, #0]
 8007dd8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007ddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007dde:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	fa93 f212 	qadd16	r2, r3, r2
 8007dee:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007df2:	601a      	str	r2, [r3, #0]
  return(result);
 8007df4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8007dfe:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8007e02:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8007e06:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007e0a:	6019      	str	r1, [r3, #0]
 8007e0c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8007e10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007e12:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8007e1c:	6812      	ldr	r2, [r2, #0]
 8007e1e:	fad3 f212 	qsub16	r2, r3, r2
 8007e22:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8007e26:	601a      	str	r2, [r3, #0]
  return(result);
 8007e28:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = _SIMD32_OFFSET(pSi1);
 8007e32:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8007e3c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007e40:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007e4e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	fa93 f222 	shadd16	r2, r3, r2
 8007e5e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007e62:	601a      	str	r2, [r3, #0]
  return(result);
 8007e64:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8007e6e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007e72:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007e80:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	fa93 f222 	shadd16	r2, r3, r2
 8007e90:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8007e94:	601a      	str	r2, [r3, #0]
  return(result);
 8007e96:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* Read yd (real), xd(imag) input */
    U = _SIMD32_OFFSET(pSi3);
 8007ea0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    U = __SHADD16(U, 0);
 8007eaa:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8007eae:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007ebc:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8007ec6:	6812      	ldr	r2, [r2, #0]
 8007ec8:	fa93 f222 	shadd16	r2, r3, r2
 8007ecc:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8007ed0:	601a      	str	r2, [r3, #0]
  return(result);
 8007ed2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    U = __SHADD16(U, 0);
 8007edc:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8007ee0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007eee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8007ef8:	6812      	ldr	r2, [r2, #0]
 8007efa:	fa93 f222 	shadd16	r2, r3, r2
 8007efe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007f02:	601a      	str	r2, [r3, #0]
  return(result);
 8007f04:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8007f0e:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8007f12:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8007f16:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8007f1a:	6019      	str	r1, [r3, #0]
 8007f1c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8007f20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007f22:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	fa93 f212 	qadd16	r2, r3, r2
 8007f32:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8007f36:	601a      	str	r2, [r3, #0]
  return(result);
 8007f38:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    _SIMD32_OFFSET(pSi0) = __SHADD16(R, T);
 8007f42:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8007f46:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007f4a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8007f4e:	6019      	str	r1, [r3, #0]
 8007f50:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8007f54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007f56:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	fa93 f222 	shadd16	r2, r3, r2
 8007f66:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007f6a:	601a      	str	r2, [r3, #0]
  return(result);
 8007f6c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007f78:	601a      	str	r2, [r3, #0]
    pSi0 += 2;
 8007f7a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007f7e:	3304      	adds	r3, #4
 8007f80:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8007f84:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007f88:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8007f8c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007f90:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8007f94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007f96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007f9a:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	fad3 f212 	qsub16	r2, r3, r2
 8007fa4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8007fa8:	601a      	str	r2, [r3, #0]
  return(result);
 8007faa:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = _SIMD32_OFFSET(pCoef16 + (4u * ic));
 8007fb4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	1d3a      	adds	r2, r7, #4
 8007fbc:	6812      	ldr	r2, [r2, #0]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

#ifndef ARM_MATH_BIG_ENDIAN

    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUAD(C2, R) >> 16u;
 8007fc6:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007fca:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007fce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007fd2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007fd6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8007fda:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007fde:	fb23 f302 	smuad	r3, r3, r2
 8007fe2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8007fe6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007fea:	0c1b      	lsrs	r3, r3, #16
 8007fec:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUSDX(C2, R);
 8007ff0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007ff4:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007ff8:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8007ffc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008000:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008004:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008008:	fb43 f312 	smusdx	r3, r3, r2
 800800c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  return(result);
 8008010:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8008014:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = _SIMD32_OFFSET(pSi1);
 8008018:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8008022:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008026:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800802a:	2300      	movs	r3, #0
 800802c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008030:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008034:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8008038:	fa93 f322 	shadd16	r3, r3, r2
 800803c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  return(result);
 8008040:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008044:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8008048:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800804c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8008050:	2300      	movs	r3, #0
 8008052:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008056:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800805a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800805e:	fa93 f322 	shadd16	r3, r3, r2
 8008062:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  return(result);
 8008066:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800806a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    _SIMD32_OFFSET(pSi1) =
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800806e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008072:	0c1b      	lsrs	r3, r3, #16
 8008074:	041b      	lsls	r3, r3, #16
 8008076:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800807a:	b292      	uxth	r2, r2
 800807c:	431a      	orrs	r2, r3
    _SIMD32_OFFSET(pSi1) =
 800807e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008082:	601a      	str	r2, [r3, #0]
    pSi1 += 2;
 8008084:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008088:	3304      	adds	r3, #4
 800808a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = _SIMD32_OFFSET(pSi3);
 800808e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    U = __SHADD16(U, 0);
 8008098:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800809c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80080a6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80080aa:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80080ae:	fa93 f322 	shadd16	r3, r3, r2
 80080b2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  return(result);
 80080b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80080ba:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    U = __SHADD16(U, 0);
 80080be:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80080c2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80080cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80080d0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80080d4:	fa93 f322 	shadd16	r3, r3, r2
 80080d8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  return(result);
 80080dc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80080e0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 80080e4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80080e8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80080ec:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80080f0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80080f4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080f8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80080fc:	fad3 f312 	qsub16	r3, r3, r2
 8008100:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  return(result);
 8008104:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008108:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

#ifndef ARM_MATH_BIG_ENDIAN

    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QASX(S, T);
 800810c:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008110:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008114:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8008118:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800811c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8008120:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8008124:	faa3 f312 	qasx	r3, r3, r2
 8008128:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  return(result);
 800812c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8008130:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
 8008134:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008138:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800813c:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8008140:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008144:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008148:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800814c:	fae3 f312 	qsax	r3, r3, r2
 8008150:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
  return(result);
 8008154:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8008158:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    S = __QASX(S, T);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 800815c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	1d3a      	adds	r2, r7, #4
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	4413      	add	r3, r2
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16u;
 800816e:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8008172:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008176:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 800817a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800817e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008182:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8008186:	fb23 f302 	smuad	r3, r3, r2
 800818a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  return(result);
 800818e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUSDX(C1, S);
 8008198:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800819c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80081a0:	f8c7 2250 	str.w	r2, [r7, #592]	; 0x250
 80081a4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80081a8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80081ac:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80081b0:	fb43 f312 	smusdx	r3, r3, r2
 80081b4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  return(result);
 80081b8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081bc:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xb', yb') in little endian format */
    _SIMD32_OFFSET(pSi2) =
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 80081c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 80081cc:	b292      	uxth	r2, r2
 80081ce:	4313      	orrs	r3, r2
 80081d0:	461a      	mov	r2, r3
    _SIMD32_OFFSET(pSi2) =
 80081d2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80081d6:	601a      	str	r2, [r3, #0]
    pSi2 += 2;
 80081d8:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80081dc:	3304      	adds	r3, #4
 80081de:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8


    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 80081e2:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80081e6:	4613      	mov	r3, r2
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	461a      	mov	r2, r3
 80081f0:	1d3b      	adds	r3, r7, #4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4413      	add	r3, r2
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16u;
 80081fc:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8008200:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008204:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8008208:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800820c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008210:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8008214:	fb23 f302 	smuad	r3, r3, r2
 8008218:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  return(result);
 800821c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008220:	0c1b      	lsrs	r3, r3, #16
 8008222:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUSDX(C3, R);
 8008226:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800822a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800822e:	f8c7 2268 	str.w	r2, [r7, #616]	; 0x268
 8008232:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008236:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800823a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800823e:	fb43 f312 	smusdx	r3, r3, r2
 8008242:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  return(result);
 8008246:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800824a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xd', yd') in little endian format */
    _SIMD32_OFFSET(pSi3) =
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800824e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800825a:	b292      	uxth	r2, r2
 800825c:	4313      	orrs	r3, r2
 800825e:	461a      	mov	r2, r3
    _SIMD32_OFFSET(pSi3) =
 8008260:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8008264:	601a      	str	r2, [r3, #0]
    pSi3 += 2;
 8008266:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800826a:	3304      	adds	r3, #4
 800826c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 8008270:	463b      	mov	r3, r7
 8008272:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4413      	add	r3, r2
 800827a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

  } while(--j);
 800827e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8008282:	3b01      	subs	r3, #1
 8008284:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8008288:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800828c:	2b00      	cmp	r3, #0
 800828e:	f47f ad2e 	bne.w	8007cee <arm_radix4_butterfly_q15+0x80>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2u;
 8008292:	463b      	mov	r3, r7
 8008294:	463a      	mov	r2, r7
 8008296:	6812      	ldr	r2, [r2, #0]
 8008298:	0092      	lsls	r2, r2, #2
 800829a:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4u; k > 4u; k >>= 2u)
 800829c:	f107 0308 	add.w	r3, r7, #8
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	089b      	lsrs	r3, r3, #2
 80082a4:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80082a8:	e270      	b.n	800878c <arm_radix4_butterfly_q15+0xb1e>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 80082aa:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80082ae:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
    n2 >>= 2u;
 80082b2:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80082b6:	089b      	lsrs	r3, r3, #2
 80082b8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    ic = 0u;
 80082bc:	2300      	movs	r3, #0
 80082be:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

    for (j = 0u; j <= (n2 - 1u); j++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 80082c8:	e24e      	b.n	8008768 <arm_radix4_butterfly_q15+0xafa>
    {
      /*  index calculation for the coefficients */
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 80082ca:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	1d3a      	adds	r2, r7, #4
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	4413      	add	r3, r2
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
      C2 = _SIMD32_OFFSET(pCoef16 + (4u * ic));
 80082dc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	1d3a      	adds	r2, r7, #4
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	4413      	add	r3, r2
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 80082ee:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80082f2:	4613      	mov	r3, r2
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	461a      	mov	r2, r3
 80082fc:	1d3b      	adds	r3, r7, #4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4413      	add	r3, r2
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 8008308:	463b      	mov	r3, r7
 800830a:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4413      	add	r3, r2
 8008312:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
      
      pSi0 = pSrc16 + 2 * j;
 8008316:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	f107 020c 	add.w	r2, r7, #12
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	4413      	add	r3, r2
 8008324:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
      pSi1 = pSi0 + 2 * n2;
 8008328:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8008332:	4413      	add	r3, r2
 8008334:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
      pSi2 = pSi1 + 2 * n2;
 8008338:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8008342:	4413      	add	r3, r2
 8008344:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
      pSi3 = pSi2 + 2 * n2;
 8008348:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8008352:	4413      	add	r3, r2
 8008354:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8008358:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800835c:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8008360:	e1f5      	b.n	800874e <arm_radix4_butterfly_q15+0xae0>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = _SIMD32_OFFSET(pSi0);
 8008362:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        /* Read yc (real), xc(imag) input */
        S = _SIMD32_OFFSET(pSi2);
 800836c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8008376:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 800837a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800837e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008382:	6019      	str	r1, [r3, #0]
 8008384:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008388:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800838a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008394:	6812      	ldr	r2, [r2, #0]
 8008396:	fa93 f212 	qadd16	r2, r3, r2
 800839a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800839e:	601a      	str	r2, [r3, #0]
  return(result);
 80083a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 80083aa:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 80083ae:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80083b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80083b6:	6019      	str	r1, [r3, #0]
 80083b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80083bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80083be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	fad3 f212 	qsub16	r2, r3, r2
 80083ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80083d2:	601a      	str	r2, [r3, #0]
  return(result);
 80083d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = _SIMD32_OFFSET(pSi1);
 80083de:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        /* Read yd (real), xd(imag) input */
        U = _SIMD32_OFFSET(pSi3);
 80083e8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 80083f2:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 80083f6:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80083fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80083fe:	6019      	str	r1, [r3, #0]
 8008400:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008406:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8008410:	6812      	ldr	r2, [r2, #0]
 8008412:	fa93 f212 	qadd16	r2, r3, r2
 8008416:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800841a:	601a      	str	r2, [r3, #0]
  return(result);
 800841c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8008426:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 800842a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800842e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008432:	6019      	str	r1, [r3, #0]
 8008434:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008438:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800843a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008444:	6812      	ldr	r2, [r2, #0]
 8008446:	fa93 f222 	shadd16	r2, r3, r2
 800844a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800844e:	601a      	str	r2, [r3, #0]
  return(result);
 8008450:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
        out1 = __SHADD16(out1, 0);
 800845a:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800845e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800846c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008476:	6812      	ldr	r2, [r2, #0]
 8008478:	fa93 f222 	shadd16	r2, r3, r2
 800847c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008480:	601a      	str	r2, [r3, #0]
  return(result);
 8008482:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
        _SIMD32_OFFSET(pSi0) = out1;
 800848c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008490:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8008494:	601a      	str	r2, [r3, #0]
        pSi0 += 2 * n1;
 8008496:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80084a0:	4413      	add	r3, r2
 80084a2:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 80084a6:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 80084aa:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80084ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80084b2:	6019      	str	r1, [r3, #0]
 80084b4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80084b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80084ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	fad3 f222 	shsub16	r2, r3, r2
 80084ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80084ce:	601a      	str	r2, [r3, #0]
  return(result);
 80084d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

#ifndef ARM_MATH_BIG_ENDIAN

        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUAD(C2, R) >> 16u;
 80084da:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80084de:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80084e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80084e6:	6019      	str	r1, [r3, #0]
 80084e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80084ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80084ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	fb23 f202 	smuad	r2, r3, r2
 80084fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008502:	601a      	str	r2, [r3, #0]
  return(result);
 8008504:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUSDX(C2, R);
 8008510:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8008514:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8008518:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800851c:	6019      	str	r1, [r3, #0]
 800851e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008522:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008524:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	fb43 f212 	smusdx	r2, r3, r2
 8008534:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008538:	601a      	str	r2, [r3, #0]
  return(result);
 800853a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = _SIMD32_OFFSET(pSi1);
 8008544:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        _SIMD32_OFFSET(pSi1) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800854e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008552:	0c1b      	lsrs	r3, r3, #16
 8008554:	041b      	lsls	r3, r3, #16
 8008556:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800855a:	b292      	uxth	r2, r2
 800855c:	4313      	orrs	r3, r2
 800855e:	461a      	mov	r2, r3
        _SIMD32_OFFSET(pSi1) =
 8008560:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008564:	601a      	str	r2, [r3, #0]
        pSi1 += 2 * n1;
 8008566:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8008570:	4413      	add	r3, r2
 8008572:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = _SIMD32_OFFSET(pSi3);
 8008576:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8008580:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8008584:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008588:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800858c:	6019      	str	r1, [r3, #0]
 800858e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008592:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008594:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	fad3 f212 	qsub16	r2, r3, r2
 80085a4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80085a8:	601a      	str	r2, [r3, #0]
  return(result);
 80085aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

#ifndef ARM_MATH_BIG_ENDIAN

        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHASX(S, T);
 80085b4:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 80085b8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80085bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80085c0:	6019      	str	r1, [r3, #0]
 80085c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80085c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80085c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80085d2:	6812      	ldr	r2, [r2, #0]
 80085d4:	faa3 f222 	shasx	r2, r3, r2
 80085d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80085dc:	601a      	str	r2, [r3, #0]
  return(result);
 80085de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHSAX(S, T);
 80085e8:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 80085ec:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80085f0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80085f4:	6019      	str	r1, [r3, #0]
 80085f6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80085fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80085fc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8008606:	6812      	ldr	r2, [r2, #0]
 8008608:	fae3 f222 	shsax	r2, r3, r2
 800860c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008610:	601a      	str	r2, [r3, #0]
  return(result);
 8008612:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298


        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUAD(C1, S) >> 16u;
 800861c:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 8008620:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008624:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008628:	6019      	str	r1, [r3, #0]
 800862a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008630:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800863a:	6812      	ldr	r2, [r2, #0]
 800863c:	fb23 f202 	smuad	r2, r3, r2
 8008640:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008644:	601a      	str	r2, [r3, #0]
  return(result);
 8008646:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	0c1b      	lsrs	r3, r3, #16
 800864e:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
        out2 = __SMUSDX(C1, S);
 8008652:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 8008656:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800865a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800865e:	6019      	str	r1, [r3, #0]
 8008660:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8008664:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008666:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8008670:	6812      	ldr	r2, [r2, #0]
 8008672:	fb43 f212 	smusdx	r2, r3, r2
 8008676:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800867a:	601a      	str	r2, [r3, #0]
  return(result);
 800867c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        _SIMD32_OFFSET(pSi2) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8008686:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800868a:	0c1b      	lsrs	r3, r3, #16
 800868c:	041b      	lsls	r3, r3, #16
 800868e:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8008692:	b292      	uxth	r2, r2
 8008694:	4313      	orrs	r3, r2
 8008696:	461a      	mov	r2, r3
        _SIMD32_OFFSET(pSi2) =
 8008698:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800869c:	601a      	str	r2, [r3, #0]
        pSi2 += 2 * n1;
 800869e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80086a8:	4413      	add	r3, r2
 80086aa:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

        out1 = __SMUAD(C3, R) >> 16u;
 80086ae:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 80086b2:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80086b6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80086ba:	6019      	str	r1, [r3, #0]
 80086bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80086c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80086c2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	fb23 f202 	smuad	r2, r3, r2
 80086d2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80086d6:	601a      	str	r2, [r3, #0]
  return(result);
 80086d8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	0c1b      	lsrs	r3, r3, #16
 80086e0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
        out2 = __SMUSDX(C3, R);
 80086e4:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 80086e8:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80086ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f0:	6019      	str	r1, [r3, #0]
 80086f2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80086f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80086f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8008702:	6812      	ldr	r2, [r2, #0]
 8008704:	fb43 f212 	smusdx	r2, r3, r2
 8008708:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800870c:	601a      	str	r2, [r3, #0]
  return(result);
 800870e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        _SIMD32_OFFSET(pSi3) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8008718:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800871c:	0c1b      	lsrs	r3, r3, #16
 800871e:	041b      	lsls	r3, r3, #16
 8008720:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8008724:	b292      	uxth	r2, r2
 8008726:	4313      	orrs	r3, r2
 8008728:	461a      	mov	r2, r3
        _SIMD32_OFFSET(pSi3) =
 800872a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800872e:	601a      	str	r2, [r3, #0]
        pSi3 += 2 * n1;
 8008730:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 800873a:	4413      	add	r3, r2
 800873c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
      for (i0 = j; i0 < fftLen; i0 += n1)
 8008740:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8008744:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8008748:	4413      	add	r3, r2
 800874a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800874e:	f107 0308 	add.w	r3, r7, #8
 8008752:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	f4ff ae02 	bcc.w	8008362 <arm_radix4_butterfly_q15+0x6f4>
    for (j = 0u; j <= (n2 - 1u); j++)
 800875e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8008762:	3301      	adds	r3, #1
 8008764:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8008768:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800876c:	3b01      	subs	r3, #1
 800876e:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8008772:	429a      	cmp	r2, r3
 8008774:	f67f ada9 	bls.w	80082ca <arm_radix4_butterfly_q15+0x65c>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2u;
 8008778:	463b      	mov	r3, r7
 800877a:	463a      	mov	r2, r7
 800877c:	6812      	ldr	r2, [r2, #0]
 800877e:	0092      	lsls	r2, r2, #2
 8008780:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4u; k > 4u; k >>= 2u)
 8008782:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800878c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8008790:	2b04      	cmp	r3, #4
 8008792:	f63f ad8a 	bhi.w	80082aa <arm_radix4_butterfly_q15+0x63c>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	089b      	lsrs	r3, r3, #2
 800879e:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8

  ptr1 = &pSrc16[0];
 80087a2:	f107 0310 	add.w	r3, r7, #16
 80087a6:	f107 020c 	add.w	r2, r7, #12
 80087aa:	6812      	ldr	r2, [r2, #0]
 80087ac:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = *__SIMD32(ptr1)++;
 80087ae:	f107 0210 	add.w	r2, r7, #16
 80087b2:	6813      	ldr	r3, [r2, #0]
 80087b4:	1d19      	adds	r1, r3, #4
 80087b6:	6011      	str	r1, [r2, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

    /* Read xb (real), yb(imag) input */
    xbyb = *__SIMD32(ptr1)++;
 80087be:	f107 0210 	add.w	r2, r7, #16
 80087c2:	6813      	ldr	r3, [r2, #0]
 80087c4:	1d19      	adds	r1, r3, #4
 80087c6:	6011      	str	r1, [r2, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

    /* Read xc (real), yc(imag) input */
    xcyc = *__SIMD32(ptr1)++;
 80087ce:	f107 0210 	add.w	r2, r7, #16
 80087d2:	6813      	ldr	r3, [r2, #0]
 80087d4:	1d19      	adds	r1, r3, #4
 80087d6:	6011      	str	r1, [r2, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270

    /* Read xd (real), yd(imag) input */
    xdyd = *__SIMD32(ptr1)++;
 80087de:	f107 0210 	add.w	r2, r7, #16
 80087e2:	6813      	ldr	r3, [r2, #0]
 80087e4:	1d19      	adds	r1, r3, #4
 80087e6:	6011      	str	r1, [r2, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 80087ee:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 80087f2:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80087f6:	f107 031c 	add.w	r3, r7, #28
 80087fa:	6019      	str	r1, [r3, #0]
 80087fc:	f107 0318 	add.w	r3, r7, #24
 8008800:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008802:	f107 031c 	add.w	r3, r7, #28
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f107 0218 	add.w	r2, r7, #24
 800880c:	6812      	ldr	r2, [r2, #0]
 800880e:	fa93 f212 	qadd16	r2, r3, r2
 8008812:	f107 0314 	add.w	r3, r7, #20
 8008816:	601a      	str	r2, [r3, #0]
  return(result);
 8008818:	f107 0314 	add.w	r3, r7, #20
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8008822:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 8008826:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800882a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800882e:	6019      	str	r1, [r3, #0]
 8008830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008834:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008840:	6812      	ldr	r2, [r2, #0]
 8008842:	fa93 f212 	qadd16	r2, r3, r2
 8008846:	f107 0320 	add.w	r3, r7, #32
 800884a:	601a      	str	r2, [r3, #0]
  return(result);
 800884c:	f107 0320 	add.w	r3, r7, #32
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* pointer updation for writing */
    ptr1 = ptr1 - 8u;
 8008856:	f107 0310 	add.w	r3, r7, #16
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f1a3 0210 	sub.w	r2, r3, #16
 8008860:	f107 0310 	add.w	r3, r7, #16
 8008864:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    *__SIMD32(ptr1)++ = __SHADD16(R, T);
 8008866:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 800886a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800886e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008872:	6019      	str	r1, [r3, #0]
 8008874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008878:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800887a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	fa93 f222 	shadd16	r2, r3, r2
 800888a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800888e:	601a      	str	r2, [r3, #0]
  return(result);
 8008890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f107 0210 	add.w	r2, r7, #16
 800889a:	6813      	ldr	r3, [r2, #0]
 800889c:	1d19      	adds	r1, r3, #4
 800889e:	6011      	str	r1, [r2, #0]
 80088a0:	4602      	mov	r2, r0
 80088a2:	601a      	str	r2, [r3, #0]

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 80088a4:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 80088a8:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80088ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80088b0:	6019      	str	r1, [r3, #0]
 80088b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80088b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80088b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80088c2:	6812      	ldr	r2, [r2, #0]
 80088c4:	fa93 f212 	qadd16	r2, r3, r2
 80088c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088cc:	601a      	str	r2, [r3, #0]
  return(result);
 80088ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    *__SIMD32(ptr1)++ = __SHSUB16(R, T);
 80088d8:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 80088dc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80088e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80088e4:	6019      	str	r1, [r3, #0]
 80088e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80088ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80088ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80088f6:	6812      	ldr	r2, [r2, #0]
 80088f8:	fad3 f222 	shsub16	r2, r3, r2
 80088fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008900:	601a      	str	r2, [r3, #0]
  return(result);
 8008902:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	f107 0210 	add.w	r2, r7, #16
 800890c:	6813      	ldr	r3, [r2, #0]
 800890e:	1d19      	adds	r1, r3, #4
 8008910:	6011      	str	r1, [r2, #0]
 8008912:	4602      	mov	r2, r0
 8008914:	601a      	str	r2, [r3, #0]

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 8008916:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 800891a:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 800891e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008922:	6019      	str	r1, [r3, #0]
 8008924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800892a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	fad3 f212 	qsub16	r2, r3, r2
 800893a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800893e:	601a      	str	r2, [r3, #0]
  return(result);
 8008940:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 800894a:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 800894e:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8008952:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008956:	6019      	str	r1, [r3, #0]
 8008958:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800895c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800895e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008968:	6812      	ldr	r2, [r2, #0]
 800896a:	fad3 f212 	qsub16	r2, r3, r2
 800896e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008972:	601a      	str	r2, [r3, #0]
  return(result);
 8008974:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);
 800897e:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8008982:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008986:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800898a:	6019      	str	r1, [r3, #0]
 800898c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008990:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008992:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800899c:	6812      	ldr	r2, [r2, #0]
 800899e:	fae3 f222 	shsax	r2, r3, r2
 80089a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80089a6:	601a      	str	r2, [r3, #0]
  return(result);
 80089a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	f107 0210 	add.w	r2, r7, #16
 80089b2:	6813      	ldr	r3, [r2, #0]
 80089b4:	1d19      	adds	r1, r3, #4
 80089b6:	6011      	str	r1, [r2, #0]
 80089b8:	4602      	mov	r2, r0
 80089ba:	601a      	str	r2, [r3, #0]


    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHASX(S, U);
 80089bc:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 80089c0:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80089c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80089c8:	6019      	str	r1, [r3, #0]
 80089ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80089ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80089d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	faa3 f222 	shasx	r2, r3, r2
 80089e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80089e4:	601a      	str	r2, [r3, #0]
  return(result);
 80089e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	f107 0210 	add.w	r2, r7, #16
 80089f0:	6813      	ldr	r3, [r2, #0]
 80089f2:	1d19      	adds	r1, r3, #4
 80089f4:	6011      	str	r1, [r2, #0]
 80089f6:	4602      	mov	r2, r0
 80089f8:	601a      	str	r2, [r3, #0]
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

  } while(--j);
 80089fa:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80089fe:	3b01      	subs	r3, #1
 8008a00:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8008a04:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f47f aed0 	bne.w	80087ae <arm_radix4_butterfly_q15+0xb40>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8008a0e:	bf00      	nop
 8008a10:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bc90      	pop	{r4, r7}
 8008a18:	4770      	bx	lr

08008a1a <arm_radix4_butterfly_inverse_q15>:
void arm_radix4_butterfly_inverse_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  q15_t * pCoef16,
  uint32_t twidCoefModifier)
{
 8008a1a:	b490      	push	{r4, r7}
 8008a1c:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	f107 040c 	add.w	r4, r7, #12
 8008a26:	6020      	str	r0, [r4, #0]
 8008a28:	f107 0008 	add.w	r0, r7, #8
 8008a2c:	6001      	str	r1, [r0, #0]
 8008a2e:	1d39      	adds	r1, r7, #4
 8008a30:	600a      	str	r2, [r1, #0]
 8008a32:	463a      	mov	r2, r7
 8008a34:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8008a36:	f107 0308 	add.w	r3, r7, #8
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
  n1 = n2;
 8008a40:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008a44:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0

  /* n2 = fftLen/4 */
  n2 >>= 2u;
 8008a48:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008a4c:	089b      	lsrs	r3, r3, #2
 8008a4e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4

  /* Index for twiddle coefficient */
  ic = 0u;
 8008a52:	2300      	movs	r3, #0
 8008a54:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

  /* Index for input read and output write */
  j = n2;
 8008a58:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008a5c:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
  
  pSi0 = pSrc16;
 8008a60:	f107 030c 	add.w	r3, r7, #12
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
  pSi1 = pSi0 + 2 * n2;
 8008a6a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8008a74:	4413      	add	r3, r2
 8008a76:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
  pSi2 = pSi1 + 2 * n2;
 8008a7a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8008a84:	4413      	add	r3, r2
 8008a86:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
  pSi3 = pSi2 + 2 * n2;
 8008a8a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8008a94:	4413      	add	r3, r2
 8008a96:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
  {
    /*  Butterfly implementation */

    /*  Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = _SIMD32_OFFSET(pSi0);
 8008a9a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8008aa4:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8008aa8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008ab6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ac0:	6812      	ldr	r2, [r2, #0]
 8008ac2:	fa93 f222 	shadd16	r2, r3, r2
 8008ac6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008aca:	601a      	str	r2, [r3, #0]
  return(result);
 8008acc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8008ad6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8008ada:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008ae8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	fa93 f222 	shadd16	r2, r3, r2
 8008af8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008afc:	601a      	str	r2, [r3, #0]
  return(result);
 8008afe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* Read yc (real), xc(imag) input */
    S = _SIMD32_OFFSET(pSi2);
 8008b08:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    S = __SHADD16(S, 0);
 8008b12:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008b16:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008b24:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	fa93 f222 	shadd16	r2, r3, r2
 8008b34:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8008b38:	601a      	str	r2, [r3, #0]
  return(result);
 8008b3a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    S = __SHADD16(S, 0);
 8008b44:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008b48:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008b56:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8008b60:	6812      	ldr	r2, [r2, #0]
 8008b62:	fa93 f222 	shadd16	r2, r3, r2
 8008b66:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008b6a:	601a      	str	r2, [r3, #0]
  return(result);
 8008b6c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8008b76:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8008b7a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008b7e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8008b82:	6019      	str	r1, [r3, #0]
 8008b84:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008b88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008b8a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8008b94:	6812      	ldr	r2, [r2, #0]
 8008b96:	fa93 f212 	qadd16	r2, r3, r2
 8008b9a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8008b9e:	601a      	str	r2, [r3, #0]
  return(result);
 8008ba0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8008baa:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8008bae:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008bb2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008bb6:	6019      	str	r1, [r3, #0]
 8008bb8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8008bbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008bbe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8008bc8:	6812      	ldr	r2, [r2, #0]
 8008bca:	fad3 f212 	qsub16	r2, r3, r2
 8008bce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008bd2:	601a      	str	r2, [r3, #0]
  return(result);
 8008bd4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = _SIMD32_OFFSET(pSi1);
 8008bde:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8008be8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8008bec:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008bfa:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8008c04:	6812      	ldr	r2, [r2, #0]
 8008c06:	fa93 f222 	shadd16	r2, r3, r2
 8008c0a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8008c0e:	601a      	str	r2, [r3, #0]
  return(result);
 8008c10:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8008c1a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8008c1e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008c2c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	fa93 f222 	shadd16	r2, r3, r2
 8008c3c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008c40:	601a      	str	r2, [r3, #0]
  return(result);
 8008c42:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* Read yd (real), xd(imag) input */
    U = _SIMD32_OFFSET(pSi3);
 8008c4c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    U = __SHADD16(U, 0);
 8008c56:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008c5a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008c68:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008c72:	6812      	ldr	r2, [r2, #0]
 8008c74:	fa93 f222 	shadd16	r2, r3, r2
 8008c78:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8008c7c:	601a      	str	r2, [r3, #0]
  return(result);
 8008c7e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    U = __SHADD16(U, 0);
 8008c88:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008c8c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008c9a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	fa93 f222 	shadd16	r2, r3, r2
 8008caa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8008cae:	601a      	str	r2, [r3, #0]
  return(result);
 8008cb0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8008cba:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8008cbe:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8008cc2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008cc6:	6019      	str	r1, [r3, #0]
 8008cc8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008ccc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008cce:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8008cd8:	6812      	ldr	r2, [r2, #0]
 8008cda:	fa93 f212 	qadd16	r2, r3, r2
 8008cde:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8008ce2:	601a      	str	r2, [r3, #0]
  return(result);
 8008ce4:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    _SIMD32_OFFSET(pSi0) = __SHADD16(R, T);
 8008cee:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8008cf2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8008cf6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008cfa:	6019      	str	r1, [r3, #0]
 8008cfc:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8008d00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008d02:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8008d0c:	6812      	ldr	r2, [r2, #0]
 8008d0e:	fa93 f222 	shadd16	r2, r3, r2
 8008d12:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8008d16:	601a      	str	r2, [r3, #0]
  return(result);
 8008d18:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008d24:	601a      	str	r2, [r3, #0]
    pSi0 += 2;
 8008d26:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8008d30:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008d34:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8008d38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8008d3c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8008d40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008d42:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008d46:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	fad3 f212 	qsub16	r2, r3, r2
 8008d50:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8008d54:	601a      	str	r2, [r3, #0]
  return(result);
 8008d56:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = _SIMD32_OFFSET(pCoef16 + (4u * ic));
 8008d60:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	1d3a      	adds	r2, r7, #4
 8008d68:	6812      	ldr	r2, [r2, #0]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

#ifndef ARM_MATH_BIG_ENDIAN

    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUSD(C2, R) >> 16u;
 8008d72:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008d76:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008d7a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008d7e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008d82:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8008d86:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008d8a:	fb43 f302 	smusd	r3, r3, r2
 8008d8e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8008d92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008d96:	0c1b      	lsrs	r3, r3, #16
 8008d98:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUADX(C2, R);
 8008d9c:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008da0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008da4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8008da8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008dac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008db0:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008db4:	fb23 f312 	smuadx	r3, r3, r2
 8008db8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  return(result);
 8008dbc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8008dc0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = _SIMD32_OFFSET(pSi1);
 8008dc4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8008dce:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008dd2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008ddc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008de0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8008de4:	fa93 f322 	shadd16	r3, r3, r2
 8008de8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  return(result);
 8008dec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008df0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    T = __SHADD16(T, 0);
 8008df4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008df8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008e02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008e06:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8008e0a:	fa93 f322 	shadd16	r3, r3, r2
 8008e0e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  return(result);
 8008e12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008e16:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    _SIMD32_OFFSET(pSi1) =
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8008e1a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	041b      	lsls	r3, r3, #16
 8008e22:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8008e26:	b292      	uxth	r2, r2
 8008e28:	431a      	orrs	r2, r3
    _SIMD32_OFFSET(pSi1) =
 8008e2a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008e2e:	601a      	str	r2, [r3, #0]
    pSi1 += 2;
 8008e30:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008e34:	3304      	adds	r3, #4
 8008e36:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = _SIMD32_OFFSET(pSi3);
 8008e3a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    U = __SHADD16(U, 0);
 8008e44:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008e48:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008e52:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008e56:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8008e5a:	fa93 f322 	shadd16	r3, r3, r2
 8008e5e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  return(result);
 8008e62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008e66:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    U = __SHADD16(U, 0);
 8008e6a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008e6e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8008e72:	2300      	movs	r3, #0
 8008e74:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008e78:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008e7c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8008e80:	fa93 f322 	shadd16	r3, r3, r2
 8008e84:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  return(result);
 8008e88:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008e8c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 8008e90:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8008e94:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8008e98:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 8008e9c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008ea0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008ea4:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8008ea8:	fad3 f312 	qsub16	r3, r3, r2
 8008eac:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  return(result);
 8008eb0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008eb4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

#ifndef ARM_MATH_BIG_ENDIAN

    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QSAX(S, T);
 8008eb8:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008ebc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008ec0:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8008ec4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008ec8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8008ecc:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8008ed0:	fae3 f312 	qsax	r3, r3, r2
 8008ed4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  return(result);
 8008ed8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8008edc:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    /* S = packed((ya-yc) + (xb- xd),  (xa-xc) - (yb-yd)) */
    S = __QASX(S, T);
 8008ee0:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8008ee4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8008ee8:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8008eec:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008ef0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008ef4:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8008ef8:	faa3 f312 	qasx	r3, r3, r2
 8008efc:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
  return(result);
 8008f00:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8008f04:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    S = __QSAX(S, T);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 8008f08:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	1d3a      	adds	r2, r7, #4
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	4413      	add	r3, r2
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16u;
 8008f1a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8008f1e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f22:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8008f26:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008f2a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008f2e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8008f32:	fb43 f302 	smusd	r3, r3, r2
 8008f36:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  return(result);
 8008f3a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8008f3e:	0c1b      	lsrs	r3, r3, #16
 8008f40:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUADX(C1, S);
 8008f44:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8008f48:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8008f4c:	f8c7 2250 	str.w	r2, [r7, #592]	; 0x250
 8008f50:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008f54:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008f58:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008f5c:	fb23 f312 	smuadx	r3, r3, r2
 8008f60:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  return(result);
 8008f64:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008f68:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xb', yb') in little endian format */
    _SIMD32_OFFSET(pSi2) =
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 8008f6c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008f70:	0c1b      	lsrs	r3, r3, #16
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8008f78:	b292      	uxth	r2, r2
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	461a      	mov	r2, r3
    _SIMD32_OFFSET(pSi2) =
 8008f7e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8008f82:	601a      	str	r2, [r3, #0]
    pSi2 += 2;
 8008f84:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8008f88:	3304      	adds	r3, #4
 8008f8a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8


    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8008f8e:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8008f92:	4613      	mov	r3, r2
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	1d3b      	adds	r3, r7, #4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16u;
 8008fa8:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8008fac:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008fb0:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8008fb4:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008fb8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008fbc:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8008fc0:	fb43 f302 	smusd	r3, r3, r2
 8008fc4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  return(result);
 8008fc8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008fcc:	0c1b      	lsrs	r3, r3, #16
 8008fce:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUADX(C3, R);
 8008fd2:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8008fd6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8008fda:	f8c7 2268 	str.w	r2, [r7, #616]	; 0x268
 8008fde:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008fe2:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8008fe6:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008fea:	fb23 f312 	smuadx	r3, r3, r2
 8008fee:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  return(result);
 8008ff2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008ff6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xd', yd') in little endian format */
    _SIMD32_OFFSET(pSi3) =
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8008ffa:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8008ffe:	0c1b      	lsrs	r3, r3, #16
 8009000:	041b      	lsls	r3, r3, #16
 8009002:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8009006:	b292      	uxth	r2, r2
 8009008:	4313      	orrs	r3, r2
 800900a:	461a      	mov	r2, r3
    _SIMD32_OFFSET(pSi3) =
 800900c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8009010:	601a      	str	r2, [r3, #0]
    pSi3 += 2;
 8009012:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8009016:	3304      	adds	r3, #4
 8009018:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 800901c:	463b      	mov	r3, r7
 800901e:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4413      	add	r3, r2
 8009026:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

  } while(--j);
 800902a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800902e:	3b01      	subs	r3, #1
 8009030:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8009034:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8009038:	2b00      	cmp	r3, #0
 800903a:	f47f ad2e 	bne.w	8008a9a <arm_radix4_butterfly_inverse_q15+0x80>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2u;
 800903e:	463b      	mov	r3, r7
 8009040:	463a      	mov	r2, r7
 8009042:	6812      	ldr	r2, [r2, #0]
 8009044:	0092      	lsls	r2, r2, #2
 8009046:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4u; k > 4u; k >>= 2u)
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	089b      	lsrs	r3, r3, #2
 8009050:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8009054:	e270      	b.n	8009538 <arm_radix4_butterfly_inverse_q15+0xb1e>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8009056:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800905a:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
    n2 >>= 2u;
 800905e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8009062:	089b      	lsrs	r3, r3, #2
 8009064:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    ic = 0u;
 8009068:	2300      	movs	r3, #0
 800906a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

    for (j = 0u; j <= (n2 - 1u); j++)
 800906e:	2300      	movs	r3, #0
 8009070:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8009074:	e24e      	b.n	8009514 <arm_radix4_butterfly_inverse_q15+0xafa>
    {
      /*  index calculation for the coefficients */
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 8009076:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	1d3a      	adds	r2, r7, #4
 800907e:	6812      	ldr	r2, [r2, #0]
 8009080:	4413      	add	r3, r2
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
      C2 = _SIMD32_OFFSET(pCoef16 + (4u * ic));
 8009088:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	1d3a      	adds	r2, r7, #4
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	4413      	add	r3, r2
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 800909a:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 800909e:	4613      	mov	r3, r2
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	461a      	mov	r2, r3
 80090a8:	1d3b      	adds	r3, r7, #4
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4413      	add	r3, r2
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 80090b4:	463b      	mov	r3, r7
 80090b6:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4413      	add	r3, r2
 80090be:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
      
      pSi0 = pSrc16 + 2 * j;
 80090c2:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	f107 020c 	add.w	r2, r7, #12
 80090cc:	6812      	ldr	r2, [r2, #0]
 80090ce:	4413      	add	r3, r2
 80090d0:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
      pSi1 = pSi0 + 2 * n2;
 80090d4:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80090de:	4413      	add	r3, r2
 80090e0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
      pSi2 = pSi1 + 2 * n2;
 80090e4:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80090ee:	4413      	add	r3, r2
 80090f0:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
      pSi3 = pSi2 + 2 * n2;
 80090f4:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 80090fe:	4413      	add	r3, r2
 8009100:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8009104:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8009108:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800910c:	e1f5      	b.n	80094fa <arm_radix4_butterfly_inverse_q15+0xae0>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = _SIMD32_OFFSET(pSi0);
 800910e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        /* Read yc (real), xc(imag) input */
        S = _SIMD32_OFFSET(pSi2);
 8009118:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8009122:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8009126:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800912a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800912e:	6019      	str	r1, [r3, #0]
 8009130:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009134:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009136:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8009140:	6812      	ldr	r2, [r2, #0]
 8009142:	fa93 f212 	qadd16	r2, r3, r2
 8009146:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800914a:	601a      	str	r2, [r3, #0]
  return(result);
 800914c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8009156:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 800915a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800915e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009162:	6019      	str	r1, [r3, #0]
 8009164:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009168:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800916a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009174:	6812      	ldr	r2, [r2, #0]
 8009176:	fad3 f212 	qsub16	r2, r3, r2
 800917a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800917e:	601a      	str	r2, [r3, #0]
  return(result);
 8009180:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = _SIMD32_OFFSET(pSi1);
 800918a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        /* Read yd (real), xd(imag) input */
        U = _SIMD32_OFFSET(pSi3);
 8009194:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 800919e:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 80091a2:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80091a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80091aa:	6019      	str	r1, [r3, #0]
 80091ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80091b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80091b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80091bc:	6812      	ldr	r2, [r2, #0]
 80091be:	fa93 f212 	qadd16	r2, r3, r2
 80091c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80091c6:	601a      	str	r2, [r3, #0]
  return(result);
 80091c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 80091d2:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 80091d6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80091da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80091de:	6019      	str	r1, [r3, #0]
 80091e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80091e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80091e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80091f0:	6812      	ldr	r2, [r2, #0]
 80091f2:	fa93 f222 	shadd16	r2, r3, r2
 80091f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80091fa:	601a      	str	r2, [r3, #0]
  return(result);
 80091fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
        out1 = __SHADD16(out1, 0);
 8009206:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800920a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009218:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8009222:	6812      	ldr	r2, [r2, #0]
 8009224:	fa93 f222 	shadd16	r2, r3, r2
 8009228:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800922c:	601a      	str	r2, [r3, #0]
  return(result);
 800922e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
        _SIMD32_OFFSET(pSi0) = out1;
 8009238:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800923c:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8009240:	601a      	str	r2, [r3, #0]
        pSi0 += 2 * n1;
 8009242:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 800924c:	4413      	add	r3, r2
 800924e:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8009252:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8009256:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800925a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800925e:	6019      	str	r1, [r3, #0]
 8009260:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009264:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009266:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8009270:	6812      	ldr	r2, [r2, #0]
 8009272:	fad3 f222 	shsub16	r2, r3, r2
 8009276:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800927a:	601a      	str	r2, [r3, #0]
  return(result);
 800927c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

#ifndef ARM_MATH_BIG_ENDIAN

        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUSD(C2, R) >> 16u;
 8009286:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 800928a:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 800928e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009292:	6019      	str	r1, [r3, #0]
 8009294:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009298:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800929a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80092a4:	6812      	ldr	r2, [r2, #0]
 80092a6:	fb43 f202 	smusd	r2, r3, r2
 80092aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80092ae:	601a      	str	r2, [r3, #0]
  return(result);
 80092b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	0c1b      	lsrs	r3, r3, #16
 80092b8:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUADX(C2, R);
 80092bc:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80092c0:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80092c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80092c8:	6019      	str	r1, [r3, #0]
 80092ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80092ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80092d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80092da:	6812      	ldr	r2, [r2, #0]
 80092dc:	fb23 f212 	smuadx	r2, r3, r2
 80092e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80092e4:	601a      	str	r2, [r3, #0]
  return(result);
 80092e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = _SIMD32_OFFSET(pSi1);
 80092f0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        _SIMD32_OFFSET(pSi1) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80092fa:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80092fe:	0c1b      	lsrs	r3, r3, #16
 8009300:	041b      	lsls	r3, r3, #16
 8009302:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8009306:	b292      	uxth	r2, r2
 8009308:	4313      	orrs	r3, r2
 800930a:	461a      	mov	r2, r3
        _SIMD32_OFFSET(pSi1) =
 800930c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009310:	601a      	str	r2, [r3, #0]
        pSi1 += 2 * n1;
 8009312:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800931c:	4413      	add	r3, r2
 800931e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = _SIMD32_OFFSET(pSi3);
 8009322:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 800932c:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8009330:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8009334:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009338:	6019      	str	r1, [r3, #0]
 800933a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800933e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009340:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800934a:	6812      	ldr	r2, [r2, #0]
 800934c:	fad3 f212 	qsub16	r2, r3, r2
 8009350:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8009354:	601a      	str	r2, [r3, #0]
  return(result);
 8009356:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

#ifndef ARM_MATH_BIG_ENDIAN

        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHSAX(S, T);
 8009360:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8009364:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8009368:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800936c:	6019      	str	r1, [r3, #0]
 800936e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009372:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009374:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	fae3 f222 	shsax	r2, r3, r2
 8009384:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009388:	601a      	str	r2, [r3, #0]
  return(result);
 800938a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHASX(S, T);
 8009394:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8009398:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800939c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80093a0:	6019      	str	r1, [r3, #0]
 80093a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80093a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80093a8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80093b2:	6812      	ldr	r2, [r2, #0]
 80093b4:	faa3 f222 	shasx	r2, r3, r2
 80093b8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80093bc:	601a      	str	r2, [r3, #0]
  return(result);
 80093be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298


        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUSD(C1, S) >> 16u;
 80093c8:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 80093cc:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80093d0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80093d4:	6019      	str	r1, [r3, #0]
 80093d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80093dc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80093e6:	6812      	ldr	r2, [r2, #0]
 80093e8:	fb43 f202 	smusd	r2, r3, r2
 80093ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80093f0:	601a      	str	r2, [r3, #0]
  return(result);
 80093f2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	0c1b      	lsrs	r3, r3, #16
 80093fa:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
        out2 = __SMUADX(C1, S);
 80093fe:	f8d7 1280 	ldr.w	r1, [r7, #640]	; 0x280
 8009402:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8009406:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800940a:	6019      	str	r1, [r3, #0]
 800940c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8009410:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009412:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800941c:	6812      	ldr	r2, [r2, #0]
 800941e:	fb23 f212 	smuadx	r2, r3, r2
 8009422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009426:	601a      	str	r2, [r3, #0]
  return(result);
 8009428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        _SIMD32_OFFSET(pSi2) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8009432:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009436:	0c1b      	lsrs	r3, r3, #16
 8009438:	041b      	lsls	r3, r3, #16
 800943a:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800943e:	b292      	uxth	r2, r2
 8009440:	4313      	orrs	r3, r2
 8009442:	461a      	mov	r2, r3
        _SIMD32_OFFSET(pSi2) =
 8009444:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8009448:	601a      	str	r2, [r3, #0]
        pSi2 += 2 * n1;
 800944a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8009454:	4413      	add	r3, r2
 8009456:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

        out1 = __SMUSD(C3, R) >> 16u;
 800945a:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 800945e:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8009462:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009466:	6019      	str	r1, [r3, #0]
 8009468:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800946c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800946e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8009478:	6812      	ldr	r2, [r2, #0]
 800947a:	fb43 f202 	smusd	r2, r3, r2
 800947e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8009482:	601a      	str	r2, [r3, #0]
  return(result);
 8009484:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	0c1b      	lsrs	r3, r3, #16
 800948c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
        out2 = __SMUADX(C3, R);
 8009490:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 8009494:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8009498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800949c:	6019      	str	r1, [r3, #0]
 800949e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80094a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80094a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	fb23 f212 	smuadx	r2, r3, r2
 80094b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80094b8:	601a      	str	r2, [r3, #0]
  return(result);
 80094ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        _SIMD32_OFFSET(pSi3) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80094c4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80094c8:	0c1b      	lsrs	r3, r3, #16
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 80094d0:	b292      	uxth	r2, r2
 80094d2:	4313      	orrs	r3, r2
 80094d4:	461a      	mov	r2, r3
        _SIMD32_OFFSET(pSi3) =
 80094d6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80094da:	601a      	str	r2, [r3, #0]
        pSi3 += 2 * n1;
 80094dc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80094e6:	4413      	add	r3, r2
 80094e8:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
      for (i0 = j; i0 < fftLen; i0 += n1)
 80094ec:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80094f0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80094f4:	4413      	add	r3, r2
 80094f6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80094fa:	f107 0308 	add.w	r3, r7, #8
 80094fe:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	429a      	cmp	r2, r3
 8009506:	f4ff ae02 	bcc.w	800910e <arm_radix4_butterfly_inverse_q15+0x6f4>
    for (j = 0u; j <= (n2 - 1u); j++)
 800950a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800950e:	3301      	adds	r3, #1
 8009510:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8009514:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8009518:	3b01      	subs	r3, #1
 800951a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 800951e:	429a      	cmp	r2, r3
 8009520:	f67f ada9 	bls.w	8009076 <arm_radix4_butterfly_inverse_q15+0x65c>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2u;
 8009524:	463b      	mov	r3, r7
 8009526:	463a      	mov	r2, r7
 8009528:	6812      	ldr	r2, [r2, #0]
 800952a:	0092      	lsls	r2, r2, #2
 800952c:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4u; k > 4u; k >>= 2u)
 800952e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8009532:	089b      	lsrs	r3, r3, #2
 8009534:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8009538:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800953c:	2b04      	cmp	r3, #4
 800953e:	f63f ad8a 	bhi.w	8009056 <arm_radix4_butterfly_inverse_q15+0x63c>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 8009542:	f107 0308 	add.w	r3, r7, #8
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	089b      	lsrs	r3, r3, #2
 800954a:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8

  ptr1 = &pSrc16[0];
 800954e:	f107 0310 	add.w	r3, r7, #16
 8009552:	f107 020c 	add.w	r2, r7, #12
 8009556:	6812      	ldr	r2, [r2, #0]
 8009558:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = *__SIMD32(ptr1)++;
 800955a:	f107 0210 	add.w	r2, r7, #16
 800955e:	6813      	ldr	r3, [r2, #0]
 8009560:	1d19      	adds	r1, r3, #4
 8009562:	6011      	str	r1, [r2, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

    /* Read xb (real), yb(imag) input */
    xbyb = *__SIMD32(ptr1)++;
 800956a:	f107 0210 	add.w	r2, r7, #16
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	1d19      	adds	r1, r3, #4
 8009572:	6011      	str	r1, [r2, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

    /* Read xc (real), yc(imag) input */
    xcyc = *__SIMD32(ptr1)++;
 800957a:	f107 0210 	add.w	r2, r7, #16
 800957e:	6813      	ldr	r3, [r2, #0]
 8009580:	1d19      	adds	r1, r3, #4
 8009582:	6011      	str	r1, [r2, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270

    /* Read xd (real), yd(imag) input */
    xdyd = *__SIMD32(ptr1)++;
 800958a:	f107 0210 	add.w	r2, r7, #16
 800958e:	6813      	ldr	r3, [r2, #0]
 8009590:	1d19      	adds	r1, r3, #4
 8009592:	6011      	str	r1, [r2, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 800959a:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 800959e:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80095a2:	f107 031c 	add.w	r3, r7, #28
 80095a6:	6019      	str	r1, [r3, #0]
 80095a8:	f107 0318 	add.w	r3, r7, #24
 80095ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80095ae:	f107 031c 	add.w	r3, r7, #28
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f107 0218 	add.w	r2, r7, #24
 80095b8:	6812      	ldr	r2, [r2, #0]
 80095ba:	fa93 f212 	qadd16	r2, r3, r2
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	601a      	str	r2, [r3, #0]
  return(result);
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 80095ce:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 80095d2:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80095d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80095da:	6019      	str	r1, [r3, #0]
 80095dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80095e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80095ec:	6812      	ldr	r2, [r2, #0]
 80095ee:	fa93 f212 	qadd16	r2, r3, r2
 80095f2:	f107 0320 	add.w	r3, r7, #32
 80095f6:	601a      	str	r2, [r3, #0]
  return(result);
 80095f8:	f107 0320 	add.w	r3, r7, #32
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* pointer updation for writing */
    ptr1 = ptr1 - 8u;
 8009602:	f107 0310 	add.w	r3, r7, #16
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f1a3 0210 	sub.w	r2, r3, #16
 800960c:	f107 0310 	add.w	r3, r7, #16
 8009610:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    *__SIMD32(ptr1)++ = __SHADD16(R, T);
 8009612:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8009616:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800961a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800961e:	6019      	str	r1, [r3, #0]
 8009620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009626:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009630:	6812      	ldr	r2, [r2, #0]
 8009632:	fa93 f222 	shadd16	r2, r3, r2
 8009636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800963a:	601a      	str	r2, [r3, #0]
  return(result);
 800963c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	f107 0210 	add.w	r2, r7, #16
 8009646:	6813      	ldr	r3, [r2, #0]
 8009648:	1d19      	adds	r1, r3, #4
 800964a:	6011      	str	r1, [r2, #0]
 800964c:	4602      	mov	r2, r0
 800964e:	601a      	str	r2, [r3, #0]

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8009650:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 8009654:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8009658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800965c:	6019      	str	r1, [r3, #0]
 800965e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009662:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	fa93 f212 	qadd16	r2, r3, r2
 8009674:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009678:	601a      	str	r2, [r3, #0]
  return(result);
 800967a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    *__SIMD32(ptr1)++ = __SHSUB16(R, T);
 8009684:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8009688:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800968c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009690:	6019      	str	r1, [r3, #0]
 8009692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009698:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096a2:	6812      	ldr	r2, [r2, #0]
 80096a4:	fad3 f222 	shsub16	r2, r3, r2
 80096a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096ac:	601a      	str	r2, [r3, #0]
  return(result);
 80096ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	f107 0210 	add.w	r2, r7, #16
 80096b8:	6813      	ldr	r3, [r2, #0]
 80096ba:	1d19      	adds	r1, r3, #4
 80096bc:	6011      	str	r1, [r2, #0]
 80096be:	4602      	mov	r2, r0
 80096c0:	601a      	str	r2, [r3, #0]

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 80096c2:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 80096c6:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80096ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096ce:	6019      	str	r1, [r3, #0]
 80096d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80096d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80096d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80096e0:	6812      	ldr	r2, [r2, #0]
 80096e2:	fad3 f212 	qsub16	r2, r3, r2
 80096e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096ea:	601a      	str	r2, [r3, #0]
  return(result);
 80096ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 80096f6:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 80096fa:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80096fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009702:	6019      	str	r1, [r3, #0]
 8009704:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009708:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800970a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009714:	6812      	ldr	r2, [r2, #0]
 8009716:	fad3 f212 	qsub16	r2, r3, r2
 800971a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800971e:	601a      	str	r2, [r3, #0]
  return(result);
 8009720:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    *__SIMD32(ptr1)++ = __SHASX(S, U);
 800972a:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 800972e:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8009732:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009736:	6019      	str	r1, [r3, #0]
 8009738:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800973c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800973e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8009748:	6812      	ldr	r2, [r2, #0]
 800974a:	faa3 f222 	shasx	r2, r3, r2
 800974e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009752:	601a      	str	r2, [r3, #0]
  return(result);
 8009754:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	f107 0210 	add.w	r2, r7, #16
 800975e:	6813      	ldr	r3, [r2, #0]
 8009760:	1d19      	adds	r1, r3, #4
 8009762:	6011      	str	r1, [r2, #0]
 8009764:	4602      	mov	r2, r0
 8009766:	601a      	str	r2, [r3, #0]


    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);
 8009768:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 800976c:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8009770:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009774:	6019      	str	r1, [r3, #0]
 8009776:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800977a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800977c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8009786:	6812      	ldr	r2, [r2, #0]
 8009788:	fae3 f222 	shsax	r2, r3, r2
 800978c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009790:	601a      	str	r2, [r3, #0]
  return(result);
 8009792:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	f107 0210 	add.w	r2, r7, #16
 800979c:	6813      	ldr	r3, [r2, #0]
 800979e:	1d19      	adds	r1, r3, #4
 80097a0:	6011      	str	r1, [r2, #0]
 80097a2:	4602      	mov	r2, r0
 80097a4:	601a      	str	r2, [r3, #0]
    *__SIMD32(ptr1)++ = __SHASX(S, U);


#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

  } while(--j);
 80097a6:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80097aa:	3b01      	subs	r3, #1
 80097ac:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 80097b0:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f47f aed0 	bne.w	800955a <arm_radix4_butterfly_inverse_q15+0xb40>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80097ba:	bf00      	nop
 80097bc:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc90      	pop	{r4, r7}
 80097c4:	4770      	bx	lr
	...

080097c8 <arm_rfft_init_q15>:
arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
    /*  Initialise the default arm status */
    arm_status status = ARM_MATH_SUCCESS;
 80097d6:	2300      	movs	r3, #0
 80097d8:	75fb      	strb	r3, [r7, #23]

    /*  Initialize the Real FFT length */
    S->fftLenReal = (uint16_t) fftLenReal;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	601a      	str	r2, [r3, #0]

    /*  Initialize the Twiddle coefficientA pointer */
    S->pTwiddleAReal = (q15_t *) realCoefAQ15;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4a3e      	ldr	r2, [pc, #248]	; (80098e0 <arm_rfft_init_q15+0x118>)
 80097e8:	60da      	str	r2, [r3, #12]

    /*  Initialize the Twiddle coefficientB pointer */
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4a3d      	ldr	r2, [pc, #244]	; (80098e4 <arm_rfft_init_q15+0x11c>)
 80097ee:	611a      	str	r2, [r3, #16]

    /*  Initialize the Flag for selection of RFFT or RIFFT */
    S->ifftFlagR = (uint8_t) ifftFlagR;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	711a      	strb	r2, [r3, #4]

    /*  Initialize the Flag for calculation Bit reversal or not */
    S->bitReverseFlagR = (uint8_t) bitReverseFlag;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	715a      	strb	r2, [r3, #5]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (S->fftLenReal)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009808:	d03b      	beq.n	8009882 <arm_rfft_init_q15+0xba>
 800980a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800980e:	d80c      	bhi.n	800982a <arm_rfft_init_q15+0x62>
 8009810:	2b40      	cmp	r3, #64	; 0x40
 8009812:	d04b      	beq.n	80098ac <arm_rfft_init_q15+0xe4>
 8009814:	2b40      	cmp	r3, #64	; 0x40
 8009816:	d802      	bhi.n	800981e <arm_rfft_init_q15+0x56>
 8009818:	2b20      	cmp	r3, #32
 800981a:	d04e      	beq.n	80098ba <arm_rfft_init_q15+0xf2>
 800981c:	e055      	b.n	80098ca <arm_rfft_init_q15+0x102>
 800981e:	2b80      	cmp	r3, #128	; 0x80
 8009820:	d03d      	beq.n	800989e <arm_rfft_init_q15+0xd6>
 8009822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009826:	d033      	beq.n	8009890 <arm_rfft_init_q15+0xc8>
 8009828:	e04f      	b.n	80098ca <arm_rfft_init_q15+0x102>
 800982a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800982e:	d01a      	beq.n	8009866 <arm_rfft_init_q15+0x9e>
 8009830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009834:	d803      	bhi.n	800983e <arm_rfft_init_q15+0x76>
 8009836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800983a:	d01b      	beq.n	8009874 <arm_rfft_init_q15+0xac>
 800983c:	e045      	b.n	80098ca <arm_rfft_init_q15+0x102>
 800983e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009842:	d009      	beq.n	8009858 <arm_rfft_init_q15+0x90>
 8009844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009848:	d13f      	bne.n	80098ca <arm_rfft_init_q15+0x102>
    {
    case 8192u:
        S->twidCoefRModifier = 1u;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2201      	movs	r2, #1
 800984e:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len4096;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4a25      	ldr	r2, [pc, #148]	; (80098e8 <arm_rfft_init_q15+0x120>)
 8009854:	615a      	str	r2, [r3, #20]
        break;
 8009856:	e03b      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    case 4096u:
        S->twidCoefRModifier = 2u;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2202      	movs	r2, #2
 800985c:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len2048;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4a22      	ldr	r2, [pc, #136]	; (80098ec <arm_rfft_init_q15+0x124>)
 8009862:	615a      	str	r2, [r3, #20]
        break;
 8009864:	e034      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    case 2048u:
        S->twidCoefRModifier = 4u;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2204      	movs	r2, #4
 800986a:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len1024;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4a20      	ldr	r2, [pc, #128]	; (80098f0 <arm_rfft_init_q15+0x128>)
 8009870:	615a      	str	r2, [r3, #20]
        break;
 8009872:	e02d      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    case 1024u:
        S->twidCoefRModifier = 8u;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2208      	movs	r2, #8
 8009878:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len512;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a1d      	ldr	r2, [pc, #116]	; (80098f4 <arm_rfft_init_q15+0x12c>)
 800987e:	615a      	str	r2, [r3, #20]
        break;
 8009880:	e026      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    case 512u:
        S->twidCoefRModifier = 16u;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2210      	movs	r2, #16
 8009886:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len256;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4a1b      	ldr	r2, [pc, #108]	; (80098f8 <arm_rfft_init_q15+0x130>)
 800988c:	615a      	str	r2, [r3, #20]
        break;
 800988e:	e01f      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    case 256u:
        S->twidCoefRModifier = 32u;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2220      	movs	r2, #32
 8009894:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len128;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4a18      	ldr	r2, [pc, #96]	; (80098fc <arm_rfft_init_q15+0x134>)
 800989a:	615a      	str	r2, [r3, #20]
        break;
 800989c:	e018      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    case 128u:
        S->twidCoefRModifier = 64u;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2240      	movs	r2, #64	; 0x40
 80098a2:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len64;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a16      	ldr	r2, [pc, #88]	; (8009900 <arm_rfft_init_q15+0x138>)
 80098a8:	615a      	str	r2, [r3, #20]
        break;
 80098aa:	e011      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    case 64u:
        S->twidCoefRModifier = 128u;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2280      	movs	r2, #128	; 0x80
 80098b0:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len32;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	4a13      	ldr	r2, [pc, #76]	; (8009904 <arm_rfft_init_q15+0x13c>)
 80098b6:	615a      	str	r2, [r3, #20]
        break;
 80098b8:	e00a      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    case 32u:
        S->twidCoefRModifier = 256u;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098c0:	609a      	str	r2, [r3, #8]
        S->pCfft = &arm_cfft_sR_q15_len16;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4a10      	ldr	r2, [pc, #64]	; (8009908 <arm_rfft_init_q15+0x140>)
 80098c6:	615a      	str	r2, [r3, #20]
        break;
 80098c8:	e002      	b.n	80098d0 <arm_rfft_init_q15+0x108>
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 80098ca:	23ff      	movs	r3, #255	; 0xff
 80098cc:	75fb      	strb	r3, [r7, #23]
        break;
 80098ce:	bf00      	nop
    }

    /* return the status of RFFT Init function */
    return (status);
 80098d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	08019fa8 	.word	0x08019fa8
 80098e4:	0801dfa8 	.word	0x0801dfa8
 80098e8:	08019f98 	.word	0x08019f98
 80098ec:	08019f88 	.word	0x08019f88
 80098f0:	08019f78 	.word	0x08019f78
 80098f4:	08019f68 	.word	0x08019f68
 80098f8:	08019f58 	.word	0x08019f58
 80098fc:	08019f48 	.word	0x08019f48
 8009900:	08019f38 	.word	0x08019f38
 8009904:	08019f28 	.word	0x08019f28
 8009908:	08019f18 	.word	0x08019f18

0800990c <arm_rfft_q15>:

void arm_rfft_q15(
    const arm_rfft_instance_q15 * S,
    q15_t * pSrc,
    q15_t * pDst)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
    const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	61bb      	str	r3, [r7, #24]
    uint32_t i;
    uint32_t L2 = S->fftLenReal >> 1;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	085b      	lsrs	r3, r3, #1
 8009924:	617b      	str	r3, [r7, #20]

    /* Calculation of RIFFT of input */
    if(S->ifftFlagR == 1u)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	791b      	ldrb	r3, [r3, #4]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d12e      	bne.n	800998c <arm_rfft_q15+0x80>
    {
        /*  Real IFFT core process */
        arm_split_rifft_q15(pSrc, L2, S->pTwiddleAReal,
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6919      	ldr	r1, [r3, #16]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	460b      	mov	r3, r1
 8009942:	6979      	ldr	r1, [r7, #20]
 8009944:	68b8      	ldr	r0, [r7, #8]
 8009946:	f000 f917 	bl	8009b78 <arm_split_rifft_q15>
                            S->pTwiddleBReal, pDst, S->twidCoefRModifier);
        
        /* Complex IFFT process */
        arm_cfft_q15(S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	791a      	ldrb	r2, [r3, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	795b      	ldrb	r3, [r3, #5]
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	69b8      	ldr	r0, [r7, #24]
 8009956:	f7fd fef3 	bl	8007740 <arm_cfft_q15>
        
        for(i=0;i<S->fftLenReal;i++)
 800995a:	2300      	movs	r3, #0
 800995c:	61fb      	str	r3, [r7, #28]
 800995e:	e00f      	b.n	8009980 <arm_rfft_q15+0x74>
        {
            pDst[i] = pDst[i] << 1;
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	005b      	lsls	r3, r3, #1
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4413      	add	r3, r2
 8009968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800996c:	0059      	lsls	r1, r3, #1
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	b20a      	sxth	r2, r1
 8009978:	801a      	strh	r2, [r3, #0]
        for(i=0;i<S->fftLenReal;i++)
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	3301      	adds	r3, #1
 800997e:	61fb      	str	r3, [r7, #28]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	429a      	cmp	r2, r3
 8009988:	d3ea      	bcc.n	8009960 <arm_rfft_q15+0x54>

        /*  Real FFT core process */
        arm_split_rfft_q15(pSrc, L2, S->pTwiddleAReal,
                            S->pTwiddleBReal, pDst, S->twidCoefRModifier);
    }
}
 800998a:	e015      	b.n	80099b8 <arm_rfft_q15+0xac>
        arm_cfft_q15(S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	791a      	ldrb	r2, [r3, #4]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	795b      	ldrb	r3, [r3, #5]
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	69b8      	ldr	r0, [r7, #24]
 8009998:	f7fd fed2 	bl	8007740 <arm_cfft_q15>
        arm_split_rfft_q15(pSrc, L2, S->pTwiddleAReal,
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6919      	ldr	r1, [r3, #16]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	460b      	mov	r3, r1
 80099b0:	6979      	ldr	r1, [r7, #20]
 80099b2:	68b8      	ldr	r0, [r7, #8]
 80099b4:	f000 f804 	bl	80099c0 <arm_split_rfft_q15>
}
 80099b8:	bf00      	nop
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <arm_split_rfft_q15>:
    uint32_t fftLen,
    q15_t * pATable,
    q15_t * pBTable,
    q15_t * pDst,
    uint32_t modifier)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b09d      	sub	sp, #116	; 0x74
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
#endif

    //  pSrc[2u * fftLen] = pSrc[0]; 
    //  pSrc[(2u * fftLen) + 1u] = pSrc[1]; 

    pCoefA = &pATable[modifier * 2u];
 80099ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	4413      	add	r3, r2
 80099d6:	623b      	str	r3, [r7, #32]
    pCoefB = &pBTable[modifier * 2u];
 80099d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	4413      	add	r3, r2
 80099e0:	61fb      	str	r3, [r7, #28]

    pSrc1 = &pSrc[2];
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3304      	adds	r3, #4
 80099e6:	61bb      	str	r3, [r7, #24]
    pSrc2 = &pSrc[(2u * fftLen) - 2u];
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099ee:	3b01      	subs	r3, #1
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]

#ifndef ARM_MATH_CM0_FAMILY

    /* Run the below code for Cortex-M4 and Cortex-M3 */
    i = 1u;
 80099f8:	2301      	movs	r3, #1
 80099fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    pD1 = pDst + 2;
 80099fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099fe:	3304      	adds	r3, #4
 8009a00:	66bb      	str	r3, [r7, #104]	; 0x68
    pD2 = pDst + (4u * fftLen) - 2;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	3b04      	subs	r3, #4
 8009a08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a0a:	4413      	add	r3, r2
 8009a0c:	667b      	str	r3, [r7, #100]	; 0x64

    for(i = fftLen - 1; i > 0; i--)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a14:	e07e      	b.n	8009b14 <arm_split_rfft_q15+0x154>


#ifndef ARM_MATH_BIG_ENDIAN

        /* pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1] */
        outR = __SMUSD(*__SIMD32(pSrc1), *__SIMD32(pCoefA));
 8009a16:	f107 0318 	add.w	r3, r7, #24
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f107 0320 	add.w	r3, r7, #32
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a30:	fb43 f302 	smusd	r3, r3, r2
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	663b      	str	r3, [r7, #96]	; 0x60

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* pSrc[2 * n - 2 * i] * pBTable[2 * i] +    
        pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMLAD(*__SIMD32(pSrc2), *__SIMD32(pCoefB), outR) >> 16u;
 8009a3a:	f107 0314 	add.w	r3, r7, #20
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4619      	mov	r1, r3
 8009a44:	f107 031c 	add.w	r3, r7, #28
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a50:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009a52:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a5c:	fb23 1302 	smlad	r3, r3, r2, r1
 8009a60:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	0c1b      	lsrs	r3, r3, #16
 8009a66:	663b      	str	r3, [r7, #96]	; 0x60
        /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -    
        pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */

#ifndef ARM_MATH_BIG_ENDIAN

        outI = __SMUSDX(*__SIMD32(pSrc2)--, *__SIMD32(pCoefB));
 8009a68:	f107 0214 	add.w	r2, r7, #20
 8009a6c:	6813      	ldr	r3, [r2, #0]
 8009a6e:	1f19      	subs	r1, r3, #4
 8009a70:	6011      	str	r1, [r2, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	f107 031c 	add.w	r3, r7, #28
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a80:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a86:	fb43 f312 	smusdx	r3, r3, r2
 8009a8a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8009a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
        outI = __SMUSDX(*__SIMD32(pCoefB), *__SIMD32(pSrc2)--);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] */
        outI = __SMLADX(*__SIMD32(pSrc1)++, *__SIMD32(pCoefA), outI);
 8009a90:	f107 0218 	add.w	r2, r7, #24
 8009a94:	6813      	ldr	r3, [r2, #0]
 8009a96:	1d19      	adds	r1, r3, #4
 8009a98:	6011      	str	r1, [r2, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f107 0320 	add.w	r3, r7, #32
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aaa:	65b9      	str	r1, [r7, #88]	; 0x58
 8009aac:	657a      	str	r2, [r7, #84]	; 0x54
 8009aae:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ab2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ab4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ab6:	fb23 1312 	smladx	r3, r3, r2, r1
 8009aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8009abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009abe:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* write output */
        *pD1++ = (q15_t) outR;
 8009ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ac2:	1c9a      	adds	r2, r3, #2
 8009ac4:	66ba      	str	r2, [r7, #104]	; 0x68
 8009ac6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ac8:	b212      	sxth	r2, r2
 8009aca:	801a      	strh	r2, [r3, #0]
        *pD1++ = outI >> 16u;
 8009acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ace:	1419      	asrs	r1, r3, #16
 8009ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ad2:	1c9a      	adds	r2, r3, #2
 8009ad4:	66ba      	str	r2, [r7, #104]	; 0x68
 8009ad6:	b20a      	sxth	r2, r1
 8009ad8:	801a      	strh	r2, [r3, #0]

        /* write complex conjugate output */
        pD2[0] = (q15_t) outR;
 8009ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009adc:	b21a      	sxth	r2, r3
 8009ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae0:	801a      	strh	r2, [r3, #0]
        pD2[1] = -(outI >> 16u);
 8009ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ae4:	141b      	asrs	r3, r3, #16
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	425b      	negs	r3, r3
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aee:	3302      	adds	r3, #2
 8009af0:	b212      	sxth	r2, r2
 8009af2:	801a      	strh	r2, [r3, #0]
        pD2 -= 2;
 8009af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009af6:	3b04      	subs	r3, #4
 8009af8:	667b      	str	r3, [r7, #100]	; 0x64

        /* update coefficient pointer */
        pCoefB = pCoefB + (2u * modifier);
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	61fb      	str	r3, [r7, #28]
        pCoefA = pCoefA + (2u * modifier);
 8009b04:	6a3a      	ldr	r2, [r7, #32]
 8009b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	623b      	str	r3, [r7, #32]
    for(i = fftLen - 1; i > 0; i--)
 8009b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b10:	3b01      	subs	r3, #1
 8009b12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f47f af7d 	bne.w	8009a16 <arm_split_rfft_q15+0x56>
    }

    pDst[2u * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b22:	461a      	mov	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3302      	adds	r3, #2
 8009b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	1059      	asrs	r1, r3, #1
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b36:	4413      	add	r3, r2
 8009b38:	b20a      	sxth	r2, r1
 8009b3a:	801a      	strh	r2, [r3, #0]
    pDst[(2u * fftLen) + 1u] = 0;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	3302      	adds	r3, #2
 8009b42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b44:	4413      	add	r3, r2
 8009b46:	2200      	movs	r2, #0
 8009b48:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b50:	461a      	mov	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3302      	adds	r3, #2
 8009b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	105b      	asrs	r3, r3, #1
 8009b5e:	b21a      	sxth	r2, r3
 8009b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b62:	801a      	strh	r2, [r3, #0]
    pDst[1] = 0;
 8009b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b66:	3302      	adds	r3, #2
 8009b68:	2200      	movs	r2, #0
 8009b6a:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */
}
 8009b6c:	bf00      	nop
 8009b6e:	3774      	adds	r7, #116	; 0x74
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <arm_split_rifft_q15>:
    uint32_t fftLen,
    q15_t * pATable,
    q15_t * pBTable,
    q15_t * pDst,
    uint32_t modifier)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b09b      	sub	sp, #108	; 0x6c
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
 8009b84:	603b      	str	r3, [r7, #0]
    uint32_t i;                                    /* Loop Counter */
    q31_t outR, outI;                              /* Temporary variables for output */
    q15_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
    q15_t *pSrc1, *pSrc2;
    q15_t *pDst1 = &pDst[0];
 8009b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b88:	613b      	str	r3, [r7, #16]

    pCoefA = &pATable[0];
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	623b      	str	r3, [r7, #32]
    pCoefB = &pBTable[0];
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	61fb      	str	r3, [r7, #28]

    pSrc1 = &pSrc[0];
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	61bb      	str	r3, [r7, #24]
    pSrc2 = &pSrc[2u * fftLen];
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]

#ifndef ARM_MATH_CM0_FAMILY

    /* Run the below code for Cortex-M4 and Cortex-M3 */
    i = fftLen;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	667b      	str	r3, [r7, #100]	; 0x64

    while(i > 0u)
 8009ba4:	e070      	b.n	8009c88 <arm_split_rifft_q15+0x110>

#ifndef ARM_MATH_BIG_ENDIAN

        /* pIn[2 * n - 2 * i] * pBTable[2 * i] -    
        pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMUSD(*__SIMD32(pSrc2), *__SIMD32(pCoefB));
 8009ba6:	f107 0314 	add.w	r3, r7, #20
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f107 031c 	add.w	r3, r7, #28
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bc0:	fb43 f302 	smusd	r3, r3, r2
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	663b      	str	r3, [r7, #96]	; 0x60

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] +    
        pIn[2 * n - 2 * i] * pBTable[2 * i] */
        outR = __SMLAD(*__SIMD32(pSrc1), *__SIMD32(pCoefA), outR) >> 16u;
 8009bca:	f107 0318 	add.w	r3, r7, #24
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f107 0320 	add.w	r3, r7, #32
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009be0:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009be2:	63ba      	str	r2, [r7, #56]	; 0x38
 8009be4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bec:	fb23 1302 	smlad	r3, r3, r2, r1
 8009bf0:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf4:	0c1b      	lsrs	r3, r3, #16
 8009bf6:	663b      	str	r3, [r7, #96]	; 0x60

        /*    
        -pIn[2 * n - 2 * i] * pBTable[2 * i + 1] +    
        pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
        outI = __SMUADX(*__SIMD32(pSrc2)--, *__SIMD32(pCoefB));
 8009bf8:	f107 0214 	add.w	r2, r7, #20
 8009bfc:	6813      	ldr	r3, [r2, #0]
 8009bfe:	1f19      	subs	r1, r3, #4
 8009c00:	6011      	str	r1, [r2, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	461a      	mov	r2, r3
 8009c06:	f107 031c 	add.w	r3, r7, #28
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c10:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8009c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c16:	fb23 f312 	smuadx	r3, r3, r2
 8009c1a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8009c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c1e:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] */

#ifndef ARM_MATH_BIG_ENDIAN

        outI = __SMLSDX(*__SIMD32(pCoefA), *__SIMD32(pSrc1)++, -outI);
 8009c20:	f107 0320 	add.w	r3, r7, #32
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f107 0218 	add.w	r2, r7, #24
 8009c2e:	6813      	ldr	r3, [r2, #0]
 8009c30:	1d19      	adds	r1, r3, #4
 8009c32:	6011      	str	r1, [r2, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c3a:	425b      	negs	r3, r3
 8009c3c:	65b8      	str	r0, [r7, #88]	; 0x58
 8009c3e:	657a      	str	r2, [r7, #84]	; 0x54
 8009c40:	653b      	str	r3, [r7, #80]	; 0x50

__STATIC_FORCEINLINE uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c48:	fb43 1312 	smlsdx	r3, r3, r2, r1
 8009c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8009c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c50:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */
        /* write output */

#ifndef ARM_MATH_BIG_ENDIAN

        *__SIMD32(pDst1)++ = __PKHBT(outR, (outI >> 16u), 16);
 8009c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c58:	141b      	asrs	r3, r3, #16
 8009c5a:	041b      	lsls	r3, r3, #16
 8009c5c:	ea42 0003 	orr.w	r0, r2, r3
 8009c60:	f107 0210 	add.w	r2, r7, #16
 8009c64:	6813      	ldr	r3, [r2, #0]
 8009c66:	1d19      	adds	r1, r3, #4
 8009c68:	6011      	str	r1, [r2, #0]
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst1)++ = __PKHBT((outI >> 16u), outR, 16);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* update coefficient pointer */
        pCoefB = pCoefB + (2u * modifier);
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	61fb      	str	r3, [r7, #28]
        pCoefA = pCoefA + (2u * modifier);
 8009c78:	6a3a      	ldr	r2, [r7, #32]
 8009c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	623b      	str	r3, [r7, #32]

        i--;
 8009c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c84:	3b01      	subs	r3, #1
 8009c86:	667b      	str	r3, [r7, #100]	; 0x64
    while(i > 0u)
 8009c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d18b      	bne.n	8009ba6 <arm_split_rifft_q15+0x2e>
        pCoefA = pCoefA + (2u * modifier);

        i--;
    }
#endif /* #ifndef ARM_MATH_CM0_FAMILY */
}
 8009c8e:	bf00      	nop
 8009c90:	376c      	adds	r7, #108	; 0x6c
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
	...

08009c9c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca2:	f3ef 8305 	mrs	r3, IPSR
 8009ca6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10f      	bne.n	8009cce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cae:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb2:	607b      	str	r3, [r7, #4]
  return(result);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d109      	bne.n	8009cce <osKernelInitialize+0x32>
 8009cba:	4b11      	ldr	r3, [pc, #68]	; (8009d00 <osKernelInitialize+0x64>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d109      	bne.n	8009cd6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8009cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009cce:	f06f 0305 	mvn.w	r3, #5
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	e00c      	b.n	8009cf0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009cd6:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <osKernelInitialize+0x64>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d105      	bne.n	8009cea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009cde:	4b08      	ldr	r3, [pc, #32]	; (8009d00 <osKernelInitialize+0x64>)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	e002      	b.n	8009cf0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009cea:	f04f 33ff 	mov.w	r3, #4294967295
 8009cee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	2000002c 	.word	0x2000002c

08009d04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d0a:	f3ef 8305 	mrs	r3, IPSR
 8009d0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10f      	bne.n	8009d36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d16:	f3ef 8310 	mrs	r3, PRIMASK
 8009d1a:	607b      	str	r3, [r7, #4]
  return(result);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d109      	bne.n	8009d36 <osKernelStart+0x32>
 8009d22:	4b11      	ldr	r3, [pc, #68]	; (8009d68 <osKernelStart+0x64>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d109      	bne.n	8009d3e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8009d2e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009d36:	f06f 0305 	mvn.w	r3, #5
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	e00e      	b.n	8009d5c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d3e:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <osKernelStart+0x64>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d107      	bne.n	8009d56 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009d46:	4b08      	ldr	r3, [pc, #32]	; (8009d68 <osKernelStart+0x64>)
 8009d48:	2202      	movs	r2, #2
 8009d4a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009d4c:	f001 fb86 	bl	800b45c <vTaskStartScheduler>
      stat = osOK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e002      	b.n	8009d5c <osKernelStart+0x58>
    } else {
      stat = osError;
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	2000002c 	.word	0x2000002c

08009d6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b092      	sub	sp, #72	; 0x48
 8009d70:	af04      	add	r7, sp, #16
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d7c:	f3ef 8305 	mrs	r3, IPSR
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f040 8094 	bne.w	8009eb2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d8e:	623b      	str	r3, [r7, #32]
  return(result);
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f040 808d 	bne.w	8009eb2 <osThreadNew+0x146>
 8009d98:	4b48      	ldr	r3, [pc, #288]	; (8009ebc <osThreadNew+0x150>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d106      	bne.n	8009dae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009da0:	f3ef 8311 	mrs	r3, BASEPRI
 8009da4:	61fb      	str	r3, [r7, #28]
  return(result);
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f040 8082 	bne.w	8009eb2 <osThreadNew+0x146>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d07e      	beq.n	8009eb2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009db4:	2380      	movs	r3, #128	; 0x80
 8009db6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009db8:	2318      	movs	r3, #24
 8009dba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009dc0:	f107 031b 	add.w	r3, r7, #27
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d045      	beq.n	8009e5e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <osThreadNew+0x74>
        name = attr->name;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d008      	beq.n	8009e06 <osThreadNew+0x9a>
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	2b38      	cmp	r3, #56	; 0x38
 8009df8:	d805      	bhi.n	8009e06 <osThreadNew+0x9a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <osThreadNew+0x9e>
        return (NULL);
 8009e06:	2300      	movs	r3, #0
 8009e08:	e054      	b.n	8009eb4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	089b      	lsrs	r3, r3, #2
 8009e18:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00e      	beq.n	8009e40 <osThreadNew+0xd4>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	2b5b      	cmp	r3, #91	; 0x5b
 8009e28:	d90a      	bls.n	8009e40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d006      	beq.n	8009e40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <osThreadNew+0xd4>
        mem = 1;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e3e:	e010      	b.n	8009e62 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10c      	bne.n	8009e62 <osThreadNew+0xf6>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d108      	bne.n	8009e62 <osThreadNew+0xf6>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d104      	bne.n	8009e62 <osThreadNew+0xf6>
          mem = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e5c:	e001      	b.n	8009e62 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d110      	bne.n	8009e8a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e70:	9202      	str	r2, [sp, #8]
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f001 f924 	bl	800b0cc <xTaskCreateStatic>
 8009e84:	4603      	mov	r3, r0
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	e013      	b.n	8009eb2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d110      	bne.n	8009eb2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	f107 0314 	add.w	r3, r7, #20
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f001 f96b 	bl	800b17e <xTaskCreate>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d001      	beq.n	8009eb2 <osThreadNew+0x146>
          hTask = NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eb2:	697b      	ldr	r3, [r7, #20]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3738      	adds	r7, #56	; 0x38
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	2000002c 	.word	0x2000002c

08009ec0 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	; 0x28
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <osThreadFlagsSet+0x1a>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	da03      	bge.n	8009ee2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009eda:	f06f 0303 	mvn.w	r3, #3
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e046      	b.n	8009f70 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8009ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ee8:	f3ef 8305 	mrs	r3, IPSR
 8009eec:	61bb      	str	r3, [r7, #24]
  return(result);
 8009eee:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10f      	bne.n	8009f14 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <osThreadFlagsSet+0x54>
 8009f00:	4b1e      	ldr	r3, [pc, #120]	; (8009f7c <osThreadFlagsSet+0xbc>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d126      	bne.n	8009f56 <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f08:	f3ef 8311 	mrs	r3, BASEPRI
 8009f0c:	613b      	str	r3, [r7, #16]
  return(result);
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d020      	beq.n	8009f56 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009f18:	f107 0308 	add.w	r3, r7, #8
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2201      	movs	r2, #1
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	69f8      	ldr	r0, [r7, #28]
 8009f26:	f002 f861 	bl	800bfec <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009f2a:	f107 020c 	add.w	r2, r7, #12
 8009f2e:	2300      	movs	r3, #0
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	4613      	mov	r3, r2
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	69f8      	ldr	r0, [r7, #28]
 8009f3a:	f002 f857 	bl	800bfec <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d015      	beq.n	8009f70 <osThreadFlagsSet+0xb0>
 8009f44:	4b0e      	ldr	r3, [pc, #56]	; (8009f80 <osThreadFlagsSet+0xc0>)
 8009f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	e00c      	b.n	8009f70 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009f56:	2300      	movs	r3, #0
 8009f58:	2201      	movs	r2, #1
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	69f8      	ldr	r0, [r7, #28]
 8009f5e:	f001 ffa3 	bl	800bea8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009f62:	f107 030c 	add.w	r3, r7, #12
 8009f66:	2200      	movs	r2, #0
 8009f68:	2100      	movs	r1, #0
 8009f6a:	69f8      	ldr	r0, [r7, #28]
 8009f6c:	f001 ff9c 	bl	800bea8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009f70:	68fb      	ldr	r3, [r7, #12]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3720      	adds	r7, #32
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	2000002c 	.word	0x2000002c
 8009f80:	e000ed04 	.word	0xe000ed04

08009f84 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08e      	sub	sp, #56	; 0x38
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f90:	f3ef 8305 	mrs	r3, IPSR
 8009f94:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f96:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10f      	bne.n	8009fbc <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009fa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d109      	bne.n	8009fbc <osThreadFlagsWait+0x38>
 8009fa8:	4b3f      	ldr	r3, [pc, #252]	; (800a0a8 <osThreadFlagsWait+0x124>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d109      	bne.n	8009fc4 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fb0:	f3ef 8311 	mrs	r3, BASEPRI
 8009fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8009fbc:	f06f 0305 	mvn.w	r3, #5
 8009fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fc2:	e06b      	b.n	800a09c <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da03      	bge.n	8009fd2 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8009fca:	f06f 0303 	mvn.w	r3, #3
 8009fce:	637b      	str	r3, [r7, #52]	; 0x34
 8009fd0:	e064      	b.n	800a09c <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	633b      	str	r3, [r7, #48]	; 0x30
 8009fe0:	e001      	b.n	8009fe6 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8009fee:	f001 fb43 	bl	800b678 <xTaskGetTickCount>
 8009ff2:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009ff4:	f107 0210 	add.w	r2, r7, #16
 8009ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f001 fef9 	bl	800bdf4 <xTaskNotifyWait>
 800a002:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	2b01      	cmp	r3, #1
 800a008:	d137      	bne.n	800a07a <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800a00a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4013      	ands	r3, r2
 800a010:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a016:	4313      	orrs	r3, r2
 800a018:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a028:	4013      	ands	r3, r2
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d032      	beq.n	800a096 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10f      	bne.n	800a056 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a036:	f06f 0302 	mvn.w	r3, #2
 800a03a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a03c:	e02e      	b.n	800a09c <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a042:	4013      	ands	r3, r2
 800a044:	2b00      	cmp	r3, #0
 800a046:	d128      	bne.n	800a09a <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d103      	bne.n	800a056 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a04e:	f06f 0302 	mvn.w	r3, #2
 800a052:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a054:	e022      	b.n	800a09c <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a056:	f001 fb0f 	bl	800b678 <xTaskGetTickCount>
 800a05a:	4602      	mov	r2, r0
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800a062:	6a3a      	ldr	r2, [r7, #32]
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	429a      	cmp	r2, r3
 800a068:	d902      	bls.n	800a070 <osThreadFlagsWait+0xec>
          tout  = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a06e:	e00e      	b.n	800a08e <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800a070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a078:	e009      	b.n	800a08e <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d103      	bne.n	800a088 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800a080:	f06f 0302 	mvn.w	r3, #2
 800a084:	637b      	str	r3, [r7, #52]	; 0x34
 800a086:	e002      	b.n	800a08e <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a088:	f06f 0301 	mvn.w	r3, #1
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1af      	bne.n	8009ff4 <osThreadFlagsWait+0x70>
 800a094:	e002      	b.n	800a09c <osThreadFlagsWait+0x118>
            break;
 800a096:	bf00      	nop
 800a098:	e000      	b.n	800a09c <osThreadFlagsWait+0x118>
            break;
 800a09a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3738      	adds	r7, #56	; 0x38
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	2000002c 	.word	0x2000002c

0800a0ac <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0b4:	f3ef 8305 	mrs	r3, IPSR
 800a0b8:	613b      	str	r3, [r7, #16]
  return(result);
 800a0ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10f      	bne.n	800a0e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d109      	bne.n	800a0e0 <osDelay+0x34>
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <osDelay+0x58>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d109      	bne.n	800a0e8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0d4:	f3ef 8311 	mrs	r3, BASEPRI
 800a0d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d003      	beq.n	800a0e8 <osDelay+0x3c>
    stat = osErrorISR;
 800a0e0:	f06f 0305 	mvn.w	r3, #5
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	e007      	b.n	800a0f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 f97e 	bl	800b3f4 <vTaskDelay>
    }
  }

  return (stat);
 800a0f8:	697b      	ldr	r3, [r7, #20]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	2000002c 	.word	0x2000002c

0800a108 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08c      	sub	sp, #48	; 0x30
 800a10c:	af02      	add	r7, sp, #8
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a114:	2300      	movs	r3, #0
 800a116:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a118:	f3ef 8305 	mrs	r3, IPSR
 800a11c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a11e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a120:	2b00      	cmp	r3, #0
 800a122:	d170      	bne.n	800a206 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a124:	f3ef 8310 	mrs	r3, PRIMASK
 800a128:	617b      	str	r3, [r7, #20]
  return(result);
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d16a      	bne.n	800a206 <osMessageQueueNew+0xfe>
 800a130:	4b37      	ldr	r3, [pc, #220]	; (800a210 <osMessageQueueNew+0x108>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b02      	cmp	r3, #2
 800a136:	d105      	bne.n	800a144 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a138:	f3ef 8311 	mrs	r3, BASEPRI
 800a13c:	613b      	str	r3, [r7, #16]
  return(result);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d160      	bne.n	800a206 <osMessageQueueNew+0xfe>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d05d      	beq.n	800a206 <osMessageQueueNew+0xfe>
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d05a      	beq.n	800a206 <osMessageQueueNew+0xfe>
    mem = -1;
 800a150:	f04f 33ff 	mov.w	r3, #4294967295
 800a154:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d029      	beq.n	800a1b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d012      	beq.n	800a18a <osMessageQueueNew+0x82>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	2b4f      	cmp	r3, #79	; 0x4f
 800a16a:	d90e      	bls.n	800a18a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00a      	beq.n	800a18a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	695a      	ldr	r2, [r3, #20]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	fb01 f303 	mul.w	r3, r1, r3
 800a180:	429a      	cmp	r2, r3
 800a182:	d302      	bcc.n	800a18a <osMessageQueueNew+0x82>
        mem = 1;
 800a184:	2301      	movs	r3, #1
 800a186:	623b      	str	r3, [r7, #32]
 800a188:	e014      	b.n	800a1b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d110      	bne.n	800a1b4 <osMessageQueueNew+0xac>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10c      	bne.n	800a1b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d108      	bne.n	800a1b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <osMessageQueueNew+0xac>
          mem = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	623b      	str	r3, [r7, #32]
 800a1ae:	e001      	b.n	800a1b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d10c      	bne.n	800a1d4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691a      	ldr	r2, [r3, #16]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6899      	ldr	r1, [r3, #8]
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	68b9      	ldr	r1, [r7, #8]
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f000 fa58 	bl	800a680 <xQueueGenericCreateStatic>
 800a1d0:	6278      	str	r0, [r7, #36]	; 0x24
 800a1d2:	e008      	b.n	800a1e6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d105      	bne.n	800a1e6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a1da:	2200      	movs	r2, #0
 800a1dc:	68b9      	ldr	r1, [r7, #8]
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 fac0 	bl	800a764 <xQueueGenericCreate>
 800a1e4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00c      	beq.n	800a206 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <osMessageQueueNew+0xf2>
        name = attr->name;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	61fb      	str	r3, [r7, #28]
 800a1f8:	e001      	b.n	800a1fe <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a1fe:	69f9      	ldr	r1, [r7, #28]
 800a200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a202:	f000 ff07 	bl	800b014 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3728      	adds	r7, #40	; 0x28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	2000002c 	.word	0x2000002c

0800a214 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a214:	b580      	push	{r7, lr}
 800a216:	b08a      	sub	sp, #40	; 0x28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	4613      	mov	r3, r2
 800a222:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a228:	2300      	movs	r3, #0
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a22c:	f3ef 8305 	mrs	r3, IPSR
 800a230:	61fb      	str	r3, [r7, #28]
  return(result);
 800a232:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10f      	bne.n	800a258 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a238:	f3ef 8310 	mrs	r3, PRIMASK
 800a23c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d109      	bne.n	800a258 <osMessageQueuePut+0x44>
 800a244:	4b2b      	ldr	r3, [pc, #172]	; (800a2f4 <osMessageQueuePut+0xe0>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d12e      	bne.n	800a2aa <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a24c:	f3ef 8311 	mrs	r3, BASEPRI
 800a250:	617b      	str	r3, [r7, #20]
  return(result);
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d028      	beq.n	800a2aa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d005      	beq.n	800a26a <osMessageQueuePut+0x56>
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <osMessageQueuePut+0x56>
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a26a:	f06f 0303 	mvn.w	r3, #3
 800a26e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a270:	e039      	b.n	800a2e6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a276:	f107 0210 	add.w	r2, r7, #16
 800a27a:	2300      	movs	r3, #0
 800a27c:	68b9      	ldr	r1, [r7, #8]
 800a27e:	6a38      	ldr	r0, [r7, #32]
 800a280:	f000 fbca 	bl	800aa18 <xQueueGenericSendFromISR>
 800a284:	4603      	mov	r3, r0
 800a286:	2b01      	cmp	r3, #1
 800a288:	d003      	beq.n	800a292 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a28a:	f06f 0302 	mvn.w	r3, #2
 800a28e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a290:	e029      	b.n	800a2e6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d026      	beq.n	800a2e6 <osMessageQueuePut+0xd2>
 800a298:	4b17      	ldr	r3, [pc, #92]	; (800a2f8 <osMessageQueuePut+0xe4>)
 800a29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a2a8:	e01d      	b.n	800a2e6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <osMessageQueuePut+0xa2>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d103      	bne.n	800a2be <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a2b6:	f06f 0303 	mvn.w	r3, #3
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a2bc:	e014      	b.n	800a2e8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a2be:	2300      	movs	r3, #0
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	6a38      	ldr	r0, [r7, #32]
 800a2c6:	f000 faad 	bl	800a824 <xQueueGenericSend>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d00b      	beq.n	800a2e8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a2d6:	f06f 0301 	mvn.w	r3, #1
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
 800a2dc:	e004      	b.n	800a2e8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a2de:	f06f 0302 	mvn.w	r3, #2
 800a2e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e4:	e000      	b.n	800a2e8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a2e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3728      	adds	r7, #40	; 0x28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	2000002c 	.word	0x2000002c
 800a2f8:	e000ed04 	.word	0xe000ed04

0800a2fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08a      	sub	sp, #40	; 0x28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a30e:	2300      	movs	r3, #0
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a312:	f3ef 8305 	mrs	r3, IPSR
 800a316:	61fb      	str	r3, [r7, #28]
  return(result);
 800a318:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10f      	bne.n	800a33e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a31e:	f3ef 8310 	mrs	r3, PRIMASK
 800a322:	61bb      	str	r3, [r7, #24]
  return(result);
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d109      	bne.n	800a33e <osMessageQueueGet+0x42>
 800a32a:	4b2b      	ldr	r3, [pc, #172]	; (800a3d8 <osMessageQueueGet+0xdc>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d12e      	bne.n	800a390 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a332:	f3ef 8311 	mrs	r3, BASEPRI
 800a336:	617b      	str	r3, [r7, #20]
  return(result);
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d028      	beq.n	800a390 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <osMessageQueueGet+0x54>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <osMessageQueueGet+0x54>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a350:	f06f 0303 	mvn.w	r3, #3
 800a354:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a356:	e038      	b.n	800a3ca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a358:	2300      	movs	r3, #0
 800a35a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a35c:	f107 0310 	add.w	r3, r7, #16
 800a360:	461a      	mov	r2, r3
 800a362:	68b9      	ldr	r1, [r7, #8]
 800a364:	6a38      	ldr	r0, [r7, #32]
 800a366:	f000 fcc7 	bl	800acf8 <xQueueReceiveFromISR>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d003      	beq.n	800a378 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a370:	f06f 0302 	mvn.w	r3, #2
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a376:	e028      	b.n	800a3ca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d025      	beq.n	800a3ca <osMessageQueueGet+0xce>
 800a37e:	4b17      	ldr	r3, [pc, #92]	; (800a3dc <osMessageQueueGet+0xe0>)
 800a380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a38e:	e01c      	b.n	800a3ca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <osMessageQueueGet+0xa0>
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d103      	bne.n	800a3a4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a39c:	f06f 0303 	mvn.w	r3, #3
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a2:	e013      	b.n	800a3cc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	6a38      	ldr	r0, [r7, #32]
 800a3aa:	f000 fbc9 	bl	800ab40 <xQueueReceive>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d00b      	beq.n	800a3cc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a3ba:	f06f 0301 	mvn.w	r3, #1
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c0:	e004      	b.n	800a3cc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a3c2:	f06f 0302 	mvn.w	r3, #2
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c8:	e000      	b.n	800a3cc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a3ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3728      	adds	r7, #40	; 0x28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	2000002c 	.word	0x2000002c
 800a3dc:	e000ed04 	.word	0xe000ed04

0800a3e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4a07      	ldr	r2, [pc, #28]	; (800a40c <vApplicationGetIdleTaskMemory+0x2c>)
 800a3f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4a06      	ldr	r2, [pc, #24]	; (800a410 <vApplicationGetIdleTaskMemory+0x30>)
 800a3f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2280      	movs	r2, #128	; 0x80
 800a3fc:	601a      	str	r2, [r3, #0]
}
 800a3fe:	bf00      	nop
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	20000030 	.word	0x20000030
 800a410:	2000008c 	.word	0x2000008c

0800a414 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4a07      	ldr	r2, [pc, #28]	; (800a440 <vApplicationGetTimerTaskMemory+0x2c>)
 800a424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4a06      	ldr	r2, [pc, #24]	; (800a444 <vApplicationGetTimerTaskMemory+0x30>)
 800a42a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a432:	601a      	str	r2, [r3, #0]
}
 800a434:	bf00      	nop
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	2000028c 	.word	0x2000028c
 800a444:	200002e8 	.word	0x200002e8

0800a448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f103 0208 	add.w	r2, r3, #8
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f04f 32ff 	mov.w	r2, #4294967295
 800a460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f103 0208 	add.w	r2, r3, #8
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f103 0208 	add.w	r2, r3, #8
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
}
 800a4de:	bf00      	nop
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b085      	sub	sp, #20
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a500:	d103      	bne.n	800a50a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	e00c      	b.n	800a524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3308      	adds	r3, #8
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	e002      	b.n	800a518 <vListInsert+0x2e>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	429a      	cmp	r2, r3
 800a522:	d2f6      	bcs.n	800a512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	601a      	str	r2, [r3, #0]
}
 800a550:	bf00      	nop
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6892      	ldr	r2, [r2, #8]
 800a572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	6852      	ldr	r2, [r2, #4]
 800a57c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	429a      	cmp	r2, r3
 800a586:	d103      	bne.n	800a590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	1e5a      	subs	r2, r3, #1
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d109      	bne.n	800a5d8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	60bb      	str	r3, [r7, #8]
 800a5d6:	e7fe      	b.n	800a5d6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a5d8:	f002 fa58 	bl	800ca8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e4:	68f9      	ldr	r1, [r7, #12]
 800a5e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5e8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ec:	441a      	add	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a608:	3b01      	subs	r3, #1
 800a60a:	68f9      	ldr	r1, [r7, #12]
 800a60c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	441a      	add	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	22ff      	movs	r2, #255	; 0xff
 800a61c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	22ff      	movs	r2, #255	; 0xff
 800a624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d114      	bne.n	800a658 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d01a      	beq.n	800a66c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3310      	adds	r3, #16
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 f994 	bl	800b968 <xTaskRemoveFromEventList>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d012      	beq.n	800a66c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a646:	4b0d      	ldr	r3, [pc, #52]	; (800a67c <xQueueGenericReset+0xcc>)
 800a648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	e009      	b.n	800a66c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3310      	adds	r3, #16
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff fef3 	bl	800a448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3324      	adds	r3, #36	; 0x24
 800a666:	4618      	mov	r0, r3
 800a668:	f7ff feee 	bl	800a448 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a66c:	f002 fa3c 	bl	800cae8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a670:	2301      	movs	r3, #1
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08e      	sub	sp, #56	; 0x38
 800a684:	af02      	add	r7, sp, #8
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d109      	bne.n	800a6a8 <xQueueGenericCreateStatic+0x28>
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6a6:	e7fe      	b.n	800a6a6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d109      	bne.n	800a6c2 <xQueueGenericCreateStatic+0x42>
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d002      	beq.n	800a6ce <xQueueGenericCreateStatic+0x4e>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <xQueueGenericCreateStatic+0x52>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e000      	b.n	800a6d4 <xQueueGenericCreateStatic+0x54>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d109      	bne.n	800a6ec <xQueueGenericCreateStatic+0x6c>
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	623b      	str	r3, [r7, #32]
 800a6ea:	e7fe      	b.n	800a6ea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d102      	bne.n	800a6f8 <xQueueGenericCreateStatic+0x78>
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <xQueueGenericCreateStatic+0x7c>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e000      	b.n	800a6fe <xQueueGenericCreateStatic+0x7e>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d109      	bne.n	800a716 <xQueueGenericCreateStatic+0x96>
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	61fb      	str	r3, [r7, #28]
 800a714:	e7fe      	b.n	800a714 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a716:	2350      	movs	r3, #80	; 0x50
 800a718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2b50      	cmp	r3, #80	; 0x50
 800a71e:	d009      	beq.n	800a734 <xQueueGenericCreateStatic+0xb4>
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	61bb      	str	r3, [r7, #24]
 800a732:	e7fe      	b.n	800a732 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00d      	beq.n	800a75a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a740:	2201      	movs	r2, #1
 800a742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a746:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	4613      	mov	r3, r2
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	68b9      	ldr	r1, [r7, #8]
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f842 	bl	800a7de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3730      	adds	r7, #48	; 0x30
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08a      	sub	sp, #40	; 0x28
 800a768:	af02      	add	r7, sp, #8
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	4613      	mov	r3, r2
 800a770:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d109      	bne.n	800a78c <xQueueGenericCreate+0x28>
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	e7fe      	b.n	800a78a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a792:	2300      	movs	r3, #0
 800a794:	61fb      	str	r3, [r7, #28]
 800a796:	e004      	b.n	800a7a2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	fb02 f303 	mul.w	r3, r2, r3
 800a7a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	3350      	adds	r3, #80	; 0x50
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f002 fa8a 	bl	800ccc0 <pvPortMalloc>
 800a7ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00f      	beq.n	800a7d4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	3350      	adds	r3, #80	; 0x50
 800a7b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7c2:	79fa      	ldrb	r2, [r7, #7]
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	68b9      	ldr	r1, [r7, #8]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 f805 	bl	800a7de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
	}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3720      	adds	r7, #32
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d103      	bne.n	800a7fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	e002      	b.n	800a800 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a80c:	2101      	movs	r1, #1
 800a80e:	69b8      	ldr	r0, [r7, #24]
 800a810:	f7ff fece 	bl	800a5b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	78fa      	ldrb	r2, [r7, #3]
 800a818:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a81c:	bf00      	nop
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08e      	sub	sp, #56	; 0x38
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a832:	2300      	movs	r3, #0
 800a834:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d109      	bne.n	800a854 <xQueueGenericSend+0x30>
 800a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	62bb      	str	r3, [r7, #40]	; 0x28
 800a852:	e7fe      	b.n	800a852 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d103      	bne.n	800a862 <xQueueGenericSend+0x3e>
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <xQueueGenericSend+0x42>
 800a862:	2301      	movs	r3, #1
 800a864:	e000      	b.n	800a868 <xQueueGenericSend+0x44>
 800a866:	2300      	movs	r3, #0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d109      	bne.n	800a880 <xQueueGenericSend+0x5c>
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	627b      	str	r3, [r7, #36]	; 0x24
 800a87e:	e7fe      	b.n	800a87e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2b02      	cmp	r3, #2
 800a884:	d103      	bne.n	800a88e <xQueueGenericSend+0x6a>
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d101      	bne.n	800a892 <xQueueGenericSend+0x6e>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <xQueueGenericSend+0x70>
 800a892:	2300      	movs	r3, #0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d109      	bne.n	800a8ac <xQueueGenericSend+0x88>
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	623b      	str	r3, [r7, #32]
 800a8aa:	e7fe      	b.n	800a8aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8ac:	f001 fa18 	bl	800bce0 <xTaskGetSchedulerState>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d102      	bne.n	800a8bc <xQueueGenericSend+0x98>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <xQueueGenericSend+0x9c>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <xQueueGenericSend+0x9e>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d109      	bne.n	800a8da <xQueueGenericSend+0xb6>
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	61fb      	str	r3, [r7, #28]
 800a8d8:	e7fe      	b.n	800a8d8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8da:	f002 f8d7 	bl	800ca8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d302      	bcc.n	800a8f0 <xQueueGenericSend+0xcc>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d129      	bne.n	800a944 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	68b9      	ldr	r1, [r7, #8]
 800a8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8f6:	f000 fa7c 	bl	800adf2 <prvCopyDataToQueue>
 800a8fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b00      	cmp	r3, #0
 800a902:	d010      	beq.n	800a926 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	3324      	adds	r3, #36	; 0x24
 800a908:	4618      	mov	r0, r3
 800a90a:	f001 f82d 	bl	800b968 <xTaskRemoveFromEventList>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d013      	beq.n	800a93c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a914:	4b3f      	ldr	r3, [pc, #252]	; (800aa14 <xQueueGenericSend+0x1f0>)
 800a916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	e00a      	b.n	800a93c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d007      	beq.n	800a93c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a92c:	4b39      	ldr	r3, [pc, #228]	; (800aa14 <xQueueGenericSend+0x1f0>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a93c:	f002 f8d4 	bl	800cae8 <vPortExitCritical>
				return pdPASS;
 800a940:	2301      	movs	r3, #1
 800a942:	e063      	b.n	800aa0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a94a:	f002 f8cd 	bl	800cae8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	e05c      	b.n	800aa0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a958:	f107 0314 	add.w	r3, r7, #20
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 f865 	bl	800ba2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a962:	2301      	movs	r3, #1
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a966:	f002 f8bf 	bl	800cae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a96a:	f000 fddb 	bl	800b524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a96e:	f002 f88d 	bl	800ca8c <vPortEnterCritical>
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a978:	b25b      	sxtb	r3, r3
 800a97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97e:	d103      	bne.n	800a988 <xQueueGenericSend+0x164>
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a98e:	b25b      	sxtb	r3, r3
 800a990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a994:	d103      	bne.n	800a99e <xQueueGenericSend+0x17a>
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a99e:	f002 f8a3 	bl	800cae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9a2:	1d3a      	adds	r2, r7, #4
 800a9a4:	f107 0314 	add.w	r3, r7, #20
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 f854 	bl	800ba58 <xTaskCheckForTimeOut>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d124      	bne.n	800aa00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9b8:	f000 fb13 	bl	800afe2 <prvIsQueueFull>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d018      	beq.n	800a9f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	3310      	adds	r3, #16
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 ff7e 	bl	800b8cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d2:	f000 fa9e 	bl	800af12 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9d6:	f000 fdb3 	bl	800b540 <xTaskResumeAll>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f47f af7c 	bne.w	800a8da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a9e2:	4b0c      	ldr	r3, [pc, #48]	; (800aa14 <xQueueGenericSend+0x1f0>)
 800a9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	e772      	b.n	800a8da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9f6:	f000 fa8c 	bl	800af12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9fa:	f000 fda1 	bl	800b540 <xTaskResumeAll>
 800a9fe:	e76c      	b.n	800a8da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa02:	f000 fa86 	bl	800af12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa06:	f000 fd9b 	bl	800b540 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa0a:	2300      	movs	r3, #0
		}
	}
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3738      	adds	r7, #56	; 0x38
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	e000ed04 	.word	0xe000ed04

0800aa18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08e      	sub	sp, #56	; 0x38
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
 800aa24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d109      	bne.n	800aa44 <xQueueGenericSendFromISR+0x2c>
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
 800aa42:	e7fe      	b.n	800aa42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d103      	bne.n	800aa52 <xQueueGenericSendFromISR+0x3a>
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <xQueueGenericSendFromISR+0x3e>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e000      	b.n	800aa58 <xQueueGenericSendFromISR+0x40>
 800aa56:	2300      	movs	r3, #0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d109      	bne.n	800aa70 <xQueueGenericSendFromISR+0x58>
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	623b      	str	r3, [r7, #32]
 800aa6e:	e7fe      	b.n	800aa6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d103      	bne.n	800aa7e <xQueueGenericSendFromISR+0x66>
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d101      	bne.n	800aa82 <xQueueGenericSendFromISR+0x6a>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e000      	b.n	800aa84 <xQueueGenericSendFromISR+0x6c>
 800aa82:	2300      	movs	r3, #0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d109      	bne.n	800aa9c <xQueueGenericSendFromISR+0x84>
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	61fb      	str	r3, [r7, #28]
 800aa9a:	e7fe      	b.n	800aa9a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa9c:	f002 f8d2 	bl	800cc44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aaa0:	f3ef 8211 	mrs	r2, BASEPRI
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	61ba      	str	r2, [r7, #24]
 800aab6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aab8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d302      	bcc.n	800aace <xQueueGenericSendFromISR+0xb6>
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d12c      	bne.n	800ab28 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aade:	f000 f988 	bl	800adf2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aae2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaea:	d112      	bne.n	800ab12 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d016      	beq.n	800ab22 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf6:	3324      	adds	r3, #36	; 0x24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 ff35 	bl	800b968 <xTaskRemoveFromEventList>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00e      	beq.n	800ab22 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00b      	beq.n	800ab22 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	e007      	b.n	800ab22 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab16:	3301      	adds	r3, #1
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	b25a      	sxtb	r2, r3
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab22:	2301      	movs	r3, #1
 800ab24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ab26:	e001      	b.n	800ab2c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3738      	adds	r7, #56	; 0x38
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08c      	sub	sp, #48	; 0x30
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d109      	bne.n	800ab6e <xQueueReceive+0x2e>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	623b      	str	r3, [r7, #32]
 800ab6c:	e7fe      	b.n	800ab6c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d103      	bne.n	800ab7c <xQueueReceive+0x3c>
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d101      	bne.n	800ab80 <xQueueReceive+0x40>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e000      	b.n	800ab82 <xQueueReceive+0x42>
 800ab80:	2300      	movs	r3, #0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d109      	bne.n	800ab9a <xQueueReceive+0x5a>
 800ab86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	61fb      	str	r3, [r7, #28]
 800ab98:	e7fe      	b.n	800ab98 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab9a:	f001 f8a1 	bl	800bce0 <xTaskGetSchedulerState>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <xQueueReceive+0x6a>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <xQueueReceive+0x6e>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <xQueueReceive+0x70>
 800abae:	2300      	movs	r3, #0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d109      	bne.n	800abc8 <xQueueReceive+0x88>
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	61bb      	str	r3, [r7, #24]
 800abc6:	e7fe      	b.n	800abc6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800abc8:	f001 ff60 	bl	800ca8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01f      	beq.n	800ac18 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abdc:	f000 f973 	bl	800aec6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	1e5a      	subs	r2, r3, #1
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00f      	beq.n	800ac10 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	3310      	adds	r3, #16
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 feb7 	bl	800b968 <xTaskRemoveFromEventList>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d007      	beq.n	800ac10 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac00:	4b3c      	ldr	r3, [pc, #240]	; (800acf4 <xQueueReceive+0x1b4>)
 800ac02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac10:	f001 ff6a 	bl	800cae8 <vPortExitCritical>
				return pdPASS;
 800ac14:	2301      	movs	r3, #1
 800ac16:	e069      	b.n	800acec <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d103      	bne.n	800ac26 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac1e:	f001 ff63 	bl	800cae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac22:	2300      	movs	r3, #0
 800ac24:	e062      	b.n	800acec <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d106      	bne.n	800ac3a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac2c:	f107 0310 	add.w	r3, r7, #16
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fefb 	bl	800ba2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac36:	2301      	movs	r3, #1
 800ac38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac3a:	f001 ff55 	bl	800cae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac3e:	f000 fc71 	bl	800b524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac42:	f001 ff23 	bl	800ca8c <vPortEnterCritical>
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac4c:	b25b      	sxtb	r3, r3
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac52:	d103      	bne.n	800ac5c <xQueueReceive+0x11c>
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac62:	b25b      	sxtb	r3, r3
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac68:	d103      	bne.n	800ac72 <xQueueReceive+0x132>
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac72:	f001 ff39 	bl	800cae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac76:	1d3a      	adds	r2, r7, #4
 800ac78:	f107 0310 	add.w	r3, r7, #16
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 feea 	bl	800ba58 <xTaskCheckForTimeOut>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d123      	bne.n	800acd2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8c:	f000 f993 	bl	800afb6 <prvIsQueueEmpty>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d017      	beq.n	800acc6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	3324      	adds	r3, #36	; 0x24
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	4611      	mov	r1, r2
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fe14 	bl	800b8cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aca6:	f000 f934 	bl	800af12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acaa:	f000 fc49 	bl	800b540 <xTaskResumeAll>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d189      	bne.n	800abc8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800acb4:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <xQueueReceive+0x1b4>)
 800acb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	e780      	b.n	800abc8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acc8:	f000 f923 	bl	800af12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800accc:	f000 fc38 	bl	800b540 <xTaskResumeAll>
 800acd0:	e77a      	b.n	800abc8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800acd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acd4:	f000 f91d 	bl	800af12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acd8:	f000 fc32 	bl	800b540 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acde:	f000 f96a 	bl	800afb6 <prvIsQueueEmpty>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f43f af6f 	beq.w	800abc8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800acea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800acec:	4618      	mov	r0, r3
 800acee:	3730      	adds	r7, #48	; 0x30
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	e000ed04 	.word	0xe000ed04

0800acf8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08e      	sub	sp, #56	; 0x38
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d109      	bne.n	800ad22 <xQueueReceiveFromISR+0x2a>
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	623b      	str	r3, [r7, #32]
 800ad20:	e7fe      	b.n	800ad20 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d103      	bne.n	800ad30 <xQueueReceiveFromISR+0x38>
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <xQueueReceiveFromISR+0x3c>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e000      	b.n	800ad36 <xQueueReceiveFromISR+0x3e>
 800ad34:	2300      	movs	r3, #0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d109      	bne.n	800ad4e <xQueueReceiveFromISR+0x56>
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	61fb      	str	r3, [r7, #28]
 800ad4c:	e7fe      	b.n	800ad4c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad4e:	f001 ff79 	bl	800cc44 <vPortValidateInterruptPriority>
	__asm volatile
 800ad52:	f3ef 8211 	mrs	r2, BASEPRI
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	61ba      	str	r2, [r7, #24]
 800ad68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ad6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d02f      	beq.n	800adda <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad84:	68b9      	ldr	r1, [r7, #8]
 800ad86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad88:	f000 f89d 	bl	800aec6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	1e5a      	subs	r2, r3, #1
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ad94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9c:	d112      	bne.n	800adc4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d016      	beq.n	800add4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	3310      	adds	r3, #16
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 fddc 	bl	800b968 <xTaskRemoveFromEventList>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00e      	beq.n	800add4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00b      	beq.n	800add4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e007      	b.n	800add4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800adc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adc8:	3301      	adds	r3, #1
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	b25a      	sxtb	r2, r3
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800add4:	2301      	movs	r3, #1
 800add6:	637b      	str	r3, [r7, #52]	; 0x34
 800add8:	e001      	b.n	800adde <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800adda:	2300      	movs	r3, #0
 800addc:	637b      	str	r3, [r7, #52]	; 0x34
 800adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ade8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800adea:	4618      	mov	r0, r3
 800adec:	3738      	adds	r7, #56	; 0x38
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b086      	sub	sp, #24
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	60f8      	str	r0, [r7, #12]
 800adfa:	60b9      	str	r1, [r7, #8]
 800adfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adfe:	2300      	movs	r3, #0
 800ae00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10d      	bne.n	800ae2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d14d      	bne.n	800aeb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 ff7d 	bl	800bd1c <xTaskPriorityDisinherit>
 800ae22:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	605a      	str	r2, [r3, #4]
 800ae2a:	e043      	b.n	800aeb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d119      	bne.n	800ae66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6898      	ldr	r0, [r3, #8]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	f005 f8c3 	bl	800ffc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4a:	441a      	add	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	689a      	ldr	r2, [r3, #8]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d32b      	bcc.n	800aeb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	609a      	str	r2, [r3, #8]
 800ae64:	e026      	b.n	800aeb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	68d8      	ldr	r0, [r3, #12]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6e:	461a      	mov	r2, r3
 800ae70:	68b9      	ldr	r1, [r7, #8]
 800ae72:	f005 f8a9 	bl	800ffc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	68da      	ldr	r2, [r3, #12]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7e:	425b      	negs	r3, r3
 800ae80:	441a      	add	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d207      	bcs.n	800aea2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	425b      	negs	r3, r3
 800ae9c:	441a      	add	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d105      	bne.n	800aeb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aebc:	697b      	ldr	r3, [r7, #20]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d018      	beq.n	800af0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee0:	441a      	add	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68da      	ldr	r2, [r3, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d303      	bcc.n	800aefa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68d9      	ldr	r1, [r3, #12]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af02:	461a      	mov	r2, r3
 800af04:	6838      	ldr	r0, [r7, #0]
 800af06:	f005 f85f 	bl	800ffc8 <memcpy>
	}
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af1a:	f001 fdb7 	bl	800ca8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af24:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af26:	e011      	b.n	800af4c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d012      	beq.n	800af56 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3324      	adds	r3, #36	; 0x24
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fd17 	bl	800b968 <xTaskRemoveFromEventList>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af40:	f000 fdea 	bl	800bb18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af44:	7bfb      	ldrb	r3, [r7, #15]
 800af46:	3b01      	subs	r3, #1
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af50:	2b00      	cmp	r3, #0
 800af52:	dce9      	bgt.n	800af28 <prvUnlockQueue+0x16>
 800af54:	e000      	b.n	800af58 <prvUnlockQueue+0x46>
					break;
 800af56:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	22ff      	movs	r2, #255	; 0xff
 800af5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af60:	f001 fdc2 	bl	800cae8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af64:	f001 fd92 	bl	800ca8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af6e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af70:	e011      	b.n	800af96 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d012      	beq.n	800afa0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3310      	adds	r3, #16
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fcf2 	bl	800b968 <xTaskRemoveFromEventList>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af8a:	f000 fdc5 	bl	800bb18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af8e:	7bbb      	ldrb	r3, [r7, #14]
 800af90:	3b01      	subs	r3, #1
 800af92:	b2db      	uxtb	r3, r3
 800af94:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	dce9      	bgt.n	800af72 <prvUnlockQueue+0x60>
 800af9e:	e000      	b.n	800afa2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afa0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	22ff      	movs	r2, #255	; 0xff
 800afa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afaa:	f001 fd9d 	bl	800cae8 <vPortExitCritical>
}
 800afae:	bf00      	nop
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afbe:	f001 fd65 	bl	800ca8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d102      	bne.n	800afd0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afca:	2301      	movs	r3, #1
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e001      	b.n	800afd4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afd4:	f001 fd88 	bl	800cae8 <vPortExitCritical>

	return xReturn;
 800afd8:	68fb      	ldr	r3, [r7, #12]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b084      	sub	sp, #16
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afea:	f001 fd4f 	bl	800ca8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d102      	bne.n	800b000 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800affa:	2301      	movs	r3, #1
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	e001      	b.n	800b004 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b004:	f001 fd70 	bl	800cae8 <vPortExitCritical>

	return xReturn;
 800b008:	68fb      	ldr	r3, [r7, #12]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b01e:	2300      	movs	r3, #0
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	e014      	b.n	800b04e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b024:	4a0e      	ldr	r2, [pc, #56]	; (800b060 <vQueueAddToRegistry+0x4c>)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10b      	bne.n	800b048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b030:	490b      	ldr	r1, [pc, #44]	; (800b060 <vQueueAddToRegistry+0x4c>)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b03a:	4a09      	ldr	r2, [pc, #36]	; (800b060 <vQueueAddToRegistry+0x4c>)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	00db      	lsls	r3, r3, #3
 800b040:	4413      	add	r3, r2
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b046:	e005      	b.n	800b054 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3301      	adds	r3, #1
 800b04c:	60fb      	str	r3, [r7, #12]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2b07      	cmp	r3, #7
 800b052:	d9e7      	bls.n	800b024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b054:	bf00      	nop
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	200077a8 	.word	0x200077a8

0800b064 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b074:	f001 fd0a 	bl	800ca8c <vPortEnterCritical>
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b07e:	b25b      	sxtb	r3, r3
 800b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b084:	d103      	bne.n	800b08e <vQueueWaitForMessageRestricted+0x2a>
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b094:	b25b      	sxtb	r3, r3
 800b096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09a:	d103      	bne.n	800b0a4 <vQueueWaitForMessageRestricted+0x40>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0a4:	f001 fd20 	bl	800cae8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	3324      	adds	r3, #36	; 0x24
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 fc2b 	bl	800b914 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0be:	6978      	ldr	r0, [r7, #20]
 800b0c0:	f7ff ff27 	bl	800af12 <prvUnlockQueue>
	}
 800b0c4:	bf00      	nop
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08e      	sub	sp, #56	; 0x38
 800b0d0:	af04      	add	r7, sp, #16
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d109      	bne.n	800b0f4 <xTaskCreateStatic+0x28>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	623b      	str	r3, [r7, #32]
 800b0f2:	e7fe      	b.n	800b0f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d109      	bne.n	800b10e <xTaskCreateStatic+0x42>
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	61fb      	str	r3, [r7, #28]
 800b10c:	e7fe      	b.n	800b10c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b10e:	235c      	movs	r3, #92	; 0x5c
 800b110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b5c      	cmp	r3, #92	; 0x5c
 800b116:	d009      	beq.n	800b12c <xTaskCreateStatic+0x60>
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	e7fe      	b.n	800b12a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d01e      	beq.n	800b170 <xTaskCreateStatic+0xa4>
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	2b00      	cmp	r3, #0
 800b136:	d01b      	beq.n	800b170 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b140:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	2202      	movs	r2, #2
 800b146:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b14a:	2300      	movs	r3, #0
 800b14c:	9303      	str	r3, [sp, #12]
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	9302      	str	r3, [sp, #8]
 800b152:	f107 0314 	add.w	r3, r7, #20
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	68b9      	ldr	r1, [r7, #8]
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 f850 	bl	800b208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b16a:	f000 f8d3 	bl	800b314 <prvAddNewTaskToReadyList>
 800b16e:	e001      	b.n	800b174 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b174:	697b      	ldr	r3, [r7, #20]
	}
 800b176:	4618      	mov	r0, r3
 800b178:	3728      	adds	r7, #40	; 0x28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b08c      	sub	sp, #48	; 0x30
 800b182:	af04      	add	r7, sp, #16
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	603b      	str	r3, [r7, #0]
 800b18a:	4613      	mov	r3, r2
 800b18c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b18e:	88fb      	ldrh	r3, [r7, #6]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4618      	mov	r0, r3
 800b194:	f001 fd94 	bl	800ccc0 <pvPortMalloc>
 800b198:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00e      	beq.n	800b1be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b1a0:	205c      	movs	r0, #92	; 0x5c
 800b1a2:	f001 fd8d 	bl	800ccc0 <pvPortMalloc>
 800b1a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	631a      	str	r2, [r3, #48]	; 0x30
 800b1b4:	e005      	b.n	800b1c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1b6:	6978      	ldr	r0, [r7, #20]
 800b1b8:	f001 fe44 	bl	800ce44 <vPortFree>
 800b1bc:	e001      	b.n	800b1c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d017      	beq.n	800b1f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1d0:	88fa      	ldrh	r2, [r7, #6]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9303      	str	r3, [sp, #12]
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	9302      	str	r3, [sp, #8]
 800b1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68b9      	ldr	r1, [r7, #8]
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f000 f80e 	bl	800b208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1ec:	69f8      	ldr	r0, [r7, #28]
 800b1ee:	f000 f891 	bl	800b314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	61bb      	str	r3, [r7, #24]
 800b1f6:	e002      	b.n	800b1fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1fe:	69bb      	ldr	r3, [r7, #24]
	}
 800b200:	4618      	mov	r0, r3
 800b202:	3720      	adds	r7, #32
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b088      	sub	sp, #32
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	461a      	mov	r2, r3
 800b220:	21a5      	movs	r1, #165	; 0xa5
 800b222:	f004 fedc 	bl	800ffde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b230:	3b01      	subs	r3, #1
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	f023 0307 	bic.w	r3, r3, #7
 800b23e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	f003 0307 	and.w	r3, r3, #7
 800b246:	2b00      	cmp	r3, #0
 800b248:	d009      	beq.n	800b25e <prvInitialiseNewTask+0x56>
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e7fe      	b.n	800b25c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b25e:	2300      	movs	r3, #0
 800b260:	61fb      	str	r3, [r7, #28]
 800b262:	e012      	b.n	800b28a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	4413      	add	r3, r2
 800b26a:	7819      	ldrb	r1, [r3, #0]
 800b26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	4413      	add	r3, r2
 800b272:	3334      	adds	r3, #52	; 0x34
 800b274:	460a      	mov	r2, r1
 800b276:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	4413      	add	r3, r2
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d006      	beq.n	800b292 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	3301      	adds	r3, #1
 800b288:	61fb      	str	r3, [r7, #28]
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	2b0f      	cmp	r3, #15
 800b28e:	d9e9      	bls.n	800b264 <prvInitialiseNewTask+0x5c>
 800b290:	e000      	b.n	800b294 <prvInitialiseNewTask+0x8c>
		{
			break;
 800b292:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	2200      	movs	r2, #0
 800b298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	2b37      	cmp	r3, #55	; 0x37
 800b2a0:	d901      	bls.n	800b2a6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2a2:	2337      	movs	r3, #55	; 0x37
 800b2a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7ff f8e3 	bl	800a488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c4:	3318      	adds	r3, #24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff f8de 	bl	800a488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	68f9      	ldr	r1, [r7, #12]
 800b2f4:	69b8      	ldr	r0, [r7, #24]
 800b2f6:	f001 fa9f 	bl	800c838 <pxPortInitialiseStack>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b30a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b30c:	bf00      	nop
 800b30e:	3720      	adds	r7, #32
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b31c:	f001 fbb6 	bl	800ca8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b320:	4b2d      	ldr	r3, [pc, #180]	; (800b3d8 <prvAddNewTaskToReadyList+0xc4>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3301      	adds	r3, #1
 800b326:	4a2c      	ldr	r2, [pc, #176]	; (800b3d8 <prvAddNewTaskToReadyList+0xc4>)
 800b328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b32a:	4b2c      	ldr	r3, [pc, #176]	; (800b3dc <prvAddNewTaskToReadyList+0xc8>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d109      	bne.n	800b346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b332:	4a2a      	ldr	r2, [pc, #168]	; (800b3dc <prvAddNewTaskToReadyList+0xc8>)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b338:	4b27      	ldr	r3, [pc, #156]	; (800b3d8 <prvAddNewTaskToReadyList+0xc4>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d110      	bne.n	800b362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b340:	f000 fc0e 	bl	800bb60 <prvInitialiseTaskLists>
 800b344:	e00d      	b.n	800b362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b346:	4b26      	ldr	r3, [pc, #152]	; (800b3e0 <prvAddNewTaskToReadyList+0xcc>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d109      	bne.n	800b362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b34e:	4b23      	ldr	r3, [pc, #140]	; (800b3dc <prvAddNewTaskToReadyList+0xc8>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	429a      	cmp	r2, r3
 800b35a:	d802      	bhi.n	800b362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b35c:	4a1f      	ldr	r2, [pc, #124]	; (800b3dc <prvAddNewTaskToReadyList+0xc8>)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b362:	4b20      	ldr	r3, [pc, #128]	; (800b3e4 <prvAddNewTaskToReadyList+0xd0>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3301      	adds	r3, #1
 800b368:	4a1e      	ldr	r2, [pc, #120]	; (800b3e4 <prvAddNewTaskToReadyList+0xd0>)
 800b36a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b36c:	4b1d      	ldr	r3, [pc, #116]	; (800b3e4 <prvAddNewTaskToReadyList+0xd0>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b378:	4b1b      	ldr	r3, [pc, #108]	; (800b3e8 <prvAddNewTaskToReadyList+0xd4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d903      	bls.n	800b388 <prvAddNewTaskToReadyList+0x74>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b384:	4a18      	ldr	r2, [pc, #96]	; (800b3e8 <prvAddNewTaskToReadyList+0xd4>)
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4a15      	ldr	r2, [pc, #84]	; (800b3ec <prvAddNewTaskToReadyList+0xd8>)
 800b396:	441a      	add	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	3304      	adds	r3, #4
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	f7ff f87f 	bl	800a4a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3a4:	f001 fba0 	bl	800cae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3a8:	4b0d      	ldr	r3, [pc, #52]	; (800b3e0 <prvAddNewTaskToReadyList+0xcc>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00e      	beq.n	800b3ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3b0:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <prvAddNewTaskToReadyList+0xc8>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d207      	bcs.n	800b3ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b3be:	4b0c      	ldr	r3, [pc, #48]	; (800b3f0 <prvAddNewTaskToReadyList+0xdc>)
 800b3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3ce:	bf00      	nop
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20000bbc 	.word	0x20000bbc
 800b3dc:	200006e8 	.word	0x200006e8
 800b3e0:	20000bc8 	.word	0x20000bc8
 800b3e4:	20000bd8 	.word	0x20000bd8
 800b3e8:	20000bc4 	.word	0x20000bc4
 800b3ec:	200006ec 	.word	0x200006ec
 800b3f0:	e000ed04 	.word	0xe000ed04

0800b3f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d016      	beq.n	800b434 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b406:	4b13      	ldr	r3, [pc, #76]	; (800b454 <vTaskDelay+0x60>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d009      	beq.n	800b422 <vTaskDelay+0x2e>
 800b40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	60bb      	str	r3, [r7, #8]
 800b420:	e7fe      	b.n	800b420 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b422:	f000 f87f 	bl	800b524 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b426:	2100      	movs	r1, #0
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fea7 	bl	800c17c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b42e:	f000 f887 	bl	800b540 <xTaskResumeAll>
 800b432:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d107      	bne.n	800b44a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b43a:	4b07      	ldr	r3, [pc, #28]	; (800b458 <vTaskDelay+0x64>)
 800b43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b44a:	bf00      	nop
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	20000be4 	.word	0x20000be4
 800b458:	e000ed04 	.word	0xe000ed04

0800b45c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b462:	2300      	movs	r3, #0
 800b464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b466:	2300      	movs	r3, #0
 800b468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b46a:	463a      	mov	r2, r7
 800b46c:	1d39      	adds	r1, r7, #4
 800b46e:	f107 0308 	add.w	r3, r7, #8
 800b472:	4618      	mov	r0, r3
 800b474:	f7fe ffb4 	bl	800a3e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	9202      	str	r2, [sp, #8]
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	2300      	movs	r3, #0
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	2300      	movs	r3, #0
 800b488:	460a      	mov	r2, r1
 800b48a:	4920      	ldr	r1, [pc, #128]	; (800b50c <vTaskStartScheduler+0xb0>)
 800b48c:	4820      	ldr	r0, [pc, #128]	; (800b510 <vTaskStartScheduler+0xb4>)
 800b48e:	f7ff fe1d 	bl	800b0cc <xTaskCreateStatic>
 800b492:	4602      	mov	r2, r0
 800b494:	4b1f      	ldr	r3, [pc, #124]	; (800b514 <vTaskStartScheduler+0xb8>)
 800b496:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b498:	4b1e      	ldr	r3, [pc, #120]	; (800b514 <vTaskStartScheduler+0xb8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d002      	beq.n	800b4a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	617b      	str	r3, [r7, #20]
 800b4a4:	e001      	b.n	800b4aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d102      	bne.n	800b4b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4b0:	f000 feb8 	bl	800c224 <xTimerCreateTimerTask>
 800b4b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d115      	bne.n	800b4e8 <vTaskStartScheduler+0x8c>
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4ce:	4b12      	ldr	r3, [pc, #72]	; (800b518 <vTaskStartScheduler+0xbc>)
 800b4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4d6:	4b11      	ldr	r3, [pc, #68]	; (800b51c <vTaskStartScheduler+0xc0>)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b4dc:	4b10      	ldr	r3, [pc, #64]	; (800b520 <vTaskStartScheduler+0xc4>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4e2:	f001 fa35 	bl	800c950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4e6:	e00d      	b.n	800b504 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ee:	d109      	bne.n	800b504 <vTaskStartScheduler+0xa8>
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	60fb      	str	r3, [r7, #12]
 800b502:	e7fe      	b.n	800b502 <vTaskStartScheduler+0xa6>
}
 800b504:	bf00      	nop
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	0801004c 	.word	0x0801004c
 800b510:	0800bb31 	.word	0x0800bb31
 800b514:	20000be0 	.word	0x20000be0
 800b518:	20000bdc 	.word	0x20000bdc
 800b51c:	20000bc8 	.word	0x20000bc8
 800b520:	20000bc0 	.word	0x20000bc0

0800b524 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b528:	4b04      	ldr	r3, [pc, #16]	; (800b53c <vTaskSuspendAll+0x18>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3301      	adds	r3, #1
 800b52e:	4a03      	ldr	r2, [pc, #12]	; (800b53c <vTaskSuspendAll+0x18>)
 800b530:	6013      	str	r3, [r2, #0]
}
 800b532:	bf00      	nop
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	20000be4 	.word	0x20000be4

0800b540 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b54e:	4b41      	ldr	r3, [pc, #260]	; (800b654 <xTaskResumeAll+0x114>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d109      	bne.n	800b56a <xTaskResumeAll+0x2a>
 800b556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	e7fe      	b.n	800b568 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b56a:	f001 fa8f 	bl	800ca8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b56e:	4b39      	ldr	r3, [pc, #228]	; (800b654 <xTaskResumeAll+0x114>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3b01      	subs	r3, #1
 800b574:	4a37      	ldr	r2, [pc, #220]	; (800b654 <xTaskResumeAll+0x114>)
 800b576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b578:	4b36      	ldr	r3, [pc, #216]	; (800b654 <xTaskResumeAll+0x114>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d162      	bne.n	800b646 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b580:	4b35      	ldr	r3, [pc, #212]	; (800b658 <xTaskResumeAll+0x118>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d05e      	beq.n	800b646 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b588:	e02f      	b.n	800b5ea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b58a:	4b34      	ldr	r3, [pc, #208]	; (800b65c <xTaskResumeAll+0x11c>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	3318      	adds	r3, #24
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe ffe0 	bl	800a55c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe ffdb 	bl	800a55c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5aa:	4b2d      	ldr	r3, [pc, #180]	; (800b660 <xTaskResumeAll+0x120>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d903      	bls.n	800b5ba <xTaskResumeAll+0x7a>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	4a2a      	ldr	r2, [pc, #168]	; (800b660 <xTaskResumeAll+0x120>)
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5be:	4613      	mov	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4413      	add	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4a27      	ldr	r2, [pc, #156]	; (800b664 <xTaskResumeAll+0x124>)
 800b5c8:	441a      	add	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	f7fe ff66 	bl	800a4a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5da:	4b23      	ldr	r3, [pc, #140]	; (800b668 <xTaskResumeAll+0x128>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d302      	bcc.n	800b5ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b5e4:	4b21      	ldr	r3, [pc, #132]	; (800b66c <xTaskResumeAll+0x12c>)
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5ea:	4b1c      	ldr	r3, [pc, #112]	; (800b65c <xTaskResumeAll+0x11c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1cb      	bne.n	800b58a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5f8:	f000 fb4c 	bl	800bc94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b5fc:	4b1c      	ldr	r3, [pc, #112]	; (800b670 <xTaskResumeAll+0x130>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d010      	beq.n	800b62a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b608:	f000 f846 	bl	800b698 <xTaskIncrementTick>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d002      	beq.n	800b618 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b612:	4b16      	ldr	r3, [pc, #88]	; (800b66c <xTaskResumeAll+0x12c>)
 800b614:	2201      	movs	r2, #1
 800b616:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1f1      	bne.n	800b608 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b624:	4b12      	ldr	r3, [pc, #72]	; (800b670 <xTaskResumeAll+0x130>)
 800b626:	2200      	movs	r2, #0
 800b628:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b62a:	4b10      	ldr	r3, [pc, #64]	; (800b66c <xTaskResumeAll+0x12c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d009      	beq.n	800b646 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b636:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <xTaskResumeAll+0x134>)
 800b638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b646:	f001 fa4f 	bl	800cae8 <vPortExitCritical>

	return xAlreadyYielded;
 800b64a:	68bb      	ldr	r3, [r7, #8]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	20000be4 	.word	0x20000be4
 800b658:	20000bbc 	.word	0x20000bbc
 800b65c:	20000b7c 	.word	0x20000b7c
 800b660:	20000bc4 	.word	0x20000bc4
 800b664:	200006ec 	.word	0x200006ec
 800b668:	200006e8 	.word	0x200006e8
 800b66c:	20000bd0 	.word	0x20000bd0
 800b670:	20000bcc 	.word	0x20000bcc
 800b674:	e000ed04 	.word	0xe000ed04

0800b678 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b67e:	4b05      	ldr	r3, [pc, #20]	; (800b694 <xTaskGetTickCount+0x1c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b684:	687b      	ldr	r3, [r7, #4]
}
 800b686:	4618      	mov	r0, r3
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20000bc0 	.word	0x20000bc0

0800b698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a2:	4b51      	ldr	r3, [pc, #324]	; (800b7e8 <xTaskIncrementTick+0x150>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f040 808d 	bne.w	800b7c6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6ac:	4b4f      	ldr	r3, [pc, #316]	; (800b7ec <xTaskIncrementTick+0x154>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b6b4:	4a4d      	ldr	r2, [pc, #308]	; (800b7ec <xTaskIncrementTick+0x154>)
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d11f      	bne.n	800b700 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6c0:	4b4b      	ldr	r3, [pc, #300]	; (800b7f0 <xTaskIncrementTick+0x158>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d009      	beq.n	800b6de <xTaskIncrementTick+0x46>
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	603b      	str	r3, [r7, #0]
 800b6dc:	e7fe      	b.n	800b6dc <xTaskIncrementTick+0x44>
 800b6de:	4b44      	ldr	r3, [pc, #272]	; (800b7f0 <xTaskIncrementTick+0x158>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	60fb      	str	r3, [r7, #12]
 800b6e4:	4b43      	ldr	r3, [pc, #268]	; (800b7f4 <xTaskIncrementTick+0x15c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a41      	ldr	r2, [pc, #260]	; (800b7f0 <xTaskIncrementTick+0x158>)
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	4a41      	ldr	r2, [pc, #260]	; (800b7f4 <xTaskIncrementTick+0x15c>)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6013      	str	r3, [r2, #0]
 800b6f2:	4b41      	ldr	r3, [pc, #260]	; (800b7f8 <xTaskIncrementTick+0x160>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	4a3f      	ldr	r2, [pc, #252]	; (800b7f8 <xTaskIncrementTick+0x160>)
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	f000 faca 	bl	800bc94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b700:	4b3e      	ldr	r3, [pc, #248]	; (800b7fc <xTaskIncrementTick+0x164>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	429a      	cmp	r2, r3
 800b708:	d34e      	bcc.n	800b7a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b70a:	4b39      	ldr	r3, [pc, #228]	; (800b7f0 <xTaskIncrementTick+0x158>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d101      	bne.n	800b718 <xTaskIncrementTick+0x80>
 800b714:	2301      	movs	r3, #1
 800b716:	e000      	b.n	800b71a <xTaskIncrementTick+0x82>
 800b718:	2300      	movs	r3, #0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d004      	beq.n	800b728 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b71e:	4b37      	ldr	r3, [pc, #220]	; (800b7fc <xTaskIncrementTick+0x164>)
 800b720:	f04f 32ff 	mov.w	r2, #4294967295
 800b724:	601a      	str	r2, [r3, #0]
					break;
 800b726:	e03f      	b.n	800b7a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b728:	4b31      	ldr	r3, [pc, #196]	; (800b7f0 <xTaskIncrementTick+0x158>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d203      	bcs.n	800b748 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b740:	4a2e      	ldr	r2, [pc, #184]	; (800b7fc <xTaskIncrementTick+0x164>)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6013      	str	r3, [r2, #0]
						break;
 800b746:	e02f      	b.n	800b7a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fe ff05 	bl	800a55c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b756:	2b00      	cmp	r3, #0
 800b758:	d004      	beq.n	800b764 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	3318      	adds	r3, #24
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fefc 	bl	800a55c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b768:	4b25      	ldr	r3, [pc, #148]	; (800b800 <xTaskIncrementTick+0x168>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d903      	bls.n	800b778 <xTaskIncrementTick+0xe0>
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	4a22      	ldr	r2, [pc, #136]	; (800b800 <xTaskIncrementTick+0x168>)
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77c:	4613      	mov	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4a1f      	ldr	r2, [pc, #124]	; (800b804 <xTaskIncrementTick+0x16c>)
 800b786:	441a      	add	r2, r3
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	3304      	adds	r3, #4
 800b78c:	4619      	mov	r1, r3
 800b78e:	4610      	mov	r0, r2
 800b790:	f7fe fe87 	bl	800a4a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b798:	4b1b      	ldr	r3, [pc, #108]	; (800b808 <xTaskIncrementTick+0x170>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d3b3      	bcc.n	800b70a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7a6:	e7b0      	b.n	800b70a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7a8:	4b17      	ldr	r3, [pc, #92]	; (800b808 <xTaskIncrementTick+0x170>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ae:	4915      	ldr	r1, [pc, #84]	; (800b804 <xTaskIncrementTick+0x16c>)
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d907      	bls.n	800b7d0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e004      	b.n	800b7d0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b7c6:	4b11      	ldr	r3, [pc, #68]	; (800b80c <xTaskIncrementTick+0x174>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	4a0f      	ldr	r2, [pc, #60]	; (800b80c <xTaskIncrementTick+0x174>)
 800b7ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <xTaskIncrementTick+0x178>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b7dc:	697b      	ldr	r3, [r7, #20]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20000be4 	.word	0x20000be4
 800b7ec:	20000bc0 	.word	0x20000bc0
 800b7f0:	20000b74 	.word	0x20000b74
 800b7f4:	20000b78 	.word	0x20000b78
 800b7f8:	20000bd4 	.word	0x20000bd4
 800b7fc:	20000bdc 	.word	0x20000bdc
 800b800:	20000bc4 	.word	0x20000bc4
 800b804:	200006ec 	.word	0x200006ec
 800b808:	200006e8 	.word	0x200006e8
 800b80c:	20000bcc 	.word	0x20000bcc
 800b810:	20000bd0 	.word	0x20000bd0

0800b814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b81a:	4b27      	ldr	r3, [pc, #156]	; (800b8b8 <vTaskSwitchContext+0xa4>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b822:	4b26      	ldr	r3, [pc, #152]	; (800b8bc <vTaskSwitchContext+0xa8>)
 800b824:	2201      	movs	r2, #1
 800b826:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b828:	e040      	b.n	800b8ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b82a:	4b24      	ldr	r3, [pc, #144]	; (800b8bc <vTaskSwitchContext+0xa8>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b830:	4b23      	ldr	r3, [pc, #140]	; (800b8c0 <vTaskSwitchContext+0xac>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	e00f      	b.n	800b858 <vTaskSwitchContext+0x44>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d109      	bne.n	800b852 <vTaskSwitchContext+0x3e>
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	607b      	str	r3, [r7, #4]
 800b850:	e7fe      	b.n	800b850 <vTaskSwitchContext+0x3c>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3b01      	subs	r3, #1
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	491a      	ldr	r1, [pc, #104]	; (800b8c4 <vTaskSwitchContext+0xb0>)
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	4613      	mov	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	4413      	add	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	440b      	add	r3, r1
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d0e5      	beq.n	800b838 <vTaskSwitchContext+0x24>
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	4613      	mov	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4a13      	ldr	r2, [pc, #76]	; (800b8c4 <vTaskSwitchContext+0xb0>)
 800b878:	4413      	add	r3, r2
 800b87a:	60bb      	str	r3, [r7, #8]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	685a      	ldr	r2, [r3, #4]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	605a      	str	r2, [r3, #4]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	3308      	adds	r3, #8
 800b88e:	429a      	cmp	r2, r3
 800b890:	d104      	bne.n	800b89c <vTaskSwitchContext+0x88>
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	685a      	ldr	r2, [r3, #4]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	605a      	str	r2, [r3, #4]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	4a09      	ldr	r2, [pc, #36]	; (800b8c8 <vTaskSwitchContext+0xb4>)
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	4a06      	ldr	r2, [pc, #24]	; (800b8c0 <vTaskSwitchContext+0xac>)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6013      	str	r3, [r2, #0]
}
 800b8ac:	bf00      	nop
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	20000be4 	.word	0x20000be4
 800b8bc:	20000bd0 	.word	0x20000bd0
 800b8c0:	20000bc4 	.word	0x20000bc4
 800b8c4:	200006ec 	.word	0x200006ec
 800b8c8:	200006e8 	.word	0x200006e8

0800b8cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d109      	bne.n	800b8f0 <vTaskPlaceOnEventList+0x24>
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	60fb      	str	r3, [r7, #12]
 800b8ee:	e7fe      	b.n	800b8ee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8f0:	4b07      	ldr	r3, [pc, #28]	; (800b910 <vTaskPlaceOnEventList+0x44>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3318      	adds	r3, #24
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7fe fdf6 	bl	800a4ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8fe:	2101      	movs	r1, #1
 800b900:	6838      	ldr	r0, [r7, #0]
 800b902:	f000 fc3b 	bl	800c17c <prvAddCurrentTaskToDelayedList>
}
 800b906:	bf00      	nop
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	200006e8 	.word	0x200006e8

0800b914 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d109      	bne.n	800b93a <vTaskPlaceOnEventListRestricted+0x26>
 800b926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	617b      	str	r3, [r7, #20]
 800b938:	e7fe      	b.n	800b938 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b93a:	4b0a      	ldr	r3, [pc, #40]	; (800b964 <vTaskPlaceOnEventListRestricted+0x50>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	3318      	adds	r3, #24
 800b940:	4619      	mov	r1, r3
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7fe fdad 	bl	800a4a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b94e:	f04f 33ff 	mov.w	r3, #4294967295
 800b952:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	68b8      	ldr	r0, [r7, #8]
 800b958:	f000 fc10 	bl	800c17c <prvAddCurrentTaskToDelayedList>
	}
 800b95c:	bf00      	nop
 800b95e:	3718      	adds	r7, #24
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	200006e8 	.word	0x200006e8

0800b968 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d109      	bne.n	800b992 <xTaskRemoveFromEventList+0x2a>
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	e7fe      	b.n	800b990 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	3318      	adds	r3, #24
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe fde0 	bl	800a55c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b99c:	4b1d      	ldr	r3, [pc, #116]	; (800ba14 <xTaskRemoveFromEventList+0xac>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d11d      	bne.n	800b9e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe fdd7 	bl	800a55c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b2:	4b19      	ldr	r3, [pc, #100]	; (800ba18 <xTaskRemoveFromEventList+0xb0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d903      	bls.n	800b9c2 <xTaskRemoveFromEventList+0x5a>
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	4a16      	ldr	r2, [pc, #88]	; (800ba18 <xTaskRemoveFromEventList+0xb0>)
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4a13      	ldr	r2, [pc, #76]	; (800ba1c <xTaskRemoveFromEventList+0xb4>)
 800b9d0:	441a      	add	r2, r3
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4610      	mov	r0, r2
 800b9da:	f7fe fd62 	bl	800a4a2 <vListInsertEnd>
 800b9de:	e005      	b.n	800b9ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	3318      	adds	r3, #24
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	480e      	ldr	r0, [pc, #56]	; (800ba20 <xTaskRemoveFromEventList+0xb8>)
 800b9e8:	f7fe fd5b 	bl	800a4a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f0:	4b0c      	ldr	r3, [pc, #48]	; (800ba24 <xTaskRemoveFromEventList+0xbc>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d905      	bls.n	800ba06 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9fe:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <xTaskRemoveFromEventList+0xc0>)
 800ba00:	2201      	movs	r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	e001      	b.n	800ba0a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ba06:	2300      	movs	r3, #0
 800ba08:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ba0a:	697b      	ldr	r3, [r7, #20]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	20000be4 	.word	0x20000be4
 800ba18:	20000bc4 	.word	0x20000bc4
 800ba1c:	200006ec 	.word	0x200006ec
 800ba20:	20000b7c 	.word	0x20000b7c
 800ba24:	200006e8 	.word	0x200006e8
 800ba28:	20000bd0 	.word	0x20000bd0

0800ba2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba34:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <vTaskInternalSetTimeOutState+0x24>)
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <vTaskInternalSetTimeOutState+0x28>)
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	605a      	str	r2, [r3, #4]
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	20000bd4 	.word	0x20000bd4
 800ba54:	20000bc0 	.word	0x20000bc0

0800ba58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d109      	bne.n	800ba7c <xTaskCheckForTimeOut+0x24>
 800ba68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	e7fe      	b.n	800ba7a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d109      	bne.n	800ba96 <xTaskCheckForTimeOut+0x3e>
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e7fe      	b.n	800ba94 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ba96:	f000 fff9 	bl	800ca8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba9a:	4b1d      	ldr	r3, [pc, #116]	; (800bb10 <xTaskCheckForTimeOut+0xb8>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab2:	d102      	bne.n	800baba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	61fb      	str	r3, [r7, #28]
 800bab8:	e023      	b.n	800bb02 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4b15      	ldr	r3, [pc, #84]	; (800bb14 <xTaskCheckForTimeOut+0xbc>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d007      	beq.n	800bad6 <xTaskCheckForTimeOut+0x7e>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	69ba      	ldr	r2, [r7, #24]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d302      	bcc.n	800bad6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	61fb      	str	r3, [r7, #28]
 800bad4:	e015      	b.n	800bb02 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	429a      	cmp	r2, r3
 800bade:	d20b      	bcs.n	800baf8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	1ad2      	subs	r2, r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff ff9d 	bl	800ba2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800baf2:	2300      	movs	r3, #0
 800baf4:	61fb      	str	r3, [r7, #28]
 800baf6:	e004      	b.n	800bb02 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bafe:	2301      	movs	r3, #1
 800bb00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb02:	f000 fff1 	bl	800cae8 <vPortExitCritical>

	return xReturn;
 800bb06:	69fb      	ldr	r3, [r7, #28]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20000bc0 	.word	0x20000bc0
 800bb14:	20000bd4 	.word	0x20000bd4

0800bb18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb1c:	4b03      	ldr	r3, [pc, #12]	; (800bb2c <vTaskMissedYield+0x14>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
}
 800bb22:	bf00      	nop
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20000bd0 	.word	0x20000bd0

0800bb30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb38:	f000 f852 	bl	800bbe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb3c:	4b06      	ldr	r3, [pc, #24]	; (800bb58 <prvIdleTask+0x28>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d9f9      	bls.n	800bb38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb44:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <prvIdleTask+0x2c>)
 800bb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb54:	e7f0      	b.n	800bb38 <prvIdleTask+0x8>
 800bb56:	bf00      	nop
 800bb58:	200006ec 	.word	0x200006ec
 800bb5c:	e000ed04 	.word	0xe000ed04

0800bb60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb66:	2300      	movs	r3, #0
 800bb68:	607b      	str	r3, [r7, #4]
 800bb6a:	e00c      	b.n	800bb86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4a12      	ldr	r2, [pc, #72]	; (800bbc0 <prvInitialiseTaskLists+0x60>)
 800bb78:	4413      	add	r3, r2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fc64 	bl	800a448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3301      	adds	r3, #1
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b37      	cmp	r3, #55	; 0x37
 800bb8a:	d9ef      	bls.n	800bb6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb8c:	480d      	ldr	r0, [pc, #52]	; (800bbc4 <prvInitialiseTaskLists+0x64>)
 800bb8e:	f7fe fc5b 	bl	800a448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb92:	480d      	ldr	r0, [pc, #52]	; (800bbc8 <prvInitialiseTaskLists+0x68>)
 800bb94:	f7fe fc58 	bl	800a448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb98:	480c      	ldr	r0, [pc, #48]	; (800bbcc <prvInitialiseTaskLists+0x6c>)
 800bb9a:	f7fe fc55 	bl	800a448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb9e:	480c      	ldr	r0, [pc, #48]	; (800bbd0 <prvInitialiseTaskLists+0x70>)
 800bba0:	f7fe fc52 	bl	800a448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bba4:	480b      	ldr	r0, [pc, #44]	; (800bbd4 <prvInitialiseTaskLists+0x74>)
 800bba6:	f7fe fc4f 	bl	800a448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbaa:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <prvInitialiseTaskLists+0x78>)
 800bbac:	4a05      	ldr	r2, [pc, #20]	; (800bbc4 <prvInitialiseTaskLists+0x64>)
 800bbae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <prvInitialiseTaskLists+0x7c>)
 800bbb2:	4a05      	ldr	r2, [pc, #20]	; (800bbc8 <prvInitialiseTaskLists+0x68>)
 800bbb4:	601a      	str	r2, [r3, #0]
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200006ec 	.word	0x200006ec
 800bbc4:	20000b4c 	.word	0x20000b4c
 800bbc8:	20000b60 	.word	0x20000b60
 800bbcc:	20000b7c 	.word	0x20000b7c
 800bbd0:	20000b90 	.word	0x20000b90
 800bbd4:	20000ba8 	.word	0x20000ba8
 800bbd8:	20000b74 	.word	0x20000b74
 800bbdc:	20000b78 	.word	0x20000b78

0800bbe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbe6:	e019      	b.n	800bc1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbe8:	f000 ff50 	bl	800ca8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <prvCheckTasksWaitingTermination+0x4c>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fe fcaf 	bl	800a55c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <prvCheckTasksWaitingTermination+0x50>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3b01      	subs	r3, #1
 800bc04:	4a0a      	ldr	r2, [pc, #40]	; (800bc30 <prvCheckTasksWaitingTermination+0x50>)
 800bc06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <prvCheckTasksWaitingTermination+0x54>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <prvCheckTasksWaitingTermination+0x54>)
 800bc10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc12:	f000 ff69 	bl	800cae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f80e 	bl	800bc38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <prvCheckTasksWaitingTermination+0x54>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e1      	bne.n	800bbe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20000b90 	.word	0x20000b90
 800bc30:	20000bbc 	.word	0x20000bbc
 800bc34:	20000ba4 	.word	0x20000ba4

0800bc38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d108      	bne.n	800bc5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f001 f8f8 	bl	800ce44 <vPortFree>
				vPortFree( pxTCB );
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f001 f8f5 	bl	800ce44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc5a:	e017      	b.n	800bc8c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d103      	bne.n	800bc6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 f8ec 	bl	800ce44 <vPortFree>
	}
 800bc6c:	e00e      	b.n	800bc8c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d009      	beq.n	800bc8c <prvDeleteTCB+0x54>
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	e7fe      	b.n	800bc8a <prvDeleteTCB+0x52>
	}
 800bc8c:	bf00      	nop
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <prvResetNextTaskUnblockTime+0x44>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <prvResetNextTaskUnblockTime+0x14>
 800bca4:	2301      	movs	r3, #1
 800bca6:	e000      	b.n	800bcaa <prvResetNextTaskUnblockTime+0x16>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d004      	beq.n	800bcb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcae:	4b0b      	ldr	r3, [pc, #44]	; (800bcdc <prvResetNextTaskUnblockTime+0x48>)
 800bcb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcb6:	e008      	b.n	800bcca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bcb8:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <prvResetNextTaskUnblockTime+0x44>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	4a05      	ldr	r2, [pc, #20]	; (800bcdc <prvResetNextTaskUnblockTime+0x48>)
 800bcc8:	6013      	str	r3, [r2, #0]
}
 800bcca:	bf00      	nop
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	20000b74 	.word	0x20000b74
 800bcdc:	20000bdc 	.word	0x20000bdc

0800bce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bce6:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <xTaskGetSchedulerState+0x34>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d102      	bne.n	800bcf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	607b      	str	r3, [r7, #4]
 800bcf2:	e008      	b.n	800bd06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf4:	4b08      	ldr	r3, [pc, #32]	; (800bd18 <xTaskGetSchedulerState+0x38>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d102      	bne.n	800bd02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	607b      	str	r3, [r7, #4]
 800bd00:	e001      	b.n	800bd06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd06:	687b      	ldr	r3, [r7, #4]
	}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	20000bc8 	.word	0x20000bc8
 800bd18:	20000be4 	.word	0x20000be4

0800bd1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d054      	beq.n	800bddc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd32:	4b2d      	ldr	r3, [pc, #180]	; (800bde8 <xTaskPriorityDisinherit+0xcc>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d009      	beq.n	800bd50 <xTaskPriorityDisinherit+0x34>
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	e7fe      	b.n	800bd4e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d109      	bne.n	800bd6c <xTaskPriorityDisinherit+0x50>
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	60bb      	str	r3, [r7, #8]
 800bd6a:	e7fe      	b.n	800bd6a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd70:	1e5a      	subs	r2, r3, #1
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d02c      	beq.n	800bddc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d128      	bne.n	800bddc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fe fbe4 	bl	800a55c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdac:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <xTaskPriorityDisinherit+0xd0>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d903      	bls.n	800bdbc <xTaskPriorityDisinherit+0xa0>
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	4a0c      	ldr	r2, [pc, #48]	; (800bdec <xTaskPriorityDisinherit+0xd0>)
 800bdba:	6013      	str	r3, [r2, #0]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4a09      	ldr	r2, [pc, #36]	; (800bdf0 <xTaskPriorityDisinherit+0xd4>)
 800bdca:	441a      	add	r2, r3
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	f7fe fb65 	bl	800a4a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bddc:	697b      	ldr	r3, [r7, #20]
	}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	200006e8 	.word	0x200006e8
 800bdec:	20000bc4 	.word	0x20000bc4
 800bdf0:	200006ec 	.word	0x200006ec

0800bdf4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800be02:	f000 fe43 	bl	800ca8c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800be06:	4b26      	ldr	r3, [pc, #152]	; (800bea0 <xTaskNotifyWait+0xac>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b02      	cmp	r3, #2
 800be12:	d01a      	beq.n	800be4a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800be14:	4b22      	ldr	r3, [pc, #136]	; (800bea0 <xTaskNotifyWait+0xac>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	43d2      	mvns	r2, r2
 800be1e:	400a      	ands	r2, r1
 800be20:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800be22:	4b1f      	ldr	r3, [pc, #124]	; (800bea0 <xTaskNotifyWait+0xac>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2201      	movs	r2, #1
 800be28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00b      	beq.n	800be4a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be32:	2101      	movs	r1, #1
 800be34:	6838      	ldr	r0, [r7, #0]
 800be36:	f000 f9a1 	bl	800c17c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800be3a:	4b1a      	ldr	r3, [pc, #104]	; (800bea4 <xTaskNotifyWait+0xb0>)
 800be3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800be4a:	f000 fe4d 	bl	800cae8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800be4e:	f000 fe1d 	bl	800ca8c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d004      	beq.n	800be62 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800be58:	4b11      	ldr	r3, [pc, #68]	; (800bea0 <xTaskNotifyWait+0xac>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800be62:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <xTaskNotifyWait+0xac>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d002      	beq.n	800be76 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]
 800be74:	e008      	b.n	800be88 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800be76:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <xTaskNotifyWait+0xac>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	43d2      	mvns	r2, r2
 800be80:	400a      	ands	r2, r1
 800be82:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800be84:	2301      	movs	r3, #1
 800be86:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be88:	4b05      	ldr	r3, [pc, #20]	; (800bea0 <xTaskNotifyWait+0xac>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800be92:	f000 fe29 	bl	800cae8 <vPortExitCritical>

		return xReturn;
 800be96:	697b      	ldr	r3, [r7, #20]
	}
 800be98:	4618      	mov	r0, r3
 800be9a:	3718      	adds	r7, #24
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	200006e8 	.word	0x200006e8
 800bea4:	e000ed04 	.word	0xe000ed04

0800bea8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08a      	sub	sp, #40	; 0x28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	4613      	mov	r3, r2
 800beb6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800beb8:	2301      	movs	r3, #1
 800beba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d109      	bne.n	800bed6 <xTaskGenericNotify+0x2e>
 800bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	61bb      	str	r3, [r7, #24]
 800bed4:	e7fe      	b.n	800bed4 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800beda:	f000 fdd7 	bl	800ca8c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bef2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800befc:	79fb      	ldrb	r3, [r7, #7]
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d827      	bhi.n	800bf52 <xTaskGenericNotify+0xaa>
 800bf02:	a201      	add	r2, pc, #4	; (adr r2, 800bf08 <xTaskGenericNotify+0x60>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf53 	.word	0x0800bf53
 800bf0c:	0800bf1d 	.word	0x0800bf1d
 800bf10:	0800bf2b 	.word	0x0800bf2b
 800bf14:	0800bf37 	.word	0x0800bf37
 800bf18:	0800bf3f 	.word	0x0800bf3f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	431a      	orrs	r2, r3
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bf28:	e013      	b.n	800bf52 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bf2a:	6a3b      	ldr	r3, [r7, #32]
 800bf2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bf34:	e00d      	b.n	800bf52 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bf3c:	e009      	b.n	800bf52 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bf3e:	7ffb      	ldrb	r3, [r7, #31]
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d003      	beq.n	800bf4c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bf4a:	e001      	b.n	800bf50 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bf50:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bf52:	7ffb      	ldrb	r3, [r7, #31]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d139      	bne.n	800bfcc <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fe fafd 	bl	800a55c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf66:	4b1d      	ldr	r3, [pc, #116]	; (800bfdc <xTaskGenericNotify+0x134>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d903      	bls.n	800bf76 <xTaskGenericNotify+0xce>
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf72:	4a1a      	ldr	r2, [pc, #104]	; (800bfdc <xTaskGenericNotify+0x134>)
 800bf74:	6013      	str	r3, [r2, #0]
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4a17      	ldr	r2, [pc, #92]	; (800bfe0 <xTaskGenericNotify+0x138>)
 800bf84:	441a      	add	r2, r3
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	f7fe fa88 	bl	800a4a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d009      	beq.n	800bfae <xTaskGenericNotify+0x106>
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e7fe      	b.n	800bfac <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb2:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <xTaskGenericNotify+0x13c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d907      	bls.n	800bfcc <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bfbc:	4b0a      	ldr	r3, [pc, #40]	; (800bfe8 <xTaskGenericNotify+0x140>)
 800bfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bfcc:	f000 fd8c 	bl	800cae8 <vPortExitCritical>

		return xReturn;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3728      	adds	r7, #40	; 0x28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20000bc4 	.word	0x20000bc4
 800bfe0:	200006ec 	.word	0x200006ec
 800bfe4:	200006e8 	.word	0x200006e8
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08e      	sub	sp, #56	; 0x38
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	603b      	str	r3, [r7, #0]
 800bff8:	4613      	mov	r3, r2
 800bffa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bffc:	2301      	movs	r3, #1
 800bffe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <xTaskGenericNotifyFromISR+0x2e>
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
 800c018:	e7fe      	b.n	800c018 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c01a:	f000 fe13 	bl	800cc44 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c022:	f3ef 8211 	mrs	r2, BASEPRI
 800c026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02a:	f383 8811 	msr	BASEPRI, r3
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	623a      	str	r2, [r7, #32]
 800c038:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c03a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c03c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d003      	beq.n	800c04c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	2202      	movs	r2, #2
 800c05a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	2b04      	cmp	r3, #4
 800c062:	d829      	bhi.n	800c0b8 <xTaskGenericNotifyFromISR+0xcc>
 800c064:	a201      	add	r2, pc, #4	; (adr r2, 800c06c <xTaskGenericNotifyFromISR+0x80>)
 800c066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06a:	bf00      	nop
 800c06c:	0800c0b9 	.word	0x0800c0b9
 800c070:	0800c081 	.word	0x0800c081
 800c074:	0800c08f 	.word	0x0800c08f
 800c078:	0800c09b 	.word	0x0800c09b
 800c07c:	0800c0a3 	.word	0x0800c0a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	431a      	orrs	r2, r3
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c08c:	e014      	b.n	800c0b8 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c098:	e00e      	b.n	800c0b8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c0a0:	e00a      	b.n	800c0b8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c0a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d003      	beq.n	800c0b2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c0b0:	e001      	b.n	800c0b6 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c0b6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c0b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d146      	bne.n	800c14e <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	61bb      	str	r3, [r7, #24]
 800c0da:	e7fe      	b.n	800c0da <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0dc:	4b21      	ldr	r3, [pc, #132]	; (800c164 <xTaskGenericNotifyFromISR+0x178>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d11d      	bne.n	800c120 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe fa37 	bl	800a55c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f2:	4b1d      	ldr	r3, [pc, #116]	; (800c168 <xTaskGenericNotifyFromISR+0x17c>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d903      	bls.n	800c102 <xTaskGenericNotifyFromISR+0x116>
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	4a1a      	ldr	r2, [pc, #104]	; (800c168 <xTaskGenericNotifyFromISR+0x17c>)
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c106:	4613      	mov	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4a17      	ldr	r2, [pc, #92]	; (800c16c <xTaskGenericNotifyFromISR+0x180>)
 800c110:	441a      	add	r2, r3
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	3304      	adds	r3, #4
 800c116:	4619      	mov	r1, r3
 800c118:	4610      	mov	r0, r2
 800c11a:	f7fe f9c2 	bl	800a4a2 <vListInsertEnd>
 800c11e:	e005      	b.n	800c12c <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	3318      	adds	r3, #24
 800c124:	4619      	mov	r1, r3
 800c126:	4812      	ldr	r0, [pc, #72]	; (800c170 <xTaskGenericNotifyFromISR+0x184>)
 800c128:	f7fe f9bb 	bl	800a4a2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c130:	4b10      	ldr	r3, [pc, #64]	; (800c174 <xTaskGenericNotifyFromISR+0x188>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c136:	429a      	cmp	r2, r3
 800c138:	d909      	bls.n	800c14e <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d003      	beq.n	800c148 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c142:	2201      	movs	r2, #1
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	e002      	b.n	800c14e <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c148:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <xTaskGenericNotifyFromISR+0x18c>)
 800c14a:	2201      	movs	r2, #1
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c150:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3738      	adds	r7, #56	; 0x38
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	20000be4 	.word	0x20000be4
 800c168:	20000bc4 	.word	0x20000bc4
 800c16c:	200006ec 	.word	0x200006ec
 800c170:	20000b7c 	.word	0x20000b7c
 800c174:	200006e8 	.word	0x200006e8
 800c178:	20000bd0 	.word	0x20000bd0

0800c17c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c186:	4b21      	ldr	r3, [pc, #132]	; (800c20c <prvAddCurrentTaskToDelayedList+0x90>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c18c:	4b20      	ldr	r3, [pc, #128]	; (800c210 <prvAddCurrentTaskToDelayedList+0x94>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3304      	adds	r3, #4
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe f9e2 	bl	800a55c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19e:	d10a      	bne.n	800c1b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d007      	beq.n	800c1b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1a6:	4b1a      	ldr	r3, [pc, #104]	; (800c210 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4819      	ldr	r0, [pc, #100]	; (800c214 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1b0:	f7fe f977 	bl	800a4a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1b4:	e026      	b.n	800c204 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1be:	4b14      	ldr	r3, [pc, #80]	; (800c210 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d209      	bcs.n	800c1e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1ce:	4b12      	ldr	r3, [pc, #72]	; (800c218 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	4b0f      	ldr	r3, [pc, #60]	; (800c210 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4610      	mov	r0, r2
 800c1dc:	f7fe f985 	bl	800a4ea <vListInsert>
}
 800c1e0:	e010      	b.n	800c204 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1e2:	4b0e      	ldr	r3, [pc, #56]	; (800c21c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	4b0a      	ldr	r3, [pc, #40]	; (800c210 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	f7fe f97b 	bl	800a4ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1f4:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d202      	bcs.n	800c204 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1fe:	4a08      	ldr	r2, [pc, #32]	; (800c220 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	6013      	str	r3, [r2, #0]
}
 800c204:	bf00      	nop
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	20000bc0 	.word	0x20000bc0
 800c210:	200006e8 	.word	0x200006e8
 800c214:	20000ba8 	.word	0x20000ba8
 800c218:	20000b78 	.word	0x20000b78
 800c21c:	20000b74 	.word	0x20000b74
 800c220:	20000bdc 	.word	0x20000bdc

0800c224 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08a      	sub	sp, #40	; 0x28
 800c228:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c22a:	2300      	movs	r3, #0
 800c22c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c22e:	f000 fac3 	bl	800c7b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c232:	4b1c      	ldr	r3, [pc, #112]	; (800c2a4 <xTimerCreateTimerTask+0x80>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d021      	beq.n	800c27e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c23e:	2300      	movs	r3, #0
 800c240:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c242:	1d3a      	adds	r2, r7, #4
 800c244:	f107 0108 	add.w	r1, r7, #8
 800c248:	f107 030c 	add.w	r3, r7, #12
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe f8e1 	bl	800a414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c252:	6879      	ldr	r1, [r7, #4]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	9202      	str	r2, [sp, #8]
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	2302      	movs	r3, #2
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	2300      	movs	r3, #0
 800c262:	460a      	mov	r2, r1
 800c264:	4910      	ldr	r1, [pc, #64]	; (800c2a8 <xTimerCreateTimerTask+0x84>)
 800c266:	4811      	ldr	r0, [pc, #68]	; (800c2ac <xTimerCreateTimerTask+0x88>)
 800c268:	f7fe ff30 	bl	800b0cc <xTaskCreateStatic>
 800c26c:	4602      	mov	r2, r0
 800c26e:	4b10      	ldr	r3, [pc, #64]	; (800c2b0 <xTimerCreateTimerTask+0x8c>)
 800c270:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c272:	4b0f      	ldr	r3, [pc, #60]	; (800c2b0 <xTimerCreateTimerTask+0x8c>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d001      	beq.n	800c27e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c27a:	2301      	movs	r3, #1
 800c27c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d109      	bne.n	800c298 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	613b      	str	r3, [r7, #16]
 800c296:	e7fe      	b.n	800c296 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c298:	697b      	ldr	r3, [r7, #20]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3718      	adds	r7, #24
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20000c18 	.word	0x20000c18
 800c2a8:	08010054 	.word	0x08010054
 800c2ac:	0800c3cd 	.word	0x0800c3cd
 800c2b0:	20000c1c 	.word	0x20000c1c

0800c2b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b08a      	sub	sp, #40	; 0x28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d109      	bne.n	800c2e0 <xTimerGenericCommand+0x2c>
 800c2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	623b      	str	r3, [r7, #32]
 800c2de:	e7fe      	b.n	800c2de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c2e0:	4b19      	ldr	r3, [pc, #100]	; (800c348 <xTimerGenericCommand+0x94>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d02a      	beq.n	800c33e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	dc18      	bgt.n	800c32c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2fa:	f7ff fcf1 	bl	800bce0 <xTaskGetSchedulerState>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b02      	cmp	r3, #2
 800c302:	d109      	bne.n	800c318 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c304:	4b10      	ldr	r3, [pc, #64]	; (800c348 <xTimerGenericCommand+0x94>)
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	f107 0110 	add.w	r1, r7, #16
 800c30c:	2300      	movs	r3, #0
 800c30e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c310:	f7fe fa88 	bl	800a824 <xQueueGenericSend>
 800c314:	6278      	str	r0, [r7, #36]	; 0x24
 800c316:	e012      	b.n	800c33e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c318:	4b0b      	ldr	r3, [pc, #44]	; (800c348 <xTimerGenericCommand+0x94>)
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	f107 0110 	add.w	r1, r7, #16
 800c320:	2300      	movs	r3, #0
 800c322:	2200      	movs	r2, #0
 800c324:	f7fe fa7e 	bl	800a824 <xQueueGenericSend>
 800c328:	6278      	str	r0, [r7, #36]	; 0x24
 800c32a:	e008      	b.n	800c33e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c32c:	4b06      	ldr	r3, [pc, #24]	; (800c348 <xTimerGenericCommand+0x94>)
 800c32e:	6818      	ldr	r0, [r3, #0]
 800c330:	f107 0110 	add.w	r1, r7, #16
 800c334:	2300      	movs	r3, #0
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	f7fe fb6e 	bl	800aa18 <xQueueGenericSendFromISR>
 800c33c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c340:	4618      	mov	r0, r3
 800c342:	3728      	adds	r7, #40	; 0x28
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	20000c18 	.word	0x20000c18

0800c34c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b088      	sub	sp, #32
 800c350:	af02      	add	r7, sp, #8
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c356:	4b1c      	ldr	r3, [pc, #112]	; (800c3c8 <prvProcessExpiredTimer+0x7c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	3304      	adds	r3, #4
 800c364:	4618      	mov	r0, r3
 800c366:	f7fe f8f9 	bl	800a55c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	69db      	ldr	r3, [r3, #28]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d121      	bne.n	800c3b6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	699a      	ldr	r2, [r3, #24]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	18d1      	adds	r1, r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	6978      	ldr	r0, [r7, #20]
 800c380:	f000 f8c8 	bl	800c514 <prvInsertTimerInActiveList>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d015      	beq.n	800c3b6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c38a:	2300      	movs	r3, #0
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	2300      	movs	r3, #0
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	2100      	movs	r1, #0
 800c394:	6978      	ldr	r0, [r7, #20]
 800c396:	f7ff ff8d 	bl	800c2b4 <xTimerGenericCommand>
 800c39a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d109      	bne.n	800c3b6 <prvProcessExpiredTimer+0x6a>
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	e7fe      	b.n	800c3b4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ba:	6978      	ldr	r0, [r7, #20]
 800c3bc:	4798      	blx	r3
}
 800c3be:	bf00      	nop
 800c3c0:	3718      	adds	r7, #24
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20000c10 	.word	0x20000c10

0800c3cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3d4:	f107 0308 	add.w	r3, r7, #8
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f857 	bl	800c48c <prvGetNextExpireTime>
 800c3de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 f803 	bl	800c3f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c3ea:	f000 f8d5 	bl	800c598 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3ee:	e7f1      	b.n	800c3d4 <prvTimerTask+0x8>

0800c3f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c3fa:	f7ff f893 	bl	800b524 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3fe:	f107 0308 	add.w	r3, r7, #8
 800c402:	4618      	mov	r0, r3
 800c404:	f000 f866 	bl	800c4d4 <prvSampleTimeNow>
 800c408:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d130      	bne.n	800c472 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10a      	bne.n	800c42c <prvProcessTimerOrBlockTask+0x3c>
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d806      	bhi.n	800c42c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c41e:	f7ff f88f 	bl	800b540 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c422:	68f9      	ldr	r1, [r7, #12]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff ff91 	bl	800c34c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c42a:	e024      	b.n	800c476 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d008      	beq.n	800c444 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c432:	4b13      	ldr	r3, [pc, #76]	; (800c480 <prvProcessTimerOrBlockTask+0x90>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	bf0c      	ite	eq
 800c43c:	2301      	moveq	r3, #1
 800c43e:	2300      	movne	r3, #0
 800c440:	b2db      	uxtb	r3, r3
 800c442:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c444:	4b0f      	ldr	r3, [pc, #60]	; (800c484 <prvProcessTimerOrBlockTask+0x94>)
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	4619      	mov	r1, r3
 800c452:	f7fe fe07 	bl	800b064 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c456:	f7ff f873 	bl	800b540 <xTaskResumeAll>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10a      	bne.n	800c476 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c460:	4b09      	ldr	r3, [pc, #36]	; (800c488 <prvProcessTimerOrBlockTask+0x98>)
 800c462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c466:	601a      	str	r2, [r3, #0]
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	f3bf 8f6f 	isb	sy
}
 800c470:	e001      	b.n	800c476 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c472:	f7ff f865 	bl	800b540 <xTaskResumeAll>
}
 800c476:	bf00      	nop
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	20000c14 	.word	0x20000c14
 800c484:	20000c18 	.word	0x20000c18
 800c488:	e000ed04 	.word	0xe000ed04

0800c48c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c494:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <prvGetNextExpireTime+0x44>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	bf0c      	ite	eq
 800c49e:	2301      	moveq	r3, #1
 800c4a0:	2300      	movne	r3, #0
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d105      	bne.n	800c4be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4b2:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <prvGetNextExpireTime+0x44>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60fb      	str	r3, [r7, #12]
 800c4bc:	e001      	b.n	800c4c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3714      	adds	r7, #20
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	20000c10 	.word	0x20000c10

0800c4d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4dc:	f7ff f8cc 	bl	800b678 <xTaskGetTickCount>
 800c4e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4e2:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <prvSampleTimeNow+0x3c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d205      	bcs.n	800c4f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c4ec:	f000 f904 	bl	800c6f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e002      	b.n	800c4fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c4fe:	4a04      	ldr	r2, [pc, #16]	; (800c510 <prvSampleTimeNow+0x3c>)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c504:	68fb      	ldr	r3, [r7, #12]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20000c20 	.word	0x20000c20

0800c514 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c522:	2300      	movs	r3, #0
 800c524:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	429a      	cmp	r2, r3
 800c538:	d812      	bhi.n	800c560 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	429a      	cmp	r2, r3
 800c546:	d302      	bcc.n	800c54e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c548:	2301      	movs	r3, #1
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	e01b      	b.n	800c586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c54e:	4b10      	ldr	r3, [pc, #64]	; (800c590 <prvInsertTimerInActiveList+0x7c>)
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3304      	adds	r3, #4
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f7fd ffc6 	bl	800a4ea <vListInsert>
 800c55e:	e012      	b.n	800c586 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	429a      	cmp	r2, r3
 800c566:	d206      	bcs.n	800c576 <prvInsertTimerInActiveList+0x62>
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d302      	bcc.n	800c576 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e007      	b.n	800c586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c576:	4b07      	ldr	r3, [pc, #28]	; (800c594 <prvInsertTimerInActiveList+0x80>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3304      	adds	r3, #4
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7fd ffb2 	bl	800a4ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c586:	697b      	ldr	r3, [r7, #20]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3718      	adds	r7, #24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20000c14 	.word	0x20000c14
 800c594:	20000c10 	.word	0x20000c10

0800c598 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08e      	sub	sp, #56	; 0x38
 800c59c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c59e:	e099      	b.n	800c6d4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	da17      	bge.n	800c5d6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c5a6:	1d3b      	adds	r3, r7, #4
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d109      	bne.n	800c5c6 <prvProcessReceivedCommands+0x2e>
 800c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	61fb      	str	r3, [r7, #28]
 800c5c4:	e7fe      	b.n	800c5c4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5cc:	6850      	ldr	r0, [r2, #4]
 800c5ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5d0:	6892      	ldr	r2, [r2, #8]
 800c5d2:	4611      	mov	r1, r2
 800c5d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	db7a      	blt.n	800c6d2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fd ffb5 	bl	800a55c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5f2:	463b      	mov	r3, r7
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7ff ff6d 	bl	800c4d4 <prvSampleTimeNow>
 800c5fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b09      	cmp	r3, #9
 800c600:	d868      	bhi.n	800c6d4 <prvProcessReceivedCommands+0x13c>
 800c602:	a201      	add	r2, pc, #4	; (adr r2, 800c608 <prvProcessReceivedCommands+0x70>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c631 	.word	0x0800c631
 800c60c:	0800c631 	.word	0x0800c631
 800c610:	0800c631 	.word	0x0800c631
 800c614:	0800c6d5 	.word	0x0800c6d5
 800c618:	0800c68b 	.word	0x0800c68b
 800c61c:	0800c6c1 	.word	0x0800c6c1
 800c620:	0800c631 	.word	0x0800c631
 800c624:	0800c631 	.word	0x0800c631
 800c628:	0800c6d5 	.word	0x0800c6d5
 800c62c:	0800c68b 	.word	0x0800c68b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	18d1      	adds	r1, r2, r3
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c63e:	f7ff ff69 	bl	800c514 <prvInsertTimerInActiveList>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d045      	beq.n	800c6d4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c64e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d13d      	bne.n	800c6d4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	441a      	add	r2, r3
 800c660:	2300      	movs	r3, #0
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	2300      	movs	r3, #0
 800c666:	2100      	movs	r1, #0
 800c668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c66a:	f7ff fe23 	bl	800c2b4 <xTimerGenericCommand>
 800c66e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d12e      	bne.n	800c6d4 <prvProcessReceivedCommands+0x13c>
 800c676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	61bb      	str	r3, [r7, #24]
 800c688:	e7fe      	b.n	800c688 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c68a:	68ba      	ldr	r2, [r7, #8]
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d109      	bne.n	800c6ac <prvProcessReceivedCommands+0x114>
 800c698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	e7fe      	b.n	800c6aa <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ae:	699a      	ldr	r2, [r3, #24]
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b2:	18d1      	adds	r1, r2, r3
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ba:	f7ff ff2b 	bl	800c514 <prvInsertTimerInActiveList>
					break;
 800c6be:	e009      	b.n	800c6d4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d104      	bne.n	800c6d4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800c6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6cc:	f000 fbba 	bl	800ce44 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6d0:	e000      	b.n	800c6d4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c6d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6d4:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <prvProcessReceivedCommands+0x15c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	1d39      	adds	r1, r7, #4
 800c6da:	2200      	movs	r2, #0
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fe fa2f 	bl	800ab40 <xQueueReceive>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f47f af5b 	bne.w	800c5a0 <prvProcessReceivedCommands+0x8>
	}
}
 800c6ea:	bf00      	nop
 800c6ec:	3730      	adds	r7, #48	; 0x30
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	20000c18 	.word	0x20000c18

0800c6f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6fe:	e044      	b.n	800c78a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c700:	4b2b      	ldr	r3, [pc, #172]	; (800c7b0 <prvSwitchTimerLists+0xb8>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c70a:	4b29      	ldr	r3, [pc, #164]	; (800c7b0 <prvSwitchTimerLists+0xb8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	3304      	adds	r3, #4
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fd ff1f 	bl	800a55c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	69db      	ldr	r3, [r3, #28]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d12d      	bne.n	800c78a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	4413      	add	r3, r2
 800c736:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d90e      	bls.n	800c75e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c74c:	4b18      	ldr	r3, [pc, #96]	; (800c7b0 <prvSwitchTimerLists+0xb8>)
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3304      	adds	r3, #4
 800c754:	4619      	mov	r1, r3
 800c756:	4610      	mov	r0, r2
 800c758:	f7fd fec7 	bl	800a4ea <vListInsert>
 800c75c:	e015      	b.n	800c78a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c75e:	2300      	movs	r3, #0
 800c760:	9300      	str	r3, [sp, #0]
 800c762:	2300      	movs	r3, #0
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	2100      	movs	r1, #0
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f7ff fda3 	bl	800c2b4 <xTimerGenericCommand>
 800c76e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d109      	bne.n	800c78a <prvSwitchTimerLists+0x92>
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	603b      	str	r3, [r7, #0]
 800c788:	e7fe      	b.n	800c788 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c78a:	4b09      	ldr	r3, [pc, #36]	; (800c7b0 <prvSwitchTimerLists+0xb8>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1b5      	bne.n	800c700 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c794:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <prvSwitchTimerLists+0xb8>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c79a:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <prvSwitchTimerLists+0xbc>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a04      	ldr	r2, [pc, #16]	; (800c7b0 <prvSwitchTimerLists+0xb8>)
 800c7a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7a2:	4a04      	ldr	r2, [pc, #16]	; (800c7b4 <prvSwitchTimerLists+0xbc>)
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	6013      	str	r3, [r2, #0]
}
 800c7a8:	bf00      	nop
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	20000c10 	.word	0x20000c10
 800c7b4:	20000c14 	.word	0x20000c14

0800c7b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7be:	f000 f965 	bl	800ca8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7c2:	4b15      	ldr	r3, [pc, #84]	; (800c818 <prvCheckForValidListAndQueue+0x60>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d120      	bne.n	800c80c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7ca:	4814      	ldr	r0, [pc, #80]	; (800c81c <prvCheckForValidListAndQueue+0x64>)
 800c7cc:	f7fd fe3c 	bl	800a448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7d0:	4813      	ldr	r0, [pc, #76]	; (800c820 <prvCheckForValidListAndQueue+0x68>)
 800c7d2:	f7fd fe39 	bl	800a448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <prvCheckForValidListAndQueue+0x6c>)
 800c7d8:	4a10      	ldr	r2, [pc, #64]	; (800c81c <prvCheckForValidListAndQueue+0x64>)
 800c7da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7dc:	4b12      	ldr	r3, [pc, #72]	; (800c828 <prvCheckForValidListAndQueue+0x70>)
 800c7de:	4a10      	ldr	r2, [pc, #64]	; (800c820 <prvCheckForValidListAndQueue+0x68>)
 800c7e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	4b11      	ldr	r3, [pc, #68]	; (800c82c <prvCheckForValidListAndQueue+0x74>)
 800c7e8:	4a11      	ldr	r2, [pc, #68]	; (800c830 <prvCheckForValidListAndQueue+0x78>)
 800c7ea:	2110      	movs	r1, #16
 800c7ec:	200a      	movs	r0, #10
 800c7ee:	f7fd ff47 	bl	800a680 <xQueueGenericCreateStatic>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	4b08      	ldr	r3, [pc, #32]	; (800c818 <prvCheckForValidListAndQueue+0x60>)
 800c7f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c7f8:	4b07      	ldr	r3, [pc, #28]	; (800c818 <prvCheckForValidListAndQueue+0x60>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d005      	beq.n	800c80c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c800:	4b05      	ldr	r3, [pc, #20]	; (800c818 <prvCheckForValidListAndQueue+0x60>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	490b      	ldr	r1, [pc, #44]	; (800c834 <prvCheckForValidListAndQueue+0x7c>)
 800c806:	4618      	mov	r0, r3
 800c808:	f7fe fc04 	bl	800b014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c80c:	f000 f96c 	bl	800cae8 <vPortExitCritical>
}
 800c810:	bf00      	nop
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20000c18 	.word	0x20000c18
 800c81c:	20000be8 	.word	0x20000be8
 800c820:	20000bfc 	.word	0x20000bfc
 800c824:	20000c10 	.word	0x20000c10
 800c828:	20000c14 	.word	0x20000c14
 800c82c:	20000cc4 	.word	0x20000cc4
 800c830:	20000c24 	.word	0x20000c24
 800c834:	0801005c 	.word	0x0801005c

0800c838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3b04      	subs	r3, #4
 800c848:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3b04      	subs	r3, #4
 800c856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	f023 0201 	bic.w	r2, r3, #1
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3b04      	subs	r3, #4
 800c866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c868:	4a0c      	ldr	r2, [pc, #48]	; (800c89c <pxPortInitialiseStack+0x64>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3b14      	subs	r3, #20
 800c872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3b04      	subs	r3, #4
 800c87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f06f 0202 	mvn.w	r2, #2
 800c886:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3b20      	subs	r3, #32
 800c88c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c88e:	68fb      	ldr	r3, [r7, #12]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	0800c8a1 	.word	0x0800c8a1

0800c8a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8aa:	4b11      	ldr	r3, [pc, #68]	; (800c8f0 <prvTaskExitError+0x50>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b2:	d009      	beq.n	800c8c8 <prvTaskExitError+0x28>
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	e7fe      	b.n	800c8c6 <prvTaskExitError+0x26>
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8da:	bf00      	nop
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d0fc      	beq.n	800c8dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8e2:	bf00      	nop
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	2000000c 	.word	0x2000000c
	...

0800c900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c900:	4b07      	ldr	r3, [pc, #28]	; (800c920 <pxCurrentTCBConst2>)
 800c902:	6819      	ldr	r1, [r3, #0]
 800c904:	6808      	ldr	r0, [r1, #0]
 800c906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90a:	f380 8809 	msr	PSP, r0
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f04f 0000 	mov.w	r0, #0
 800c916:	f380 8811 	msr	BASEPRI, r0
 800c91a:	4770      	bx	lr
 800c91c:	f3af 8000 	nop.w

0800c920 <pxCurrentTCBConst2>:
 800c920:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop

0800c928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c928:	4808      	ldr	r0, [pc, #32]	; (800c94c <prvPortStartFirstTask+0x24>)
 800c92a:	6800      	ldr	r0, [r0, #0]
 800c92c:	6800      	ldr	r0, [r0, #0]
 800c92e:	f380 8808 	msr	MSP, r0
 800c932:	f04f 0000 	mov.w	r0, #0
 800c936:	f380 8814 	msr	CONTROL, r0
 800c93a:	b662      	cpsie	i
 800c93c:	b661      	cpsie	f
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	df00      	svc	0
 800c948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c94a:	bf00      	nop
 800c94c:	e000ed08 	.word	0xe000ed08

0800c950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c956:	4b44      	ldr	r3, [pc, #272]	; (800ca68 <xPortStartScheduler+0x118>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a44      	ldr	r2, [pc, #272]	; (800ca6c <xPortStartScheduler+0x11c>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d109      	bne.n	800c974 <xPortStartScheduler+0x24>
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	613b      	str	r3, [r7, #16]
 800c972:	e7fe      	b.n	800c972 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c974:	4b3c      	ldr	r3, [pc, #240]	; (800ca68 <xPortStartScheduler+0x118>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a3d      	ldr	r2, [pc, #244]	; (800ca70 <xPortStartScheduler+0x120>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d109      	bne.n	800c992 <xPortStartScheduler+0x42>
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	e7fe      	b.n	800c990 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c992:	4b38      	ldr	r3, [pc, #224]	; (800ca74 <xPortStartScheduler+0x124>)
 800c994:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	22ff      	movs	r2, #255	; 0xff
 800c9a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9ac:	78fb      	ldrb	r3, [r7, #3]
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	4b30      	ldr	r3, [pc, #192]	; (800ca78 <xPortStartScheduler+0x128>)
 800c9b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9ba:	4b30      	ldr	r3, [pc, #192]	; (800ca7c <xPortStartScheduler+0x12c>)
 800c9bc:	2207      	movs	r2, #7
 800c9be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9c0:	e009      	b.n	800c9d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c9c2:	4b2e      	ldr	r3, [pc, #184]	; (800ca7c <xPortStartScheduler+0x12c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	4a2c      	ldr	r2, [pc, #176]	; (800ca7c <xPortStartScheduler+0x12c>)
 800c9ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9de:	2b80      	cmp	r3, #128	; 0x80
 800c9e0:	d0ef      	beq.n	800c9c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9e2:	4b26      	ldr	r3, [pc, #152]	; (800ca7c <xPortStartScheduler+0x12c>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f1c3 0307 	rsb	r3, r3, #7
 800c9ea:	2b04      	cmp	r3, #4
 800c9ec:	d009      	beq.n	800ca02 <xPortStartScheduler+0xb2>
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	60bb      	str	r3, [r7, #8]
 800ca00:	e7fe      	b.n	800ca00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca02:	4b1e      	ldr	r3, [pc, #120]	; (800ca7c <xPortStartScheduler+0x12c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	021b      	lsls	r3, r3, #8
 800ca08:	4a1c      	ldr	r2, [pc, #112]	; (800ca7c <xPortStartScheduler+0x12c>)
 800ca0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca0c:	4b1b      	ldr	r3, [pc, #108]	; (800ca7c <xPortStartScheduler+0x12c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca14:	4a19      	ldr	r2, [pc, #100]	; (800ca7c <xPortStartScheduler+0x12c>)
 800ca16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca20:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <xPortStartScheduler+0x130>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a16      	ldr	r2, [pc, #88]	; (800ca80 <xPortStartScheduler+0x130>)
 800ca26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca2c:	4b14      	ldr	r3, [pc, #80]	; (800ca80 <xPortStartScheduler+0x130>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a13      	ldr	r2, [pc, #76]	; (800ca80 <xPortStartScheduler+0x130>)
 800ca32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca38:	f000 f8d6 	bl	800cbe8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca3c:	4b11      	ldr	r3, [pc, #68]	; (800ca84 <xPortStartScheduler+0x134>)
 800ca3e:	2200      	movs	r2, #0
 800ca40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca42:	f000 f8f5 	bl	800cc30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca46:	4b10      	ldr	r3, [pc, #64]	; (800ca88 <xPortStartScheduler+0x138>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a0f      	ldr	r2, [pc, #60]	; (800ca88 <xPortStartScheduler+0x138>)
 800ca4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca52:	f7ff ff69 	bl	800c928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca56:	f7fe fedd 	bl	800b814 <vTaskSwitchContext>
	prvTaskExitError();
 800ca5a:	f7ff ff21 	bl	800c8a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	e000ed00 	.word	0xe000ed00
 800ca6c:	410fc271 	.word	0x410fc271
 800ca70:	410fc270 	.word	0x410fc270
 800ca74:	e000e400 	.word	0xe000e400
 800ca78:	20000d14 	.word	0x20000d14
 800ca7c:	20000d18 	.word	0x20000d18
 800ca80:	e000ed20 	.word	0xe000ed20
 800ca84:	2000000c 	.word	0x2000000c
 800ca88:	e000ef34 	.word	0xe000ef34

0800ca8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800caa4:	4b0e      	ldr	r3, [pc, #56]	; (800cae0 <vPortEnterCritical+0x54>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3301      	adds	r3, #1
 800caaa:	4a0d      	ldr	r2, [pc, #52]	; (800cae0 <vPortEnterCritical+0x54>)
 800caac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800caae:	4b0c      	ldr	r3, [pc, #48]	; (800cae0 <vPortEnterCritical+0x54>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d10e      	bne.n	800cad4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cab6:	4b0b      	ldr	r3, [pc, #44]	; (800cae4 <vPortEnterCritical+0x58>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d009      	beq.n	800cad4 <vPortEnterCritical+0x48>
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	603b      	str	r3, [r7, #0]
 800cad2:	e7fe      	b.n	800cad2 <vPortEnterCritical+0x46>
	}
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	2000000c 	.word	0x2000000c
 800cae4:	e000ed04 	.word	0xe000ed04

0800cae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800caee:	4b11      	ldr	r3, [pc, #68]	; (800cb34 <vPortExitCritical+0x4c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d109      	bne.n	800cb0a <vPortExitCritical+0x22>
 800caf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	607b      	str	r3, [r7, #4]
 800cb08:	e7fe      	b.n	800cb08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800cb0a:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <vPortExitCritical+0x4c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	4a08      	ldr	r2, [pc, #32]	; (800cb34 <vPortExitCritical+0x4c>)
 800cb12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb14:	4b07      	ldr	r3, [pc, #28]	; (800cb34 <vPortExitCritical+0x4c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d104      	bne.n	800cb26 <vPortExitCritical+0x3e>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb26:	bf00      	nop
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	2000000c 	.word	0x2000000c
	...

0800cb40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb40:	f3ef 8009 	mrs	r0, PSP
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	4b15      	ldr	r3, [pc, #84]	; (800cba0 <pxCurrentTCBConst>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	f01e 0f10 	tst.w	lr, #16
 800cb50:	bf08      	it	eq
 800cb52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5a:	6010      	str	r0, [r2, #0]
 800cb5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb64:	f380 8811 	msr	BASEPRI, r0
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f7fe fe50 	bl	800b814 <vTaskSwitchContext>
 800cb74:	f04f 0000 	mov.w	r0, #0
 800cb78:	f380 8811 	msr	BASEPRI, r0
 800cb7c:	bc09      	pop	{r0, r3}
 800cb7e:	6819      	ldr	r1, [r3, #0]
 800cb80:	6808      	ldr	r0, [r1, #0]
 800cb82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb86:	f01e 0f10 	tst.w	lr, #16
 800cb8a:	bf08      	it	eq
 800cb8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb90:	f380 8809 	msr	PSP, r0
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	f3af 8000 	nop.w

0800cba0 <pxCurrentTCBConst>:
 800cba0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop

0800cba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cbc0:	f7fe fd6a 	bl	800b698 <xTaskIncrementTick>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d003      	beq.n	800cbd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cbca:	4b06      	ldr	r3, [pc, #24]	; (800cbe4 <SysTick_Handler+0x3c>)
 800cbcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd0:	601a      	str	r2, [r3, #0]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbdc:	bf00      	nop
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	e000ed04 	.word	0xe000ed04

0800cbe8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbe8:	b480      	push	{r7}
 800cbea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbec:	4b0b      	ldr	r3, [pc, #44]	; (800cc1c <vPortSetupTimerInterrupt+0x34>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbf2:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <vPortSetupTimerInterrupt+0x38>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbf8:	4b0a      	ldr	r3, [pc, #40]	; (800cc24 <vPortSetupTimerInterrupt+0x3c>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a0a      	ldr	r2, [pc, #40]	; (800cc28 <vPortSetupTimerInterrupt+0x40>)
 800cbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800cc02:	099b      	lsrs	r3, r3, #6
 800cc04:	4a09      	ldr	r2, [pc, #36]	; (800cc2c <vPortSetupTimerInterrupt+0x44>)
 800cc06:	3b01      	subs	r3, #1
 800cc08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc0a:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <vPortSetupTimerInterrupt+0x34>)
 800cc0c:	2207      	movs	r2, #7
 800cc0e:	601a      	str	r2, [r3, #0]
}
 800cc10:	bf00      	nop
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	e000e010 	.word	0xe000e010
 800cc20:	e000e018 	.word	0xe000e018
 800cc24:	20000000 	.word	0x20000000
 800cc28:	10624dd3 	.word	0x10624dd3
 800cc2c:	e000e014 	.word	0xe000e014

0800cc30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc40 <vPortEnableVFP+0x10>
 800cc34:	6801      	ldr	r1, [r0, #0]
 800cc36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc3a:	6001      	str	r1, [r0, #0]
 800cc3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc3e:	bf00      	nop
 800cc40:	e000ed88 	.word	0xe000ed88

0800cc44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc4a:	f3ef 8305 	mrs	r3, IPSR
 800cc4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2b0f      	cmp	r3, #15
 800cc54:	d913      	bls.n	800cc7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc56:	4a16      	ldr	r2, [pc, #88]	; (800ccb0 <vPortValidateInterruptPriority+0x6c>)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc60:	4b14      	ldr	r3, [pc, #80]	; (800ccb4 <vPortValidateInterruptPriority+0x70>)
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	7afa      	ldrb	r2, [r7, #11]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d209      	bcs.n	800cc7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	607b      	str	r3, [r7, #4]
 800cc7c:	e7fe      	b.n	800cc7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc7e:	4b0e      	ldr	r3, [pc, #56]	; (800ccb8 <vPortValidateInterruptPriority+0x74>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc86:	4b0d      	ldr	r3, [pc, #52]	; (800ccbc <vPortValidateInterruptPriority+0x78>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d909      	bls.n	800cca2 <vPortValidateInterruptPriority+0x5e>
 800cc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	603b      	str	r3, [r7, #0]
 800cca0:	e7fe      	b.n	800cca0 <vPortValidateInterruptPriority+0x5c>
	}
 800cca2:	bf00      	nop
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	e000e3f0 	.word	0xe000e3f0
 800ccb4:	20000d14 	.word	0x20000d14
 800ccb8:	e000ed0c 	.word	0xe000ed0c
 800ccbc:	20000d18 	.word	0x20000d18

0800ccc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08a      	sub	sp, #40	; 0x28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cccc:	f7fe fc2a 	bl	800b524 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccd0:	4b57      	ldr	r3, [pc, #348]	; (800ce30 <pvPortMalloc+0x170>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ccd8:	f000 f90c 	bl	800cef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccdc:	4b55      	ldr	r3, [pc, #340]	; (800ce34 <pvPortMalloc+0x174>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4013      	ands	r3, r2
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f040 808c 	bne.w	800ce02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d01c      	beq.n	800cd2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ccf0:	2208      	movs	r2, #8
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f003 0307 	and.w	r3, r3, #7
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d013      	beq.n	800cd2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f023 0307 	bic.w	r3, r3, #7
 800cd08:	3308      	adds	r3, #8
 800cd0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f003 0307 	and.w	r3, r3, #7
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d009      	beq.n	800cd2a <pvPortMalloc+0x6a>
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	617b      	str	r3, [r7, #20]
 800cd28:	e7fe      	b.n	800cd28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d068      	beq.n	800ce02 <pvPortMalloc+0x142>
 800cd30:	4b41      	ldr	r3, [pc, #260]	; (800ce38 <pvPortMalloc+0x178>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d863      	bhi.n	800ce02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd3a:	4b40      	ldr	r3, [pc, #256]	; (800ce3c <pvPortMalloc+0x17c>)
 800cd3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd3e:	4b3f      	ldr	r3, [pc, #252]	; (800ce3c <pvPortMalloc+0x17c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd44:	e004      	b.n	800cd50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d903      	bls.n	800cd62 <pvPortMalloc+0xa2>
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1f1      	bne.n	800cd46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd62:	4b33      	ldr	r3, [pc, #204]	; (800ce30 <pvPortMalloc+0x170>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d04a      	beq.n	800ce02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2208      	movs	r2, #8
 800cd72:	4413      	add	r3, r2
 800cd74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	6a3b      	ldr	r3, [r7, #32]
 800cd7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd80:	685a      	ldr	r2, [r3, #4]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	1ad2      	subs	r2, r2, r3
 800cd86:	2308      	movs	r3, #8
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d91e      	bls.n	800cdcc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4413      	add	r3, r2
 800cd94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	f003 0307 	and.w	r3, r3, #7
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d009      	beq.n	800cdb4 <pvPortMalloc+0xf4>
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	613b      	str	r3, [r7, #16]
 800cdb2:	e7fe      	b.n	800cdb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	1ad2      	subs	r2, r2, r3
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdc6:	69b8      	ldr	r0, [r7, #24]
 800cdc8:	f000 f8f6 	bl	800cfb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdcc:	4b1a      	ldr	r3, [pc, #104]	; (800ce38 <pvPortMalloc+0x178>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	1ad3      	subs	r3, r2, r3
 800cdd6:	4a18      	ldr	r2, [pc, #96]	; (800ce38 <pvPortMalloc+0x178>)
 800cdd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdda:	4b17      	ldr	r3, [pc, #92]	; (800ce38 <pvPortMalloc+0x178>)
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b18      	ldr	r3, [pc, #96]	; (800ce40 <pvPortMalloc+0x180>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d203      	bcs.n	800cdee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cde6:	4b14      	ldr	r3, [pc, #80]	; (800ce38 <pvPortMalloc+0x178>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a15      	ldr	r2, [pc, #84]	; (800ce40 <pvPortMalloc+0x180>)
 800cdec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	685a      	ldr	r2, [r3, #4]
 800cdf2:	4b10      	ldr	r3, [pc, #64]	; (800ce34 <pvPortMalloc+0x174>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce02:	f7fe fb9d 	bl	800b540 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	f003 0307 	and.w	r3, r3, #7
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d009      	beq.n	800ce24 <pvPortMalloc+0x164>
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	e7fe      	b.n	800ce22 <pvPortMalloc+0x162>
	return pvReturn;
 800ce24:	69fb      	ldr	r3, [r7, #28]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3728      	adds	r7, #40	; 0x28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	20004924 	.word	0x20004924
 800ce34:	20004930 	.word	0x20004930
 800ce38:	20004928 	.word	0x20004928
 800ce3c:	2000491c 	.word	0x2000491c
 800ce40:	2000492c 	.word	0x2000492c

0800ce44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d046      	beq.n	800cee4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce56:	2308      	movs	r3, #8
 800ce58:	425b      	negs	r3, r3
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	685a      	ldr	r2, [r3, #4]
 800ce68:	4b20      	ldr	r3, [pc, #128]	; (800ceec <vPortFree+0xa8>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d109      	bne.n	800ce86 <vPortFree+0x42>
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	60fb      	str	r3, [r7, #12]
 800ce84:	e7fe      	b.n	800ce84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d009      	beq.n	800cea2 <vPortFree+0x5e>
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	60bb      	str	r3, [r7, #8]
 800cea0:	e7fe      	b.n	800cea0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	685a      	ldr	r2, [r3, #4]
 800cea6:	4b11      	ldr	r3, [pc, #68]	; (800ceec <vPortFree+0xa8>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d019      	beq.n	800cee4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d115      	bne.n	800cee4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	4b0b      	ldr	r3, [pc, #44]	; (800ceec <vPortFree+0xa8>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	43db      	mvns	r3, r3
 800cec2:	401a      	ands	r2, r3
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cec8:	f7fe fb2c 	bl	800b524 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	685a      	ldr	r2, [r3, #4]
 800ced0:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <vPortFree+0xac>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4413      	add	r3, r2
 800ced6:	4a06      	ldr	r2, [pc, #24]	; (800cef0 <vPortFree+0xac>)
 800ced8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceda:	6938      	ldr	r0, [r7, #16]
 800cedc:	f000 f86c 	bl	800cfb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cee0:	f7fe fb2e 	bl	800b540 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cee4:	bf00      	nop
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20004930 	.word	0x20004930
 800cef0:	20004928 	.word	0x20004928

0800cef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cefa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cefe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf00:	4b27      	ldr	r3, [pc, #156]	; (800cfa0 <prvHeapInit+0xac>)
 800cf02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f003 0307 	and.w	r3, r3, #7
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00c      	beq.n	800cf28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3307      	adds	r3, #7
 800cf12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f023 0307 	bic.w	r3, r3, #7
 800cf1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	4a1f      	ldr	r2, [pc, #124]	; (800cfa0 <prvHeapInit+0xac>)
 800cf24:	4413      	add	r3, r2
 800cf26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf2c:	4a1d      	ldr	r2, [pc, #116]	; (800cfa4 <prvHeapInit+0xb0>)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf32:	4b1c      	ldr	r3, [pc, #112]	; (800cfa4 <prvHeapInit+0xb0>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	68ba      	ldr	r2, [r7, #8]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf40:	2208      	movs	r2, #8
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	1a9b      	subs	r3, r3, r2
 800cf46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f023 0307 	bic.w	r3, r3, #7
 800cf4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4a15      	ldr	r2, [pc, #84]	; (800cfa8 <prvHeapInit+0xb4>)
 800cf54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf56:	4b14      	ldr	r3, [pc, #80]	; (800cfa8 <prvHeapInit+0xb4>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf5e:	4b12      	ldr	r3, [pc, #72]	; (800cfa8 <prvHeapInit+0xb4>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2200      	movs	r2, #0
 800cf64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	1ad2      	subs	r2, r2, r3
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf74:	4b0c      	ldr	r3, [pc, #48]	; (800cfa8 <prvHeapInit+0xb4>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	4a0a      	ldr	r2, [pc, #40]	; (800cfac <prvHeapInit+0xb8>)
 800cf82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	4a09      	ldr	r2, [pc, #36]	; (800cfb0 <prvHeapInit+0xbc>)
 800cf8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf8c:	4b09      	ldr	r3, [pc, #36]	; (800cfb4 <prvHeapInit+0xc0>)
 800cf8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf92:	601a      	str	r2, [r3, #0]
}
 800cf94:	bf00      	nop
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	20000d1c 	.word	0x20000d1c
 800cfa4:	2000491c 	.word	0x2000491c
 800cfa8:	20004924 	.word	0x20004924
 800cfac:	2000492c 	.word	0x2000492c
 800cfb0:	20004928 	.word	0x20004928
 800cfb4:	20004930 	.word	0x20004930

0800cfb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfc0:	4b28      	ldr	r3, [pc, #160]	; (800d064 <prvInsertBlockIntoFreeList+0xac>)
 800cfc2:	60fb      	str	r3, [r7, #12]
 800cfc4:	e002      	b.n	800cfcc <prvInsertBlockIntoFreeList+0x14>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	60fb      	str	r3, [r7, #12]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d8f7      	bhi.n	800cfc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d108      	bne.n	800cffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	441a      	add	r2, r3
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	441a      	add	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d118      	bne.n	800d040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	4b15      	ldr	r3, [pc, #84]	; (800d068 <prvInsertBlockIntoFreeList+0xb0>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d00d      	beq.n	800d036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685a      	ldr	r2, [r3, #4]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	441a      	add	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	601a      	str	r2, [r3, #0]
 800d034:	e008      	b.n	800d048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d036:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <prvInsertBlockIntoFreeList+0xb0>)
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	601a      	str	r2, [r3, #0]
 800d03e:	e003      	b.n	800d048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d002      	beq.n	800d056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d056:	bf00      	nop
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	2000491c 	.word	0x2000491c
 800d068:	20004924 	.word	0x20004924

0800d06c <CRC16>:
	}
		return crc;
}

uint16_t CRC16(uint8_t *data,uint16_t len)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b087      	sub	sp, #28
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	807b      	strh	r3, [r7, #2]
	uint16_t crc=0xFFFF;
 800d078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d07c:	82fb      	strh	r3, [r7, #22]
	if (len>0)
 800d07e:	887b      	ldrh	r3, [r7, #2]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d02c      	beq.n	800d0de <CRC16+0x72>
	{
		for(int i=0; i<len; i++)
 800d084:	2300      	movs	r3, #0
 800d086:	613b      	str	r3, [r7, #16]
 800d088:	e023      	b.n	800d0d2 <CRC16+0x66>
		{
				crc=(uint16_t)(crc^(data[i]));
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	4413      	add	r3, r2
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	b29a      	uxth	r2, r3
 800d094:	8afb      	ldrh	r3, [r7, #22]
 800d096:	4053      	eors	r3, r2
 800d098:	82fb      	strh	r3, [r7, #22]
				for(int j=0; j<8; j++)
 800d09a:	2300      	movs	r3, #0
 800d09c:	60fb      	str	r3, [r7, #12]
 800d09e:	e012      	b.n	800d0c6 <CRC16+0x5a>
				{
						crc=(crc&1)!=0 ? (uint16_t)((crc>>1)^0xA001) : (uint16_t)(crc>>1);
 800d0a0:	8afb      	ldrh	r3, [r7, #22]
 800d0a2:	f003 0301 	and.w	r3, r3, #1
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d006      	beq.n	800d0b8 <CRC16+0x4c>
 800d0aa:	8afb      	ldrh	r3, [r7, #22]
 800d0ac:	085b      	lsrs	r3, r3, #1
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	4b0e      	ldr	r3, [pc, #56]	; (800d0ec <CRC16+0x80>)
 800d0b2:	4053      	eors	r3, r2
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	e002      	b.n	800d0be <CRC16+0x52>
 800d0b8:	8afb      	ldrh	r3, [r7, #22]
 800d0ba:	085b      	lsrs	r3, r3, #1
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	82fb      	strh	r3, [r7, #22]
				for(int j=0; j<8; j++)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	60fb      	str	r3, [r7, #12]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b07      	cmp	r3, #7
 800d0ca:	dde9      	ble.n	800d0a0 <CRC16+0x34>
		for(int i=0; i<len; i++)
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	613b      	str	r3, [r7, #16]
 800d0d2:	887b      	ldrh	r3, [r7, #2]
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	dbd7      	blt.n	800d08a <CRC16+0x1e>
				}
		}
		return crc;
 800d0da:	8afb      	ldrh	r3, [r7, #22]
 800d0dc:	e000      	b.n	800d0e0 <CRC16+0x74>
}
	return 0;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	371c      	adds	r7, #28
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	ffffa001 	.word	0xffffa001

0800d0f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

}
*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance==CAN1)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a0b      	ldr	r2, [pc, #44]	; (800d12c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d10f      	bne.n	800d122 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
  {
		HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&can_msg.RxHead,can_msg.RxBuffer);
 800d102:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800d104:	4a0b      	ldr	r2, [pc, #44]	; (800d134 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800d106:	2100      	movs	r1, #0
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7f5 fc11 	bl	8002930 <HAL_CAN_GetRxMessage>
		can_msg.hcan=hcan;
 800d10e:	4a0a      	ldr	r2, [pc, #40]	; (800d138 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6013      	str	r3, [r2, #0]
		osMessageQueuePut(canMsgQueueHandle, &can_msg, 0, 0);
 800d114:	4b09      	ldr	r3, [pc, #36]	; (800d13c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800d116:	6818      	ldr	r0, [r3, #0]
 800d118:	2300      	movs	r3, #0
 800d11a:	2200      	movs	r2, #0
 800d11c:	4906      	ldr	r1, [pc, #24]	; (800d138 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800d11e:	f7fd f879 	bl	800a214 <osMessageQueuePut>
  }
}
 800d122:	bf00      	nop
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	40006400 	.word	0x40006400
 800d130:	200086b0 	.word	0x200086b0
 800d134:	20008694 	.word	0x20008694
 800d138:	20008690 	.word	0x20008690
 800d13c:	20004b58 	.word	0x20004b58

0800d140 <DMATransferComplete>:
  }
}
*/
//memory to  memory DMA complete callback
void DMATransferComplete(DMA_HandleTypeDef *hdma)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
	//MEM-TO-MEMÍê³Éºó·¢ËÍÍ¨Öª->ADC´¦ÀíÈÎÎñ
	osThreadFlagsSet(adcTaskHandle,0x01U);
 800d148:	4b04      	ldr	r3, [pc, #16]	; (800d15c <DMATransferComplete+0x1c>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2101      	movs	r1, #1
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fc feb6 	bl	8009ec0 <osThreadFlagsSet>
}
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	20004b54 	.word	0x20004b54

0800d160 <HAL_ADC_ConvCpltCallback>:

//ADC DMA´«ÊäÍê
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream1, (uint32_t)ADC_DMA_BUF, (uint32_t)FFT_ALL_IN, ADC_NUMBER*NPT);//use FFT
 800d168:	4905      	ldr	r1, [pc, #20]	; (800d180 <HAL_ADC_ConvCpltCallback+0x20>)
 800d16a:	4a06      	ldr	r2, [pc, #24]	; (800d184 <HAL_ADC_ConvCpltCallback+0x24>)
 800d16c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d170:	4805      	ldr	r0, [pc, #20]	; (800d188 <HAL_ADC_ConvCpltCallback+0x28>)
 800d172:	f7f6 f9f7 	bl	8003564 <HAL_DMA_Start_IT>
//		AllSampleBuf[i]=sum/FNT;
//
//		//AllSampleBuf[i]=ADC_DMA_BUF[i];
//	}

}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	20008088 	.word	0x20008088
 800d184:	2000848c 	.word	0x2000848c
 800d188:	20004a34 	.word	0x20004a34

0800d18c <UART1_IDLECallBack>:
	}
}
*/
//´®¿Ú¿ÕÏÐÖÐ¶Ï
void UART1_IDLECallBack(void)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800d192:	4b19      	ldr	r3, [pc, #100]	; (800d1f8 <UART1_IDLECallBack+0x6c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0310 	and.w	r3, r3, #16
 800d19c:	2b10      	cmp	r3, #16
 800d19e:	d127      	bne.n	800d1f0 <UART1_IDLECallBack+0x64>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	4b14      	ldr	r3, [pc, #80]	; (800d1f8 <UART1_IDLECallBack+0x6c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	603b      	str	r3, [r7, #0]
 800d1ac:	4b12      	ldr	r3, [pc, #72]	; (800d1f8 <UART1_IDLECallBack+0x6c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	603b      	str	r3, [r7, #0]
 800d1b4:	683b      	ldr	r3, [r7, #0]
		HAL_UART_DMAStop(&huart1);
 800d1b6:	4810      	ldr	r0, [pc, #64]	; (800d1f8 <UART1_IDLECallBack+0x6c>)
 800d1b8:	f7f9 fbb4 	bl	8006924 <HAL_UART_DMAStop>
		UsartType1.UsartHandle=&huart1;
 800d1bc:	4b0f      	ldr	r3, [pc, #60]	; (800d1fc <UART1_IDLECallBack+0x70>)
 800d1be:	4a0e      	ldr	r2, [pc, #56]	; (800d1f8 <UART1_IDLECallBack+0x6c>)
 800d1c0:	601a      	str	r2, [r3, #0]
		UsartType1.rx_len =  USART_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 800d1c2:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <UART1_IDLECallBack+0x6c>)
 800d1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	4b0a      	ldr	r3, [pc, #40]	; (800d1fc <UART1_IDLECallBack+0x70>)
 800d1d4:	80da      	strh	r2, [r3, #6]
		HAL_UART_Receive_DMA(&huart1,UsartType1.RxBuf,USART_BUF_SIZE);
 800d1d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1da:	4909      	ldr	r1, [pc, #36]	; (800d200 <UART1_IDLECallBack+0x74>)
 800d1dc:	4806      	ldr	r0, [pc, #24]	; (800d1f8 <UART1_IDLECallBack+0x6c>)
 800d1de:	f7f9 fb21 	bl	8006824 <HAL_UART_Receive_DMA>
		uint32_t flag=osThreadFlagsSet(usart1TaskHandle,0x01U);
 800d1e2:	4b08      	ldr	r3, [pc, #32]	; (800d204 <UART1_IDLECallBack+0x78>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2101      	movs	r1, #1
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fc fe69 	bl	8009ec0 <osThreadFlagsSet>
 800d1ee:	6078      	str	r0, [r7, #4]
//		HAL_UART_Transmit(&huart1,UsartType1.RxBuf,UsartType1.rx_len,HAL_MAX_DELAY);
//		printf("flag=%ld\n",flag);
	}

}
 800d1f0:	bf00      	nop
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	20007764 	.word	0x20007764
 800d1fc:	20008b10 	.word	0x20008b10
 800d200:	20008b18 	.word	0x20008b18
 800d204:	20004b60 	.word	0x20004b60

0800d208 <HAL_TIM_IC_CaptureCallback>:
		TimUpdateFlag[chn]=0;
}
*/
//²¶»ñ»Øµ÷º¯Êý
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
//	uint32_t temp;
//	__HAL_TIM_GET_COMPARE(htim->Instance,TIM_CHANNEL_1);
	if(htim->Instance==TIM4)//tim4 16bit
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a24      	ldr	r2, [pc, #144]	; (800d2a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d127      	bne.n	800d26a <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4)//±ÃÅ¤¾Ø
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	7f1b      	ldrb	r3, [r3, #28]
 800d21e:	2b08      	cmp	r3, #8
 800d220:	d105      	bne.n	800d22e <HAL_TIM_IC_CaptureCallback+0x26>
		{
			PL_CNT1++;
 800d222:	4b22      	ldr	r3, [pc, #136]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d224:	881b      	ldrh	r3, [r3, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	b29a      	uxth	r2, r3
 800d22a:	4b20      	ldr	r3, [pc, #128]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d22c:	801a      	strh	r2, [r3, #0]
			//temp=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_4);
			//calcperiod(0,temp);
		}
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_3)//±Ã×ªËÙ
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	7f1b      	ldrb	r3, [r3, #28]
 800d232:	2b04      	cmp	r3, #4
 800d234:	d105      	bne.n	800d242 <HAL_TIM_IC_CaptureCallback+0x3a>
		{
			PL_CNT2++;
 800d236:	4b1d      	ldr	r3, [pc, #116]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d238:	885b      	ldrh	r3, [r3, #2]
 800d23a:	3301      	adds	r3, #1
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	4b1b      	ldr	r3, [pc, #108]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d240:	805a      	strh	r2, [r3, #2]
			//temp=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_3);
			//calcperiod(1,temp);
		}
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)//Âí´ïÅ¤¾Ø
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	7f1b      	ldrb	r3, [r3, #28]
 800d246:	2b02      	cmp	r3, #2
 800d248:	d105      	bne.n	800d256 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			PL_CNT3++;
 800d24a:	4b18      	ldr	r3, [pc, #96]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d24c:	889b      	ldrh	r3, [r3, #4]
 800d24e:	3301      	adds	r3, #1
 800d250:	b29a      	uxth	r2, r3
 800d252:	4b16      	ldr	r3, [pc, #88]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d254:	809a      	strh	r2, [r3, #4]
			//temp=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_2);
			//calcperiod(2,temp);
		}
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)//Âí´ï×ªËÙ
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	7f1b      	ldrb	r3, [r3, #28]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d105      	bne.n	800d26a <HAL_TIM_IC_CaptureCallback+0x62>
		{
			PL_CNT4++;
 800d25e:	4b13      	ldr	r3, [pc, #76]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d260:	88db      	ldrh	r3, [r3, #6]
 800d262:	3301      	adds	r3, #1
 800d264:	b29a      	uxth	r2, r3
 800d266:	4b11      	ldr	r3, [pc, #68]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d268:	80da      	strh	r2, [r3, #6]
			//temp=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
			//calcperiod(3,temp);
		}
	}

	if(htim->Instance==TIM3)//tim3 16bit
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4a10      	ldr	r2, [pc, #64]	; (800d2b0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d113      	bne.n	800d29c <HAL_TIM_IC_CaptureCallback+0x94>
	{
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7f1b      	ldrb	r3, [r3, #28]
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d105      	bne.n	800d288 <HAL_TIM_IC_CaptureCallback+0x80>
		{
			PL_CNT5++;
 800d27c:	4b0b      	ldr	r3, [pc, #44]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d27e:	891b      	ldrh	r3, [r3, #8]
 800d280:	3301      	adds	r3, #1
 800d282:	b29a      	uxth	r2, r3
 800d284:	4b09      	ldr	r3, [pc, #36]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d286:	811a      	strh	r2, [r3, #8]
			//temp=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_2);
			//calcperiod(4,temp);
		}
		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	7f1b      	ldrb	r3, [r3, #28]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d105      	bne.n	800d29c <HAL_TIM_IC_CaptureCallback+0x94>
		{
			PL_CNT6++;
 800d290:	4b06      	ldr	r3, [pc, #24]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d292:	895b      	ldrh	r3, [r3, #10]
 800d294:	3301      	adds	r3, #1
 800d296:	b29a      	uxth	r2, r3
 800d298:	4b04      	ldr	r3, [pc, #16]	; (800d2ac <HAL_TIM_IC_CaptureCallback+0xa4>)
 800d29a:	815a      	strh	r2, [r3, #10]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr
 800d2a8:	40000800 	.word	0x40000800
 800d2ac:	20007970 	.word	0x20007970
 800d2b0:	40000400 	.word	0x40000400

0800d2b4 <read_sw_sta>:
__IO uint16_t Out_On_Delay[TOTAL_OUT];//,Out_Off_Delay[TOTAL_OUT];
extern DAC_HandleTypeDef hdac;
extern uint16_t Parameters[];

uint16_t read_sw_sta()
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
	uint16_t temp=0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	80fb      	strh	r3, [r7, #6]
	temp|=SW4_READ;
 800d2be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d2c2:	481a      	ldr	r0, [pc, #104]	; (800d32c <read_sw_sta+0x78>)
 800d2c4:	f7f6 fe3a 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	88fb      	ldrh	r3, [r7, #6]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	80fb      	strh	r3, [r7, #6]
	temp|=(SW3_READ<<1);
 800d2d2:	2120      	movs	r1, #32
 800d2d4:	4815      	ldr	r0, [pc, #84]	; (800d32c <read_sw_sta+0x78>)
 800d2d6:	f7f6 fe31 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	b21a      	sxth	r2, r3
 800d2e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	b21b      	sxth	r3, r3
 800d2e8:	80fb      	strh	r3, [r7, #6]
	temp|=(SW2_READ<<2);
 800d2ea:	2104      	movs	r1, #4
 800d2ec:	4810      	ldr	r0, [pc, #64]	; (800d330 <read_sw_sta+0x7c>)
 800d2ee:	f7f6 fe25 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	b21a      	sxth	r2, r3
 800d2f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	b21b      	sxth	r3, r3
 800d300:	80fb      	strh	r3, [r7, #6]
	temp|=(SW1_READ<<3);
 800d302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d306:	4809      	ldr	r0, [pc, #36]	; (800d32c <read_sw_sta+0x78>)
 800d308:	f7f6 fe18 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d30c:	4603      	mov	r3, r0
 800d30e:	00db      	lsls	r3, r3, #3
 800d310:	b21a      	sxth	r2, r3
 800d312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d316:	4313      	orrs	r3, r2
 800d318:	b21b      	sxth	r3, r3
 800d31a:	80fb      	strh	r3, [r7, #6]
	temp++;
 800d31c:	88fb      	ldrh	r3, [r7, #6]
 800d31e:	3301      	adds	r3, #1
 800d320:	80fb      	strh	r3, [r7, #6]
	return temp;
 800d322:	88fb      	ldrh	r3, [r7, #6]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	40020800 	.word	0x40020800
 800d330:	40020c00 	.word	0x40020c00

0800d334 <read_ki_sta>:

uint16_t read_ki_sta()
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
	uint16_t temp=0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	80fb      	strh	r3, [r7, #6]
	temp|=KIN1_READ;
 800d33e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d342:	4825      	ldr	r0, [pc, #148]	; (800d3d8 <read_ki_sta+0xa4>)
 800d344:	f7f6 fdfa 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d348:	4603      	mov	r3, r0
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	88fb      	ldrh	r3, [r7, #6]
 800d34e:	4313      	orrs	r3, r2
 800d350:	80fb      	strh	r3, [r7, #6]
	temp|=(KIN2_READ<<1);
 800d352:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d356:	4820      	ldr	r0, [pc, #128]	; (800d3d8 <read_ki_sta+0xa4>)
 800d358:	f7f6 fdf0 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d35c:	4603      	mov	r3, r0
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	b21a      	sxth	r2, r3
 800d362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d366:	4313      	orrs	r3, r2
 800d368:	b21b      	sxth	r3, r3
 800d36a:	80fb      	strh	r3, [r7, #6]
	temp|=(KIN3_READ<<2);
 800d36c:	2180      	movs	r1, #128	; 0x80
 800d36e:	481a      	ldr	r0, [pc, #104]	; (800d3d8 <read_ki_sta+0xa4>)
 800d370:	f7f6 fde4 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d374:	4603      	mov	r3, r0
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	b21a      	sxth	r2, r3
 800d37a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d37e:	4313      	orrs	r3, r2
 800d380:	b21b      	sxth	r3, r3
 800d382:	80fb      	strh	r3, [r7, #6]
	temp|=(KIN4_READ<<3);
 800d384:	2140      	movs	r1, #64	; 0x40
 800d386:	4814      	ldr	r0, [pc, #80]	; (800d3d8 <read_ki_sta+0xa4>)
 800d388:	f7f6 fdd8 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d38c:	4603      	mov	r3, r0
 800d38e:	00db      	lsls	r3, r3, #3
 800d390:	b21a      	sxth	r2, r3
 800d392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d396:	4313      	orrs	r3, r2
 800d398:	b21b      	sxth	r3, r3
 800d39a:	80fb      	strh	r3, [r7, #6]
	temp|=(KIN5_READ<<4);
 800d39c:	2120      	movs	r1, #32
 800d39e:	480e      	ldr	r0, [pc, #56]	; (800d3d8 <read_ki_sta+0xa4>)
 800d3a0:	f7f6 fdcc 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	011b      	lsls	r3, r3, #4
 800d3a8:	b21a      	sxth	r2, r3
 800d3aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	b21b      	sxth	r3, r3
 800d3b2:	80fb      	strh	r3, [r7, #6]
	temp|=(KIN6_READ<<5);
 800d3b4:	2140      	movs	r1, #64	; 0x40
 800d3b6:	4809      	ldr	r0, [pc, #36]	; (800d3dc <read_ki_sta+0xa8>)
 800d3b8:	f7f6 fdc0 	bl	8003f3c <HAL_GPIO_ReadPin>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	015b      	lsls	r3, r3, #5
 800d3c0:	b21a      	sxth	r2, r3
 800d3c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	b21b      	sxth	r3, r3
 800d3ca:	80fb      	strh	r3, [r7, #6]
//	temp|=(KIN7_READ<<6);
//	temp|=(KIN8_READ<<7);
	return temp;
 800d3cc:	88fb      	ldrh	r3, [r7, #6]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	40020400 	.word	0x40020400
 800d3dc:	40020800 	.word	0x40020800

0800d3e0 <GetKoutCmd>:
	temp|=(KOUT8_READ<<7);
	return temp;
}
*/
uint16_t GetKoutCmd()
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
	uint16_t temp=0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<TOTAL_OUT;i++)
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	603b      	str	r3, [r7, #0]
 800d3ee:	e012      	b.n	800d416 <GetKoutCmd+0x36>
	{	temp<<=1;
 800d3f0:	88fb      	ldrh	r3, [r7, #6]
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	80fb      	strh	r3, [r7, #6]
		if(Out_Cmd[TOTAL_OUT-1-i]==K_CMD_OFF)temp|=1;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	f1c3 0309 	rsb	r3, r3, #9
 800d3fc:	4a0b      	ldr	r2, [pc, #44]	; (800d42c <GetKoutCmd+0x4c>)
 800d3fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d402:	b29b      	uxth	r3, r3
 800d404:	2b00      	cmp	r3, #0
 800d406:	d103      	bne.n	800d410 <GetKoutCmd+0x30>
 800d408:	88fb      	ldrh	r3, [r7, #6]
 800d40a:	f043 0301 	orr.w	r3, r3, #1
 800d40e:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<TOTAL_OUT;i++)
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	3301      	adds	r3, #1
 800d414:	603b      	str	r3, [r7, #0]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	2b09      	cmp	r3, #9
 800d41a:	dde9      	ble.n	800d3f0 <GetKoutCmd+0x10>
	}
	return temp;
 800d41c:	88fb      	ldrh	r3, [r7, #6]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	20007958 	.word	0x20007958

0800d430 <read_KinOutSw>:

void read_KinOutSw()
{
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
		KinStatus=read_ki_sta();
 800d434:	f7ff ff7e 	bl	800d334 <read_ki_sta>
 800d438:	4603      	mov	r3, r0
 800d43a:	461a      	mov	r2, r3
 800d43c:	4b07      	ldr	r3, [pc, #28]	; (800d45c <read_KinOutSw+0x2c>)
 800d43e:	801a      	strh	r2, [r3, #0]
		KoutStatus=GetKoutCmd();
 800d440:	f7ff ffce 	bl	800d3e0 <GetKoutCmd>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	4b05      	ldr	r3, [pc, #20]	; (800d460 <read_KinOutSw+0x30>)
 800d44a:	801a      	strh	r2, [r3, #0]
		SWStatus=read_sw_sta();
 800d44c:	f7ff ff32 	bl	800d2b4 <read_sw_sta>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	4b03      	ldr	r3, [pc, #12]	; (800d464 <read_KinOutSw+0x34>)
 800d456:	801a      	strh	r2, [r3, #0]
}
 800d458:	bf00      	nop
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20007942 	.word	0x20007942
 800d460:	2000796c 	.word	0x2000796c
 800d464:	20007940 	.word	0x20007940

0800d468 <calc_pinlv>:
void calc_pinlv()
{
 800d468:	b490      	push	{r4, r7}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
int i;
	for(i=0;i<FREQ_NUMBER;i++)
 800d46e:	2300      	movs	r3, #0
 800d470:	607b      	str	r3, [r7, #4]
 800d472:	e053      	b.n	800d51c <calc_pinlv+0xb4>
	{
		Counter_Buf[i][PinLv_Ptr[i]]=Counter[i];
 800d474:	4a2d      	ldr	r2, [pc, #180]	; (800d52c <calc_pinlv+0xc4>)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d47c:	461c      	mov	r4, r3
 800d47e:	4a2c      	ldr	r2, [pc, #176]	; (800d530 <calc_pinlv+0xc8>)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800d486:	4a2b      	ldr	r2, [pc, #172]	; (800d534 <calc_pinlv+0xcc>)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2165      	movs	r1, #101	; 0x65
 800d48c:	fb01 f303 	mul.w	r3, r1, r3
 800d490:	4423      	add	r3, r4
 800d492:	4601      	mov	r1, r0
 800d494:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		AllSampleBuf[FREQ_INDEX+i]=(Counter_Buf[i][PinLv_Ptr[i]]-Counter_Buf[i][(PinLv_Ptr[i]+1)%PL_CALC_N]);
 800d498:	4a24      	ldr	r2, [pc, #144]	; (800d52c <calc_pinlv+0xc4>)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	4a24      	ldr	r2, [pc, #144]	; (800d534 <calc_pinlv+0xcc>)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2165      	movs	r1, #101	; 0x65
 800d4a8:	fb01 f303 	mul.w	r3, r1, r3
 800d4ac:	4403      	add	r3, r0
 800d4ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800d4b2:	4a1e      	ldr	r2, [pc, #120]	; (800d52c <calc_pinlv+0xc4>)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	4b1e      	ldr	r3, [pc, #120]	; (800d538 <calc_pinlv+0xd0>)
 800d4be:	fb83 0302 	smull	r0, r3, r3, r2
 800d4c2:	1118      	asrs	r0, r3, #4
 800d4c4:	17d3      	asrs	r3, r2, #31
 800d4c6:	1ac3      	subs	r3, r0, r3
 800d4c8:	2065      	movs	r0, #101	; 0x65
 800d4ca:	fb00 f303 	mul.w	r3, r0, r3
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	4818      	ldr	r0, [pc, #96]	; (800d534 <calc_pinlv+0xcc>)
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	2465      	movs	r4, #101	; 0x65
 800d4d6:	fb04 f202 	mul.w	r2, r4, r2
 800d4da:	4413      	add	r3, r2
 800d4dc:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3308      	adds	r3, #8
 800d4e4:	1a8a      	subs	r2, r1, r2
 800d4e6:	b291      	uxth	r1, r2
 800d4e8:	4a14      	ldr	r2, [pc, #80]	; (800d53c <calc_pinlv+0xd4>)
 800d4ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PinLv_Ptr[i]=(PinLv_Ptr[i]+1)%PL_CALC_N;
 800d4ee:	4a0f      	ldr	r2, [pc, #60]	; (800d52c <calc_pinlv+0xc4>)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	4a0f      	ldr	r2, [pc, #60]	; (800d538 <calc_pinlv+0xd0>)
 800d4fa:	fb82 1203 	smull	r1, r2, r2, r3
 800d4fe:	1111      	asrs	r1, r2, #4
 800d500:	17da      	asrs	r2, r3, #31
 800d502:	1a8a      	subs	r2, r1, r2
 800d504:	2165      	movs	r1, #101	; 0x65
 800d506:	fb01 f202 	mul.w	r2, r1, r2
 800d50a:	1a9a      	subs	r2, r3, r2
 800d50c:	b291      	uxth	r1, r2
 800d50e:	4a07      	ldr	r2, [pc, #28]	; (800d52c <calc_pinlv+0xc4>)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<FREQ_NUMBER;i++)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3301      	adds	r3, #1
 800d51a:	607b      	str	r3, [r7, #4]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b07      	cmp	r3, #7
 800d520:	dda8      	ble.n	800d474 <calc_pinlv+0xc>
	}
}
 800d522:	bf00      	nop
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bc90      	pop	{r4, r7}
 800d52a:	4770      	bx	lr
 800d52c:	2000791c 	.word	0x2000791c
 800d530:	20007970 	.word	0x20007970
 800d534:	20007994 	.word	0x20007994
 800d538:	288df0cb 	.word	0x288df0cb
 800d53c:	200077fc 	.word	0x200077fc

0800d540 <Out_PWM_Proc>:
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,(dacl+(dach<<8))&0xfff);
}


void Out_PWM_Proc(void)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
uint16_t i;

	for(i=0;i<TOTAL_OUT;i++)
 800d546:	2300      	movs	r3, #0
 800d548:	80fb      	strh	r3, [r7, #6]
 800d54a:	e0ca      	b.n	800d6e2 <Out_PWM_Proc+0x1a2>
	{
		if(Parameters[OUT_BEGIN_OFFSET+i]==0){
 800d54c:	88fb      	ldrh	r3, [r7, #6]
 800d54e:	4aaf      	ldr	r2, [pc, #700]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d554:	2b00      	cmp	r3, #0
 800d556:	f000 80c0 	beq.w	800d6da <Out_PWM_Proc+0x19a>
				continue;
		}
		if(Out_Cmd[i]==K_CMD_OFF)
 800d55a:	88fb      	ldrh	r3, [r7, #6]
 800d55c:	4aac      	ldr	r2, [pc, #688]	; (800d810 <Out_PWM_Proc+0x2d0>)
 800d55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d562:	b29b      	uxth	r3, r3
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10f      	bne.n	800d588 <Out_PWM_Proc+0x48>
		{//OFF
			Out_Cmd_Prv[i]=K_CMD_OFF;
 800d568:	88fb      	ldrh	r3, [r7, #6]
 800d56a:	4aaa      	ldr	r2, [pc, #680]	; (800d814 <Out_PWM_Proc+0x2d4>)
 800d56c:	2100      	movs	r1, #0
 800d56e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			Out_Cmd_Out[i]=K_CMD_OFF;
 800d572:	88fb      	ldrh	r3, [r7, #6]
 800d574:	4aa8      	ldr	r2, [pc, #672]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d576:	2100      	movs	r1, #0
 800d578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			Out_Cmd_Cnt[i]=0;
 800d57c:	88fb      	ldrh	r3, [r7, #6]
 800d57e:	4aa7      	ldr	r2, [pc, #668]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d580:	2100      	movs	r1, #0
 800d582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d586:	e0a9      	b.n	800d6dc <Out_PWM_Proc+0x19c>
		}
		else
		{//ON
			if(Out_Cmd_Prv[i]==K_CMD_OFF)
 800d588:	88fb      	ldrh	r3, [r7, #6]
 800d58a:	4aa2      	ldr	r2, [pc, #648]	; (800d814 <Out_PWM_Proc+0x2d4>)
 800d58c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d590:	b29b      	uxth	r3, r3
 800d592:	2b00      	cmp	r3, #0
 800d594:	d114      	bne.n	800d5c0 <Out_PWM_Proc+0x80>
			{//start ON
				Out_Cmd_Prv[i]=K_CMD_ON;
 800d596:	88fb      	ldrh	r3, [r7, #6]
 800d598:	4a9e      	ldr	r2, [pc, #632]	; (800d814 <Out_PWM_Proc+0x2d4>)
 800d59a:	2101      	movs	r1, #1
 800d59c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				Out_Cmd_Out[i]=K_CMD_ON;
 800d5a0:	88fb      	ldrh	r3, [r7, #6]
 800d5a2:	4a9d      	ldr	r2, [pc, #628]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d5a4:	2101      	movs	r1, #1
 800d5a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				Out_Cmd_Cnt[i]++;
 800d5aa:	88fb      	ldrh	r3, [r7, #6]
 800d5ac:	4a9b      	ldr	r2, [pc, #620]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d5ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d5b2:	b292      	uxth	r2, r2
 800d5b4:	3201      	adds	r2, #1
 800d5b6:	b291      	uxth	r1, r2
 800d5b8:	4a98      	ldr	r2, [pc, #608]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d5ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d5be:	e08d      	b.n	800d6dc <Out_PWM_Proc+0x19c>
			}
			else
			{//already ON
				Out_Cmd_Cnt[i]++;
 800d5c0:	88fb      	ldrh	r3, [r7, #6]
 800d5c2:	4a96      	ldr	r2, [pc, #600]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d5c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d5c8:	b292      	uxth	r2, r2
 800d5ca:	3201      	adds	r2, #1
 800d5cc:	b291      	uxth	r1, r2
 800d5ce:	4a93      	ldr	r2, [pc, #588]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d5d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(Parameters[OUT_ON_OFFSET+i]>0 && Parameters[OUT_OFF_OFFSET+i]>0){
 800d5d4:	88fb      	ldrh	r3, [r7, #6]
 800d5d6:	3310      	adds	r3, #16
 800d5d8:	4a8c      	ldr	r2, [pc, #560]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d5da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d045      	beq.n	800d66e <Out_PWM_Proc+0x12e>
 800d5e2:	88fb      	ldrh	r3, [r7, #6]
 800d5e4:	3320      	adds	r3, #32
 800d5e6:	4a89      	ldr	r2, [pc, #548]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d5e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d03e      	beq.n	800d66e <Out_PWM_Proc+0x12e>
					if(Out_Cmd_Cnt[i]>=(Parameters[OUT_BEGIN_OFFSET+i]+Parameters[OUT_ON_OFFSET+i]))
 800d5f0:	88fb      	ldrh	r3, [r7, #6]
 800d5f2:	4a8a      	ldr	r2, [pc, #552]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d5f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	88fb      	ldrh	r3, [r7, #6]
 800d5fe:	4a83      	ldr	r2, [pc, #524]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d604:	4618      	mov	r0, r3
 800d606:	88fb      	ldrh	r3, [r7, #6]
 800d608:	3310      	adds	r3, #16
 800d60a:	4a80      	ldr	r2, [pc, #512]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d60c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d610:	4403      	add	r3, r0
 800d612:	4299      	cmp	r1, r3
 800d614:	db04      	blt.n	800d620 <Out_PWM_Proc+0xe0>
					{
						Out_Cmd_Out[i]=K_CMD_OFF;
 800d616:	88fb      	ldrh	r3, [r7, #6]
 800d618:	4a7f      	ldr	r2, [pc, #508]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d61a:	2100      	movs	r1, #0
 800d61c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(Out_Cmd_Cnt[i]>=((Parameters[OUT_BEGIN_OFFSET+i]+Parameters[OUT_ON_OFFSET+i])+Parameters[OUT_OFF_OFFSET+i]))
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	4a7e      	ldr	r2, [pc, #504]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d628:	b29b      	uxth	r3, r3
 800d62a:	4618      	mov	r0, r3
 800d62c:	88fb      	ldrh	r3, [r7, #6]
 800d62e:	4a77      	ldr	r2, [pc, #476]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d634:	4619      	mov	r1, r3
 800d636:	88fb      	ldrh	r3, [r7, #6]
 800d638:	3310      	adds	r3, #16
 800d63a:	4a74      	ldr	r2, [pc, #464]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d63c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d640:	440b      	add	r3, r1
 800d642:	88fa      	ldrh	r2, [r7, #6]
 800d644:	3220      	adds	r2, #32
 800d646:	4971      	ldr	r1, [pc, #452]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d648:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d64c:	4413      	add	r3, r2
 800d64e:	4298      	cmp	r0, r3
 800d650:	db44      	blt.n	800d6dc <Out_PWM_Proc+0x19c>
					{
						Out_Cmd_Out[i]=K_CMD_ON;
 800d652:	88fb      	ldrh	r3, [r7, #6]
 800d654:	4a70      	ldr	r2, [pc, #448]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d656:	2101      	movs	r1, #1
 800d658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						Out_Cmd_Cnt[i]=Parameters[OUT_BEGIN_OFFSET+i];	
 800d65c:	88fa      	ldrh	r2, [r7, #6]
 800d65e:	88fb      	ldrh	r3, [r7, #6]
 800d660:	496a      	ldr	r1, [pc, #424]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d662:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800d666:	4a6d      	ldr	r2, [pc, #436]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d668:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(Out_Cmd_Cnt[i]>=((Parameters[OUT_BEGIN_OFFSET+i]+Parameters[OUT_ON_OFFSET+i])+Parameters[OUT_OFF_OFFSET+i]))
 800d66c:	e036      	b.n	800d6dc <Out_PWM_Proc+0x19c>
					}
				}
				else if(Parameters[OUT_ON_OFFSET+i]==0){
 800d66e:	88fb      	ldrh	r3, [r7, #6]
 800d670:	3310      	adds	r3, #16
 800d672:	4a66      	ldr	r2, [pc, #408]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d115      	bne.n	800d6a8 <Out_PWM_Proc+0x168>
					if(Out_Cmd_Cnt[i]>=Parameters[OUT_BEGIN_OFFSET+i]){
 800d67c:	88fb      	ldrh	r3, [r7, #6]
 800d67e:	4a67      	ldr	r2, [pc, #412]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d684:	b29a      	uxth	r2, r3
 800d686:	88fb      	ldrh	r3, [r7, #6]
 800d688:	4960      	ldr	r1, [pc, #384]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d68a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d324      	bcc.n	800d6dc <Out_PWM_Proc+0x19c>
						Out_Cmd_Out[i]=K_CMD_OFF;
 800d692:	88fb      	ldrh	r3, [r7, #6]
 800d694:	4a60      	ldr	r2, [pc, #384]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d696:	2100      	movs	r1, #0
 800d698:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						Out_Cmd[i]=K_CMD_OFF;
 800d69c:	88fb      	ldrh	r3, [r7, #6]
 800d69e:	4a5c      	ldr	r2, [pc, #368]	; (800d810 <Out_PWM_Proc+0x2d0>)
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d6a6:	e019      	b.n	800d6dc <Out_PWM_Proc+0x19c>
					}
				}
				else{//Parameters[OUT_OFF_OFFSET+i]==0
					if(Out_Cmd_Cnt[i]>=Parameters[OUT_BEGIN_OFFSET+i]){
 800d6a8:	88fb      	ldrh	r3, [r7, #6]
 800d6aa:	4a5c      	ldr	r2, [pc, #368]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d6ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	88fb      	ldrh	r3, [r7, #6]
 800d6b4:	4955      	ldr	r1, [pc, #340]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d6b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d30e      	bcc.n	800d6dc <Out_PWM_Proc+0x19c>
						Out_Cmd_Out[i]=K_CMD_ON;
 800d6be:	88fb      	ldrh	r3, [r7, #6]
 800d6c0:	4a55      	ldr	r2, [pc, #340]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d6c2:	2101      	movs	r1, #1
 800d6c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						Out_Cmd_Cnt[i]=Parameters[OUT_BEGIN_OFFSET+i];
 800d6c8:	88fa      	ldrh	r2, [r7, #6]
 800d6ca:	88fb      	ldrh	r3, [r7, #6]
 800d6cc:	494f      	ldr	r1, [pc, #316]	; (800d80c <Out_PWM_Proc+0x2cc>)
 800d6ce:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800d6d2:	4a52      	ldr	r2, [pc, #328]	; (800d81c <Out_PWM_Proc+0x2dc>)
 800d6d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d6d8:	e000      	b.n	800d6dc <Out_PWM_Proc+0x19c>
				continue;
 800d6da:	bf00      	nop
	for(i=0;i<TOTAL_OUT;i++)
 800d6dc:	88fb      	ldrh	r3, [r7, #6]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	80fb      	strh	r3, [r7, #6]
 800d6e2:	88fb      	ldrh	r3, [r7, #6]
 800d6e4:	2b09      	cmp	r3, #9
 800d6e6:	f67f af31 	bls.w	800d54c <Out_PWM_Proc+0xc>
					}
				}					
			}
		}
	}
	if(Out_Cmd_Out[0]==K_CMD_ON) KOUT1_ON;else KOUT1_OFF;
 800d6ea:	4b4b      	ldr	r3, [pc, #300]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d106      	bne.n	800d702 <Out_PWM_Proc+0x1c2>
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d6fa:	4849      	ldr	r0, [pc, #292]	; (800d820 <Out_PWM_Proc+0x2e0>)
 800d6fc:	f7f6 fc36 	bl	8003f6c <HAL_GPIO_WritePin>
 800d700:	e005      	b.n	800d70e <Out_PWM_Proc+0x1ce>
 800d702:	2201      	movs	r2, #1
 800d704:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d708:	4845      	ldr	r0, [pc, #276]	; (800d820 <Out_PWM_Proc+0x2e0>)
 800d70a:	f7f6 fc2f 	bl	8003f6c <HAL_GPIO_WritePin>
	if(Out_Cmd_Out[1]==K_CMD_ON) KOUT2_ON;else KOUT2_OFF;
 800d70e:	4b42      	ldr	r3, [pc, #264]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d710:	885b      	ldrh	r3, [r3, #2]
 800d712:	b29b      	uxth	r3, r3
 800d714:	2b01      	cmp	r3, #1
 800d716:	d106      	bne.n	800d726 <Out_PWM_Proc+0x1e6>
 800d718:	2200      	movs	r2, #0
 800d71a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d71e:	4841      	ldr	r0, [pc, #260]	; (800d824 <Out_PWM_Proc+0x2e4>)
 800d720:	f7f6 fc24 	bl	8003f6c <HAL_GPIO_WritePin>
 800d724:	e005      	b.n	800d732 <Out_PWM_Proc+0x1f2>
 800d726:	2201      	movs	r2, #1
 800d728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d72c:	483d      	ldr	r0, [pc, #244]	; (800d824 <Out_PWM_Proc+0x2e4>)
 800d72e:	f7f6 fc1d 	bl	8003f6c <HAL_GPIO_WritePin>
	if(Out_Cmd_Out[2]==K_CMD_ON) KOUT3_ON;else KOUT3_OFF;
 800d732:	4b39      	ldr	r3, [pc, #228]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d734:	889b      	ldrh	r3, [r3, #4]
 800d736:	b29b      	uxth	r3, r3
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d106      	bne.n	800d74a <Out_PWM_Proc+0x20a>
 800d73c:	2200      	movs	r2, #0
 800d73e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d742:	4838      	ldr	r0, [pc, #224]	; (800d824 <Out_PWM_Proc+0x2e4>)
 800d744:	f7f6 fc12 	bl	8003f6c <HAL_GPIO_WritePin>
 800d748:	e005      	b.n	800d756 <Out_PWM_Proc+0x216>
 800d74a:	2201      	movs	r2, #1
 800d74c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d750:	4834      	ldr	r0, [pc, #208]	; (800d824 <Out_PWM_Proc+0x2e4>)
 800d752:	f7f6 fc0b 	bl	8003f6c <HAL_GPIO_WritePin>
	if(Out_Cmd_Out[3]==K_CMD_ON) KOUT4_ON;else KOUT4_OFF;
 800d756:	4b30      	ldr	r3, [pc, #192]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d758:	88db      	ldrh	r3, [r3, #6]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d105      	bne.n	800d76c <Out_PWM_Proc+0x22c>
 800d760:	2200      	movs	r2, #0
 800d762:	2180      	movs	r1, #128	; 0x80
 800d764:	482f      	ldr	r0, [pc, #188]	; (800d824 <Out_PWM_Proc+0x2e4>)
 800d766:	f7f6 fc01 	bl	8003f6c <HAL_GPIO_WritePin>
 800d76a:	e004      	b.n	800d776 <Out_PWM_Proc+0x236>
 800d76c:	2201      	movs	r2, #1
 800d76e:	2180      	movs	r1, #128	; 0x80
 800d770:	482c      	ldr	r0, [pc, #176]	; (800d824 <Out_PWM_Proc+0x2e4>)
 800d772:	f7f6 fbfb 	bl	8003f6c <HAL_GPIO_WritePin>
	if(Out_Cmd_Out[4]==K_CMD_ON) KOUT5_ON;else KOUT5_OFF;
 800d776:	4b28      	ldr	r3, [pc, #160]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d778:	891b      	ldrh	r3, [r3, #8]
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d105      	bne.n	800d78c <Out_PWM_Proc+0x24c>
 800d780:	2200      	movs	r2, #0
 800d782:	2120      	movs	r1, #32
 800d784:	4828      	ldr	r0, [pc, #160]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d786:	f7f6 fbf1 	bl	8003f6c <HAL_GPIO_WritePin>
 800d78a:	e004      	b.n	800d796 <Out_PWM_Proc+0x256>
 800d78c:	2201      	movs	r2, #1
 800d78e:	2120      	movs	r1, #32
 800d790:	4825      	ldr	r0, [pc, #148]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d792:	f7f6 fbeb 	bl	8003f6c <HAL_GPIO_WritePin>
	if(Out_Cmd_Out[5]==K_CMD_ON) KOUT6_ON;else KOUT6_OFF;
 800d796:	4b20      	ldr	r3, [pc, #128]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d798:	895b      	ldrh	r3, [r3, #10]
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d105      	bne.n	800d7ac <Out_PWM_Proc+0x26c>
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	2110      	movs	r1, #16
 800d7a4:	4820      	ldr	r0, [pc, #128]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d7a6:	f7f6 fbe1 	bl	8003f6c <HAL_GPIO_WritePin>
 800d7aa:	e004      	b.n	800d7b6 <Out_PWM_Proc+0x276>
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	2110      	movs	r1, #16
 800d7b0:	481d      	ldr	r0, [pc, #116]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d7b2:	f7f6 fbdb 	bl	8003f6c <HAL_GPIO_WritePin>
	if(Out_Cmd_Out[6]==K_CMD_ON) KOUT7_ON;else KOUT7_OFF;
 800d7b6:	4b18      	ldr	r3, [pc, #96]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d7b8:	899b      	ldrh	r3, [r3, #12]
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d105      	bne.n	800d7cc <Out_PWM_Proc+0x28c>
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	2108      	movs	r1, #8
 800d7c4:	4818      	ldr	r0, [pc, #96]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d7c6:	f7f6 fbd1 	bl	8003f6c <HAL_GPIO_WritePin>
 800d7ca:	e004      	b.n	800d7d6 <Out_PWM_Proc+0x296>
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	2108      	movs	r1, #8
 800d7d0:	4815      	ldr	r0, [pc, #84]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d7d2:	f7f6 fbcb 	bl	8003f6c <HAL_GPIO_WritePin>
	if(Out_Cmd_Out[7]==K_CMD_ON) KOUT8_ON;else KOUT8_OFF;
 800d7d6:	4b10      	ldr	r3, [pc, #64]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d7d8:	89db      	ldrh	r3, [r3, #14]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d105      	bne.n	800d7ec <Out_PWM_Proc+0x2ac>
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2104      	movs	r1, #4
 800d7e4:	4810      	ldr	r0, [pc, #64]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d7e6:	f7f6 fbc1 	bl	8003f6c <HAL_GPIO_WritePin>
 800d7ea:	e004      	b.n	800d7f6 <Out_PWM_Proc+0x2b6>
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	2104      	movs	r1, #4
 800d7f0:	480d      	ldr	r0, [pc, #52]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d7f2:	f7f6 fbbb 	bl	8003f6c <HAL_GPIO_WritePin>

	if(Out_Cmd_Out[8]==K_CMD_ON) KOUT9_ON;else KOUT9_OFF;
 800d7f6:	4b08      	ldr	r3, [pc, #32]	; (800d818 <Out_PWM_Proc+0x2d8>)
 800d7f8:	8a1b      	ldrh	r3, [r3, #16]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d115      	bne.n	800d82c <Out_PWM_Proc+0x2ec>
 800d800:	2200      	movs	r2, #0
 800d802:	2101      	movs	r1, #1
 800d804:	4808      	ldr	r0, [pc, #32]	; (800d828 <Out_PWM_Proc+0x2e8>)
 800d806:	f7f6 fbb1 	bl	8003f6c <HAL_GPIO_WritePin>
 800d80a:	e014      	b.n	800d836 <Out_PWM_Proc+0x2f6>
 800d80c:	200088f0 	.word	0x200088f0
 800d810:	20007958 	.word	0x20007958
 800d814:	20007944 	.word	0x20007944
 800d818:	2000792c 	.word	0x2000792c
 800d81c:	200077e8 	.word	0x200077e8
 800d820:	40020000 	.word	0x40020000
 800d824:	40020800 	.word	0x40020800
 800d828:	40020400 	.word	0x40020400
 800d82c:	2201      	movs	r2, #1
 800d82e:	2101      	movs	r1, #1
 800d830:	480b      	ldr	r0, [pc, #44]	; (800d860 <Out_PWM_Proc+0x320>)
 800d832:	f7f6 fb9b 	bl	8003f6c <HAL_GPIO_WritePin>
	if(Out_Cmd_Out[9]==K_CMD_ON) KOUT10_ON;else KOUT10_OFF;
 800d836:	4b0b      	ldr	r3, [pc, #44]	; (800d864 <Out_PWM_Proc+0x324>)
 800d838:	8a5b      	ldrh	r3, [r3, #18]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d105      	bne.n	800d84c <Out_PWM_Proc+0x30c>
 800d840:	2200      	movs	r2, #0
 800d842:	2102      	movs	r1, #2
 800d844:	4806      	ldr	r0, [pc, #24]	; (800d860 <Out_PWM_Proc+0x320>)
 800d846:	f7f6 fb91 	bl	8003f6c <HAL_GPIO_WritePin>
}
 800d84a:	e004      	b.n	800d856 <Out_PWM_Proc+0x316>
	if(Out_Cmd_Out[9]==K_CMD_ON) KOUT10_ON;else KOUT10_OFF;
 800d84c:	2201      	movs	r2, #1
 800d84e:	2102      	movs	r1, #2
 800d850:	4803      	ldr	r0, [pc, #12]	; (800d860 <Out_PWM_Proc+0x320>)
 800d852:	f7f6 fb8b 	bl	8003f6c <HAL_GPIO_WritePin>
}
 800d856:	bf00      	nop
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	40020400 	.word	0x40020400
 800d864:	2000792c 	.word	0x2000792c

0800d868 <InitOut>:
void InitOut(void)
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
uint16_t i;
	for(i=0;i<TOTAL_OUT;i++)
 800d86e:	2300      	movs	r3, #0
 800d870:	80fb      	strh	r3, [r7, #6]
 800d872:	e01b      	b.n	800d8ac <InitOut+0x44>
	{
		Out_Cmd[i]=K_CMD_OFF;
 800d874:	88fb      	ldrh	r3, [r7, #6]
 800d876:	4a24      	ldr	r2, [pc, #144]	; (800d908 <InitOut+0xa0>)
 800d878:	2100      	movs	r1, #0
 800d87a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Out_Cmd_Prv[i]=K_CMD_OFF;
 800d87e:	88fb      	ldrh	r3, [r7, #6]
 800d880:	4a22      	ldr	r2, [pc, #136]	; (800d90c <InitOut+0xa4>)
 800d882:	2100      	movs	r1, #0
 800d884:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Out_Cmd_Cnt[i]=0;
 800d888:	88fb      	ldrh	r3, [r7, #6]
 800d88a:	4a21      	ldr	r2, [pc, #132]	; (800d910 <InitOut+0xa8>)
 800d88c:	2100      	movs	r1, #0
 800d88e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Out_Cmd_Out[i]=K_CMD_OFF;
 800d892:	88fb      	ldrh	r3, [r7, #6]
 800d894:	4a1f      	ldr	r2, [pc, #124]	; (800d914 <InitOut+0xac>)
 800d896:	2100      	movs	r1, #0
 800d898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Out_On_Delay[i]=0;
 800d89c:	88fb      	ldrh	r3, [r7, #6]
 800d89e:	4a1e      	ldr	r2, [pc, #120]	; (800d918 <InitOut+0xb0>)
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<TOTAL_OUT;i++)
 800d8a6:	88fb      	ldrh	r3, [r7, #6]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	80fb      	strh	r3, [r7, #6]
 800d8ac:	88fb      	ldrh	r3, [r7, #6]
 800d8ae:	2b09      	cmp	r3, #9
 800d8b0:	d9e0      	bls.n	800d874 <InitOut+0xc>
//		Out_Off_Delay[i]=0;
	}
	if(XLF_POWER_UP==1234) Out_Cmd[XLF_CMD_CHN]=K_CMD_ON;
 800d8b2:	4b1a      	ldr	r3, [pc, #104]	; (800d91c <InitOut+0xb4>)
 800d8b4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8b8:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d103      	bne.n	800d8c8 <InitOut+0x60>
 800d8c0:	4b11      	ldr	r3, [pc, #68]	; (800d908 <InitOut+0xa0>)
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	821a      	strh	r2, [r3, #16]
 800d8c6:	e002      	b.n	800d8ce <InitOut+0x66>
	else Out_Cmd[XLF_CMD_CHN]=K_CMD_OFF;
 800d8c8:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <InitOut+0xa0>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	821a      	strh	r2, [r3, #16]

	if(M12_POWER_UP==1234)
 800d8ce:	4b13      	ldr	r3, [pc, #76]	; (800d91c <InitOut+0xb4>)
 800d8d0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d8d4:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d10f      	bne.n	800d8fc <InitOut+0x94>
	{
		Out_Cmd[M1_RESET_CMD_CHN]=K_CMD_ON;
 800d8dc:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <InitOut+0xa0>)
 800d8de:	2201      	movs	r2, #1
 800d8e0:	811a      	strh	r2, [r3, #8]
		Out_On_Delay[M1_RESET_CMD_CHN]=M1_RESET_DEL;
 800d8e2:	4b0e      	ldr	r3, [pc, #56]	; (800d91c <InitOut+0xb4>)
 800d8e4:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800d8e8:	4b0b      	ldr	r3, [pc, #44]	; (800d918 <InitOut+0xb0>)
 800d8ea:	811a      	strh	r2, [r3, #8]

		Out_Cmd[M2_RESET_CMD_CHN]=K_CMD_ON;
 800d8ec:	4b06      	ldr	r3, [pc, #24]	; (800d908 <InitOut+0xa0>)
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	815a      	strh	r2, [r3, #10]
		Out_On_Delay[M2_RESET_CMD_CHN]=M2_RESET_DEL;
 800d8f2:	4b0a      	ldr	r3, [pc, #40]	; (800d91c <InitOut+0xb4>)
 800d8f4:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d8f8:	4b07      	ldr	r3, [pc, #28]	; (800d918 <InitOut+0xb0>)
 800d8fa:	815a      	strh	r2, [r3, #10]
	}
}
 800d8fc:	bf00      	nop
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	20007958 	.word	0x20007958
 800d90c:	20007944 	.word	0x20007944
 800d910:	200077e8 	.word	0x200077e8
 800d914:	2000792c 	.word	0x2000792c
 800d918:	20007980 	.word	0x20007980
 800d91c:	200088f0 	.word	0x200088f0

0800d920 <Out_Delay_Proc>:

void Out_Delay_Proc(void)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
uint16_t i;
	for(i=0;i<TOTAL_OUT;i++)
 800d926:	2300      	movs	r3, #0
 800d928:	80fb      	strh	r3, [r7, #6]
 800d92a:	e053      	b.n	800d9d4 <Out_Delay_Proc+0xb4>
	{
		if(Out_Cmd[i]==K_CMD_ON){
 800d92c:	88fb      	ldrh	r3, [r7, #6]
 800d92e:	4a2e      	ldr	r2, [pc, #184]	; (800d9e8 <Out_Delay_Proc+0xc8>)
 800d930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d934:	b29b      	uxth	r3, r3
 800d936:	2b01      	cmp	r3, #1
 800d938:	d144      	bne.n	800d9c4 <Out_Delay_Proc+0xa4>
			if(Out_On_Delay[i]==0) continue;
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	4a2b      	ldr	r2, [pc, #172]	; (800d9ec <Out_Delay_Proc+0xcc>)
 800d93e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d942:	b29b      	uxth	r3, r3
 800d944:	2b00      	cmp	r3, #0
 800d946:	d03f      	beq.n	800d9c8 <Out_Delay_Proc+0xa8>
			else{
				if(Out_On_Delay[i]){
 800d948:	88fb      	ldrh	r3, [r7, #6]
 800d94a:	4a28      	ldr	r2, [pc, #160]	; (800d9ec <Out_Delay_Proc+0xcc>)
 800d94c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d950:	b29b      	uxth	r3, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d036      	beq.n	800d9c4 <Out_Delay_Proc+0xa4>
					Out_On_Delay[i]--;
 800d956:	88fb      	ldrh	r3, [r7, #6]
 800d958:	4a24      	ldr	r2, [pc, #144]	; (800d9ec <Out_Delay_Proc+0xcc>)
 800d95a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d95e:	b292      	uxth	r2, r2
 800d960:	3a01      	subs	r2, #1
 800d962:	b291      	uxth	r1, r2
 800d964:	4a21      	ldr	r2, [pc, #132]	; (800d9ec <Out_Delay_Proc+0xcc>)
 800d966:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(Out_On_Delay[i]==0){
 800d96a:	88fb      	ldrh	r3, [r7, #6]
 800d96c:	4a1f      	ldr	r2, [pc, #124]	; (800d9ec <Out_Delay_Proc+0xcc>)
 800d96e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d972:	b29b      	uxth	r3, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d125      	bne.n	800d9c4 <Out_Delay_Proc+0xa4>
						Out_Cmd[i]=K_CMD_OFF;
 800d978:	88fb      	ldrh	r3, [r7, #6]
 800d97a:	4a1b      	ldr	r2, [pc, #108]	; (800d9e8 <Out_Delay_Proc+0xc8>)
 800d97c:	2100      	movs	r1, #0
 800d97e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						//是否需要自动延时复位
						switch(i){
 800d982:	88fb      	ldrh	r3, [r7, #6]
 800d984:	2b03      	cmp	r3, #3
 800d986:	d821      	bhi.n	800d9cc <Out_Delay_Proc+0xac>
 800d988:	a201      	add	r2, pc, #4	; (adr r2, 800d990 <Out_Delay_Proc+0x70>)
 800d98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d98e:	bf00      	nop
 800d990:	0800d9a1 	.word	0x0800d9a1
 800d994:	0800d9a1 	.word	0x0800d9a1
 800d998:	0800d9b3 	.word	0x0800d9b3
 800d99c:	0800d9b3 	.word	0x0800d9b3
							case M1_NORMAL_CMD_CHN:
							case M1_RESERVE_CMD_CHN:
								Out_On_Delay[M1_RESET_CMD_CHN]=M1_RESET_DEL;
 800d9a0:	4b13      	ldr	r3, [pc, #76]	; (800d9f0 <Out_Delay_Proc+0xd0>)
 800d9a2:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800d9a6:	4b11      	ldr	r3, [pc, #68]	; (800d9ec <Out_Delay_Proc+0xcc>)
 800d9a8:	811a      	strh	r2, [r3, #8]
								Out_Cmd[M1_RESET_CMD_CHN]=K_CMD_ON;
 800d9aa:	4b0f      	ldr	r3, [pc, #60]	; (800d9e8 <Out_Delay_Proc+0xc8>)
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	811a      	strh	r2, [r3, #8]
								break;
 800d9b0:	e00d      	b.n	800d9ce <Out_Delay_Proc+0xae>
							case M2_NORMAL_CMD_CHN:
							case M2_RESERVE_CMD_CHN:
								Out_On_Delay[M2_RESET_CMD_CHN]=M2_RESET_DEL;
 800d9b2:	4b0f      	ldr	r3, [pc, #60]	; (800d9f0 <Out_Delay_Proc+0xd0>)
 800d9b4:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d9b8:	4b0c      	ldr	r3, [pc, #48]	; (800d9ec <Out_Delay_Proc+0xcc>)
 800d9ba:	815a      	strh	r2, [r3, #10]
								Out_Cmd[M2_RESET_CMD_CHN]=K_CMD_ON;
 800d9bc:	4b0a      	ldr	r3, [pc, #40]	; (800d9e8 <Out_Delay_Proc+0xc8>)
 800d9be:	2201      	movs	r2, #1
 800d9c0:	815a      	strh	r2, [r3, #10]
								break;
 800d9c2:	e004      	b.n	800d9ce <Out_Delay_Proc+0xae>
							default:
								break;
						}
					}
 800d9c4:	bf00      	nop
 800d9c6:	e002      	b.n	800d9ce <Out_Delay_Proc+0xae>
			if(Out_On_Delay[i]==0) continue;
 800d9c8:	bf00      	nop
 800d9ca:	e000      	b.n	800d9ce <Out_Delay_Proc+0xae>
								break;
 800d9cc:	bf00      	nop
	for(i=0;i<TOTAL_OUT;i++)
 800d9ce:	88fb      	ldrh	r3, [r7, #6]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	80fb      	strh	r3, [r7, #6]
 800d9d4:	88fb      	ldrh	r3, [r7, #6]
 800d9d6:	2b09      	cmp	r3, #9
 800d9d8:	d9a8      	bls.n	800d92c <Out_Delay_Proc+0xc>
				}
			}
		}
	}
}
 800d9da:	bf00      	nop
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	20007958 	.word	0x20007958
 800d9ec:	20007980 	.word	0x20007980
 800d9f0:	200088f0 	.word	0x200088f0

0800d9f4 <ProcDJCmd>:

void ProcDJCmd(uint8_t *p){
 800d9f4:	b480      	push	{r7}
 800d9f6:	b089      	sub	sp, #36	; 0x24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
	uint8_t buf[8];
	memcpy(buf,p,8);
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	f107 0308 	add.w	r3, r7, #8
 800da02:	6810      	ldr	r0, [r2, #0]
 800da04:	6851      	ldr	r1, [r2, #4]
 800da06:	c303      	stmia	r3!, {r0, r1}
	uint16_t offCmd,onCmd,delay;

	//first word which is off 
	offCmd=buf[0];
 800da08:	7a3b      	ldrb	r3, [r7, #8]
 800da0a:	82fb      	strh	r3, [r7, #22]
	offCmd+=(buf[1]<<8);
 800da0c:	7a7b      	ldrb	r3, [r7, #9]
 800da0e:	b29b      	uxth	r3, r3
 800da10:	021b      	lsls	r3, r3, #8
 800da12:	b29a      	uxth	r2, r3
 800da14:	8afb      	ldrh	r3, [r7, #22]
 800da16:	4413      	add	r3, r2
 800da18:	82fb      	strh	r3, [r7, #22]
	//second word which is on
	onCmd=buf[2];
 800da1a:	7abb      	ldrb	r3, [r7, #10]
 800da1c:	82bb      	strh	r3, [r7, #20]
	onCmd+=(buf[3]<<8);
 800da1e:	7afb      	ldrb	r3, [r7, #11]
 800da20:	b29b      	uxth	r3, r3
 800da22:	021b      	lsls	r3, r3, #8
 800da24:	b29a      	uxth	r2, r3
 800da26:	8abb      	ldrh	r3, [r7, #20]
 800da28:	4413      	add	r3, r2
 800da2a:	82bb      	strh	r3, [r7, #20]
	//third word is delay
	delay=buf[4];
 800da2c:	7b3b      	ldrb	r3, [r7, #12]
 800da2e:	827b      	strh	r3, [r7, #18]
	delay+=(buf[5]<<8);
 800da30:	7b7b      	ldrb	r3, [r7, #13]
 800da32:	b29b      	uxth	r3, r3
 800da34:	021b      	lsls	r3, r3, #8
 800da36:	b29a      	uxth	r2, r3
 800da38:	8a7b      	ldrh	r3, [r7, #18]
 800da3a:	4413      	add	r3, r2
 800da3c:	827b      	strh	r3, [r7, #18]
	
	for(int i=0;i<TOTAL_OUT;i++){
 800da3e:	2300      	movs	r3, #0
 800da40:	61fb      	str	r3, [r7, #28]
 800da42:	e011      	b.n	800da68 <ProcDJCmd+0x74>
		if((offCmd&(1<<i))==0) continue;
 800da44:	8afa      	ldrh	r2, [r7, #22]
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	fa42 f303 	asr.w	r3, r2, r3
 800da4c:	f003 0301 	and.w	r3, r3, #1
 800da50:	2b00      	cmp	r3, #0
 800da52:	d005      	beq.n	800da60 <ProcDJCmd+0x6c>
		Out_Cmd[i]=K_CMD_OFF;
 800da54:	4a17      	ldr	r2, [pc, #92]	; (800dab4 <ProcDJCmd+0xc0>)
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	2100      	movs	r1, #0
 800da5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800da5e:	e000      	b.n	800da62 <ProcDJCmd+0x6e>
		if((offCmd&(1<<i))==0) continue;
 800da60:	bf00      	nop
	for(int i=0;i<TOTAL_OUT;i++){
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	3301      	adds	r3, #1
 800da66:	61fb      	str	r3, [r7, #28]
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	2b09      	cmp	r3, #9
 800da6c:	ddea      	ble.n	800da44 <ProcDJCmd+0x50>
	}
	
	for(int i=0;i<TOTAL_OUT;i++){
 800da6e:	2300      	movs	r3, #0
 800da70:	61bb      	str	r3, [r7, #24]
 800da72:	e016      	b.n	800daa2 <ProcDJCmd+0xae>
		if((onCmd&(1<<i))==0) continue;
 800da74:	8aba      	ldrh	r2, [r7, #20]
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	fa42 f303 	asr.w	r3, r2, r3
 800da7c:	f003 0301 	and.w	r3, r3, #1
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00a      	beq.n	800da9a <ProcDJCmd+0xa6>
		Out_On_Delay[i]=delay;
 800da84:	490c      	ldr	r1, [pc, #48]	; (800dab8 <ProcDJCmd+0xc4>)
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	8a7a      	ldrh	r2, [r7, #18]
 800da8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		Out_Cmd[i]=K_CMD_ON;
 800da8e:	4a09      	ldr	r2, [pc, #36]	; (800dab4 <ProcDJCmd+0xc0>)
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	2101      	movs	r1, #1
 800da94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800da98:	e000      	b.n	800da9c <ProcDJCmd+0xa8>
		if((onCmd&(1<<i))==0) continue;
 800da9a:	bf00      	nop
	for(int i=0;i<TOTAL_OUT;i++){
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	3301      	adds	r3, #1
 800daa0:	61bb      	str	r3, [r7, #24]
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	2b09      	cmp	r3, #9
 800daa6:	dde5      	ble.n	800da74 <ProcDJCmd+0x80>
	}
}
 800daa8:	bf00      	nop
 800daaa:	3724      	adds	r7, #36	; 0x24
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr
 800dab4:	20007958 	.word	0x20007958
 800dab8:	20007980 	.word	0x20007980

0800dabc <ProcKout>:

void ProcKout(void)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	af00      	add	r7, sp, #0
	Out_PWM_Proc();//3.25us max
 800dac0:	f7ff fd3e 	bl	800d540 <Out_PWM_Proc>
	if(outDlaeyPorcCnt<1){
 800dac4:	4b08      	ldr	r3, [pc, #32]	; (800dae8 <ProcKout+0x2c>)
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d106      	bne.n	800dada <ProcKout+0x1e>
		outDlaeyPorcCnt++;//0.12us
 800dacc:	4b06      	ldr	r3, [pc, #24]	; (800dae8 <ProcKout+0x2c>)
 800dace:	881b      	ldrh	r3, [r3, #0]
 800dad0:	3301      	adds	r3, #1
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	4b04      	ldr	r3, [pc, #16]	; (800dae8 <ProcKout+0x2c>)
 800dad6:	801a      	strh	r2, [r3, #0]
	}
	else{
		outDlaeyPorcCnt=0;
		Out_Delay_Proc();
	}
}
 800dad8:	e004      	b.n	800dae4 <ProcKout+0x28>
		outDlaeyPorcCnt=0;
 800dada:	4b03      	ldr	r3, [pc, #12]	; (800dae8 <ProcKout+0x2c>)
 800dadc:	2200      	movs	r2, #0
 800dade:	801a      	strh	r2, [r3, #0]
		Out_Delay_Proc();
 800dae0:	f7ff ff1e 	bl	800d920 <Out_Delay_Proc>
}
 800dae4:	bf00      	nop
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	20004934 	.word	0x20004934

0800daec <CteateSampleData>:
extern uint16_t AlarmFlag;
extern uint32_t RunTime;
extern MPID bengPid,madaPid;

int CteateSampleData(uint16_t *pbuf)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
int j;
	read_KinOutSw();
 800daf4:	f7ff fc9c 	bl	800d430 <read_KinOutSw>
	j=16;//前16个是 8路模拟量+8路频率
 800daf8:	2310      	movs	r3, #16
 800dafa:	60fb      	str	r3, [r7, #12]
	pbuf[j++]=SWStatus;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	60fa      	str	r2, [r7, #12]
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	4413      	add	r3, r2
 800db08:	4a57      	ldr	r2, [pc, #348]	; (800dc68 <CteateSampleData+0x17c>)
 800db0a:	8812      	ldrh	r2, [r2, #0]
 800db0c:	801a      	strh	r2, [r3, #0]
	
	//16个开入量
	pbuf[j++]=KinStatus;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	1c5a      	adds	r2, r3, #1
 800db12:	60fa      	str	r2, [r7, #12]
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	4413      	add	r3, r2
 800db1a:	4a54      	ldr	r2, [pc, #336]	; (800dc6c <CteateSampleData+0x180>)
 800db1c:	8812      	ldrh	r2, [r2, #0]
 800db1e:	801a      	strh	r2, [r3, #0]
	
	//16个开出量
	pbuf[j++]=KoutStatus;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	1c5a      	adds	r2, r3, #1
 800db24:	60fa      	str	r2, [r7, #12]
 800db26:	005b      	lsls	r3, r3, #1
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	4413      	add	r3, r2
 800db2c:	4a50      	ldr	r2, [pc, #320]	; (800dc70 <CteateSampleData+0x184>)
 800db2e:	8812      	ldrh	r2, [r2, #0]
 800db30:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=AlarmFlag;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	1c5a      	adds	r2, r3, #1
 800db36:	60fa      	str	r2, [r7, #12]
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	4413      	add	r3, r2
 800db3e:	4a4d      	ldr	r2, [pc, #308]	; (800dc74 <CteateSampleData+0x188>)
 800db40:	8812      	ldrh	r2, [r2, #0]
 800db42:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=RunTime;
 800db44:	4b4c      	ldr	r3, [pc, #304]	; (800dc78 <CteateSampleData+0x18c>)
 800db46:	6819      	ldr	r1, [r3, #0]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	1c5a      	adds	r2, r3, #1
 800db4c:	60fa      	str	r2, [r7, #12]
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	4413      	add	r3, r2
 800db54:	b28a      	uxth	r2, r1
 800db56:	801a      	strh	r2, [r3, #0]

	uint16_t tmp=HAL_DAC_GetValue(&hdac,DAC_CHANNEL_1);
 800db58:	2100      	movs	r1, #0
 800db5a:	4848      	ldr	r0, [pc, #288]	; (800dc7c <CteateSampleData+0x190>)
 800db5c:	f7f5 fbcd 	bl	80032fa <HAL_DAC_GetValue>
 800db60:	4603      	mov	r3, r0
 800db62:	817b      	strh	r3, [r7, #10]
	pbuf[j++]=tmp;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	1c5a      	adds	r2, r3, #1
 800db68:	60fa      	str	r2, [r7, #12]
 800db6a:	005b      	lsls	r3, r3, #1
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	4413      	add	r3, r2
 800db70:	897a      	ldrh	r2, [r7, #10]
 800db72:	801a      	strh	r2, [r3, #0]
	
	pbuf[j++]=0;//TemperatureValue;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	60fa      	str	r2, [r7, #12]
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	4413      	add	r3, r2
 800db80:	2200      	movs	r2, #0
 800db82:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//TemperatureError;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	1c5a      	adds	r2, r3, #1
 800db88:	60fa      	str	r2, [r7, #12]
 800db8a:	005b      	lsls	r3, r3, #1
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	4413      	add	r3, r2
 800db90:	2200      	movs	r2, #0
 800db92:	801a      	strh	r2, [r3, #0]
	
/////////used for test 11 words//////////////////////////////////
	pbuf[j++]=bengPid.Target;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	1c5a      	adds	r2, r3, #1
 800db98:	60fa      	str	r2, [r7, #12]
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4413      	add	r3, r2
 800dba0:	4a37      	ldr	r2, [pc, #220]	; (800dc80 <CteateSampleData+0x194>)
 800dba2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dba4:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=bengPid.Period;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	60fa      	str	r2, [r7, #12]
 800dbac:	005b      	lsls	r3, r3, #1
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	4a33      	ldr	r2, [pc, #204]	; (800dc80 <CteateSampleData+0x194>)
 800dbb4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800dbb6:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=bengPid.Gain;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	60fa      	str	r2, [r7, #12]
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	4a2e      	ldr	r2, [pc, #184]	; (800dc80 <CteateSampleData+0x194>)
 800dbc6:	8812      	ldrh	r2, [r2, #0]
 800dbc8:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=bengPid.Kp;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	1c5a      	adds	r2, r3, #1
 800dbce:	60fa      	str	r2, [r7, #12]
 800dbd0:	005b      	lsls	r3, r3, #1
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	4a2a      	ldr	r2, [pc, #168]	; (800dc80 <CteateSampleData+0x194>)
 800dbd8:	8852      	ldrh	r2, [r2, #2]
 800dbda:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=bengPid.Ki;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	1c5a      	adds	r2, r3, #1
 800dbe0:	60fa      	str	r2, [r7, #12]
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	4a25      	ldr	r2, [pc, #148]	; (800dc80 <CteateSampleData+0x194>)
 800dbea:	8892      	ldrh	r2, [r2, #4]
 800dbec:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=bengPid.Kd;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	60fa      	str	r2, [r7, #12]
 800dbf4:	005b      	lsls	r3, r3, #1
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	4a21      	ldr	r2, [pc, #132]	; (800dc80 <CteateSampleData+0x194>)
 800dbfc:	88d2      	ldrh	r2, [r2, #6]
 800dbfe:	801a      	strh	r2, [r3, #0]

	pbuf[j++]=bengTest;
 800dc00:	4b20      	ldr	r3, [pc, #128]	; (800dc84 <CteateSampleData+0x198>)
 800dc02:	7819      	ldrb	r1, [r3, #0]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	1c5a      	adds	r2, r3, #1
 800dc08:	60fa      	str	r2, [r7, #12]
 800dc0a:	005b      	lsls	r3, r3, #1
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	4413      	add	r3, r2
 800dc10:	b28a      	uxth	r2, r1
 800dc12:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=madaTest;
 800dc14:	4b1c      	ldr	r3, [pc, #112]	; (800dc88 <CteateSampleData+0x19c>)
 800dc16:	7819      	ldrb	r1, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	60fa      	str	r2, [r7, #12]
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	4413      	add	r3, r2
 800dc24:	b28a      	uxth	r2, r1
 800dc26:	801a      	strh	r2, [r3, #0]

	pbuf[j++]=bengPid.AbsOfIncrease;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	1c5a      	adds	r2, r3, #1
 800dc2c:	60fa      	str	r2, [r7, #12]
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	4413      	add	r3, r2
 800dc34:	4a12      	ldr	r2, [pc, #72]	; (800dc80 <CteateSampleData+0x194>)
 800dc36:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800dc38:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=bengPid.PrdCnt;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	1c5a      	adds	r2, r3, #1
 800dc3e:	60fa      	str	r2, [r7, #12]
 800dc40:	005b      	lsls	r3, r3, #1
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	4413      	add	r3, r2
 800dc46:	4a0e      	ldr	r2, [pc, #56]	; (800dc80 <CteateSampleData+0x194>)
 800dc48:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800dc4a:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	1c5a      	adds	r2, r3, #1
 800dc50:	60fa      	str	r2, [r7, #12]
 800dc52:	005b      	lsls	r3, r3, #1
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	4413      	add	r3, r2
 800dc58:	2200      	movs	r2, #0
 800dc5a:	801a      	strh	r2, [r3, #0]
//36
	return j;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	20007940 	.word	0x20007940
 800dc6c:	20007942 	.word	0x20007942
 800dc70:	2000796c 	.word	0x2000796c
 800dc74:	2000493c 	.word	0x2000493c
 800dc78:	20004938 	.word	0x20004938
 800dc7c:	20004a20 	.word	0x20004a20
 800dc80:	20008054 	.word	0x20008054
 800dc84:	20007fe4 	.word	0x20007fe4
 800dc88:	20007fec 	.word	0x20007fec

0800dc8c <makeErrorReturn>:
#define NOT_SUPPORT 	0X01
#define OVER_STEP		0X02
#define REGISTER_ERR	0X03
#define WR_ERR			0X04

int makeErrorReturn(uint8_t funCode,uint8_t errCode,uint8_t *pDstBuf){
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4603      	mov	r3, r0
 800dc94:	603a      	str	r2, [r7, #0]
 800dc96:	71fb      	strb	r3, [r7, #7]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	71bb      	strb	r3, [r7, #6]
	int j=0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	60fb      	str	r3, [r7, #12]
	pDstBuf[j++]=LocalAddr;			//地址
 800dca0:	4b1e      	ldr	r3, [pc, #120]	; (800dd1c <makeErrorReturn+0x90>)
 800dca2:	8819      	ldrh	r1, [r3, #0]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	60fa      	str	r2, [r7, #12]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	4413      	add	r3, r2
 800dcb0:	b2ca      	uxtb	r2, r1
 800dcb2:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=(funCode+0x80);	//功能码
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	1c5a      	adds	r2, r3, #1
 800dcb8:	60fa      	str	r2, [r7, #12]
 800dcba:	461a      	mov	r2, r3
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	79fa      	ldrb	r2, [r7, #7]
 800dcc2:	3a80      	subs	r2, #128	; 0x80
 800dcc4:	b2d2      	uxtb	r2, r2
 800dcc6:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=errCode;			//错误码
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	1c5a      	adds	r2, r3, #1
 800dccc:	60fa      	str	r2, [r7, #12]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	79ba      	ldrb	r2, [r7, #6]
 800dcd6:	701a      	strb	r2, [r3, #0]

	uint16_t crc=CRC16(pDstBuf,j);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6838      	ldr	r0, [r7, #0]
 800dce0:	f7ff f9c4 	bl	800d06c <CRC16>
 800dce4:	4603      	mov	r3, r0
 800dce6:	817b      	strh	r3, [r7, #10]
	pDstBuf[j++]=crc;				//校验
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	1c5a      	adds	r2, r3, #1
 800dcec:	60fa      	str	r2, [r7, #12]
 800dcee:	461a      	mov	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	897a      	ldrh	r2, [r7, #10]
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=crc>>8;
 800dcfa:	897b      	ldrh	r3, [r7, #10]
 800dcfc:	0a1b      	lsrs	r3, r3, #8
 800dcfe:	b299      	uxth	r1, r3
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	60fa      	str	r2, [r7, #12]
 800dd06:	461a      	mov	r2, r3
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	b2ca      	uxtb	r2, r1
 800dd0e:	701a      	strb	r2, [r3, #0]

	return j;
 800dd10:	68fb      	ldr	r3, [r7, #12]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	200086b8 	.word	0x200086b8

0800dd20 <ReturnCopy>:
//返回原报文的前6个字节+CRC
int ReturnCopy(uint8_t * pData,uint8_t *pDstBuf)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
	memcpy(pDstBuf,pData,6);
 800dd2a:	2206      	movs	r2, #6
 800dd2c:	6879      	ldr	r1, [r7, #4]
 800dd2e:	6838      	ldr	r0, [r7, #0]
 800dd30:	f002 f94a 	bl	800ffc8 <memcpy>
	uint16_t crc=CRC16(pDstBuf,6);
 800dd34:	2106      	movs	r1, #6
 800dd36:	6838      	ldr	r0, [r7, #0]
 800dd38:	f7ff f998 	bl	800d06c <CRC16>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	81fb      	strh	r3, [r7, #14]
	pDstBuf[6]=crc;			//校验
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	3306      	adds	r3, #6
 800dd44:	89fa      	ldrh	r2, [r7, #14]
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	701a      	strb	r2, [r3, #0]
	pDstBuf[7]=crc>>8;
 800dd4a:	89fb      	ldrh	r3, [r7, #14]
 800dd4c:	0a1b      	lsrs	r3, r3, #8
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	3307      	adds	r3, #7
 800dd54:	b2d2      	uxtb	r2, r2
 800dd56:	701a      	strb	r2, [r3, #0]

	return 8;
 800dd58:	2308      	movs	r3, #8
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
	...

0800dd64 <makeReturnData>:

//读寄存器返回
int makeReturnData(uint8_t funCode,uint16_t* pSrcBuf,uint8_t regNUm,uint8_t *pDstBuf)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b088      	sub	sp, #32
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60b9      	str	r1, [r7, #8]
 800dd6c:	607b      	str	r3, [r7, #4]
 800dd6e:	4603      	mov	r3, r0
 800dd70:	73fb      	strb	r3, [r7, #15]
 800dd72:	4613      	mov	r3, r2
 800dd74:	73bb      	strb	r3, [r7, #14]
	int j=0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	61fb      	str	r3, [r7, #28]
	pDstBuf[j++]=LocalAddr;	//地址
 800dd7a:	4b31      	ldr	r3, [pc, #196]	; (800de40 <makeReturnData+0xdc>)
 800dd7c:	8819      	ldrh	r1, [r3, #0]
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	1c5a      	adds	r2, r3, #1
 800dd82:	61fa      	str	r2, [r7, #28]
 800dd84:	461a      	mov	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4413      	add	r3, r2
 800dd8a:	b2ca      	uxtb	r2, r1
 800dd8c:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=funCode;	//功能码
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	61fa      	str	r2, [r7, #28]
 800dd94:	461a      	mov	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4413      	add	r3, r2
 800dd9a:	7bfa      	ldrb	r2, [r7, #15]
 800dd9c:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=regNUm*2;	//数据长度=寄存器个数*2
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	61fa      	str	r2, [r7, #28]
 800dda4:	461a      	mov	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4413      	add	r3, r2
 800ddaa:	7bba      	ldrb	r2, [r7, #14]
 800ddac:	0052      	lsls	r2, r2, #1
 800ddae:	b2d2      	uxtb	r2, r2
 800ddb0:	701a      	strb	r2, [r3, #0]

	//数据区 高位在前
	for(int i=0;i<regNUm;i++)
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	61bb      	str	r3, [r7, #24]
 800ddb6:	e01e      	b.n	800ddf6 <makeReturnData+0x92>
	{
		pDstBuf[j++]=pSrcBuf[i]>>8;
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	005b      	lsls	r3, r3, #1
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	0a1b      	lsrs	r3, r3, #8
 800ddc4:	b299      	uxth	r1, r3
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	61fa      	str	r2, [r7, #28]
 800ddcc:	461a      	mov	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	b2ca      	uxtb	r2, r1
 800ddd4:	701a      	strb	r2, [r3, #0]
		pDstBuf[j++]=pSrcBuf[i];
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	4413      	add	r3, r2
 800ddde:	8819      	ldrh	r1, [r3, #0]
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	61fa      	str	r2, [r7, #28]
 800dde6:	461a      	mov	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4413      	add	r3, r2
 800ddec:	b2ca      	uxtb	r2, r1
 800ddee:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<regNUm;i++)
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	61bb      	str	r3, [r7, #24]
 800ddf6:	7bbb      	ldrb	r3, [r7, #14]
 800ddf8:	69ba      	ldr	r2, [r7, #24]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	dbdc      	blt.n	800ddb8 <makeReturnData+0x54>
	}

	uint16_t crc=CRC16(pDstBuf,j);
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	b29b      	uxth	r3, r3
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff f931 	bl	800d06c <CRC16>
 800de0a:	4603      	mov	r3, r0
 800de0c:	82fb      	strh	r3, [r7, #22]
	pDstBuf[j++]=crc;		//校验
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	1c5a      	adds	r2, r3, #1
 800de12:	61fa      	str	r2, [r7, #28]
 800de14:	461a      	mov	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4413      	add	r3, r2
 800de1a:	8afa      	ldrh	r2, [r7, #22]
 800de1c:	b2d2      	uxtb	r2, r2
 800de1e:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=crc>>8;
 800de20:	8afb      	ldrh	r3, [r7, #22]
 800de22:	0a1b      	lsrs	r3, r3, #8
 800de24:	b299      	uxth	r1, r3
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	1c5a      	adds	r2, r3, #1
 800de2a:	61fa      	str	r2, [r7, #28]
 800de2c:	461a      	mov	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4413      	add	r3, r2
 800de32:	b2ca      	uxtb	r2, r1
 800de34:	701a      	strb	r2, [r3, #0]

	return j;
 800de36:	69fb      	ldr	r3, [r7, #28]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3720      	adds	r7, #32
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	200086b8 	.word	0x200086b8

0800de44 <makeReturnDataByte>:
int makeReturnDataByte(uint8_t funCode,uint8_t* pSrcBuf,uint8_t len,uint8_t *pDstBuf)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b088      	sub	sp, #32
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60b9      	str	r1, [r7, #8]
 800de4c:	607b      	str	r3, [r7, #4]
 800de4e:	4603      	mov	r3, r0
 800de50:	73fb      	strb	r3, [r7, #15]
 800de52:	4613      	mov	r3, r2
 800de54:	73bb      	strb	r3, [r7, #14]
	int j=0;
 800de56:	2300      	movs	r3, #0
 800de58:	61fb      	str	r3, [r7, #28]
	pDstBuf[j++]=LocalAddr;	//地址
 800de5a:	4b28      	ldr	r3, [pc, #160]	; (800defc <makeReturnDataByte+0xb8>)
 800de5c:	8819      	ldrh	r1, [r3, #0]
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	1c5a      	adds	r2, r3, #1
 800de62:	61fa      	str	r2, [r7, #28]
 800de64:	461a      	mov	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4413      	add	r3, r2
 800de6a:	b2ca      	uxtb	r2, r1
 800de6c:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=funCode;	//功能码
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	1c5a      	adds	r2, r3, #1
 800de72:	61fa      	str	r2, [r7, #28]
 800de74:	461a      	mov	r2, r3
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4413      	add	r3, r2
 800de7a:	7bfa      	ldrb	r2, [r7, #15]
 800de7c:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=len;		//字节数
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	61fa      	str	r2, [r7, #28]
 800de84:	461a      	mov	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4413      	add	r3, r2
 800de8a:	7bba      	ldrb	r2, [r7, #14]
 800de8c:	701a      	strb	r2, [r3, #0]
	
	//数据区 高位在前
	for(int i=0;i<len;i++)pDstBuf[j++]=pSrcBuf[i];
 800de8e:	2300      	movs	r3, #0
 800de90:	61bb      	str	r3, [r7, #24]
 800de92:	e00d      	b.n	800deb0 <makeReturnDataByte+0x6c>
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	68ba      	ldr	r2, [r7, #8]
 800de98:	441a      	add	r2, r3
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	1c59      	adds	r1, r3, #1
 800de9e:	61f9      	str	r1, [r7, #28]
 800dea0:	4619      	mov	r1, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	440b      	add	r3, r1
 800dea6:	7812      	ldrb	r2, [r2, #0]
 800dea8:	701a      	strb	r2, [r3, #0]
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	3301      	adds	r3, #1
 800deae:	61bb      	str	r3, [r7, #24]
 800deb0:	7bbb      	ldrb	r3, [r7, #14]
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	dbed      	blt.n	800de94 <makeReturnDataByte+0x50>

	uint16_t crc=CRC16(pDstBuf,j);
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	b29b      	uxth	r3, r3
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff f8d4 	bl	800d06c <CRC16>
 800dec4:	4603      	mov	r3, r0
 800dec6:	82fb      	strh	r3, [r7, #22]
	pDstBuf[j++]=crc;		//校验
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	1c5a      	adds	r2, r3, #1
 800decc:	61fa      	str	r2, [r7, #28]
 800dece:	461a      	mov	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4413      	add	r3, r2
 800ded4:	8afa      	ldrh	r2, [r7, #22]
 800ded6:	b2d2      	uxtb	r2, r2
 800ded8:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=crc>>8;
 800deda:	8afb      	ldrh	r3, [r7, #22]
 800dedc:	0a1b      	lsrs	r3, r3, #8
 800dede:	b299      	uxth	r1, r3
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	61fa      	str	r2, [r7, #28]
 800dee6:	461a      	mov	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4413      	add	r3, r2
 800deec:	b2ca      	uxtb	r2, r1
 800deee:	701a      	strb	r2, [r3, #0]
	
	return j;
 800def0:	69fb      	ldr	r3, [r7, #28]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3720      	adds	r7, #32
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	200086b8 	.word	0x200086b8

0800df00 <MbusReadCoils>:

//1 读线圈
int MbusReadCoils(uint8_t *pData,uint8_t *pDstBuf)//regNumber 表示多少位
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08e      	sub	sp, #56	; 0x38
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
	uint8_t FunctionCode;
	uint16_t Register,regNumber;
	FunctionCode=pData[1];	//功能码
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	785b      	ldrb	r3, [r3, #1]
 800df0e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	Register=pData[2]<<8;	//寄存器地址
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	3302      	adds	r3, #2
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	b29b      	uxth	r3, r3
 800df1a:	021b      	lsls	r3, r3, #8
 800df1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Register|=pData[3];
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3303      	adds	r3, #3
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	b29a      	uxth	r2, r3
 800df26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df28:	4313      	orrs	r3, r2
 800df2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	regNumber=pData[4]<<8;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	3304      	adds	r3, #4
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	b29b      	uxth	r3, r3
 800df34:	021b      	lsls	r3, r3, #8
 800df36:	85bb      	strh	r3, [r7, #44]	; 0x2c
	regNumber|=pData[5];
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	3305      	adds	r3, #5
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	b29a      	uxth	r2, r3
 800df40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df42:	4313      	orrs	r3, r2
 800df44:	85bb      	strh	r3, [r7, #44]	; 0x2c

	int size=0;
 800df46:	2300      	movs	r3, #0
 800df48:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t DoBuf[16];
	switch(Register){
 800df4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df50:	d11b      	bne.n	800df8a <MbusReadCoils+0x8a>
	case InputsRegister:
		DoBuf[0]=KoutStatus;
 800df52:	4b15      	ldr	r3, [pc, #84]	; (800dfa8 <MbusReadCoils+0xa8>)
 800df54:	881b      	ldrh	r3, [r3, #0]
 800df56:	81bb      	strh	r3, [r7, #12]
		DoBuf[1]=KoutStatus;
 800df58:	4b13      	ldr	r3, [pc, #76]	; (800dfa8 <MbusReadCoils+0xa8>)
 800df5a:	881b      	ldrh	r3, [r3, #0]
 800df5c:	81fb      	strh	r3, [r7, #14]
		uint16_t len=regNumber/8;
 800df5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df60:	08db      	lsrs	r3, r3, #3
 800df62:	867b      	strh	r3, [r7, #50]	; 0x32
		if(regNumber%8) len++;
 800df64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df66:	f003 0307 	and.w	r3, r3, #7
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <MbusReadCoils+0x76>
 800df70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800df72:	3301      	adds	r3, #1
 800df74:	867b      	strh	r3, [r7, #50]	; 0x32
		size=makeReturnDataByte(ReadCoils,(uint8_t*)DoBuf,len,pDstBuf);
 800df76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	f107 010c 	add.w	r1, r7, #12
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	2001      	movs	r0, #1
 800df82:	f7ff ff5f 	bl	800de44 <makeReturnDataByte>
 800df86:	6378      	str	r0, [r7, #52]	; 0x34
		break;
 800df88:	e008      	b.n	800df9c <MbusReadCoils+0x9c>
	default:
		size=makeErrorReturn(FunctionCode,REGISTER_ERR,pDstBuf);
 800df8a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800df8e:	683a      	ldr	r2, [r7, #0]
 800df90:	2103      	movs	r1, #3
 800df92:	4618      	mov	r0, r3
 800df94:	f7ff fe7a 	bl	800dc8c <makeErrorReturn>
 800df98:	6378      	str	r0, [r7, #52]	; 0x34
		break;
 800df9a:	bf00      	nop
	}
	return size;
 800df9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3738      	adds	r7, #56	; 0x38
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	2000796c 	.word	0x2000796c

0800dfac <MbusReadInputs>:

//2 读输入点 开入量
int MbusReadInputs(uint8_t *pData,uint8_t *pDstBuf)//regNumber 表示多少位
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08e      	sub	sp, #56	; 0x38
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
	uint8_t FunctionCode;
	uint16_t Register,regNumber;
	FunctionCode=pData[1];	//功能码
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	785b      	ldrb	r3, [r3, #1]
 800dfba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	Register=pData[2]<<8;	//寄存器地址
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	3302      	adds	r3, #2
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	021b      	lsls	r3, r3, #8
 800dfc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Register|=pData[3];
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3303      	adds	r3, #3
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	regNumber=pData[4]<<8;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	3304      	adds	r3, #4
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	021b      	lsls	r3, r3, #8
 800dfe2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	regNumber|=pData[5];
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	3305      	adds	r3, #5
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfee:	4313      	orrs	r3, r2
 800dff0:	85bb      	strh	r3, [r7, #44]	; 0x2c

	int size=0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t DiBuf[16];
	switch(Register){
 800dff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dffc:	d118      	bne.n	800e030 <MbusReadInputs+0x84>
	case InputsRegister:
		DiBuf[0]=KinStatus;
 800dffe:	4b13      	ldr	r3, [pc, #76]	; (800e04c <MbusReadInputs+0xa0>)
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	81bb      	strh	r3, [r7, #12]
		uint16_t len=regNumber/8;
 800e004:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e006:	08db      	lsrs	r3, r3, #3
 800e008:	867b      	strh	r3, [r7, #50]	; 0x32
		if(regNumber%8) len++;
 800e00a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e00c:	f003 0307 	and.w	r3, r3, #7
 800e010:	b29b      	uxth	r3, r3
 800e012:	2b00      	cmp	r3, #0
 800e014:	d002      	beq.n	800e01c <MbusReadInputs+0x70>
 800e016:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e018:	3301      	adds	r3, #1
 800e01a:	867b      	strh	r3, [r7, #50]	; 0x32
		size=makeReturnDataByte(ReadInputs,(uint8_t*)DiBuf,len,pDstBuf);
 800e01c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	f107 010c 	add.w	r1, r7, #12
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2002      	movs	r0, #2
 800e028:	f7ff ff0c 	bl	800de44 <makeReturnDataByte>
 800e02c:	6378      	str	r0, [r7, #52]	; 0x34
		break;
 800e02e:	e008      	b.n	800e042 <MbusReadInputs+0x96>
	default:
		size=makeErrorReturn(FunctionCode,REGISTER_ERR,pDstBuf);
 800e030:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	2103      	movs	r1, #3
 800e038:	4618      	mov	r0, r3
 800e03a:	f7ff fe27 	bl	800dc8c <makeErrorReturn>
 800e03e:	6378      	str	r0, [r7, #52]	; 0x34
		break;
 800e040:	bf00      	nop
	}
	return size;
 800e042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e044:	4618      	mov	r0, r3
 800e046:	3738      	adds	r7, #56	; 0x38
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	20007942 	.word	0x20007942

0800e050 <MbusReadHoldingRegisters>:

//3 读保持寄存器
int MbusReadHoldingRegisters(uint8_t *pData,uint8_t *pDstBuf)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
	uint8_t FunctionCode;
	uint16_t Register,regNumber;
	FunctionCode=pData[1];	//功能码
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	785b      	ldrb	r3, [r3, #1]
 800e05e:	74fb      	strb	r3, [r7, #19]
	Register=pData[2]<<8;	//寄存器地址
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	3302      	adds	r3, #2
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	b29b      	uxth	r3, r3
 800e068:	021b      	lsls	r3, r3, #8
 800e06a:	823b      	strh	r3, [r7, #16]
	Register|=pData[3];
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3303      	adds	r3, #3
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	b29a      	uxth	r2, r3
 800e074:	8a3b      	ldrh	r3, [r7, #16]
 800e076:	4313      	orrs	r3, r2
 800e078:	823b      	strh	r3, [r7, #16]
	regNumber=pData[4]<<8;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	3304      	adds	r3, #4
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	b29b      	uxth	r3, r3
 800e082:	021b      	lsls	r3, r3, #8
 800e084:	81fb      	strh	r3, [r7, #14]
	regNumber|=pData[5];
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	3305      	adds	r3, #5
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	89fb      	ldrh	r3, [r7, #14]
 800e090:	4313      	orrs	r3, r2
 800e092:	81fb      	strh	r3, [r7, #14]

	int size=0;
 800e094:	2300      	movs	r3, #0
 800e096:	617b      	str	r3, [r7, #20]
	if(Register>=ParameterRegister){
 800e098:	8a3b      	ldrh	r3, [r7, #16]
 800e09a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e09e:	d30d      	bcc.n	800e0bc <MbusReadHoldingRegisters+0x6c>
		size=makeReturnData(ReadHoldingRegisters,&Parameters[Register-ParameterRegister],regNumber,pDstBuf);
 800e0a0:	8a3b      	ldrh	r3, [r7, #16]
 800e0a2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	4a0a      	ldr	r2, [pc, #40]	; (800e0d4 <MbusReadHoldingRegisters+0x84>)
 800e0aa:	1899      	adds	r1, r3, r2
 800e0ac:	89fb      	ldrh	r3, [r7, #14]
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	2003      	movs	r0, #3
 800e0b4:	f7ff fe56 	bl	800dd64 <makeReturnData>
 800e0b8:	6178      	str	r0, [r7, #20]
 800e0ba:	e006      	b.n	800e0ca <MbusReadHoldingRegisters+0x7a>
	}
	else{
		size=makeErrorReturn(FunctionCode,REGISTER_ERR,pDstBuf);
 800e0bc:	7cfb      	ldrb	r3, [r7, #19]
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	2103      	movs	r1, #3
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff fde2 	bl	800dc8c <makeErrorReturn>
 800e0c8:	6178      	str	r0, [r7, #20]
	}
	return size;
 800e0ca:	697b      	ldr	r3, [r7, #20]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3718      	adds	r7, #24
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	200088f0 	.word	0x200088f0

0800e0d8 <MbusReadInputRegisters>:

//4 读输入寄存器
int MbusReadInputRegisters(uint8_t *pData,uint8_t *pDstBuf)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
	uint8_t FunctionCode;
	uint16_t Register,regNumber;
	FunctionCode=pData[1];	//功能码
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	785b      	ldrb	r3, [r3, #1]
 800e0e6:	74fb      	strb	r3, [r7, #19]
	Register=pData[2]<<8;	//寄存器地址
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3302      	adds	r3, #2
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	021b      	lsls	r3, r3, #8
 800e0f2:	823b      	strh	r3, [r7, #16]
	Register|=pData[3];
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	3303      	adds	r3, #3
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	b29a      	uxth	r2, r3
 800e0fc:	8a3b      	ldrh	r3, [r7, #16]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	823b      	strh	r3, [r7, #16]
	regNumber=pData[4]<<8;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	3304      	adds	r3, #4
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	b29b      	uxth	r3, r3
 800e10a:	021b      	lsls	r3, r3, #8
 800e10c:	81fb      	strh	r3, [r7, #14]
	regNumber|=pData[5];
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	3305      	adds	r3, #5
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	b29a      	uxth	r2, r3
 800e116:	89fb      	ldrh	r3, [r7, #14]
 800e118:	4313      	orrs	r3, r2
 800e11a:	81fb      	strh	r3, [r7, #14]

	int size=0;
 800e11c:	2300      	movs	r3, #0
 800e11e:	617b      	str	r3, [r7, #20]
	if(Register>=SampleRegister){
 800e120:	8a3b      	ldrh	r3, [r7, #16]
 800e122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e126:	d310      	bcc.n	800e14a <MbusReadInputRegisters+0x72>
		CteateSampleData(AllSampleBuf);//36个字
 800e128:	480e      	ldr	r0, [pc, #56]	; (800e164 <MbusReadInputRegisters+0x8c>)
 800e12a:	f7ff fcdf 	bl	800daec <CteateSampleData>
		size=makeReturnData(ReadInputRegisters,&AllSampleBuf[Register-SampleRegister],regNumber,pDstBuf);
 800e12e:	8a3b      	ldrh	r3, [r7, #16]
 800e130:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4a0b      	ldr	r2, [pc, #44]	; (800e164 <MbusReadInputRegisters+0x8c>)
 800e138:	1899      	adds	r1, r3, r2
 800e13a:	89fb      	ldrh	r3, [r7, #14]
 800e13c:	b2da      	uxtb	r2, r3
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	2004      	movs	r0, #4
 800e142:	f7ff fe0f 	bl	800dd64 <makeReturnData>
 800e146:	6178      	str	r0, [r7, #20]
 800e148:	e006      	b.n	800e158 <MbusReadInputRegisters+0x80>
	}
	else{
		size=makeErrorReturn(FunctionCode,REGISTER_ERR,pDstBuf);
 800e14a:	7cfb      	ldrb	r3, [r7, #19]
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	2103      	movs	r1, #3
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff fd9b 	bl	800dc8c <makeErrorReturn>
 800e156:	6178      	str	r0, [r7, #20]
	}
	return size;
 800e158:	697b      	ldr	r3, [r7, #20]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3718      	adds	r7, #24
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	200077fc 	.word	0x200077fc

0800e168 <MbusWriteSingleCoil>:


//5 写单个线圈
int MbusWriteSingleCoil(uint8_t *pData,uint8_t *pDstBuf)//opCode true-0xff00 false-0x0000
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
	uint8_t FunctionCode;
	uint16_t CoilIndex,opCode;
	FunctionCode=pData[1];	//功能码
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	785b      	ldrb	r3, [r3, #1]
 800e176:	74fb      	strb	r3, [r7, #19]
	CoilIndex=pData[2]<<8;	//寄存器地址
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	3302      	adds	r3, #2
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	021b      	lsls	r3, r3, #8
 800e182:	823b      	strh	r3, [r7, #16]
	CoilIndex|=pData[3];
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	3303      	adds	r3, #3
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	8a3b      	ldrh	r3, [r7, #16]
 800e18e:	4313      	orrs	r3, r2
 800e190:	823b      	strh	r3, [r7, #16]
	opCode=pData[4]<<8;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	3304      	adds	r3, #4
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	021b      	lsls	r3, r3, #8
 800e19c:	81fb      	strh	r3, [r7, #14]
	opCode|=pData[5];
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	3305      	adds	r3, #5
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	89fb      	ldrh	r3, [r7, #14]
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	81fb      	strh	r3, [r7, #14]

	int size=0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	617b      	str	r3, [r7, #20]
	if(CoilIndex<TOTAL_OUT){
 800e1b0:	8a3b      	ldrh	r3, [r7, #16]
 800e1b2:	2b09      	cmp	r3, #9
 800e1b4:	d813      	bhi.n	800e1de <MbusWriteSingleCoil+0x76>
		if(opCode==0)	//0X0000
 800e1b6:	89fb      	ldrh	r3, [r7, #14]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d105      	bne.n	800e1c8 <MbusWriteSingleCoil+0x60>
			Out_Cmd[CoilIndex]=K_CMD_OFF;
 800e1bc:	8a3b      	ldrh	r3, [r7, #16]
 800e1be:	4a0e      	ldr	r2, [pc, #56]	; (800e1f8 <MbusWriteSingleCoil+0x90>)
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800e1c6:	e004      	b.n	800e1d2 <MbusWriteSingleCoil+0x6a>
		else			//0XFF00
			Out_Cmd[CoilIndex]=K_CMD_ON; //0xff00
 800e1c8:	8a3b      	ldrh	r3, [r7, #16]
 800e1ca:	4a0b      	ldr	r2, [pc, #44]	; (800e1f8 <MbusWriteSingleCoil+0x90>)
 800e1cc:	2101      	movs	r1, #1
 800e1ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		size=ReturnCopy(pData,pDstBuf);
 800e1d2:	6839      	ldr	r1, [r7, #0]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7ff fda3 	bl	800dd20 <ReturnCopy>
 800e1da:	6178      	str	r0, [r7, #20]
 800e1dc:	e006      	b.n	800e1ec <MbusWriteSingleCoil+0x84>
	}
	else{
		size=makeErrorReturn(FunctionCode,REGISTER_ERR,pDstBuf);
 800e1de:	7cfb      	ldrb	r3, [r7, #19]
 800e1e0:	683a      	ldr	r2, [r7, #0]
 800e1e2:	2103      	movs	r1, #3
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7ff fd51 	bl	800dc8c <makeErrorReturn>
 800e1ea:	6178      	str	r0, [r7, #20]
	}
	return size;
 800e1ec:	697b      	ldr	r3, [r7, #20]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3718      	adds	r7, #24
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	20007958 	.word	0x20007958

0800e1fc <MbusWriteSingleRegister>:

//6 写单个寄存器
int MbusWriteSingleRegister(uint8_t * pData,uint8_t *pDstBuf)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
	uint8_t FunctionCode;
	uint16_t Register,regValue;
	//StationID=pData[0];	//地址码
	FunctionCode=pData[1];	//功能码
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	785b      	ldrb	r3, [r3, #1]
 800e20a:	74fb      	strb	r3, [r7, #19]
	Register=pData[2]<<8;	//寄存器地址 高位在前
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3302      	adds	r3, #2
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	b29b      	uxth	r3, r3
 800e214:	021b      	lsls	r3, r3, #8
 800e216:	823b      	strh	r3, [r7, #16]
	Register|=pData[3];
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	3303      	adds	r3, #3
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	b29a      	uxth	r2, r3
 800e220:	8a3b      	ldrh	r3, [r7, #16]
 800e222:	4313      	orrs	r3, r2
 800e224:	823b      	strh	r3, [r7, #16]
	regValue=pData[4]<<8;	//寄存器的值
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	3304      	adds	r3, #4
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	021b      	lsls	r3, r3, #8
 800e230:	81fb      	strh	r3, [r7, #14]
	regValue|=pData[5];
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	3305      	adds	r3, #5
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	b29a      	uxth	r2, r3
 800e23a:	89fb      	ldrh	r3, [r7, #14]
 800e23c:	4313      	orrs	r3, r2
 800e23e:	81fb      	strh	r3, [r7, #14]

	int size=0;
 800e240:	2300      	movs	r3, #0
 800e242:	617b      	str	r3, [r7, #20]
	switch(Register){
 800e244:	8a3b      	ldrh	r3, [r7, #16]
 800e246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e24a:	d109      	bne.n	800e260 <MbusWriteSingleRegister+0x64>
	case StopMotorRegister:
		StopMotor(regValue);
 800e24c:	89fb      	ldrh	r3, [r7, #14]
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 fb38 	bl	800e8c4 <StopMotor>
		size=ReturnCopy(pData,pDstBuf);
 800e254:	6839      	ldr	r1, [r7, #0]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7ff fd62 	bl	800dd20 <ReturnCopy>
 800e25c:	6178      	str	r0, [r7, #20]
		break;
 800e25e:	e007      	b.n	800e270 <MbusWriteSingleRegister+0x74>
	default:
		size=makeErrorReturn(FunctionCode,REGISTER_ERR,pDstBuf);
 800e260:	7cfb      	ldrb	r3, [r7, #19]
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	2103      	movs	r1, #3
 800e266:	4618      	mov	r0, r3
 800e268:	f7ff fd10 	bl	800dc8c <makeErrorReturn>
 800e26c:	6178      	str	r0, [r7, #20]
		break;
 800e26e:	bf00      	nop
	}
	return size;
 800e270:	697b      	ldr	r3, [r7, #20]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3718      	adds	r7, #24
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <MbusWriteMultipleCoils>:

//15 写多个线圈
int MbusWriteMultipleCoils(uint8_t * pData,uint8_t *pDstBuf)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b084      	sub	sp, #16
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	6039      	str	r1, [r7, #0]
	//uint8_t FunctionCode;
	uint16_t Register,regNumber;
	//StationID=pData[0];		//地址码
	//FunctionCode=pData[1];	//功能码
	Register=pData[2]<<8;		//寄存器地址
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3302      	adds	r3, #2
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	021b      	lsls	r3, r3, #8
 800e28e:	81fb      	strh	r3, [r7, #14]
	Register|=pData[3];
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3303      	adds	r3, #3
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	b29a      	uxth	r2, r3
 800e298:	89fb      	ldrh	r3, [r7, #14]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	81fb      	strh	r3, [r7, #14]
	regNumber=pData[4]<<8;		//寄存器个数
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	021b      	lsls	r3, r3, #8
 800e2a8:	81bb      	strh	r3, [r7, #12]
	regNumber|=pData[5];
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	3305      	adds	r3, #5
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	89bb      	ldrh	r3, [r7, #12]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	81bb      	strh	r3, [r7, #12]

	int size=0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	60bb      	str	r3, [r7, #8]
	//size=makeErrorReturn(FunctionCode,REGISTER_ERR,pDstBuf);
	size=ReturnCopy(pData,pDstBuf);
 800e2bc:	6839      	ldr	r1, [r7, #0]
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f7ff fd2e 	bl	800dd20 <ReturnCopy>
 800e2c4:	60b8      	str	r0, [r7, #8]
	return size;
 800e2c6:	68bb      	ldr	r3, [r7, #8]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <GetModBusWord>:
uint16_t GetModBusWord(uint8_t *pData)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	temp=pData[0]<<8;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	021b      	lsls	r3, r3, #8
 800e2e0:	81fb      	strh	r3, [r7, #14]
	temp|=pData[1];
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	89fb      	ldrh	r3, [r7, #14]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	81fb      	strh	r3, [r7, #14]
	return temp;
 800e2f0:	89fb      	ldrh	r3, [r7, #14]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
	...

0800e300 <MbusWriteMultipleRegisters>:
//16 写多个寄存器
int MbusWriteMultipleRegisters(uint8_t*pData,uint8_t *pDstBuf)
{
 800e300:	b590      	push	{r4, r7, lr}
 800e302:	b089      	sub	sp, #36	; 0x24
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
	uint8_t FunctionCode;
	uint16_t Register,regNumber;
	//StationID=pData[0];		//地址码
	FunctionCode=pData[1];	//功能码
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	785b      	ldrb	r3, [r3, #1]
 800e30e:	74fb      	strb	r3, [r7, #19]
	Register=pData[2]<<8;		//寄存器地址 16bit
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3302      	adds	r3, #2
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	b29b      	uxth	r3, r3
 800e318:	021b      	lsls	r3, r3, #8
 800e31a:	823b      	strh	r3, [r7, #16]
	Register|=pData[3];
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	3303      	adds	r3, #3
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	b29a      	uxth	r2, r3
 800e324:	8a3b      	ldrh	r3, [r7, #16]
 800e326:	4313      	orrs	r3, r2
 800e328:	823b      	strh	r3, [r7, #16]
	regNumber=pData[4]<<8;		//寄存器个数
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	3304      	adds	r3, #4
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	b29b      	uxth	r3, r3
 800e332:	021b      	lsls	r3, r3, #8
 800e334:	81fb      	strh	r3, [r7, #14]
	regNumber|=pData[5];
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	3305      	adds	r3, #5
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	89fb      	ldrh	r3, [r7, #14]
 800e340:	4313      	orrs	r3, r2
 800e342:	81fb      	strh	r3, [r7, #14]
//	uint8_t datalen=pData[6];	//数据长度=寄存器个数*2

	int size=0;
 800e344:	2300      	movs	r3, #0
 800e346:	61fb      	str	r3, [r7, #28]
	//写参数
	if(Register>=ParameterRegister && Register<(ParameterRegister+PARAMETER_NUM))
 800e348:	8a3b      	ldrh	r3, [r7, #16]
 800e34a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e34e:	d337      	bcc.n	800e3c0 <MbusWriteMultipleRegisters+0xc0>
 800e350:	8a3b      	ldrh	r3, [r7, #16]
 800e352:	f240 4275 	movw	r2, #1141	; 0x475
 800e356:	4293      	cmp	r3, r2
 800e358:	d832      	bhi.n	800e3c0 <MbusWriteMultipleRegisters+0xc0>
	{
		if(regNumber>(PARAMETER_NUM+ParameterRegister-Register)) return 2;
 800e35a:	89fa      	ldrh	r2, [r7, #14]
 800e35c:	8a3b      	ldrh	r3, [r7, #16]
 800e35e:	f5c3 638e 	rsb	r3, r3, #1136	; 0x470
 800e362:	3306      	adds	r3, #6
 800e364:	429a      	cmp	r2, r3
 800e366:	dd01      	ble.n	800e36c <MbusWriteMultipleRegisters+0x6c>
 800e368:	2302      	movs	r3, #2
 800e36a:	e059      	b.n	800e420 <MbusWriteMultipleRegisters+0x120>

		uint8_t *pbuf=pData+7;	//数据从第8个字节开始(0开始)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3307      	adds	r3, #7
 800e370:	61bb      	str	r3, [r7, #24]
		for(int i=0;i<regNumber;i++)
 800e372:	2300      	movs	r3, #0
 800e374:	617b      	str	r3, [r7, #20]
 800e376:	e012      	b.n	800e39e <MbusWriteMultipleRegisters+0x9e>
		{
			Parameters[Register-ParameterRegister+i]=GetModBusWord(pbuf);
 800e378:	8a3b      	ldrh	r3, [r7, #16]
 800e37a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	18d4      	adds	r4, r2, r3
 800e382:	69b8      	ldr	r0, [r7, #24]
 800e384:	f7ff ffa4 	bl	800e2d0 <GetModBusWord>
 800e388:	4603      	mov	r3, r0
 800e38a:	461a      	mov	r2, r3
 800e38c:	4b26      	ldr	r3, [pc, #152]	; (800e428 <MbusWriteMultipleRegisters+0x128>)
 800e38e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			pbuf+=2;
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	3302      	adds	r3, #2
 800e396:	61bb      	str	r3, [r7, #24]
		for(int i=0;i<regNumber;i++)
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	3301      	adds	r3, #1
 800e39c:	617b      	str	r3, [r7, #20]
 800e39e:	89fb      	ldrh	r3, [r7, #14]
 800e3a0:	697a      	ldr	r2, [r7, #20]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	dbe8      	blt.n	800e378 <MbusWriteMultipleRegisters+0x78>
		}
		osThreadFlagsSet(defaultTaskHandle,0x01U);
 800e3a6:	4b21      	ldr	r3, [pc, #132]	; (800e42c <MbusWriteMultipleRegisters+0x12c>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2101      	movs	r1, #1
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fb fd87 	bl	8009ec0 <osThreadFlagsSet>
		//Write_All_Parameters();
		size=ReturnCopy(pData,pDstBuf);
 800e3b2:	6839      	ldr	r1, [r7, #0]
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7ff fcb3 	bl	800dd20 <ReturnCopy>
 800e3ba:	61f8      	str	r0, [r7, #28]
		return size;
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	e02f      	b.n	800e420 <MbusWriteMultipleRegisters+0x120>
	}
	
	switch(Register){
 800e3c0:	8a3b      	ldrh	r3, [r7, #16]
 800e3c2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d006      	beq.n	800e3d8 <MbusWriteMultipleRegisters+0xd8>
 800e3ca:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800e3ce:	d015      	beq.n	800e3fc <MbusWriteMultipleRegisters+0xfc>
 800e3d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e3d4:	d009      	beq.n	800e3ea <MbusWriteMultipleRegisters+0xea>
 800e3d6:	e01a      	b.n	800e40e <MbusWriteMultipleRegisters+0x10e>
	case PIDCmdRegister:
		ProcModBusPidCmd(pData);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 f9c5 	bl	800e768 <ProcModBusPidCmd>
		size=ReturnCopy(pData,pDstBuf);
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7ff fc9d 	bl	800dd20 <ReturnCopy>
 800e3e6:	61f8      	str	r0, [r7, #28]
		break;
 800e3e8:	e019      	b.n	800e41e <MbusWriteMultipleRegisters+0x11e>
	case MotorCmdRegister:
		ProcModBusDJCmd(pData);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f8c0 	bl	800e570 <ProcModBusDJCmd>
		size=ReturnCopy(pData,pDstBuf);
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7ff fc94 	bl	800dd20 <ReturnCopy>
 800e3f8:	61f8      	str	r0, [r7, #28]
		break;
 800e3fa:	e010      	b.n	800e41e <MbusWriteMultipleRegisters+0x11e>
	case KZRunCmdRegister:
		ProcKZRunCmdBuf(pData);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f913 	bl	800e628 <ProcKZRunCmdBuf>
		size=ReturnCopy(pData,pDstBuf);
 800e402:	6839      	ldr	r1, [r7, #0]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7ff fc8b 	bl	800dd20 <ReturnCopy>
 800e40a:	61f8      	str	r0, [r7, #28]
		break;
 800e40c:	e007      	b.n	800e41e <MbusWriteMultipleRegisters+0x11e>
	default:
		size=makeErrorReturn(FunctionCode,REGISTER_ERR,pDstBuf);
 800e40e:	7cfb      	ldrb	r3, [r7, #19]
 800e410:	683a      	ldr	r2, [r7, #0]
 800e412:	2103      	movs	r1, #3
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff fc39 	bl	800dc8c <makeErrorReturn>
 800e41a:	61f8      	str	r0, [r7, #28]
		break;
 800e41c:	bf00      	nop
	}
	return size;
 800e41e:	69fb      	ldr	r3, [r7, #28]
}
 800e420:	4618      	mov	r0, r3
 800e422:	3724      	adds	r7, #36	; 0x24
 800e424:	46bd      	mov	sp, r7
 800e426:	bd90      	pop	{r4, r7, pc}
 800e428:	200088f0 	.word	0x200088f0
 800e42c:	20004a94 	.word	0x20004a94

0800e430 <ParseModeBusData>:

//返回字节数
int ParseModeBusData(uint8_t * pData,uint16_t dataSize,uint8_t *pDstBuf)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b088      	sub	sp, #32
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	460b      	mov	r3, r1
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	817b      	strh	r3, [r7, #10]
	if(CRC16(pData,dataSize)!=0) return 0;
 800e43e:	897b      	ldrh	r3, [r7, #10]
 800e440:	4619      	mov	r1, r3
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f7fe fe12 	bl	800d06c <CRC16>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <ParseModeBusData+0x22>
 800e44e:	2300      	movs	r3, #0
 800e450:	e087      	b.n	800e562 <ParseModeBusData+0x132>

	uint8_t StationID,FunctionCode;
	uint16_t Register,regNumber;
	StationID=pData[0];		//地址码
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	76fb      	strb	r3, [r7, #27]
	FunctionCode=pData[1];	//功能码
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	785b      	ldrb	r3, [r3, #1]
 800e45c:	76bb      	strb	r3, [r7, #26]
	Register=pData[2]<<8;	//寄存器地址 16bit
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	3302      	adds	r3, #2
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	b29b      	uxth	r3, r3
 800e466:	021b      	lsls	r3, r3, #8
 800e468:	833b      	strh	r3, [r7, #24]
	Register|=pData[3];
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	3303      	adds	r3, #3
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	b29a      	uxth	r2, r3
 800e472:	8b3b      	ldrh	r3, [r7, #24]
 800e474:	4313      	orrs	r3, r2
 800e476:	833b      	strh	r3, [r7, #24]
	regNumber=pData[4]<<8;	
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	3304      	adds	r3, #4
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	b29b      	uxth	r3, r3
 800e480:	021b      	lsls	r3, r3, #8
 800e482:	82fb      	strh	r3, [r7, #22]
	regNumber|=pData[5];
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	3305      	adds	r3, #5
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	8afb      	ldrh	r3, [r7, #22]
 800e48e:	4313      	orrs	r3, r2
 800e490:	82fb      	strh	r3, [r7, #22]
	
	if(StationID!=LocalAddr)	//不是本机地址
 800e492:	7efb      	ldrb	r3, [r7, #27]
 800e494:	b29a      	uxth	r2, r3
 800e496:	4b35      	ldr	r3, [pc, #212]	; (800e56c <ParseModeBusData+0x13c>)
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d001      	beq.n	800e4a2 <ParseModeBusData+0x72>
	{
		return 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e05f      	b.n	800e562 <ParseModeBusData+0x132>
	}

	int size;
	switch(FunctionCode)
 800e4a2:	7ebb      	ldrb	r3, [r7, #26]
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	2b0f      	cmp	r3, #15
 800e4a8:	d852      	bhi.n	800e550 <ParseModeBusData+0x120>
 800e4aa:	a201      	add	r2, pc, #4	; (adr r2, 800e4b0 <ParseModeBusData+0x80>)
 800e4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b0:	0800e4fd 	.word	0x0800e4fd
 800e4b4:	0800e4f1 	.word	0x0800e4f1
 800e4b8:	0800e509 	.word	0x0800e509
 800e4bc:	0800e515 	.word	0x0800e515
 800e4c0:	0800e521 	.word	0x0800e521
 800e4c4:	0800e52d 	.word	0x0800e52d
 800e4c8:	0800e551 	.word	0x0800e551
 800e4cc:	0800e551 	.word	0x0800e551
 800e4d0:	0800e551 	.word	0x0800e551
 800e4d4:	0800e551 	.word	0x0800e551
 800e4d8:	0800e551 	.word	0x0800e551
 800e4dc:	0800e551 	.word	0x0800e551
 800e4e0:	0800e551 	.word	0x0800e551
 800e4e4:	0800e551 	.word	0x0800e551
 800e4e8:	0800e539 	.word	0x0800e539
 800e4ec:	0800e545 	.word	0x0800e545
	{
		case ReadInputs:				//2 读输入
			size=MbusReadInputs(pData,pDstBuf);
 800e4f0:	6879      	ldr	r1, [r7, #4]
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f7ff fd5a 	bl	800dfac <MbusReadInputs>
 800e4f8:	61f8      	str	r0, [r7, #28]
			break;
 800e4fa:	e031      	b.n	800e560 <ParseModeBusData+0x130>
		case ReadCoils:
			size=MbusReadCoils(pData,pDstBuf);
 800e4fc:	6879      	ldr	r1, [r7, #4]
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f7ff fcfe 	bl	800df00 <MbusReadCoils>
 800e504:	61f8      	str	r0, [r7, #28]
			break;
 800e506:	e02b      	b.n	800e560 <ParseModeBusData+0x130>
		case ReadHoldingRegisters:		//3 读多个寄存器
			size=MbusReadHoldingRegisters(pData,pDstBuf);
 800e508:	6879      	ldr	r1, [r7, #4]
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f7ff fda0 	bl	800e050 <MbusReadHoldingRegisters>
 800e510:	61f8      	str	r0, [r7, #28]
		break;
 800e512:	e025      	b.n	800e560 <ParseModeBusData+0x130>

		case ReadInputRegisters:		//4
			size=MbusReadInputRegisters(pData,pDstBuf);
 800e514:	6879      	ldr	r1, [r7, #4]
 800e516:	68f8      	ldr	r0, [r7, #12]
 800e518:	f7ff fdde 	bl	800e0d8 <MbusReadInputRegisters>
 800e51c:	61f8      	str	r0, [r7, #28]
			break;
 800e51e:	e01f      	b.n	800e560 <ParseModeBusData+0x130>
		
		case WriteSingleCoil:			//5 单路开关输出
			size=MbusWriteSingleCoil(pData,pDstBuf);
 800e520:	6879      	ldr	r1, [r7, #4]
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f7ff fe20 	bl	800e168 <MbusWriteSingleCoil>
 800e528:	61f8      	str	r0, [r7, #28]
			break;
 800e52a:	e019      	b.n	800e560 <ParseModeBusData+0x130>
		
		case WriteSingleRegister:		//6 单路模拟量输出
			size=MbusWriteSingleRegister(pData,pDstBuf);
 800e52c:	6879      	ldr	r1, [r7, #4]
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f7ff fe64 	bl	800e1fc <MbusWriteSingleRegister>
 800e534:	61f8      	str	r0, [r7, #28]
			break;
 800e536:	e013      	b.n	800e560 <ParseModeBusData+0x130>

		case WriteMultipleCoils:		//15
			size=MbusWriteMultipleCoils(pData,pDstBuf);
 800e538:	6879      	ldr	r1, [r7, #4]
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f7ff fe9d 	bl	800e27a <MbusWriteMultipleCoils>
 800e540:	61f8      	str	r0, [r7, #28]
			break;
 800e542:	e00d      	b.n	800e560 <ParseModeBusData+0x130>
		case WriteMultipleRegisters:	//16	写 多个寄存器
			size=MbusWriteMultipleRegisters(pData,pDstBuf);
 800e544:	6879      	ldr	r1, [r7, #4]
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f7ff feda 	bl	800e300 <MbusWriteMultipleRegisters>
 800e54c:	61f8      	str	r0, [r7, #28]
			break;
 800e54e:	e007      	b.n	800e560 <ParseModeBusData+0x130>
		
		default:
			size=makeErrorReturn(FunctionCode,NOT_SUPPORT,pDstBuf);
 800e550:	7ebb      	ldrb	r3, [r7, #26]
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	2101      	movs	r1, #1
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff fb98 	bl	800dc8c <makeErrorReturn>
 800e55c:	61f8      	str	r0, [r7, #28]
			break;
 800e55e:	bf00      	nop
	}
	return size;
 800e560:	69fb      	ldr	r3, [r7, #28]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3720      	adds	r7, #32
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	200086b8 	.word	0x200086b8

0800e570 <ProcModBusDJCmd>:
	l_byte=orgWord>>8;
	h_byte=orgWord;
	return((h_byte<<8)|l_byte);
}
void ProcModBusDJCmd(uint8_t *pData)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
	uint16_t offCmd,onCmd,delay;

	pData+=7;	//数据从第8个字节开始(0开始)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3307      	adds	r3, #7
 800e57c:	607b      	str	r3, [r7, #4]
	offCmd=GetModBusWord(pData);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff fea6 	bl	800e2d0 <GetModBusWord>
 800e584:	4603      	mov	r3, r0
 800e586:	81fb      	strh	r3, [r7, #14]
	pData+=2;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	3302      	adds	r3, #2
 800e58c:	607b      	str	r3, [r7, #4]
	onCmd=GetModBusWord(pData);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7ff fe9e 	bl	800e2d0 <GetModBusWord>
 800e594:	4603      	mov	r3, r0
 800e596:	81bb      	strh	r3, [r7, #12]
	pData+=2;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3302      	adds	r3, #2
 800e59c:	607b      	str	r3, [r7, #4]
	delay=GetModBusWord(pData);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fe96 	bl	800e2d0 <GetModBusWord>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	817b      	strh	r3, [r7, #10]
	pData+=2;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	3302      	adds	r3, #2
 800e5ac:	607b      	str	r3, [r7, #4]

	for(int i=0;i<TOTAL_OUT;i++){
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	617b      	str	r3, [r7, #20]
 800e5b2:	e011      	b.n	800e5d8 <ProcModBusDJCmd+0x68>
		if((offCmd&(1<<i))==0) continue;
 800e5b4:	89fa      	ldrh	r2, [r7, #14]
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	fa42 f303 	asr.w	r3, r2, r3
 800e5bc:	f003 0301 	and.w	r3, r3, #1
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d005      	beq.n	800e5d0 <ProcModBusDJCmd+0x60>
		Out_Cmd[i]=K_CMD_OFF;
 800e5c4:	4a16      	ldr	r2, [pc, #88]	; (800e620 <ProcModBusDJCmd+0xb0>)
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800e5ce:	e000      	b.n	800e5d2 <ProcModBusDJCmd+0x62>
		if((offCmd&(1<<i))==0) continue;
 800e5d0:	bf00      	nop
	for(int i=0;i<TOTAL_OUT;i++){
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	617b      	str	r3, [r7, #20]
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	2b09      	cmp	r3, #9
 800e5dc:	ddea      	ble.n	800e5b4 <ProcModBusDJCmd+0x44>
	}
	
	for(int i=0;i<TOTAL_OUT;i++){
 800e5de:	2300      	movs	r3, #0
 800e5e0:	613b      	str	r3, [r7, #16]
 800e5e2:	e016      	b.n	800e612 <ProcModBusDJCmd+0xa2>
		if((onCmd&(1<<i))==0) continue;
 800e5e4:	89ba      	ldrh	r2, [r7, #12]
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	fa42 f303 	asr.w	r3, r2, r3
 800e5ec:	f003 0301 	and.w	r3, r3, #1
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00a      	beq.n	800e60a <ProcModBusDJCmd+0x9a>
		Out_On_Delay[i]=delay;
 800e5f4:	490b      	ldr	r1, [pc, #44]	; (800e624 <ProcModBusDJCmd+0xb4>)
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	897a      	ldrh	r2, [r7, #10]
 800e5fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		Out_Cmd[i]=K_CMD_ON;
 800e5fe:	4a08      	ldr	r2, [pc, #32]	; (800e620 <ProcModBusDJCmd+0xb0>)
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	2101      	movs	r1, #1
 800e604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800e608:	e000      	b.n	800e60c <ProcModBusDJCmd+0x9c>
		if((onCmd&(1<<i))==0) continue;
 800e60a:	bf00      	nop
	for(int i=0;i<TOTAL_OUT;i++){
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	3301      	adds	r3, #1
 800e610:	613b      	str	r3, [r7, #16]
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	2b09      	cmp	r3, #9
 800e616:	dde5      	ble.n	800e5e4 <ProcModBusDJCmd+0x74>
	}
}
 800e618:	bf00      	nop
 800e61a:	3718      	adds	r7, #24
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	20007958 	.word	0x20007958
 800e624:	20007980 	.word	0x20007980

0800e628 <ProcKZRunCmdBuf>:
void ProcKZRunCmdBuf(uint8_t *pData)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b088      	sub	sp, #32
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
	pData+=7;	//数据从第8个字节开始
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3307      	adds	r3, #7
 800e634:	607b      	str	r3, [r7, #4]

	uint16_t Target=GetModBusWord(pData);pData+=2;
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7ff fe4a 	bl	800e2d0 <GetModBusWord>
 800e63c:	4603      	mov	r3, r0
 800e63e:	837b      	strh	r3, [r7, #26]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	3302      	adds	r3, #2
 800e644:	607b      	str	r3, [r7, #4]
	uint16_t Period=GetModBusWord(pData);pData+=2;
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff fe42 	bl	800e2d0 <GetModBusWord>
 800e64c:	4603      	mov	r3, r0
 800e64e:	833b      	strh	r3, [r7, #24]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3302      	adds	r3, #2
 800e654:	607b      	str	r3, [r7, #4]
	uint16_t norTime=GetModBusWord(pData);pData+=2;
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7ff fe3a 	bl	800e2d0 <GetModBusWord>
 800e65c:	4603      	mov	r3, r0
 800e65e:	82fb      	strh	r3, [r7, #22]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	3302      	adds	r3, #2
 800e664:	607b      	str	r3, [r7, #4]
	uint16_t revTime=GetModBusWord(pData);pData+=2;
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7ff fe32 	bl	800e2d0 <GetModBusWord>
 800e66c:	4603      	mov	r3, r0
 800e66e:	82bb      	strh	r3, [r7, #20]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3302      	adds	r3, #2
 800e674:	607b      	str	r3, [r7, #4]
	uint16_t WhichMotor=GetModBusWord(pData);pData+=2;
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7ff fe2a 	bl	800e2d0 <GetModBusWord>
 800e67c:	4603      	mov	r3, r0
 800e67e:	827b      	strh	r3, [r7, #18]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	3302      	adds	r3, #2
 800e684:	607b      	str	r3, [r7, #4]
	uint16_t Chn=GetModBusWord(pData);pData+=2;
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7ff fe22 	bl	800e2d0 <GetModBusWord>
 800e68c:	4603      	mov	r3, r0
 800e68e:	823b      	strh	r3, [r7, #16]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	3302      	adds	r3, #2
 800e694:	607b      	str	r3, [r7, #4]
	uint16_t NormalFlag=GetModBusWord(pData);pData+=2;
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff fe1a 	bl	800e2d0 <GetModBusWord>
 800e69c:	4603      	mov	r3, r0
 800e69e:	81fb      	strh	r3, [r7, #14]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	3302      	adds	r3, #2
 800e6a4:	607b      	str	r3, [r7, #4]
	uint16_t Range=GetModBusWord(pData);pData+=2;
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7ff fe12 	bl	800e2d0 <GetModBusWord>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	81bb      	strh	r3, [r7, #12]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	3302      	adds	r3, #2
 800e6b4:	607b      	str	r3, [r7, #4]

	MOTOR *pMotor;
	MPID *pPid;
	if(WhichMotor==1)//1-Beng
 800e6b6:	8a7b      	ldrh	r3, [r7, #18]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d104      	bne.n	800e6c6 <ProcKZRunCmdBuf+0x9e>
	{
		pMotor=&Beng;
 800e6bc:	4b24      	ldr	r3, [pc, #144]	; (800e750 <ProcKZRunCmdBuf+0x128>)
 800e6be:	61fb      	str	r3, [r7, #28]
		pPid=&bengPid;
 800e6c0:	4b24      	ldr	r3, [pc, #144]	; (800e754 <ProcKZRunCmdBuf+0x12c>)
 800e6c2:	60bb      	str	r3, [r7, #8]
 800e6c4:	e003      	b.n	800e6ce <ProcKZRunCmdBuf+0xa6>
	}
	else
	{
		pMotor=&Mada;
 800e6c6:	4b24      	ldr	r3, [pc, #144]	; (800e758 <ProcKZRunCmdBuf+0x130>)
 800e6c8:	61fb      	str	r3, [r7, #28]
		pPid=&madaPid;
 800e6ca:	4b24      	ldr	r3, [pc, #144]	; (800e75c <ProcKZRunCmdBuf+0x134>)
 800e6cc:	60bb      	str	r3, [r7, #8]
	}

	pMotor->TargetValue=Target;
 800e6ce:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	811a      	strh	r2, [r3, #8]
	pMotor->normalTime=norTime;
 800e6d6:	8afb      	ldrh	r3, [r7, #22]
 800e6d8:	b2da      	uxtb	r2, r3
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	731a      	strb	r2, [r3, #12]
	pMotor->reverseTime=revTime;
 800e6de:	8abb      	ldrh	r3, [r7, #20]
 800e6e0:	b2da      	uxtb	r2, r3
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	735a      	strb	r2, [r3, #13]
	pMotor->range=Range;
 800e6e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	815a      	strh	r2, [r3, #10]
	if(Period<10) pMotor->period=1;
 800e6ee:	8b3b      	ldrh	r3, [r7, #24]
 800e6f0:	2b09      	cmp	r3, #9
 800e6f2:	d803      	bhi.n	800e6fc <ProcKZRunCmdBuf+0xd4>
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	821a      	strh	r2, [r3, #16]
 800e6fa:	e007      	b.n	800e70c <ProcKZRunCmdBuf+0xe4>
	else pMotor->period=Period/10;
 800e6fc:	8b3b      	ldrh	r3, [r7, #24]
 800e6fe:	4a18      	ldr	r2, [pc, #96]	; (800e760 <ProcKZRunCmdBuf+0x138>)
 800e700:	fba2 2303 	umull	r2, r3, r2, r3
 800e704:	08db      	lsrs	r3, r3, #3
 800e706:	b29a      	uxth	r2, r3
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	821a      	strh	r2, [r3, #16]

	if(NormalFlag)
 800e70c:	89fb      	ldrh	r3, [r7, #14]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00b      	beq.n	800e72a <ProcKZRunCmdBuf+0x102>
	{
		pMotor->pCurrent=(int16_t*)&AllSampleBuf[Chn];
 800e712:	8a3b      	ldrh	r3, [r7, #16]
 800e714:	005b      	lsls	r3, r3, #1
 800e716:	4a13      	ldr	r2, [pc, #76]	; (800e764 <ProcKZRunCmdBuf+0x13c>)
 800e718:	441a      	add	r2, r3
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	601a      	str	r2, [r3, #0]
		pMotor->pTarget=&(pMotor->TargetValue);
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	f103 0208 	add.w	r2, r3, #8
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	605a      	str	r2, [r3, #4]
 800e728:	e00a      	b.n	800e740 <ProcKZRunCmdBuf+0x118>
	}
	else
	{
		pMotor->pTarget=(int16_t*)&AllSampleBuf[Chn];
 800e72a:	8a3b      	ldrh	r3, [r7, #16]
 800e72c:	005b      	lsls	r3, r3, #1
 800e72e:	4a0d      	ldr	r2, [pc, #52]	; (800e764 <ProcKZRunCmdBuf+0x13c>)
 800e730:	441a      	add	r2, r3
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	605a      	str	r2, [r3, #4]
		pMotor->pCurrent=&(pMotor->TargetValue);
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	f103 0208 	add.w	r2, r3, #8
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	601a      	str	r2, [r3, #0]
	}
	
	pMotor->cmd=M_CMD_RUN;
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	2202      	movs	r2, #2
 800e744:	75da      	strb	r2, [r3, #23]
}
 800e746:	bf00      	nop
 800e748:	3720      	adds	r7, #32
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	20007ff0 	.word	0x20007ff0
 800e754:	20008054 	.word	0x20008054
 800e758:	20008008 	.word	0x20008008
 800e75c:	20008020 	.word	0x20008020
 800e760:	cccccccd 	.word	0xcccccccd
 800e764:	200077fc 	.word	0x200077fc

0800e768 <ProcModBusPidCmd>:

void ProcModBusPidCmd(uint8_t *pData)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b08c      	sub	sp, #48	; 0x30
 800e76c:	af02      	add	r7, sp, #8
 800e76e:	6078      	str	r0, [r7, #4]
	pData+=7;	//数据从第8个字节开始
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	3307      	adds	r3, #7
 800e774:	607b      	str	r3, [r7, #4]
	
	uint16_t Target=GetModBusWord(pData);pData+=2;
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7ff fdaa 	bl	800e2d0 <GetModBusWord>
 800e77c:	4603      	mov	r3, r0
 800e77e:	83fb      	strh	r3, [r7, #30]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	3302      	adds	r3, #2
 800e784:	607b      	str	r3, [r7, #4]
	uint16_t Period=GetModBusWord(pData);pData+=2;
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7ff fda2 	bl	800e2d0 <GetModBusWord>
 800e78c:	4603      	mov	r3, r0
 800e78e:	83bb      	strh	r3, [r7, #28]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	3302      	adds	r3, #2
 800e794:	607b      	str	r3, [r7, #4]
	uint16_t PID_KKK=GetModBusWord(pData);pData+=2;
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f7ff fd9a 	bl	800e2d0 <GetModBusWord>
 800e79c:	4603      	mov	r3, r0
 800e79e:	837b      	strh	r3, [r7, #26]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	3302      	adds	r3, #2
 800e7a4:	607b      	str	r3, [r7, #4]
	uint16_t PID_P=GetModBusWord(pData);pData+=2;
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f7ff fd92 	bl	800e2d0 <GetModBusWord>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	833b      	strh	r3, [r7, #24]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	3302      	adds	r3, #2
 800e7b4:	607b      	str	r3, [r7, #4]
	uint16_t PID_I=GetModBusWord(pData);pData+=2;
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff fd8a 	bl	800e2d0 <GetModBusWord>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	82fb      	strh	r3, [r7, #22]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3302      	adds	r3, #2
 800e7c4:	607b      	str	r3, [r7, #4]
	uint16_t PID_D=GetModBusWord(pData);pData+=2;
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7ff fd82 	bl	800e2d0 <GetModBusWord>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	82bb      	strh	r3, [r7, #20]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	3302      	adds	r3, #2
 800e7d4:	607b      	str	r3, [r7, #4]
	uint16_t WhichMotor=GetModBusWord(pData);pData+=2;	//1-泵 2-马达
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff fd7a 	bl	800e2d0 <GetModBusWord>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	827b      	strh	r3, [r7, #18]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	3302      	adds	r3, #2
 800e7e4:	607b      	str	r3, [r7, #4]
	uint16_t Chn=GetModBusWord(pData);pData+=2;					//哪一路采样作为反馈
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f7ff fd72 	bl	800e2d0 <GetModBusWord>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	823b      	strh	r3, [r7, #16]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	3302      	adds	r3, #2
 800e7f4:	607b      	str	r3, [r7, #4]
	uint16_t NormalFlag=GetModBusWord(pData);pData+=2;	//1-正逻辑 0-反逻辑
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff fd6a 	bl	800e2d0 <GetModBusWord>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	81fb      	strh	r3, [r7, #14]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	3302      	adds	r3, #2
 800e804:	607b      	str	r3, [r7, #4]
	uint16_t Range=GetModBusWord(pData);pData+=2;
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7ff fd62 	bl	800e2d0 <GetModBusWord>
 800e80c:	4603      	mov	r3, r0
 800e80e:	81bb      	strh	r3, [r7, #12]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	3302      	adds	r3, #2
 800e814:	607b      	str	r3, [r7, #4]

	MOTOR *pMotor;
	MPID *pPid;
	if(WhichMotor==1)//1-Beng
 800e816:	8a7b      	ldrh	r3, [r7, #18]
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d104      	bne.n	800e826 <ProcModBusPidCmd+0xbe>
	{
		pMotor=&Beng;
 800e81c:	4b23      	ldr	r3, [pc, #140]	; (800e8ac <ProcModBusPidCmd+0x144>)
 800e81e:	627b      	str	r3, [r7, #36]	; 0x24
		pPid=&bengPid;
 800e820:	4b23      	ldr	r3, [pc, #140]	; (800e8b0 <ProcModBusPidCmd+0x148>)
 800e822:	623b      	str	r3, [r7, #32]
 800e824:	e003      	b.n	800e82e <ProcModBusPidCmd+0xc6>
	}
	else
	{
		pMotor=&Mada;
 800e826:	4b23      	ldr	r3, [pc, #140]	; (800e8b4 <ProcModBusPidCmd+0x14c>)
 800e828:	627b      	str	r3, [r7, #36]	; 0x24
		pPid=&madaPid;
 800e82a:	4b23      	ldr	r3, [pc, #140]	; (800e8b8 <ProcModBusPidCmd+0x150>)
 800e82c:	623b      	str	r3, [r7, #32]
	}
	
	initPidAllPara(pPid,PID_KKK,PID_P,PID_I,PID_D);
 800e82e:	8af8      	ldrh	r0, [r7, #22]
 800e830:	8b3a      	ldrh	r2, [r7, #24]
 800e832:	8b79      	ldrh	r1, [r7, #26]
 800e834:	8abb      	ldrh	r3, [r7, #20]
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	4603      	mov	r3, r0
 800e83a:	6a38      	ldr	r0, [r7, #32]
 800e83c:	f000 fef2 	bl	800f624 <initPidAllPara>
	pPid->Target=Target;
 800e840:	6a3b      	ldr	r3, [r7, #32]
 800e842:	8bfa      	ldrh	r2, [r7, #30]
 800e844:	851a      	strh	r2, [r3, #40]	; 0x28
	pPid->Range=Range;
 800e846:	6a3b      	ldr	r3, [r7, #32]
 800e848:	89ba      	ldrh	r2, [r7, #12]
 800e84a:	855a      	strh	r2, [r3, #42]	; 0x2a
	if(Period<10) pPid->Period=1;
 800e84c:	8bbb      	ldrh	r3, [r7, #28]
 800e84e:	2b09      	cmp	r3, #9
 800e850:	d803      	bhi.n	800e85a <ProcModBusPidCmd+0xf2>
 800e852:	6a3b      	ldr	r3, [r7, #32]
 800e854:	2201      	movs	r2, #1
 800e856:	85da      	strh	r2, [r3, #46]	; 0x2e
 800e858:	e007      	b.n	800e86a <ProcModBusPidCmd+0x102>
	else pPid->Period=Period/10;
 800e85a:	8bbb      	ldrh	r3, [r7, #28]
 800e85c:	4a17      	ldr	r2, [pc, #92]	; (800e8bc <ProcModBusPidCmd+0x154>)
 800e85e:	fba2 2303 	umull	r2, r3, r2, r3
 800e862:	08db      	lsrs	r3, r3, #3
 800e864:	b29a      	uxth	r2, r3
 800e866:	6a3b      	ldr	r3, [r7, #32]
 800e868:	85da      	strh	r2, [r3, #46]	; 0x2e
	
	if(NormalFlag)//正向
 800e86a:	89fb      	ldrh	r3, [r7, #14]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00b      	beq.n	800e888 <ProcModBusPidCmd+0x120>
	{
		pPid->pFeedback=(int16_t*)&AllSampleBuf[Chn];
 800e870:	8a3b      	ldrh	r3, [r7, #16]
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	4a12      	ldr	r2, [pc, #72]	; (800e8c0 <ProcModBusPidCmd+0x158>)
 800e876:	441a      	add	r2, r3
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	625a      	str	r2, [r3, #36]	; 0x24
		pPid->pSetPoint=(int16_t*)&(pPid->Target);
 800e87c:	6a3b      	ldr	r3, [r7, #32]
 800e87e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	621a      	str	r2, [r3, #32]
 800e886:	e00a      	b.n	800e89e <ProcModBusPidCmd+0x136>
	}
	else//反向
	{
		pPid->pSetPoint=(int16_t*)&AllSampleBuf[Chn];
 800e888:	8a3b      	ldrh	r3, [r7, #16]
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4a0c      	ldr	r2, [pc, #48]	; (800e8c0 <ProcModBusPidCmd+0x158>)
 800e88e:	441a      	add	r2, r3
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	621a      	str	r2, [r3, #32]
		pPid->pFeedback=(int16_t*)&(pPid->Target);
 800e894:	6a3b      	ldr	r3, [r7, #32]
 800e896:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e89a:	6a3b      	ldr	r3, [r7, #32]
 800e89c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	pMotor->cmd=M_CMD_PID;
 800e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a0:	2203      	movs	r2, #3
 800e8a2:	75da      	strb	r2, [r3, #23]
}
 800e8a4:	bf00      	nop
 800e8a6:	3728      	adds	r7, #40	; 0x28
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	20007ff0 	.word	0x20007ff0
 800e8b0:	20008054 	.word	0x20008054
 800e8b4:	20008008 	.word	0x20008008
 800e8b8:	20008020 	.word	0x20008020
 800e8bc:	cccccccd 	.word	0xcccccccd
 800e8c0:	200077fc 	.word	0x200077fc

0800e8c4 <StopMotor>:

void StopMotor(uint16_t motor)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	80fb      	strh	r3, [r7, #6]
	if(motor==1)//beng
 800e8ce:	88fb      	ldrh	r3, [r7, #6]
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d102      	bne.n	800e8da <StopMotor+0x16>
	{
		Beng.cmd=M_CMD_STOP;
 800e8d4:	4b07      	ldr	r3, [pc, #28]	; (800e8f4 <StopMotor+0x30>)
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	75da      	strb	r2, [r3, #23]
	}
	if(motor==2)//mada
 800e8da:	88fb      	ldrh	r3, [r7, #6]
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d102      	bne.n	800e8e6 <StopMotor+0x22>
	{
		Mada.cmd=M_CMD_STOP;
 800e8e0:	4b05      	ldr	r3, [pc, #20]	; (800e8f8 <StopMotor+0x34>)
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	75da      	strb	r2, [r3, #23]
	}
}
 800e8e6:	bf00      	nop
 800e8e8:	370c      	adds	r7, #12
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	20007ff0 	.word	0x20007ff0
 800e8f8:	20008008 	.word	0x20008008

0800e8fc <motorInit>:
uint8_t bengTest;
uint8_t madaTest;
int MotorStopFlag;

void motorInit(void)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	af00      	add	r7, sp, #0
	Beng.pCurrent=(int16_t*)&AllSampleBuf[0];
 800e900:	4b2c      	ldr	r3, [pc, #176]	; (800e9b4 <motorInit+0xb8>)
 800e902:	4a2d      	ldr	r2, [pc, #180]	; (800e9b8 <motorInit+0xbc>)
 800e904:	601a      	str	r2, [r3, #0]
	Beng.pTarget=(int16_t*)&AllSampleBuf[0];
 800e906:	4b2b      	ldr	r3, [pc, #172]	; (800e9b4 <motorInit+0xb8>)
 800e908:	4a2b      	ldr	r2, [pc, #172]	; (800e9b8 <motorInit+0xbc>)
 800e90a:	605a      	str	r2, [r3, #4]
	Beng.period=10;
 800e90c:	4b29      	ldr	r3, [pc, #164]	; (800e9b4 <motorInit+0xb8>)
 800e90e:	220a      	movs	r2, #10
 800e910:	821a      	strh	r2, [r3, #16]
	Beng.period_cnt=0;
 800e912:	4b28      	ldr	r3, [pc, #160]	; (800e9b4 <motorInit+0xb8>)
 800e914:	2200      	movs	r2, #0
 800e916:	825a      	strh	r2, [r3, #18]
	Beng.range=10;
 800e918:	4b26      	ldr	r3, [pc, #152]	; (800e9b4 <motorInit+0xb8>)
 800e91a:	220a      	movs	r2, #10
 800e91c:	815a      	strh	r2, [r3, #10]
	Beng.normalTime=10;
 800e91e:	4b25      	ldr	r3, [pc, #148]	; (800e9b4 <motorInit+0xb8>)
 800e920:	220a      	movs	r2, #10
 800e922:	731a      	strb	r2, [r3, #12]
	Beng.reverseTime=10;
 800e924:	4b23      	ldr	r3, [pc, #140]	; (800e9b4 <motorInit+0xb8>)
 800e926:	220a      	movs	r2, #10
 800e928:	735a      	strb	r2, [r3, #13]
	Beng.norCmdChn=M1_NORMAL_CMD_CHN;
 800e92a:	4b22      	ldr	r3, [pc, #136]	; (800e9b4 <motorInit+0xb8>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	755a      	strb	r2, [r3, #21]
	Beng.revCmdChn=M1_RESERVE_CMD_CHN;
 800e930:	4b20      	ldr	r3, [pc, #128]	; (800e9b4 <motorInit+0xb8>)
 800e932:	2201      	movs	r2, #1
 800e934:	759a      	strb	r2, [r3, #22]
	Beng.rstCmdChn=M1_RESET_CMD_CHN;
 800e936:	4b1f      	ldr	r3, [pc, #124]	; (800e9b4 <motorInit+0xb8>)
 800e938:	2204      	movs	r2, #4
 800e93a:	751a      	strb	r2, [r3, #20]
	Beng.rstDelayTime=M1_RESET_DEL;
 800e93c:	4b1f      	ldr	r3, [pc, #124]	; (800e9bc <motorInit+0xc0>)
 800e93e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800e942:	b21a      	sxth	r2, r3
 800e944:	4b1b      	ldr	r3, [pc, #108]	; (800e9b4 <motorInit+0xb8>)
 800e946:	81da      	strh	r2, [r3, #14]
	Beng.cmd=M_CMD_FREE;
 800e948:	4b1a      	ldr	r3, [pc, #104]	; (800e9b4 <motorInit+0xb8>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	75da      	strb	r2, [r3, #23]

	Mada.pCurrent=(int16_t*)&AllSampleBuf[0];
 800e94e:	4b1c      	ldr	r3, [pc, #112]	; (800e9c0 <motorInit+0xc4>)
 800e950:	4a19      	ldr	r2, [pc, #100]	; (800e9b8 <motorInit+0xbc>)
 800e952:	601a      	str	r2, [r3, #0]
	Mada.pTarget=(int16_t*)&AllSampleBuf[0];
 800e954:	4b1a      	ldr	r3, [pc, #104]	; (800e9c0 <motorInit+0xc4>)
 800e956:	4a18      	ldr	r2, [pc, #96]	; (800e9b8 <motorInit+0xbc>)
 800e958:	605a      	str	r2, [r3, #4]
	Mada.period=10;
 800e95a:	4b19      	ldr	r3, [pc, #100]	; (800e9c0 <motorInit+0xc4>)
 800e95c:	220a      	movs	r2, #10
 800e95e:	821a      	strh	r2, [r3, #16]
	Mada.period_cnt=0;
 800e960:	4b17      	ldr	r3, [pc, #92]	; (800e9c0 <motorInit+0xc4>)
 800e962:	2200      	movs	r2, #0
 800e964:	825a      	strh	r2, [r3, #18]
	Mada.range=10;
 800e966:	4b16      	ldr	r3, [pc, #88]	; (800e9c0 <motorInit+0xc4>)
 800e968:	220a      	movs	r2, #10
 800e96a:	815a      	strh	r2, [r3, #10]
	Mada.normalTime=10;
 800e96c:	4b14      	ldr	r3, [pc, #80]	; (800e9c0 <motorInit+0xc4>)
 800e96e:	220a      	movs	r2, #10
 800e970:	731a      	strb	r2, [r3, #12]
	Mada.reverseTime=10;
 800e972:	4b13      	ldr	r3, [pc, #76]	; (800e9c0 <motorInit+0xc4>)
 800e974:	220a      	movs	r2, #10
 800e976:	735a      	strb	r2, [r3, #13]
	Mada.norCmdChn=M2_NORMAL_CMD_CHN;
 800e978:	4b11      	ldr	r3, [pc, #68]	; (800e9c0 <motorInit+0xc4>)
 800e97a:	2202      	movs	r2, #2
 800e97c:	755a      	strb	r2, [r3, #21]
	Mada.revCmdChn=M2_RESERVE_CMD_CHN;
 800e97e:	4b10      	ldr	r3, [pc, #64]	; (800e9c0 <motorInit+0xc4>)
 800e980:	2203      	movs	r2, #3
 800e982:	759a      	strb	r2, [r3, #22]
	Mada.rstCmdChn=M2_RESET_CMD_CHN;
 800e984:	4b0e      	ldr	r3, [pc, #56]	; (800e9c0 <motorInit+0xc4>)
 800e986:	2205      	movs	r2, #5
 800e988:	751a      	strb	r2, [r3, #20]
	Mada.rstDelayTime=M2_RESET_DEL;
 800e98a:	4b0c      	ldr	r3, [pc, #48]	; (800e9bc <motorInit+0xc0>)
 800e98c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e990:	b21a      	sxth	r2, r3
 800e992:	4b0b      	ldr	r3, [pc, #44]	; (800e9c0 <motorInit+0xc4>)
 800e994:	81da      	strh	r2, [r3, #14]
	Mada.cmd=M_CMD_FREE;
 800e996:	4b0a      	ldr	r3, [pc, #40]	; (800e9c0 <motorInit+0xc4>)
 800e998:	2200      	movs	r2, #0
 800e99a:	75da      	strb	r2, [r3, #23]

	bengTest=0;
 800e99c:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <motorInit+0xc8>)
 800e99e:	2200      	movs	r2, #0
 800e9a0:	701a      	strb	r2, [r3, #0]
	madaTest=0;
 800e9a2:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <motorInit+0xcc>)
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	701a      	strb	r2, [r3, #0]
}
 800e9a8:	bf00      	nop
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	20007ff0 	.word	0x20007ff0
 800e9b8:	200077fc 	.word	0x200077fc
 800e9bc:	200088f0 	.word	0x200088f0
 800e9c0:	20008008 	.word	0x20008008
 800e9c4:	20007fe4 	.word	0x20007fe4
 800e9c8:	20007fec 	.word	0x20007fec

0800e9cc <bengRun>:

void bengRun(MOTOR *motor,MPID *pPid)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
	uint16_t kzCmdBuf[3];
	int inc;
	
	switch(motor->cmd)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	7ddb      	ldrb	r3, [r3, #23]
 800e9da:	2b03      	cmp	r3, #3
 800e9dc:	f200 8126 	bhi.w	800ec2c <bengRun+0x260>
 800e9e0:	a201      	add	r2, pc, #4	; (adr r2, 800e9e8 <bengRun+0x1c>)
 800e9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e6:	bf00      	nop
 800e9e8:	0800ec2d 	.word	0x0800ec2d
 800e9ec:	0800e9f9 	.word	0x0800e9f9
 800e9f0:	0800ea6f 	.word	0x0800ea6f
 800e9f4:	0800eb67 	.word	0x0800eb67
	{
		case M_CMD_FREE:
			break;
		case M_CMD_STOP:
			if(Out_Cmd[motor->norCmdChn]==K_CMD_ON||Out_Cmd[motor->revCmdChn]==K_CMD_ON)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	7d5b      	ldrb	r3, [r3, #21]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	4b90      	ldr	r3, [pc, #576]	; (800ec40 <bengRun+0x274>)
 800ea00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d007      	beq.n	800ea18 <bengRun+0x4c>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	7d9b      	ldrb	r3, [r3, #22]
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	4b8c      	ldr	r3, [pc, #560]	; (800ec40 <bengRun+0x274>)
 800ea10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d120      	bne.n	800ea5a <bengRun+0x8e>
			{
				kzCmdBuf[0]=(1 << motor->norCmdChn) | (1 << motor->revCmdChn);//turn off
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	7d5b      	ldrb	r3, [r3, #21]
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	2301      	movs	r3, #1
 800ea20:	4093      	lsls	r3, r2
 800ea22:	b21a      	sxth	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7d9b      	ldrb	r3, [r3, #22]
 800ea28:	4619      	mov	r1, r3
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	408b      	lsls	r3, r1
 800ea2e:	b21b      	sxth	r3, r3
 800ea30:	4313      	orrs	r3, r2
 800ea32:	b21b      	sxth	r3, r3
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->rstCmdChn);	//turn on
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	7d1b      	ldrb	r3, [r3, #20]
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	2301      	movs	r3, #1
 800ea40:	4093      	lsls	r3, r2
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=motor->rstDelayTime;				//delay
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);			
 800ea50:	f107 030c 	add.w	r3, r7, #12
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fe ffcd 	bl	800d9f4 <ProcDJCmd>
			}
			motor->cmd=M_CMD_FREE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	75da      	strb	r2, [r3, #23]
			motor->period_cnt=0;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	825a      	strh	r2, [r3, #18]
			bengTest=4;
 800ea66:	4b77      	ldr	r3, [pc, #476]	; (800ec44 <bengRun+0x278>)
 800ea68:	2204      	movs	r2, #4
 800ea6a:	701a      	strb	r2, [r3, #0]
			break;
 800ea6c:	e0e3      	b.n	800ec36 <bengRun+0x26a>
		case M_CMD_RUN:
			motor->period_cnt++;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	8a5b      	ldrh	r3, [r3, #18]
 800ea72:	3301      	adds	r3, #1
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	825a      	strh	r2, [r3, #18]
			if(motor->period_cnt<motor->period)	break;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	8a5a      	ldrh	r2, [r3, #18]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	8a1b      	ldrh	r3, [r3, #16]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	f0c0 80d4 	bcc.w	800ec30 <bengRun+0x264>
			motor->period_cnt=0;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	825a      	strh	r2, [r3, #18]
//					bengTest=5;
//					break;
//				}
//			}

			if(*motor->pCurrent<*motor->pTarget-motor->range)//<target
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea96:	461a      	mov	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800eaa8:	1acb      	subs	r3, r1, r3
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	da23      	bge.n	800eaf6 <bengRun+0x12a>
			{
//				if((motor->normalTime+motor->rstDelayTime+1)>=(motor->period*motor->samplPeriod)) motor->normalTime =motor->period*motor->samplPeriod-motor->rstDelayTime-1;
				kzCmdBuf[0]=(1 << motor->rstCmdChn) | (1 << motor->revCmdChn);//turn off
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	7d1b      	ldrb	r3, [r3, #20]
 800eab2:	461a      	mov	r2, r3
 800eab4:	2301      	movs	r3, #1
 800eab6:	4093      	lsls	r3, r2
 800eab8:	b21a      	sxth	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7d9b      	ldrb	r3, [r3, #22]
 800eabe:	4619      	mov	r1, r3
 800eac0:	2301      	movs	r3, #1
 800eac2:	408b      	lsls	r3, r1
 800eac4:	b21b      	sxth	r3, r3
 800eac6:	4313      	orrs	r3, r2
 800eac8:	b21b      	sxth	r3, r3
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->norCmdChn);	//turn on
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	7d5b      	ldrb	r3, [r3, #21]
 800ead2:	461a      	mov	r2, r3
 800ead4:	2301      	movs	r3, #1
 800ead6:	4093      	lsls	r3, r2
 800ead8:	b29b      	uxth	r3, r3
 800eada:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=motor->normalTime;				//delay
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	7b1b      	ldrb	r3, [r3, #12]
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800eae4:	f107 030c 	add.w	r3, r7, #12
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fe ff83 	bl	800d9f4 <ProcDJCmd>
				bengTest=1;
 800eaee:	4b55      	ldr	r3, [pc, #340]	; (800ec44 <bengRun+0x278>)
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	701a      	strb	r2, [r3, #0]
				break;
 800eaf4:	e09f      	b.n	800ec36 <bengRun+0x26a>
			}
			if(*motor->pCurrent>*motor->pTarget+motor->range)//>target
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eafe:	461a      	mov	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb08:	4619      	mov	r1, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800eb10:	440b      	add	r3, r1
 800eb12:	429a      	cmp	r2, r3
 800eb14:	dd23      	ble.n	800eb5e <bengRun+0x192>
			{
//				if((motor->reverseTime+motor->rstDelayTime+1)>=(motor->period*motor->samplPeriod)) motor->reverseTime =motor->period*motor->samplPeriod-motor->rstDelayTime-1;
				kzCmdBuf[0]=(1 << motor->rstCmdChn) | (1 << motor->norCmdChn);//turn off
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	7d1b      	ldrb	r3, [r3, #20]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	4093      	lsls	r3, r2
 800eb20:	b21a      	sxth	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	7d5b      	ldrb	r3, [r3, #21]
 800eb26:	4619      	mov	r1, r3
 800eb28:	2301      	movs	r3, #1
 800eb2a:	408b      	lsls	r3, r1
 800eb2c:	b21b      	sxth	r3, r3
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	b21b      	sxth	r3, r3
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->revCmdChn);	//turn on
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	7d9b      	ldrb	r3, [r3, #22]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	4093      	lsls	r3, r2
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=motor->reverseTime ;			//delay
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	7b5b      	ldrb	r3, [r3, #13]
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800eb4c:	f107 030c 	add.w	r3, r7, #12
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7fe ff4f 	bl	800d9f4 <ProcDJCmd>
				bengTest=2;
 800eb56:	4b3b      	ldr	r3, [pc, #236]	; (800ec44 <bengRun+0x278>)
 800eb58:	2202      	movs	r2, #2
 800eb5a:	701a      	strb	r2, [r3, #0]
				break;
 800eb5c:	e06b      	b.n	800ec36 <bengRun+0x26a>
			}
			bengTest=3;
 800eb5e:	4b39      	ldr	r3, [pc, #228]	; (800ec44 <bengRun+0x278>)
 800eb60:	2203      	movs	r2, #3
 800eb62:	701a      	strb	r2, [r3, #0]
			break;
 800eb64:	e067      	b.n	800ec36 <bengRun+0x26a>
		case M_CMD_PID:
			pPid->PrdCnt++;
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	861a      	strh	r2, [r3, #48]	; 0x30
			if(pPid->PrdCnt<pPid->Period)	break;
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d35a      	bcc.n	800ec34 <bengRun+0x268>
			pPid->PrdCnt=0;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2200      	movs	r2, #0
 800eb82:	861a      	strh	r2, [r3, #48]	; 0x30
			
			inc=getPidInc(pPid);
 800eb84:	6838      	ldr	r0, [r7, #0]
 800eb86:	f000 fdc5 	bl	800f714 <getPidInc>
 800eb8a:	6178      	str	r0, [r7, #20]
//					ProcDJCmd((uint8_t *)kzCmdBuf);			
//					inc=0;
//				}
//			}
			
			if(inc>0)
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	dd22      	ble.n	800ebd8 <bengRun+0x20c>
			{
				kzCmdBuf[0]=(1 << motor->rstCmdChn) | (1 << motor->revCmdChn);//turn off
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	7d1b      	ldrb	r3, [r3, #20]
 800eb96:	461a      	mov	r2, r3
 800eb98:	2301      	movs	r3, #1
 800eb9a:	4093      	lsls	r3, r2
 800eb9c:	b21a      	sxth	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	7d9b      	ldrb	r3, [r3, #22]
 800eba2:	4619      	mov	r1, r3
 800eba4:	2301      	movs	r3, #1
 800eba6:	408b      	lsls	r3, r1
 800eba8:	b21b      	sxth	r3, r3
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	b21b      	sxth	r3, r3
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->norCmdChn);	//turn on
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	7d5b      	ldrb	r3, [r3, #21]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	2301      	movs	r3, #1
 800ebba:	4093      	lsls	r3, r2
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=pPid->AbsOfIncrease;				//delay
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ebc4:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800ebc6:	f107 030c 	add.w	r3, r7, #12
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fe ff12 	bl	800d9f4 <ProcDJCmd>
				bengTest=11;
 800ebd0:	4b1c      	ldr	r3, [pc, #112]	; (800ec44 <bengRun+0x278>)
 800ebd2:	220b      	movs	r2, #11
 800ebd4:	701a      	strb	r2, [r3, #0]
				break;
 800ebd6:	e02e      	b.n	800ec36 <bengRun+0x26a>
			}
			if(inc<0)
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	da22      	bge.n	800ec24 <bengRun+0x258>
			{
				kzCmdBuf[0]=(1 << motor->rstCmdChn) | (1 << motor->norCmdChn);//turn off
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7d1b      	ldrb	r3, [r3, #20]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	4093      	lsls	r3, r2
 800ebe8:	b21a      	sxth	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	7d5b      	ldrb	r3, [r3, #21]
 800ebee:	4619      	mov	r1, r3
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	408b      	lsls	r3, r1
 800ebf4:	b21b      	sxth	r3, r3
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	b21b      	sxth	r3, r3
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->revCmdChn);	//turn on
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	7d9b      	ldrb	r3, [r3, #22]
 800ec02:	461a      	mov	r2, r3
 800ec04:	2301      	movs	r3, #1
 800ec06:	4093      	lsls	r3, r2
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=pPid->AbsOfIncrease;			//delay
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ec10:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800ec12:	f107 030c 	add.w	r3, r7, #12
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe feec 	bl	800d9f4 <ProcDJCmd>
				bengTest=12;
 800ec1c:	4b09      	ldr	r3, [pc, #36]	; (800ec44 <bengRun+0x278>)
 800ec1e:	220c      	movs	r2, #12
 800ec20:	701a      	strb	r2, [r3, #0]
				break;
 800ec22:	e008      	b.n	800ec36 <bengRun+0x26a>
			}
			bengTest=13;
 800ec24:	4b07      	ldr	r3, [pc, #28]	; (800ec44 <bengRun+0x278>)
 800ec26:	220d      	movs	r2, #13
 800ec28:	701a      	strb	r2, [r3, #0]
			break;
 800ec2a:	e004      	b.n	800ec36 <bengRun+0x26a>
		default:
			break;
 800ec2c:	bf00      	nop
 800ec2e:	e002      	b.n	800ec36 <bengRun+0x26a>
			if(motor->period_cnt<motor->period)	break;
 800ec30:	bf00      	nop
 800ec32:	e000      	b.n	800ec36 <bengRun+0x26a>
			if(pPid->PrdCnt<pPid->Period)	break;
 800ec34:	bf00      	nop
	}
}
 800ec36:	bf00      	nop
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20007958 	.word	0x20007958
 800ec44:	20007fe4 	.word	0x20007fe4

0800ec48 <madaRun>:

void madaRun(MOTOR *motor,MPID *pPid)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
	uint16_t kzCmdBuf[3];
	int inc;
	switch(motor->cmd)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	7ddb      	ldrb	r3, [r3, #23]
 800ec56:	2b03      	cmp	r3, #3
 800ec58:	f200 8126 	bhi.w	800eea8 <madaRun+0x260>
 800ec5c:	a201      	add	r2, pc, #4	; (adr r2, 800ec64 <madaRun+0x1c>)
 800ec5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec62:	bf00      	nop
 800ec64:	0800eea9 	.word	0x0800eea9
 800ec68:	0800ec75 	.word	0x0800ec75
 800ec6c:	0800eceb 	.word	0x0800eceb
 800ec70:	0800ede3 	.word	0x0800ede3
	{
		case M_CMD_FREE:
			break;
		case M_CMD_STOP:
			if(Out_Cmd[motor->norCmdChn]==K_CMD_ON||Out_Cmd[motor->revCmdChn]==K_CMD_ON)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	7d5b      	ldrb	r3, [r3, #21]
 800ec78:	461a      	mov	r2, r3
 800ec7a:	4b90      	ldr	r3, [pc, #576]	; (800eebc <madaRun+0x274>)
 800ec7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d007      	beq.n	800ec94 <madaRun+0x4c>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	7d9b      	ldrb	r3, [r3, #22]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	4b8c      	ldr	r3, [pc, #560]	; (800eebc <madaRun+0x274>)
 800ec8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d120      	bne.n	800ecd6 <madaRun+0x8e>
			{
				kzCmdBuf[0]=(1 << motor->norCmdChn) | (1 << motor->revCmdChn);//turn off
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	7d5b      	ldrb	r3, [r3, #21]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	4093      	lsls	r3, r2
 800ec9e:	b21a      	sxth	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	7d9b      	ldrb	r3, [r3, #22]
 800eca4:	4619      	mov	r1, r3
 800eca6:	2301      	movs	r3, #1
 800eca8:	408b      	lsls	r3, r1
 800ecaa:	b21b      	sxth	r3, r3
 800ecac:	4313      	orrs	r3, r2
 800ecae:	b21b      	sxth	r3, r3
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->rstCmdChn);	//turn on
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	7d1b      	ldrb	r3, [r3, #20]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	2301      	movs	r3, #1
 800ecbc:	4093      	lsls	r3, r2
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=motor->rstDelayTime;				//delay
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);			
 800eccc:	f107 030c 	add.w	r3, r7, #12
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fe fe8f 	bl	800d9f4 <ProcDJCmd>
			}
			motor->cmd=M_CMD_FREE;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	75da      	strb	r2, [r3, #23]
			motor->period_cnt=0;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	825a      	strh	r2, [r3, #18]
			madaTest=4;
 800ece2:	4b77      	ldr	r3, [pc, #476]	; (800eec0 <madaRun+0x278>)
 800ece4:	2204      	movs	r2, #4
 800ece6:	701a      	strb	r2, [r3, #0]
			break;
 800ece8:	e0e3      	b.n	800eeb2 <madaRun+0x26a>
		case M_CMD_RUN:
			motor->period_cnt++;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	8a5b      	ldrh	r3, [r3, #18]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	825a      	strh	r2, [r3, #18]
			if(motor->period_cnt<motor->period)	break;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	8a5a      	ldrh	r2, [r3, #18]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	8a1b      	ldrh	r3, [r3, #16]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	f0c0 80d4 	bcc.w	800eeac <madaRun+0x264>
			motor->period_cnt=0;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	825a      	strh	r2, [r3, #18]

			if(*motor->pCurrent<*motor->pTarget-motor->range)//>target
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed12:	461a      	mov	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ed24:	1acb      	subs	r3, r1, r3
 800ed26:	429a      	cmp	r2, r3
 800ed28:	da23      	bge.n	800ed72 <madaRun+0x12a>
			{
				kzCmdBuf[0]=(1 << motor->rstCmdChn) | (1 << motor->revCmdChn);//turn off
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	7d1b      	ldrb	r3, [r3, #20]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	2301      	movs	r3, #1
 800ed32:	4093      	lsls	r3, r2
 800ed34:	b21a      	sxth	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	7d9b      	ldrb	r3, [r3, #22]
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	408b      	lsls	r3, r1
 800ed40:	b21b      	sxth	r3, r3
 800ed42:	4313      	orrs	r3, r2
 800ed44:	b21b      	sxth	r3, r3
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->norCmdChn);	//turn on
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	7d5b      	ldrb	r3, [r3, #21]
 800ed4e:	461a      	mov	r2, r3
 800ed50:	2301      	movs	r3, #1
 800ed52:	4093      	lsls	r3, r2
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=motor->normalTime;				//delay
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	7b1b      	ldrb	r3, [r3, #12]
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800ed60:	f107 030c 	add.w	r3, r7, #12
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fe fe45 	bl	800d9f4 <ProcDJCmd>
				madaTest=1;
 800ed6a:	4b55      	ldr	r3, [pc, #340]	; (800eec0 <madaRun+0x278>)
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	701a      	strb	r2, [r3, #0]
				break;
 800ed70:	e09f      	b.n	800eeb2 <madaRun+0x26a>
			}
			if(*motor->pCurrent>*motor->pTarget+motor->range)//<target
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed84:	4619      	mov	r1, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ed8c:	440b      	add	r3, r1
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	dd23      	ble.n	800edda <madaRun+0x192>
			{
				kzCmdBuf[0]=(1 << motor->rstCmdChn) | (1 << motor->norCmdChn);//turn off
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	7d1b      	ldrb	r3, [r3, #20]
 800ed96:	461a      	mov	r2, r3
 800ed98:	2301      	movs	r3, #1
 800ed9a:	4093      	lsls	r3, r2
 800ed9c:	b21a      	sxth	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	7d5b      	ldrb	r3, [r3, #21]
 800eda2:	4619      	mov	r1, r3
 800eda4:	2301      	movs	r3, #1
 800eda6:	408b      	lsls	r3, r1
 800eda8:	b21b      	sxth	r3, r3
 800edaa:	4313      	orrs	r3, r2
 800edac:	b21b      	sxth	r3, r3
 800edae:	b29b      	uxth	r3, r3
 800edb0:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->revCmdChn);	//turn on
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	7d9b      	ldrb	r3, [r3, #22]
 800edb6:	461a      	mov	r2, r3
 800edb8:	2301      	movs	r3, #1
 800edba:	4093      	lsls	r3, r2
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=motor->reverseTime ;			//delay
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	7b5b      	ldrb	r3, [r3, #13]
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800edc8:	f107 030c 	add.w	r3, r7, #12
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fe fe11 	bl	800d9f4 <ProcDJCmd>
				madaTest=2;
 800edd2:	4b3b      	ldr	r3, [pc, #236]	; (800eec0 <madaRun+0x278>)
 800edd4:	2202      	movs	r2, #2
 800edd6:	701a      	strb	r2, [r3, #0]
				break;
 800edd8:	e06b      	b.n	800eeb2 <madaRun+0x26a>
			}
			madaTest=3;
 800edda:	4b39      	ldr	r3, [pc, #228]	; (800eec0 <madaRun+0x278>)
 800eddc:	2203      	movs	r2, #3
 800edde:	701a      	strb	r2, [r3, #0]
			break;
 800ede0:	e067      	b.n	800eeb2 <madaRun+0x26a>
		case M_CMD_PID:
			pPid->PrdCnt++;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ede6:	3301      	adds	r3, #1
 800ede8:	b29a      	uxth	r2, r3
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	861a      	strh	r2, [r3, #48]	; 0x30
			if(pPid->PrdCnt<pPid->Period)	break;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d35a      	bcc.n	800eeb0 <madaRun+0x268>
			pPid->PrdCnt=0;
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2200      	movs	r2, #0
 800edfe:	861a      	strh	r2, [r3, #48]	; 0x30
			
			inc=getPidInc(pPid);
 800ee00:	6838      	ldr	r0, [r7, #0]
 800ee02:	f000 fc87 	bl	800f714 <getPidInc>
 800ee06:	6178      	str	r0, [r7, #20]
//					madaTest=14;
//					break;
//				}
//			}

			if(inc>0)
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	dd22      	ble.n	800ee54 <madaRun+0x20c>
			{
				kzCmdBuf[0]=(1 << motor->rstCmdChn) | (1 << motor->revCmdChn);//turn off
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	7d1b      	ldrb	r3, [r3, #20]
 800ee12:	461a      	mov	r2, r3
 800ee14:	2301      	movs	r3, #1
 800ee16:	4093      	lsls	r3, r2
 800ee18:	b21a      	sxth	r2, r3
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	7d9b      	ldrb	r3, [r3, #22]
 800ee1e:	4619      	mov	r1, r3
 800ee20:	2301      	movs	r3, #1
 800ee22:	408b      	lsls	r3, r1
 800ee24:	b21b      	sxth	r3, r3
 800ee26:	4313      	orrs	r3, r2
 800ee28:	b21b      	sxth	r3, r3
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->norCmdChn);	//turn on
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	7d5b      	ldrb	r3, [r3, #21]
 800ee32:	461a      	mov	r2, r3
 800ee34:	2301      	movs	r3, #1
 800ee36:	4093      	lsls	r3, r2
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=pPid->AbsOfIncrease;				//delay
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ee40:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800ee42:	f107 030c 	add.w	r3, r7, #12
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fe fdd4 	bl	800d9f4 <ProcDJCmd>
				madaTest=11;
 800ee4c:	4b1c      	ldr	r3, [pc, #112]	; (800eec0 <madaRun+0x278>)
 800ee4e:	220b      	movs	r2, #11
 800ee50:	701a      	strb	r2, [r3, #0]
				break;
 800ee52:	e02e      	b.n	800eeb2 <madaRun+0x26a>
			}
			if(inc<0)
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	da22      	bge.n	800eea0 <madaRun+0x258>
			{
				kzCmdBuf[0]=(1 << motor->rstCmdChn) | (1 << motor->norCmdChn);//turn off
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	7d1b      	ldrb	r3, [r3, #20]
 800ee5e:	461a      	mov	r2, r3
 800ee60:	2301      	movs	r3, #1
 800ee62:	4093      	lsls	r3, r2
 800ee64:	b21a      	sxth	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	7d5b      	ldrb	r3, [r3, #21]
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	408b      	lsls	r3, r1
 800ee70:	b21b      	sxth	r3, r3
 800ee72:	4313      	orrs	r3, r2
 800ee74:	b21b      	sxth	r3, r3
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	81bb      	strh	r3, [r7, #12]
				kzCmdBuf[1]=(1 << motor->revCmdChn);	//turn on
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	7d9b      	ldrb	r3, [r3, #22]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	2301      	movs	r3, #1
 800ee82:	4093      	lsls	r3, r2
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	81fb      	strh	r3, [r7, #14]
				kzCmdBuf[2]=pPid->AbsOfIncrease;			//delay
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ee8c:	823b      	strh	r3, [r7, #16]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800ee8e:	f107 030c 	add.w	r3, r7, #12
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fe fdae 	bl	800d9f4 <ProcDJCmd>
				madaTest=12;
 800ee98:	4b09      	ldr	r3, [pc, #36]	; (800eec0 <madaRun+0x278>)
 800ee9a:	220c      	movs	r2, #12
 800ee9c:	701a      	strb	r2, [r3, #0]
				break;
 800ee9e:	e008      	b.n	800eeb2 <madaRun+0x26a>
			}
			madaTest=13;
 800eea0:	4b07      	ldr	r3, [pc, #28]	; (800eec0 <madaRun+0x278>)
 800eea2:	220d      	movs	r2, #13
 800eea4:	701a      	strb	r2, [r3, #0]
			break;
 800eea6:	e004      	b.n	800eeb2 <madaRun+0x26a>
		default:
			break;
 800eea8:	bf00      	nop
 800eeaa:	e002      	b.n	800eeb2 <madaRun+0x26a>
			if(motor->period_cnt<motor->period)	break;
 800eeac:	bf00      	nop
 800eeae:	e000      	b.n	800eeb2 <madaRun+0x26a>
			if(pPid->PrdCnt<pPid->Period)	break;
 800eeb0:	bf00      	nop
	}
}
 800eeb2:	bf00      	nop
 800eeb4:	3718      	adds	r7, #24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	20007958 	.word	0x20007958
 800eec0:	20007fec 	.word	0x20007fec

0800eec4 <Get_ChipID>:

uint8_t EspTxBuffer[512];

static uint32_t CpuID[3];
void Get_ChipID(void)
{
 800eec4:	b480      	push	{r7}
 800eec6:	af00      	add	r7, sp, #0
	CpuID[0]=*(__IO uint32_t*)(0x1FFF7A10);
 800eec8:	4b08      	ldr	r3, [pc, #32]	; (800eeec <Get_ChipID+0x28>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a08      	ldr	r2, [pc, #32]	; (800eef0 <Get_ChipID+0x2c>)
 800eece:	6013      	str	r3, [r2, #0]
	CpuID[1]=*(__IO uint32_t*)(0x1FFF7A14);
 800eed0:	4b08      	ldr	r3, [pc, #32]	; (800eef4 <Get_ChipID+0x30>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a06      	ldr	r2, [pc, #24]	; (800eef0 <Get_ChipID+0x2c>)
 800eed6:	6053      	str	r3, [r2, #4]
	CpuID[2]=*(__IO uint32_t*)(0x1FFF7A18);
 800eed8:	4b07      	ldr	r3, [pc, #28]	; (800eef8 <Get_ChipID+0x34>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a04      	ldr	r2, [pc, #16]	; (800eef0 <Get_ChipID+0x2c>)
 800eede:	6093      	str	r3, [r2, #8]
}
 800eee0:	bf00      	nop
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop
 800eeec:	1fff7a10 	.word	0x1fff7a10
 800eef0:	20004940 	.word	0x20004940
 800eef4:	1fff7a14 	.word	0x1fff7a14
 800eef8:	1fff7a18 	.word	0x1fff7a18

0800eefc <init_led>:
{
	xQueueSend( xUartQueueHandle, &msg, 0 );
}
*/
void init_led()
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b088      	sub	sp, #32
 800ef00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800ef02:	f107 030c 	add.w	r3, r7, #12
 800ef06:	2200      	movs	r2, #0
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	605a      	str	r2, [r3, #4]
 800ef0c:	609a      	str	r2, [r3, #8]
 800ef0e:	60da      	str	r2, [r3, #12]
 800ef10:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800ef12:	2300      	movs	r3, #0
 800ef14:	60bb      	str	r3, [r7, #8]
 800ef16:	4b23      	ldr	r3, [pc, #140]	; (800efa4 <init_led+0xa8>)
 800ef18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef1a:	4a22      	ldr	r2, [pc, #136]	; (800efa4 <init_led+0xa8>)
 800ef1c:	f043 0310 	orr.w	r3, r3, #16
 800ef20:	6313      	str	r3, [r2, #48]	; 0x30
 800ef22:	4b20      	ldr	r3, [pc, #128]	; (800efa4 <init_led+0xa8>)
 800ef24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef26:	f003 0310 	and.w	r3, r3, #16
 800ef2a:	60bb      	str	r3, [r7, #8]
 800ef2c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800ef2e:	2300      	movs	r3, #0
 800ef30:	607b      	str	r3, [r7, #4]
 800ef32:	4b1c      	ldr	r3, [pc, #112]	; (800efa4 <init_led+0xa8>)
 800ef34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef36:	4a1b      	ldr	r2, [pc, #108]	; (800efa4 <init_led+0xa8>)
 800ef38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ef3e:	4b19      	ldr	r3, [pc, #100]	; (800efa4 <init_led+0xa8>)
 800ef40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef46:	607b      	str	r3, [r7, #4]
 800ef48:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	//	  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|KOUT1_Pin, GPIO_PIN_SET);
	//	  /*Configure GPIO pin Output Level */

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	2118      	movs	r1, #24
 800ef4e:	4816      	ldr	r0, [pc, #88]	; (800efa8 <init_led+0xac>)
 800ef50:	f7f5 f80c 	bl	8003f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 800ef54:	2201      	movs	r2, #1
 800ef56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ef5a:	4814      	ldr	r0, [pc, #80]	; (800efac <init_led+0xb0>)
 800ef5c:	f7f5 f806 	bl	8003f6c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 800ef60:	2318      	movs	r3, #24
 800ef62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef64:	2301      	movs	r3, #1
 800ef66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ef70:	f107 030c 	add.w	r3, r7, #12
 800ef74:	4619      	mov	r1, r3
 800ef76:	480c      	ldr	r0, [pc, #48]	; (800efa8 <init_led+0xac>)
 800ef78:	f7f4 fe46 	bl	8003c08 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ef7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef80:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef82:	2301      	movs	r3, #1
 800ef84:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ef8a:	2302      	movs	r3, #2
 800ef8c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ef8e:	f107 030c 	add.w	r3, r7, #12
 800ef92:	4619      	mov	r1, r3
 800ef94:	4805      	ldr	r0, [pc, #20]	; (800efac <init_led+0xb0>)
 800ef96:	f7f4 fe37 	bl	8003c08 <HAL_GPIO_Init>
}
 800ef9a:	bf00      	nop
 800ef9c:	3720      	adds	r7, #32
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	40023800 	.word	0x40023800
 800efa8:	40021000 	.word	0x40021000
 800efac:	40021800 	.word	0x40021800

0800efb0 <InitMyApp>:

void InitMyApp()
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	af00      	add	r7, sp, #0
//	clrCapturreFlag();
	init_led();
 800efb4:	f7ff ffa2 	bl	800eefc <init_led>

	Get_ChipID();
 800efb8:	f7ff ff84 	bl	800eec4 <Get_ChipID>
	LocalAddr=read_sw_sta();
 800efbc:	f7fe f97a 	bl	800d2b4 <read_sw_sta>
 800efc0:	4603      	mov	r3, r0
 800efc2:	461a      	mov	r2, r3
 800efc4:	4b44      	ldr	r3, [pc, #272]	; (800f0d8 <InitMyApp+0x128>)
 800efc6:	801a      	strh	r2, [r3, #0]

	hdma_memtomem_dma2_stream1.XferCpltCallback=DMATransferComplete;
 800efc8:	4b44      	ldr	r3, [pc, #272]	; (800f0dc <InitMyApp+0x12c>)
 800efca:	4a45      	ldr	r2, [pc, #276]	; (800f0e0 <InitMyApp+0x130>)
 800efcc:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start(&htim2);//Æô¶¯Tim2 ¶¨Ê±´¥·¢ADC
 800efce:	4845      	ldr	r0, [pc, #276]	; (800f0e4 <InitMyApp+0x134>)
 800efd0:	f7f6 fcd3 	bl	800597a <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_DMA_BUF, ADC_NUMBER*NPT);//statr ADC with DMA use FFT
 800efd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800efd8:	4943      	ldr	r1, [pc, #268]	; (800f0e8 <InitMyApp+0x138>)
 800efda:	4844      	ldr	r0, [pc, #272]	; (800f0ec <InitMyApp+0x13c>)
 800efdc:	f7f2 fdd2 	bl	8001b84 <HAL_ADC_Start_DMA>
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_DMA_BUF, ADC_NUMBER);//statr ADC with DMA	direct

	HAL_UART_Receive_DMA(&huart1,UsartType1.RxBuf, USART_BUF_SIZE);
 800efe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800efe4:	4942      	ldr	r1, [pc, #264]	; (800f0f0 <InitMyApp+0x140>)
 800efe6:	4843      	ldr	r0, [pc, #268]	; (800f0f4 <InitMyApp+0x144>)
 800efe8:	f7f7 fc1c 	bl	8006824 <HAL_UART_Receive_DMA>
	__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);//¿ªÆô¿ÕÏÐÖÐ¶Ï
 800efec:	4b41      	ldr	r3, [pc, #260]	; (800f0f4 <InitMyApp+0x144>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	68da      	ldr	r2, [r3, #12]
 800eff2:	4b40      	ldr	r3, [pc, #256]	; (800f0f4 <InitMyApp+0x144>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f042 0210 	orr.w	r2, r2, #16
 800effa:	60da      	str	r2, [r3, #12]
	__HAL_UART_DISABLE_IT(&huart1,UART_IT_RXNE);//¹Ø±Õ×Ö·û½ÓÊÕÖÐ¶Ï
 800effc:	4b3d      	ldr	r3, [pc, #244]	; (800f0f4 <InitMyApp+0x144>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68da      	ldr	r2, [r3, #12]
 800f002:	4b3c      	ldr	r3, [pc, #240]	; (800f0f4 <InitMyApp+0x144>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f022 0220 	bic.w	r2, r2, #32
 800f00a:	60da      	str	r2, [r3, #12]
	__HAL_UART_DISABLE_IT(&huart1,UART_IT_TXE);//¹Ø±Õ·¢ËÍ¿ÕÖÐ¶Ï
 800f00c:	4b39      	ldr	r3, [pc, #228]	; (800f0f4 <InitMyApp+0x144>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	68da      	ldr	r2, [r3, #12]
 800f012:	4b38      	ldr	r3, [pc, #224]	; (800f0f4 <InitMyApp+0x144>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f01a:	60da      	str	r2, [r3, #12]

	//UsartType3.dmaSend_flag=USART_DMA_SENDOVER;
	HAL_UART_Receive_DMA(&huart3,UsartType3.RxBuf, USART_BUF_SIZE);
 800f01c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f020:	4935      	ldr	r1, [pc, #212]	; (800f0f8 <InitMyApp+0x148>)
 800f022:	4836      	ldr	r0, [pc, #216]	; (800f0fc <InitMyApp+0x14c>)
 800f024:	f7f7 fbfe 	bl	8006824 <HAL_UART_Receive_DMA>
	__HAL_UART_ENABLE_IT(&huart3,UART_IT_IDLE);//¿ªÆô¿ÕÏÐÖÐ¶Ï
 800f028:	4b34      	ldr	r3, [pc, #208]	; (800f0fc <InitMyApp+0x14c>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68da      	ldr	r2, [r3, #12]
 800f02e:	4b33      	ldr	r3, [pc, #204]	; (800f0fc <InitMyApp+0x14c>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f042 0210 	orr.w	r2, r2, #16
 800f036:	60da      	str	r2, [r3, #12]
	__HAL_UART_DISABLE_IT(&huart3,UART_IT_RXNE);//¹Ø±Õ×Ö·û½ÓÊÕÖÐ¶Ï
 800f038:	4b30      	ldr	r3, [pc, #192]	; (800f0fc <InitMyApp+0x14c>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	68da      	ldr	r2, [r3, #12]
 800f03e:	4b2f      	ldr	r3, [pc, #188]	; (800f0fc <InitMyApp+0x14c>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f022 0220 	bic.w	r2, r2, #32
 800f046:	60da      	str	r2, [r3, #12]
	__HAL_UART_DISABLE_IT(&huart3,UART_IT_TXE);//¹Ø±Õ·¢ËÍ¿ÕÖÐ¶Ï
 800f048:	4b2c      	ldr	r3, [pc, #176]	; (800f0fc <InitMyApp+0x14c>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68da      	ldr	r2, [r3, #12]
 800f04e:	4b2b      	ldr	r3, [pc, #172]	; (800f0fc <InitMyApp+0x14c>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f056:	60da      	str	r2, [r3, #12]

	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_1);
 800f058:	2100      	movs	r1, #0
 800f05a:	4829      	ldr	r0, [pc, #164]	; (800f100 <InitMyApp+0x150>)
 800f05c:	f7f6 fd00 	bl	8005a60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_2);
 800f060:	2104      	movs	r1, #4
 800f062:	4827      	ldr	r0, [pc, #156]	; (800f100 <InitMyApp+0x150>)
 800f064:	f7f6 fcfc 	bl	8005a60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_3);
 800f068:	2108      	movs	r1, #8
 800f06a:	4825      	ldr	r0, [pc, #148]	; (800f100 <InitMyApp+0x150>)
 800f06c:	f7f6 fcf8 	bl	8005a60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_4);
 800f070:	210c      	movs	r1, #12
 800f072:	4823      	ldr	r0, [pc, #140]	; (800f100 <InitMyApp+0x150>)
 800f074:	f7f6 fcf4 	bl	8005a60 <HAL_TIM_IC_Start_IT>

	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 800f078:	2100      	movs	r1, #0
 800f07a:	4822      	ldr	r0, [pc, #136]	; (800f104 <InitMyApp+0x154>)
 800f07c:	f7f6 fcf0 	bl	8005a60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_2);
 800f080:	2104      	movs	r1, #4
 800f082:	4820      	ldr	r0, [pc, #128]	; (800f104 <InitMyApp+0x154>)
 800f084:	f7f6 fcec 	bl	8005a60 <HAL_TIM_IC_Start_IT>
//	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_4);

//  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);

	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 800f088:	2100      	movs	r1, #0
 800f08a:	481f      	ldr	r0, [pc, #124]	; (800f108 <InitMyApp+0x158>)
 800f08c:	f7f4 f8cf 	bl	800322e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,0);
 800f090:	2300      	movs	r3, #0
 800f092:	2200      	movs	r2, #0
 800f094:	2100      	movs	r1, #0
 800f096:	481c      	ldr	r0, [pc, #112]	; (800f108 <InitMyApp+0x158>)
 800f098:	f7f4 f991 	bl	80033be <HAL_DAC_SetValue>
//#if ((defined SPI_CS_Pin) && (defined SPI_CLK_Pin))
//	MX6675_Init(&Max6675TypeDef1);
//	MX31855_Init(&Max31855TypeDef1);
//#endif

	if(LocalAddr==0x01){
 800f09c:	4b0e      	ldr	r3, [pc, #56]	; (800f0d8 <InitMyApp+0x128>)
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d105      	bne.n	800f0b0 <InitMyApp+0x100>
		CAN1_Filter_Init_All_In();
 800f0a4:	f000 fa58 	bl	800f558 <CAN1_Filter_Init_All_In>
		MasterFlag=1;
 800f0a8:	4b18      	ldr	r3, [pc, #96]	; (800f10c <InitMyApp+0x15c>)
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	801a      	strh	r2, [r3, #0]
 800f0ae:	e003      	b.n	800f0b8 <InitMyApp+0x108>
	}
	else{
		CAN1_Filter_Init_StdID();
 800f0b0:	f000 f9e6 	bl	800f480 <CAN1_Filter_Init_StdID>
		CAN1_Filter_Init_ExdID();
 800f0b4:	f000 fa16 	bl	800f4e4 <CAN1_Filter_Init_ExdID>
	}
	HAL_CAN_Start(&hcan1);//¿ªÆôCAN1
 800f0b8:	4815      	ldr	r0, [pc, #84]	; (800f110 <InitMyApp+0x160>)
 800f0ba:	f7f3 fae5 	bl	8002688 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);//ÖÐ¶ÏÔÊÐí
 800f0be:	2102      	movs	r1, #2
 800f0c0:	4813      	ldr	r0, [pc, #76]	; (800f110 <InitMyApp+0x160>)
 800f0c2:	f7f3 fd47 	bl	8002b54 <HAL_CAN_ActivateNotification>

	Read_All_Parameters();
 800f0c6:	f000 fce9 	bl	800fa9c <Read_All_Parameters>

	InitOut();
 800f0ca:	f7fe fbcd 	bl	800d868 <InitOut>
	HAL_TIM_Base_Start_IT(&htim14);//2K Hz
 800f0ce:	4811      	ldr	r0, [pc, #68]	; (800f114 <InitMyApp+0x164>)
 800f0d0:	f7f6 fc77 	bl	80059c2 <HAL_TIM_Base_Start_IT>

}
 800f0d4:	bf00      	nop
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	200086b8 	.word	0x200086b8
 800f0dc:	20004a34 	.word	0x20004a34
 800f0e0:	0800d141 	.word	0x0800d141
 800f0e4:	200075e4 	.word	0x200075e4
 800f0e8:	20008088 	.word	0x20008088
 800f0ec:	20004950 	.word	0x20004950
 800f0f0:	20008b18 	.word	0x20008b18
 800f0f4:	20007764 	.word	0x20007764
 800f0f8:	20008d24 	.word	0x20008d24
 800f0fc:	200076c4 	.word	0x200076c4
 800f100:	20007564 	.word	0x20007564
 800f104:	200075a4 	.word	0x200075a4
 800f108:	20004a20 	.word	0x20004a20
 800f10c:	2000494c 	.word	0x2000494c
 800f110:	200049f8 	.word	0x200049f8
 800f114:	20007624 	.word	0x20007624

0800f118 <StartDefaultTask>:
	printf("\r\n");
}
*/
#define TEMBUF_LEN 2
void StartDefaultTask(void * argument)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
*/

	//printf("chip=%d\n",WENDUCHIP);
  for(;;)
  {
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 800f120:	f04f 32ff 	mov.w	r2, #4294967295
 800f124:	2100      	movs	r1, #0
 800f126:	2001      	movs	r0, #1
 800f128:	f7fa ff2c 	bl	8009f84 <osThreadFlagsWait>
	    osDelay(100);
 800f12c:	2064      	movs	r0, #100	; 0x64
 800f12e:	f7fa ffbd 	bl	800a0ac <osDelay>
		Write_All_Parameters();
 800f132:	f000 fc71 	bl	800fa18 <Write_All_Parameters>
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 800f136:	e7f3      	b.n	800f120 <StartDefaultTask+0x8>

0800f138 <calc_avg>:
  }
  /* USER CODE END StartDefaultTask */
}

void calc_avg(uint16_t * all_data_in,uint16_t * result)
{
 800f138:	b480      	push	{r7}
 800f13a:	b087      	sub	sp, #28
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
	uint32_t sum;

	for(int j=0;j<ADC_NUMBER;j++)
 800f142:	2300      	movs	r3, #0
 800f144:	613b      	str	r3, [r7, #16]
 800f146:	e021      	b.n	800f18c <calc_avg+0x54>
	{
		sum=0;
 800f148:	2300      	movs	r3, #0
 800f14a:	617b      	str	r3, [r7, #20]
		for(int i=0;i<NPT;i++)
 800f14c:	2300      	movs	r3, #0
 800f14e:	60fb      	str	r3, [r7, #12]
 800f150:	e00e      	b.n	800f170 <calc_avg+0x38>
		{
			sum+=all_data_in[ADC_NUMBER*i+j];
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	00da      	lsls	r2, r3, #3
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	4413      	add	r3, r2
 800f15a:	005b      	lsls	r3, r3, #1
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	4413      	add	r3, r2
 800f160:	881b      	ldrh	r3, [r3, #0]
 800f162:	461a      	mov	r2, r3
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	4413      	add	r3, r2
 800f168:	617b      	str	r3, [r7, #20]
		for(int i=0;i<NPT;i++)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	3301      	adds	r3, #1
 800f16e:	60fb      	str	r3, [r7, #12]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2b1f      	cmp	r3, #31
 800f174:	dded      	ble.n	800f152 <calc_avg+0x1a>
		}
		result[j]=sum/NPT;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	0959      	lsrs	r1, r3, #5
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	4413      	add	r3, r2
 800f182:	b28a      	uxth	r2, r1
 800f184:	801a      	strh	r2, [r3, #0]
	for(int j=0;j<ADC_NUMBER;j++)
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	3301      	adds	r3, #1
 800f18a:	613b      	str	r3, [r7, #16]
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	2b07      	cmp	r3, #7
 800f190:	ddda      	ble.n	800f148 <calc_avg+0x10>
	}

}
 800f192:	bf00      	nop
 800f194:	371c      	adds	r7, #28
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
	...

0800f1a0 <StartAdcTask>:

void StartAdcTask(void * argument)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
	uint16_t runcnt=0;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	82fb      	strh	r3, [r7, #22]
	uint16_t ledcnt=0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	82bb      	strh	r3, [r7, #20]
	uint16_t kzCmdBuf[3];

	int period;
	if(MasterFlag)
 800f1b0:	4b55      	ldr	r3, [pc, #340]	; (800f308 <StartAdcTask+0x168>)
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d002      	beq.n	800f1be <StartAdcTask+0x1e>
	{
		period=50;
 800f1b8:	2332      	movs	r3, #50	; 0x32
 800f1ba:	613b      	str	r3, [r7, #16]
 800f1bc:	e001      	b.n	800f1c2 <StartAdcTask+0x22>
	}
	else period=10;
 800f1be:	230a      	movs	r3, #10
 800f1c0:	613b      	str	r3, [r7, #16]

	//printf("TaskOfAdcProcess\r\n");
	//PLkzEnable=0;
	motorInit();
 800f1c2:	f7ff fb9b 	bl	800e8fc <motorInit>
  for(;;)
  {
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 800f1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	f7fa fed9 	bl	8009f84 <osThreadFlagsWait>

		//LED_ON;
		if(USE_FFT_METHOD==1234)
 800f1d2:	4b4e      	ldr	r3, [pc, #312]	; (800f30c <StartAdcTask+0x16c>)
 800f1d4:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 800f1d8:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d104      	bne.n	800f1ea <StartAdcTask+0x4a>
		{
			calc_fft_q15(FFT_ALL_IN,AllSampleBuf);//76us
 800f1e0:	494b      	ldr	r1, [pc, #300]	; (800f310 <StartAdcTask+0x170>)
 800f1e2:	484c      	ldr	r0, [pc, #304]	; (800f314 <StartAdcTask+0x174>)
 800f1e4:	f000 f9da 	bl	800f59c <calc_fft_q15>
 800f1e8:	e003      	b.n	800f1f2 <StartAdcTask+0x52>
			//calc_fft(FFT_ALL_IN,AllSampleBuf);
		}
		else
		{
			calc_avg(FFT_ALL_IN,AllSampleBuf);//
 800f1ea:	4949      	ldr	r1, [pc, #292]	; (800f310 <StartAdcTask+0x170>)
 800f1ec:	4849      	ldr	r0, [pc, #292]	; (800f314 <StartAdcTask+0x174>)
 800f1ee:	f7ff ffa3 	bl	800f138 <calc_avg>
		}
		//LED_OFF;

		calc_pinlv();//2us
 800f1f2:	f7fe f939 	bl	800d468 <calc_pinlv>

		bengRun(&Beng,&bengPid);		//0.65-0.8 us
 800f1f6:	4948      	ldr	r1, [pc, #288]	; (800f318 <StartAdcTask+0x178>)
 800f1f8:	4848      	ldr	r0, [pc, #288]	; (800f31c <StartAdcTask+0x17c>)
 800f1fa:	f7ff fbe7 	bl	800e9cc <bengRun>
		madaRun(&Mada,&madaPid);
 800f1fe:	4948      	ldr	r1, [pc, #288]	; (800f320 <StartAdcTask+0x180>)
 800f200:	4848      	ldr	r0, [pc, #288]	; (800f324 <StartAdcTask+0x184>)
 800f202:	f7ff fd21 	bl	800ec48 <madaRun>

		ledcnt++;
 800f206:	8abb      	ldrh	r3, [r7, #20]
 800f208:	3301      	adds	r3, #1
 800f20a:	82bb      	strh	r3, [r7, #20]
		if(ledcnt>=period)
 800f20c:	8abb      	ldrh	r3, [r7, #20]
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	429a      	cmp	r2, r3
 800f212:	dc09      	bgt.n	800f228 <StartAdcTask+0x88>
		{
			ledcnt=0;
 800f214:	2300      	movs	r3, #0
 800f216:	82bb      	strh	r3, [r7, #20]
			LED_T;
 800f218:	2110      	movs	r1, #16
 800f21a:	4843      	ldr	r0, [pc, #268]	; (800f328 <StartAdcTask+0x188>)
 800f21c:	f7f4 febf 	bl	8003f9e <HAL_GPIO_TogglePin>
			LED0_T;
 800f220:	2108      	movs	r1, #8
 800f222:	4842      	ldr	r0, [pc, #264]	; (800f32c <StartAdcTask+0x18c>)
 800f224:	f7f4 febb 	bl	8003f9e <HAL_GPIO_TogglePin>
		}

		RunTime++;
 800f228:	4b41      	ldr	r3, [pc, #260]	; (800f330 <StartAdcTask+0x190>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	3301      	adds	r3, #1
 800f22e:	4a40      	ldr	r2, [pc, #256]	; (800f330 <StartAdcTask+0x190>)
 800f230:	6013      	str	r3, [r2, #0]

		runcnt++;
 800f232:	8afb      	ldrh	r3, [r7, #22]
 800f234:	3301      	adds	r3, #1
 800f236:	82fb      	strh	r3, [r7, #22]
		if(runcnt>=10)
 800f238:	8afb      	ldrh	r3, [r7, #22]
 800f23a:	2b09      	cmp	r3, #9
 800f23c:	d901      	bls.n	800f242 <StartAdcTask+0xa2>
		{
			runcnt=0;
 800f23e:	2300      	movs	r3, #0
 800f240:	82fb      	strh	r3, [r7, #22]
		}

//--------------------------------------------------------------
		if(JSF_YALI_BAOHU){
 800f242:	4b32      	ldr	r3, [pc, #200]	; (800f30c <StartAdcTask+0x16c>)
 800f244:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00e      	beq.n	800f26a <StartAdcTask+0xca>
			if(AllSampleBuf[XITONG_YALI_CHN]>JSF_YALI_BAOHU){
 800f24c:	4b2f      	ldr	r3, [pc, #188]	; (800f30c <StartAdcTask+0x16c>)
 800f24e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800f252:	461a      	mov	r2, r3
 800f254:	4b2e      	ldr	r3, [pc, #184]	; (800f310 <StartAdcTask+0x170>)
 800f256:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f25a:	4b2c      	ldr	r3, [pc, #176]	; (800f30c <StartAdcTask+0x16c>)
 800f25c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800f260:	429a      	cmp	r2, r3
 800f262:	d902      	bls.n	800f26a <StartAdcTask+0xca>
				JSF_OFF;
 800f264:	4b33      	ldr	r3, [pc, #204]	; (800f334 <StartAdcTask+0x194>)
 800f266:	2200      	movs	r2, #0
 800f268:	825a      	strh	r2, [r3, #18]
			}
		}
		if(JSF_ZHUNASU_BAOHU)
 800f26a:	4b28      	ldr	r3, [pc, #160]	; (800f30c <StartAdcTask+0x16c>)
 800f26c:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00e      	beq.n	800f292 <StartAdcTask+0xf2>
		{
			if(AllSampleBuf[MADA_ZHUANSU_CHN]>JSF_ZHUNASU_BAOHU){
 800f274:	4b25      	ldr	r3, [pc, #148]	; (800f30c <StartAdcTask+0x16c>)
 800f276:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f27a:	461a      	mov	r2, r3
 800f27c:	4b24      	ldr	r3, [pc, #144]	; (800f310 <StartAdcTask+0x170>)
 800f27e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f282:	4b22      	ldr	r3, [pc, #136]	; (800f30c <StartAdcTask+0x16c>)
 800f284:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800f288:	429a      	cmp	r2, r3
 800f28a:	d902      	bls.n	800f292 <StartAdcTask+0xf2>
				JSF_OFF;
 800f28c:	4b29      	ldr	r3, [pc, #164]	; (800f334 <StartAdcTask+0x194>)
 800f28e:	2200      	movs	r2, #0
 800f290:	825a      	strh	r2, [r3, #18]
			}
		}

		if(MADA_RESET_YALI)//mada auto reset
 800f292:	4b1e      	ldr	r3, [pc, #120]	; (800f30c <StartAdcTask+0x16c>)
 800f294:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d094      	beq.n	800f1c6 <StartAdcTask+0x26>
		{
			if(Out_Cmd[Mada.norCmdChn]==K_CMD_ON && AllSampleBuf[XITONG_YALI_CHN]>MADA_RESET_YALI)
 800f29c:	4b21      	ldr	r3, [pc, #132]	; (800f324 <StartAdcTask+0x184>)
 800f29e:	7d5b      	ldrb	r3, [r3, #21]
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	4b24      	ldr	r3, [pc, #144]	; (800f334 <StartAdcTask+0x194>)
 800f2a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d18c      	bne.n	800f1c6 <StartAdcTask+0x26>
 800f2ac:	4b17      	ldr	r3, [pc, #92]	; (800f30c <StartAdcTask+0x16c>)
 800f2ae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	4b16      	ldr	r3, [pc, #88]	; (800f310 <StartAdcTask+0x170>)
 800f2b6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f2ba:	4b14      	ldr	r3, [pc, #80]	; (800f30c <StartAdcTask+0x16c>)
 800f2bc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d980      	bls.n	800f1c6 <StartAdcTask+0x26>
			{
				kzCmdBuf[0]=(1 << Mada.norCmdChn) | (1 << Mada.revCmdChn);//turn off
 800f2c4:	4b17      	ldr	r3, [pc, #92]	; (800f324 <StartAdcTask+0x184>)
 800f2c6:	7d5b      	ldrb	r3, [r3, #21]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	4093      	lsls	r3, r2
 800f2ce:	b21a      	sxth	r2, r3
 800f2d0:	4b14      	ldr	r3, [pc, #80]	; (800f324 <StartAdcTask+0x184>)
 800f2d2:	7d9b      	ldrb	r3, [r3, #22]
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	408b      	lsls	r3, r1
 800f2da:	b21b      	sxth	r3, r3
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	b21b      	sxth	r3, r3
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	813b      	strh	r3, [r7, #8]
				kzCmdBuf[1]=(1 << Mada.rstCmdChn);	//turn on
 800f2e4:	4b0f      	ldr	r3, [pc, #60]	; (800f324 <StartAdcTask+0x184>)
 800f2e6:	7d1b      	ldrb	r3, [r3, #20]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	4093      	lsls	r3, r2
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	817b      	strh	r3, [r7, #10]
				kzCmdBuf[2]=Mada.rstDelayTime;			//delay
 800f2f2:	4b0c      	ldr	r3, [pc, #48]	; (800f324 <StartAdcTask+0x184>)
 800f2f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	81bb      	strh	r3, [r7, #12]
				ProcDJCmd((uint8_t *)kzCmdBuf);
 800f2fc:	f107 0308 	add.w	r3, r7, #8
 800f300:	4618      	mov	r0, r3
 800f302:	f7fe fb77 	bl	800d9f4 <ProcDJCmd>
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 800f306:	e75e      	b.n	800f1c6 <StartAdcTask+0x26>
 800f308:	2000494c 	.word	0x2000494c
 800f30c:	200088f0 	.word	0x200088f0
 800f310:	200077fc 	.word	0x200077fc
 800f314:	2000848c 	.word	0x2000848c
 800f318:	20008054 	.word	0x20008054
 800f31c:	20007ff0 	.word	0x20007ff0
 800f320:	20008020 	.word	0x20008020
 800f324:	20008008 	.word	0x20008008
 800f328:	40020800 	.word	0x40020800
 800f32c:	40021000 	.word	0x40021000
 800f330:	20004938 	.word	0x20004938
 800f334:	20007958 	.word	0x20007958

0800f338 <StartUsart1Task>:
}
}


void StartUsart1Task(void * argument)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
	//printf("Task_of_Uart1\r\n");

	for(;;)
  {
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 800f340:	f04f 32ff 	mov.w	r2, #4294967295
 800f344:	2100      	movs	r1, #0
 800f346:	2001      	movs	r0, #1
 800f348:	f7fa fe1c 	bl	8009f84 <osThreadFlagsWait>
		//HAL_UART_Transmit(&huart1,UsartType1.RxBuf,UsartType1.rx_len,0xffff);
		LED2_ON;
 800f34c:	2200      	movs	r2, #0
 800f34e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f352:	4806      	ldr	r0, [pc, #24]	; (800f36c <StartUsart1Task+0x34>)
 800f354:	f7f4 fe0a 	bl	8003f6c <HAL_GPIO_WritePin>
		ParseUsartModBusData(&UsartType1);
 800f358:	4805      	ldr	r0, [pc, #20]	; (800f370 <StartUsart1Task+0x38>)
 800f35a:	f000 fd81 	bl	800fe60 <ParseUsartModBusData>
		LED2_OFF;
 800f35e:	2201      	movs	r2, #1
 800f360:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f364:	4801      	ldr	r0, [pc, #4]	; (800f36c <StartUsart1Task+0x34>)
 800f366:	f7f4 fe01 	bl	8003f6c <HAL_GPIO_WritePin>
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 800f36a:	e7e9      	b.n	800f340 <StartUsart1Task+0x8>
 800f36c:	40021800 	.word	0x40021800
 800f370:	20008b10 	.word	0x20008b10

0800f374 <StartCan1Task>:
//		}
//*/
//  }
//}
void StartCan1Task(void * argument)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b08e      	sub	sp, #56	; 0x38
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
	CAN_MSG can_msg;
//printf("Task_of_CAN\r\n");
  for(;;)
  {
		osStatus_t status =osMessageQueueGet(canMsgQueueHandle, &can_msg, NULL,portMAX_DELAY);
 800f37c:	4b09      	ldr	r3, [pc, #36]	; (800f3a4 <StartCan1Task+0x30>)
 800f37e:	6818      	ldr	r0, [r3, #0]
 800f380:	f107 010c 	add.w	r1, r7, #12
 800f384:	f04f 33ff 	mov.w	r3, #4294967295
 800f388:	2200      	movs	r2, #0
 800f38a:	f7fa ffb7 	bl	800a2fc <osMessageQueueGet>
 800f38e:	6378      	str	r0, [r7, #52]	; 0x34
		if( status == osOK )
 800f390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f392:	2b00      	cmp	r3, #0
 800f394:	d1f2      	bne.n	800f37c <StartCan1Task+0x8>
		{
			CanMsgProc(&can_msg);
 800f396:	f107 030c 	add.w	r3, r7, #12
 800f39a:	4618      	mov	r0, r3
 800f39c:	f000 fcf6 	bl	800fd8c <CanMsgProc>
  {
 800f3a0:	e7ec      	b.n	800f37c <StartCan1Task+0x8>
 800f3a2:	bf00      	nop
 800f3a4:	20004b58 	.word	0x20004b58

0800f3a8 <CanSendData>:
	HAL_StatusTypeDef result;
  result=HAL_CAN_AddTxMessage(&hcan1,&TxMessage,buf,(uint32_t*)CAN_TX_MAILBOX0);
	return result;
}
HAL_StatusTypeDef CanSendData(uint32_t StdId,uint32_t len,uint8_t * buf)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b08c      	sub	sp, #48	; 0x30
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
	if(MasterFlag==0){
 800f3b4:	4b19      	ldr	r3, [pc, #100]	; (800f41c <CanSendData+0x74>)
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d10a      	bne.n	800f3d2 <CanSendData+0x2a>
		StdId&=0x7f;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3c2:	60fb      	str	r3, [r7, #12]
		StdId|=LocalAddr<<7;
 800f3c4:	4b16      	ldr	r3, [pc, #88]	; (800f420 <CanSendData+0x78>)
 800f3c6:	881b      	ldrh	r3, [r3, #0]
 800f3c8:	01db      	lsls	r3, r3, #7
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	60fb      	str	r3, [r7, #12]
	}

	CAN_TxHeaderTypeDef TxMessage;
  TxMessage.DLC=len;
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	627b      	str	r3, [r7, #36]	; 0x24
  TxMessage.StdId=StdId;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	617b      	str	r3, [r7, #20]
  TxMessage.ExtId=0;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	61bb      	str	r3, [r7, #24]
  TxMessage.IDE=CAN_ID_STD;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	61fb      	str	r3, [r7, #28]
  TxMessage.RTR=CAN_RTR_DATA;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	623b      	str	r3, [r7, #32]
  
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0) osDelay(1);
 800f3e6:	e002      	b.n	800f3ee <CanSendData+0x46>
 800f3e8:	2001      	movs	r0, #1
 800f3ea:	f7fa fe5f 	bl	800a0ac <osDelay>
 800f3ee:	480d      	ldr	r0, [pc, #52]	; (800f424 <CanSendData+0x7c>)
 800f3f0:	f7f3 fa69 	bl	80028c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d0f6      	beq.n	800f3e8 <CanSendData+0x40>
	HAL_StatusTypeDef result;
  result=HAL_CAN_AddTxMessage(&hcan1,&TxMessage,buf,(uint32_t*)CAN_TX_MAILBOX0);
 800f3fa:	f107 0114 	add.w	r1, r7, #20
 800f3fe:	2301      	movs	r3, #1
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	4808      	ldr	r0, [pc, #32]	; (800f424 <CanSendData+0x7c>)
 800f404:	f7f3 f984 	bl	8002710 <HAL_CAN_AddTxMessage>
 800f408:	4603      	mov	r3, r0
 800f40a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return result;
 800f40e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f412:	4618      	mov	r0, r3
 800f414:	3730      	adds	r7, #48	; 0x30
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	2000494c 	.word	0x2000494c
 800f420:	200086b8 	.word	0x200086b8
 800f424:	200049f8 	.word	0x200049f8

0800f428 <CanSendRemoteExd>:
	HAL_StatusTypeDef result;
  result=HAL_CAN_AddTxMessage(&hcan1,&TxMessage,buf,(uint32_t*)CAN_TX_MAILBOX1);
	return result;
}
HAL_StatusTypeDef CanSendRemoteExd(uint32_t ExtId,uint32_t len,uint8_t * buf)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08c      	sub	sp, #48	; 0x30
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef TxMessage;
  TxMessage.DLC=len;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	627b      	str	r3, [r7, #36]	; 0x24
  TxMessage.StdId=0;
 800f438:	2300      	movs	r3, #0
 800f43a:	617b      	str	r3, [r7, #20]
  TxMessage.ExtId=ExtId;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	61bb      	str	r3, [r7, #24]
  TxMessage.IDE=CAN_ID_EXT;
 800f440:	2304      	movs	r3, #4
 800f442:	61fb      	str	r3, [r7, #28]
  TxMessage.RTR=CAN_RTR_REMOTE;
 800f444:	2302      	movs	r3, #2
 800f446:	623b      	str	r3, [r7, #32]
  
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0) osDelay(1);
 800f448:	e002      	b.n	800f450 <CanSendRemoteExd+0x28>
 800f44a:	2001      	movs	r0, #1
 800f44c:	f7fa fe2e 	bl	800a0ac <osDelay>
 800f450:	480a      	ldr	r0, [pc, #40]	; (800f47c <CanSendRemoteExd+0x54>)
 800f452:	f7f3 fa38 	bl	80028c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d0f6      	beq.n	800f44a <CanSendRemoteExd+0x22>
	HAL_StatusTypeDef result;
  result=HAL_CAN_AddTxMessage(&hcan1,&TxMessage,buf,(uint32_t*)CAN_TX_MAILBOX1);
 800f45c:	f107 0114 	add.w	r1, r7, #20
 800f460:	2302      	movs	r3, #2
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	4805      	ldr	r0, [pc, #20]	; (800f47c <CanSendRemoteExd+0x54>)
 800f466:	f7f3 f953 	bl	8002710 <HAL_CAN_AddTxMessage>
 800f46a:	4603      	mov	r3, r0
 800f46c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return result;
 800f470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f474:	4618      	mov	r0, r3
 800f476:	3730      	adds	r7, #48	; 0x30
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	200049f8 	.word	0x200049f8

0800f480 <CAN1_Filter_Init_StdID>:
     //printf("Failed\n");
  }
  }
*/
void CAN1_Filter_Init_StdID(void)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b08c      	sub	sp, #48	; 0x30
 800f484:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;
  uint16_t tmp;
  
	tmp=LocalAddr<<7;//code 高4位是本机地址
 800f486:	4b15      	ldr	r3, [pc, #84]	; (800f4dc <CAN1_Filter_Init_StdID+0x5c>)
 800f488:	881b      	ldrh	r3, [r3, #0]
 800f48a:	01db      	lsls	r3, r3, #7
 800f48c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  sFilterConfig.FilterBank = 1;
 800f48e:	2301      	movs	r3, #1
 800f490:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800f492:	2300      	movs	r3, #0
 800f494:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800f496:	2301      	movs	r3, #1
 800f498:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterIdHigh =(tmp<<5);//验证码
 800f49a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f49c:	015b      	lsls	r3, r3, #5
 800f49e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterIdLow =0;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	60bb      	str	r3, [r7, #8]
  
	tmp=0xf<<7;//mask 屏蔽码 4位 bit=0 not care
 800f4a4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800f4a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  sFilterConfig.FilterMaskIdHigh =(tmp<<5);
 800f4aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4ac:	015b      	lsls	r3, r3, #5
 800f4ae:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdLow =0;//|0x02; 		//只接收数据帧
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	613b      	str	r3, [r7, #16]
  
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterActivation = ENABLE;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.SlaveStartFilterBank = 14;
 800f4bc:	230e      	movs	r3, #14
 800f4be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800f4c0:	1d3b      	adds	r3, r7, #4
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	4806      	ldr	r0, [pc, #24]	; (800f4e0 <CAN1_Filter_Init_StdID+0x60>)
 800f4c6:	f7f2 ffff 	bl	80024c8 <HAL_CAN_ConfigFilter>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <CAN1_Filter_Init_StdID+0x54>
  {
    Error_Handler();
 800f4d0:	f7f1 fd7c 	bl	8000fcc <Error_Handler>
  }
}
 800f4d4:	bf00      	nop
 800f4d6:	3730      	adds	r7, #48	; 0x30
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	200086b8 	.word	0x200086b8
 800f4e0:	200049f8 	.word	0x200049f8

0800f4e4 <CAN1_Filter_Init_ExdID>:
void CAN1_Filter_Init_ExdID(void)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b08c      	sub	sp, #48	; 0x30
 800f4e8:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;
  uint32_t ExtId1 =BROADCAST_EXTID;
 800f4ea:	4b19      	ldr	r3, [pc, #100]	; (800f550 <CAN1_Filter_Init_ExdID+0x6c>)
 800f4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t ExtId2 =BROADCAST_EXTID;
 800f4ee:	4b18      	ldr	r3, [pc, #96]	; (800f550 <CAN1_Filter_Init_ExdID+0x6c>)
 800f4f0:	62bb      	str	r3, [r7, #40]	; 0x28
  
  sFilterConfig.FilterBank = 2;
 800f4f2:	2302      	movs	r3, #2
 800f4f4:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	61fb      	str	r3, [r7, #28]

  sFilterConfig.FilterIdHigh = ((ExtId1<<3)>>16)&0xffff;
 800f4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	0c1b      	lsrs	r3, r3, #16
 800f504:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = ((ExtId1<<3)&0xffff)|CAN_ID_EXT|CAN_RTR_DATA;
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	00db      	lsls	r3, r3, #3
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	f043 0304 	orr.w	r3, r3, #4
 800f510:	607b      	str	r3, [r7, #4]

  sFilterConfig.FilterMaskIdHigh = ((ExtId2<<3)>>16)&0xffff;
 800f512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	0c1b      	lsrs	r3, r3, #16
 800f518:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = ((ExtId2<<3)&0xffff)|CAN_ID_EXT|CAN_RTR_REMOTE;
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	00db      	lsls	r3, r3, #3
 800f51e:	b29b      	uxth	r3, r3
 800f520:	f043 0306 	orr.w	r3, r3, #6
 800f524:	60fb      	str	r3, [r7, #12]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f526:	2300      	movs	r3, #0
 800f528:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800f52a:	2301      	movs	r3, #1
 800f52c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800f52e:	230e      	movs	r3, #14
 800f530:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800f532:	463b      	mov	r3, r7
 800f534:	4619      	mov	r1, r3
 800f536:	4807      	ldr	r0, [pc, #28]	; (800f554 <CAN1_Filter_Init_ExdID+0x70>)
 800f538:	f7f2 ffc6 	bl	80024c8 <HAL_CAN_ConfigFilter>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <CAN1_Filter_Init_ExdID+0x62>
  {
    Error_Handler();
 800f542:	f7f1 fd43 	bl	8000fcc <Error_Handler>
  }
}
 800f546:	bf00      	nop
 800f548:	3730      	adds	r7, #48	; 0x30
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	12345678 	.word	0x12345678
 800f554:	200049f8 	.word	0x200049f8

0800f558 <CAN1_Filter_Init_All_In>:

void CAN1_Filter_Init_All_In(void)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b08a      	sub	sp, #40	; 0x28
 800f55c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  CAN_FilterInitStructure;
   
	//配置过滤器
	CAN_FilterInitStructure.FilterBank=0;	  //过滤器0
 800f55e:	2300      	movs	r3, #0
 800f560:	617b      	str	r3, [r7, #20]
	CAN_FilterInitStructure.FilterMode=CAN_FILTERMODE_IDMASK; 
 800f562:	2300      	movs	r3, #0
 800f564:	61bb      	str	r3, [r7, #24]
	CAN_FilterInitStructure.FilterScale=CAN_FILTERSCALE_32BIT; //32位
 800f566:	2301      	movs	r3, #1
 800f568:	61fb      	str	r3, [r7, #28]
	
	CAN_FilterInitStructure.FilterIdHigh=0x0000;////32位ID
 800f56a:	2300      	movs	r3, #0
 800f56c:	603b      	str	r3, [r7, #0]
	CAN_FilterInitStructure.FilterIdLow=0x0000;
 800f56e:	2300      	movs	r3, #0
 800f570:	607b      	str	r3, [r7, #4]
	
	CAN_FilterInitStructure.FilterMaskIdHigh=0x0000;//32位MASK
 800f572:	2300      	movs	r3, #0
 800f574:	60bb      	str	r3, [r7, #8]
	CAN_FilterInitStructure.FilterMaskIdLow=0x0000;
 800f576:	2300      	movs	r3, #0
 800f578:	60fb      	str	r3, [r7, #12]
	
	CAN_FilterInitStructure.FilterFIFOAssignment=CAN_FILTER_FIFO0;//过滤器0关联到FIFO0
 800f57a:	2300      	movs	r3, #0
 800f57c:	613b      	str	r3, [r7, #16]
	CAN_FilterInitStructure.FilterActivation=ENABLE; //激活过滤器
 800f57e:	2301      	movs	r3, #1
 800f580:	623b      	str	r3, [r7, #32]
	
	CAN_FilterInitStructure.SlaveStartFilterBank=14;
 800f582:	230e      	movs	r3, #14
 800f584:	627b      	str	r3, [r7, #36]	; 0x24
	
  HAL_CAN_ConfigFilter(&hcan1,&CAN_FilterInitStructure);//滤波器初始化
 800f586:	463b      	mov	r3, r7
 800f588:	4619      	mov	r1, r3
 800f58a:	4803      	ldr	r0, [pc, #12]	; (800f598 <CAN1_Filter_Init_All_In+0x40>)
 800f58c:	f7f2 ff9c 	bl	80024c8 <HAL_CAN_ConfigFilter>
		
}
 800f590:	bf00      	nop
 800f592:	3728      	adds	r7, #40	; 0x28
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	200049f8 	.word	0x200049f8

0800f59c <calc_fft_q15>:
	out = sqrt(Z2);
	return out;
}

void calc_fft_q15(uint16_t * all_data_in,uint16_t * result)//16-346us 3-66us
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b08a      	sub	sp, #40	; 0x28
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
//  uint16_t X,Y,out;
//  long Z2;

	arm_rfft_instance_q15 S;
	arm_rfft_init_q15(&S,NPT,0,1);
 800f5a6:	f107 0008 	add.w	r0, r7, #8
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	2120      	movs	r1, #32
 800f5b0:	f7fa f90a 	bl	80097c8 <arm_rfft_init_q15>
	for(int j=0;j<ADC_NUMBER;j++)
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	627b      	str	r3, [r7, #36]	; 0x24
 800f5b8:	e028      	b.n	800f60c <calc_fft_q15+0x70>
	{
		for(int i=0;i<NPT;i++)
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	623b      	str	r3, [r7, #32]
 800f5be:	e00f      	b.n	800f5e0 <calc_fft_q15+0x44>
		{
			FFT_in[i]=all_data_in[ADC_NUMBER*i+j];
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	00da      	lsls	r2, r3, #3
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	4413      	add	r3, r2
 800f5c8:	005b      	lsls	r3, r3, #1
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	b219      	sxth	r1, r3
 800f5d2:	4a12      	ldr	r2, [pc, #72]	; (800f61c <calc_fft_q15+0x80>)
 800f5d4:	6a3b      	ldr	r3, [r7, #32]
 800f5d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<NPT;i++)
 800f5da:	6a3b      	ldr	r3, [r7, #32]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	623b      	str	r3, [r7, #32]
 800f5e0:	6a3b      	ldr	r3, [r7, #32]
 800f5e2:	2b1f      	cmp	r3, #31
 800f5e4:	ddec      	ble.n	800f5c0 <calc_fft_q15+0x24>
		}
		arm_rfft_q15(&S, (q15_t*)FFT_in, (q15_t*)FFT_out);//90us
 800f5e6:	f107 0308 	add.w	r3, r7, #8
 800f5ea:	4a0d      	ldr	r2, [pc, #52]	; (800f620 <calc_fft_q15+0x84>)
 800f5ec:	490b      	ldr	r1, [pc, #44]	; (800f61c <calc_fft_q15+0x80>)
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fa f98c 	bl	800990c <arm_rfft_q15>
		//result[j]=power(FFT_out[0]);//100us
		//X= FFT_out[0]&0xffff; /* sine_cosine --> cos */
		//Y= FFT_out[0] >> 16;   /* sine_cosine --> sin */    
		//Z2=X*X+Y*Y;
		//result[j] = sqrt(Z2);
		result[j]=FFT_out[0];
 800f5f4:	4b0a      	ldr	r3, [pc, #40]	; (800f620 <calc_fft_q15+0x84>)
 800f5f6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	683a      	ldr	r2, [r7, #0]
 800f600:	4413      	add	r3, r2
 800f602:	b28a      	uxth	r2, r1
 800f604:	801a      	strh	r2, [r3, #0]
	for(int j=0;j<ADC_NUMBER;j++)
 800f606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f608:	3301      	adds	r3, #1
 800f60a:	627b      	str	r3, [r7, #36]	; 0x24
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	2b07      	cmp	r3, #7
 800f610:	ddd3      	ble.n	800f5ba <calc_fft_q15+0x1e>
	}
}
 800f612:	bf00      	nop
 800f614:	3728      	adds	r7, #40	; 0x28
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20008770 	.word	0x20008770
 800f620:	200087b0 	.word	0x200087b0

0800f624 <initPidAllPara>:
	ptr->LastError=0;
	ptr->PrevErroe=0;
	ptr->PrdCnt=0;
}
void initPidAllPara(MPID* ptr,uint16_t K,uint16_t kp,uint16_t ki,uint16_t kd)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	4608      	mov	r0, r1
 800f62e:	4611      	mov	r1, r2
 800f630:	461a      	mov	r2, r3
 800f632:	4603      	mov	r3, r0
 800f634:	817b      	strh	r3, [r7, #10]
 800f636:	460b      	mov	r3, r1
 800f638:	813b      	strh	r3, [r7, #8]
 800f63a:	4613      	mov	r3, r2
 800f63c:	80fb      	strh	r3, [r7, #6]
	ptr->Gain=K;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	897a      	ldrh	r2, [r7, #10]
 800f642:	801a      	strh	r2, [r3, #0]
	ptr->Kp=kp;//(float)kp/1000.0;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	893a      	ldrh	r2, [r7, #8]
 800f648:	805a      	strh	r2, [r3, #2]
	ptr->Ki=ki;//(float)ki/1000.0;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	88fa      	ldrh	r2, [r7, #6]
 800f64e:	809a      	strh	r2, [r3, #4]
	ptr->Kd=kd;//(float)kd/1000.0;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	8b3a      	ldrh	r2, [r7, #24]
 800f654:	80da      	strh	r2, [r3, #6]

	//ptr->Kp=(float)K/100.0f;
	ptr->Proportion=((float)ptr->Kp/1000)*ptr->Gain/100;//ptr->Kp;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	885b      	ldrh	r3, [r3, #2]
 800f65a:	ee07 3a90 	vmov	s15, r3
 800f65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f662:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800f70c <initPidAllPara+0xe8>
 800f666:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	881b      	ldrh	r3, [r3, #0]
 800f66e:	ee07 3a90 	vmov	s15, r3
 800f672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f67a:	eddf 6a25 	vldr	s13, [pc, #148]	; 800f710 <initPidAllPara+0xec>
 800f67e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	edc3 7a02 	vstr	s15, [r3, #8]
	ptr->Intergral=((float)ptr->Ki/1000)*ptr->Gain/100;//ptr->Kp;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	889b      	ldrh	r3, [r3, #4]
 800f68c:	ee07 3a90 	vmov	s15, r3
 800f690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f694:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800f70c <initPidAllPara+0xe8>
 800f698:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	ee07 3a90 	vmov	s15, r3
 800f6a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6ac:	eddf 6a18 	vldr	s13, [pc, #96]	; 800f710 <initPidAllPara+0xec>
 800f6b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	edc3 7a03 	vstr	s15, [r3, #12]
	ptr->Derivative=((float)ptr->Kd/1000)*ptr->Gain/100;//ptr->Kp;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	88db      	ldrh	r3, [r3, #6]
 800f6be:	ee07 3a90 	vmov	s15, r3
 800f6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6c6:	eddf 6a11 	vldr	s13, [pc, #68]	; 800f70c <initPidAllPara+0xe8>
 800f6ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	881b      	ldrh	r3, [r3, #0]
 800f6d2:	ee07 3a90 	vmov	s15, r3
 800f6d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6de:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800f710 <initPidAllPara+0xec>
 800f6e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	edc3 7a04 	vstr	s15, [r3, #16]

	//	ptr->SumError=0;
	ptr->LastError=0;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	615a      	str	r2, [r3, #20]
	ptr->PrevErroe=0;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	619a      	str	r2, [r3, #24]
	ptr->PrdCnt=0;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800f6fe:	bf00      	nop
 800f700:	3714      	adds	r7, #20
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	447a0000 	.word	0x447a0000
 800f710:	42c80000 	.word	0x42c80000

0800f714 <getPidInc>:
}
*/

//����PID PdIt=Kp*(2.45e(k)-3.5e(k-1)+1.25e(k-2)
int getPidInc(MPID* ptr)
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
	int iError;

	iError=*ptr->pSetPoint-*ptr->pFeedback;		//��ǰ���
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6a1b      	ldr	r3, [r3, #32]
 800f720:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f724:	461a      	mov	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f72a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	60fb      	str	r3, [r7, #12]
//	if(ptr->Enable_min_err)
//	{
//		if(abs(iError)<ptr->Min_error) iError=0;
//	}
	ptr->Increase=ptr->Proportion*iError			//e(k)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	ed93 7a02 	vldr	s14, [r3, #8]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	ee07 3a90 	vmov	s15, r3
 800f73e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f742:	ee27 7a27 	vmul.f32	s14, s14, s15
		   -ptr->Intergral*ptr->LastError				//e(k-1)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	edd3 6a03 	vldr	s13, [r3, #12]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	695b      	ldr	r3, [r3, #20]
 800f750:	ee07 3a90 	vmov	s15, r3
 800f754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f75c:	ee37 7a67 	vsub.f32	s14, s14, s15
		   +ptr->Derivative*ptr->PrevErroe;			//e(k-2)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	edd3 6a04 	vldr	s13, [r3, #16]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	699b      	ldr	r3, [r3, #24]
 800f76a:	ee07 3a90 	vmov	s15, r3
 800f76e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f776:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptr->Increase=ptr->Proportion*iError			//e(k)
 800f77a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f77e:	ee17 2a90 	vmov	r2, s15
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	61da      	str	r2, [r3, #28]

	ptr->PrevErroe=ptr->LastError;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	695a      	ldr	r2, [r3, #20]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	619a      	str	r2, [r3, #24]
	ptr->LastError=iError;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	68fa      	ldr	r2, [r7, #12]
 800f792:	615a      	str	r2, [r3, #20]
	ptr->AbsOfIncrease=abs(ptr->Increase);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	69db      	ldr	r3, [r3, #28]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	bfb8      	it	lt
 800f79c:	425b      	neglt	r3, r3
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	859a      	strh	r2, [r3, #44]	; 0x2c
	return ptr->Increase;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	69db      	ldr	r3, [r3, #28]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3714      	adds	r7, #20
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <writeAT24C16>:
5,							//WENDU_RANGE 

};

HAL_StatusTypeDef writeAT24C16(uint16_t addr, uint8_t *data, uint16_t len)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b08a      	sub	sp, #40	; 0x28
 800f7b8:	af04      	add	r7, sp, #16
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	6039      	str	r1, [r7, #0]
 800f7be:	80fb      	strh	r3, [r7, #6]
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	80bb      	strh	r3, [r7, #4]
	uint8_t wNum = 0;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	75fb      	strb	r3, [r7, #23]
	uint16_t lenLeft = len;
 800f7c8:	88bb      	ldrh	r3, [r7, #4]
 800f7ca:	82bb      	strh	r3, [r7, #20]
	uint8_t deviceId ;
	uint8_t *p = data;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	613b      	str	r3, [r7, #16]
	
	//is the address overfolw
	if(addr + len >= E2PROM_SIZE)	return HAL_ERROR;
 800f7d0:	88fa      	ldrh	r2, [r7, #6]
 800f7d2:	88bb      	ldrh	r3, [r7, #4]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7da:	db01      	blt.n	800f7e0 <writeAT24C16+0x2c>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e06c      	b.n	800f8ba <writeAT24C16+0x106>
	
	//calculate the current write position to know how many word can write continully
	wNum = EE_PAGE_SIZE - addr & E2PROM_PAGE_MASK;
 800f7e0:	88fb      	ldrh	r3, [r7, #6]
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	425b      	negs	r3, r3
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	f003 030f 	and.w	r3, r3, #15
 800f7ec:	75fb      	strb	r3, [r7, #23]
	if(wNum == 0)	wNum = EE_PAGE_SIZE;
 800f7ee:	7dfb      	ldrb	r3, [r7, #23]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d101      	bne.n	800f7f8 <writeAT24C16+0x44>
 800f7f4:	2310      	movs	r3, #16
 800f7f6:	75fb      	strb	r3, [r7, #23]
	wNum = lenLeft>=wNum ? wNum : lenLeft;
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	8aba      	ldrh	r2, [r7, #20]
 800f7fe:	4293      	cmp	r3, r2
 800f800:	bf28      	it	cs
 800f802:	4613      	movcs	r3, r2
 800f804:	b29b      	uxth	r3, r3
 800f806:	75fb      	strb	r3, [r7, #23]
	
	
	//transmit the date to e2prom

	AlarmFlag&=~I2C_ERROR;
 800f808:	4b2e      	ldr	r3, [pc, #184]	; (800f8c4 <writeAT24C16+0x110>)
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	f023 0304 	bic.w	r3, r3, #4
 800f810:	b29a      	uxth	r2, r3
 800f812:	4b2c      	ldr	r3, [pc, #176]	; (800f8c4 <writeAT24C16+0x110>)
 800f814:	801a      	strh	r2, [r3, #0]
	while(lenLeft)
 800f816:	e044      	b.n	800f8a2 <writeAT24C16+0xee>
	{
		//calculate the device id
		deviceId = (addr >> 8)<=0 ? E2PROM_BASE_WID : (E2PROM_BASE_WID | (uint8_t)((addr>>7)&0x0E));
 800f818:	88fb      	ldrh	r3, [r7, #6]
 800f81a:	0a1b      	lsrs	r3, r3, #8
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00b      	beq.n	800f83a <writeAT24C16+0x86>
 800f822:	88fb      	ldrh	r3, [r7, #6]
 800f824:	09db      	lsrs	r3, r3, #7
 800f826:	b29b      	uxth	r3, r3
 800f828:	b25b      	sxtb	r3, r3
 800f82a:	f003 030e 	and.w	r3, r3, #14
 800f82e:	b25b      	sxtb	r3, r3
 800f830:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800f834:	b25b      	sxtb	r3, r3
 800f836:	b2db      	uxtb	r3, r3
 800f838:	e000      	b.n	800f83c <writeAT24C16+0x88>
 800f83a:	23a0      	movs	r3, #160	; 0xa0
 800f83c:	73fb      	strb	r3, [r7, #15]
		
		if( HAL_I2C_Mem_Write(&hi2c2, deviceId, addr&0x00FF, I2C_MEMADD_SIZE_8BIT, p, wNum, I2C_TIMEOUT) != HAL_OK)
 800f83e:	7bfb      	ldrb	r3, [r7, #15]
 800f840:	b299      	uxth	r1, r3
 800f842:	88fb      	ldrh	r3, [r7, #6]
 800f844:	b2db      	uxtb	r3, r3
 800f846:	b298      	uxth	r0, r3
 800f848:	7dfb      	ldrb	r3, [r7, #23]
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	2220      	movs	r2, #32
 800f84e:	9202      	str	r2, [sp, #8]
 800f850:	9301      	str	r3, [sp, #4]
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	2301      	movs	r3, #1
 800f858:	4602      	mov	r2, r0
 800f85a:	481b      	ldr	r0, [pc, #108]	; (800f8c8 <writeAT24C16+0x114>)
 800f85c:	f7f4 fcf2 	bl	8004244 <HAL_I2C_Mem_Write>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d006      	beq.n	800f874 <writeAT24C16+0xc0>
			AlarmFlag|=I2C_ERROR;
 800f866:	4b17      	ldr	r3, [pc, #92]	; (800f8c4 <writeAT24C16+0x110>)
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	f043 0304 	orr.w	r3, r3, #4
 800f86e:	b29a      	uxth	r2, r3
 800f870:	4b14      	ldr	r3, [pc, #80]	; (800f8c4 <writeAT24C16+0x110>)
 800f872:	801a      	strh	r2, [r3, #0]

		addr += wNum;
 800f874:	7dfb      	ldrb	r3, [r7, #23]
 800f876:	b29a      	uxth	r2, r3
 800f878:	88fb      	ldrh	r3, [r7, #6]
 800f87a:	4413      	add	r3, r2
 800f87c:	80fb      	strh	r3, [r7, #6]
		lenLeft -= wNum;
 800f87e:	7dfb      	ldrb	r3, [r7, #23]
 800f880:	b29b      	uxth	r3, r3
 800f882:	8aba      	ldrh	r2, [r7, #20]
 800f884:	1ad3      	subs	r3, r2, r3
 800f886:	82bb      	strh	r3, [r7, #20]
		p += wNum;
 800f888:	7dfb      	ldrb	r3, [r7, #23]
 800f88a:	693a      	ldr	r2, [r7, #16]
 800f88c:	4413      	add	r3, r2
 800f88e:	613b      	str	r3, [r7, #16]
		wNum = lenLeft > EE_PAGE_SIZE ? EE_PAGE_SIZE : lenLeft;
 800f890:	8abb      	ldrh	r3, [r7, #20]
 800f892:	2b10      	cmp	r3, #16
 800f894:	bf28      	it	cs
 800f896:	2310      	movcs	r3, #16
 800f898:	b29b      	uxth	r3, r3
 800f89a:	75fb      	strb	r3, [r7, #23]
	 
		osDelay(5);
 800f89c:	2005      	movs	r0, #5
 800f89e:	f7fa fc05 	bl	800a0ac <osDelay>
	while(lenLeft)
 800f8a2:	8abb      	ldrh	r3, [r7, #20]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1b7      	bne.n	800f818 <writeAT24C16+0x64>
		//HAL_Delay(5);
	}
	if(AlarmFlag&I2C_ERROR) return HAL_ERROR;
 800f8a8:	4b06      	ldr	r3, [pc, #24]	; (800f8c4 <writeAT24C16+0x110>)
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	f003 0304 	and.w	r3, r3, #4
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d001      	beq.n	800f8b8 <writeAT24C16+0x104>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e000      	b.n	800f8ba <writeAT24C16+0x106>
	else return HAL_OK;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3718      	adds	r7, #24
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	2000493c 	.word	0x2000493c
 800f8c8:	20007478 	.word	0x20007478

0800f8cc <readAT24C16>:
 
HAL_StatusTypeDef readAT24C16(uint16_t addr, uint8_t *data, uint16_t len)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b08a      	sub	sp, #40	; 0x28
 800f8d0:	af04      	add	r7, sp, #16
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	6039      	str	r1, [r7, #0]
 800f8d6:	80fb      	strh	r3, [r7, #6]
 800f8d8:	4613      	mov	r3, r2
 800f8da:	80bb      	strh	r3, [r7, #4]
	uint8_t rNum = 0;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	75fb      	strb	r3, [r7, #23]
	uint16_t lenLeft = len;
 800f8e0:	88bb      	ldrh	r3, [r7, #4]
 800f8e2:	82bb      	strh	r3, [r7, #20]
	uint8_t deviceId ;
	uint8_t *p = data;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	613b      	str	r3, [r7, #16]
 
	//is the address overfolw
	if(addr + len >= E2PROM_SIZE)	return HAL_ERROR;
 800f8e8:	88fa      	ldrh	r2, [r7, #6]
 800f8ea:	88bb      	ldrh	r3, [r7, #4]
 800f8ec:	4413      	add	r3, r2
 800f8ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8f2:	db01      	blt.n	800f8f8 <readAT24C16+0x2c>
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e069      	b.n	800f9cc <readAT24C16+0x100>
	
	//calculate the current write position to know how many word can write continully
	rNum = EE_PAGE_SIZE - addr & E2PROM_PAGE_MASK;
 800f8f8:	88fb      	ldrh	r3, [r7, #6]
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	425b      	negs	r3, r3
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	f003 030f 	and.w	r3, r3, #15
 800f904:	75fb      	strb	r3, [r7, #23]
	if(rNum == 0)	rNum = EE_PAGE_SIZE;
 800f906:	7dfb      	ldrb	r3, [r7, #23]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d101      	bne.n	800f910 <readAT24C16+0x44>
 800f90c:	2310      	movs	r3, #16
 800f90e:	75fb      	strb	r3, [r7, #23]
	rNum = lenLeft>=rNum ? rNum : lenLeft;
 800f910:	7dfb      	ldrb	r3, [r7, #23]
 800f912:	b29b      	uxth	r3, r3
 800f914:	8aba      	ldrh	r2, [r7, #20]
 800f916:	4293      	cmp	r3, r2
 800f918:	bf28      	it	cs
 800f91a:	4613      	movcs	r3, r2
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	75fb      	strb	r3, [r7, #23]
	
	//transmit the date to e2prom

	AlarmFlag&=~I2C_ERROR;
 800f920:	4b2c      	ldr	r3, [pc, #176]	; (800f9d4 <readAT24C16+0x108>)
 800f922:	881b      	ldrh	r3, [r3, #0]
 800f924:	f023 0304 	bic.w	r3, r3, #4
 800f928:	b29a      	uxth	r2, r3
 800f92a:	4b2a      	ldr	r3, [pc, #168]	; (800f9d4 <readAT24C16+0x108>)
 800f92c:	801a      	strh	r2, [r3, #0]
	while(lenLeft)
 800f92e:	e041      	b.n	800f9b4 <readAT24C16+0xe8>
	{
		//calculate the device id
		deviceId = (addr >> 8)<=0 ? E2PROM_BASE_RID : (E2PROM_BASE_RID | (uint8_t)((addr>>7)&0x0E));
 800f930:	88fb      	ldrh	r3, [r7, #6]
 800f932:	0a1b      	lsrs	r3, r3, #8
 800f934:	b29b      	uxth	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00b      	beq.n	800f952 <readAT24C16+0x86>
 800f93a:	88fb      	ldrh	r3, [r7, #6]
 800f93c:	09db      	lsrs	r3, r3, #7
 800f93e:	b29b      	uxth	r3, r3
 800f940:	b25b      	sxtb	r3, r3
 800f942:	f003 030e 	and.w	r3, r3, #14
 800f946:	b25b      	sxtb	r3, r3
 800f948:	f063 035e 	orn	r3, r3, #94	; 0x5e
 800f94c:	b25b      	sxtb	r3, r3
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	e000      	b.n	800f954 <readAT24C16+0x88>
 800f952:	23a1      	movs	r3, #161	; 0xa1
 800f954:	73fb      	strb	r3, [r7, #15]
		
		if( HAL_I2C_Mem_Read(&hi2c2, deviceId, addr&0x00FF, I2C_MEMADD_SIZE_8BIT, p, rNum, I2C_TIMEOUT) != HAL_OK)
 800f956:	7bfb      	ldrb	r3, [r7, #15]
 800f958:	b299      	uxth	r1, r3
 800f95a:	88fb      	ldrh	r3, [r7, #6]
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	b298      	uxth	r0, r3
 800f960:	7dfb      	ldrb	r3, [r7, #23]
 800f962:	b29b      	uxth	r3, r3
 800f964:	2220      	movs	r2, #32
 800f966:	9202      	str	r2, [sp, #8]
 800f968:	9301      	str	r3, [sp, #4]
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	9300      	str	r3, [sp, #0]
 800f96e:	2301      	movs	r3, #1
 800f970:	4602      	mov	r2, r0
 800f972:	4819      	ldr	r0, [pc, #100]	; (800f9d8 <readAT24C16+0x10c>)
 800f974:	f7f4 fd60 	bl	8004438 <HAL_I2C_Mem_Read>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d006      	beq.n	800f98c <readAT24C16+0xc0>
			AlarmFlag|=I2C_ERROR;
 800f97e:	4b15      	ldr	r3, [pc, #84]	; (800f9d4 <readAT24C16+0x108>)
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	f043 0304 	orr.w	r3, r3, #4
 800f986:	b29a      	uxth	r2, r3
 800f988:	4b12      	ldr	r3, [pc, #72]	; (800f9d4 <readAT24C16+0x108>)
 800f98a:	801a      	strh	r2, [r3, #0]

		addr += rNum;
 800f98c:	7dfb      	ldrb	r3, [r7, #23]
 800f98e:	b29a      	uxth	r2, r3
 800f990:	88fb      	ldrh	r3, [r7, #6]
 800f992:	4413      	add	r3, r2
 800f994:	80fb      	strh	r3, [r7, #6]
		lenLeft -= rNum;
 800f996:	7dfb      	ldrb	r3, [r7, #23]
 800f998:	b29b      	uxth	r3, r3
 800f99a:	8aba      	ldrh	r2, [r7, #20]
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	82bb      	strh	r3, [r7, #20]
		p += rNum;
 800f9a0:	7dfb      	ldrb	r3, [r7, #23]
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	613b      	str	r3, [r7, #16]
		rNum = lenLeft > EE_PAGE_SIZE ? EE_PAGE_SIZE : lenLeft;
 800f9a8:	8abb      	ldrh	r3, [r7, #20]
 800f9aa:	2b10      	cmp	r3, #16
 800f9ac:	bf28      	it	cs
 800f9ae:	2310      	movcs	r3, #16
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	75fb      	strb	r3, [r7, #23]
	while(lenLeft)
 800f9b4:	8abb      	ldrh	r3, [r7, #20]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1ba      	bne.n	800f930 <readAT24C16+0x64>
	}
	if(AlarmFlag&I2C_ERROR) return HAL_ERROR;
 800f9ba:	4b06      	ldr	r3, [pc, #24]	; (800f9d4 <readAT24C16+0x108>)
 800f9bc:	881b      	ldrh	r3, [r3, #0]
 800f9be:	f003 0304 	and.w	r3, r3, #4
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d001      	beq.n	800f9ca <readAT24C16+0xfe>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	e000      	b.n	800f9cc <readAT24C16+0x100>
	else return HAL_OK;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3718      	adds	r7, #24
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	2000493c 	.word	0x2000493c
 800f9d8:	20007478 	.word	0x20007478

0800f9dc <Load_Default_Parameters>:
{
	memcpy(&Parameters, buf, PARAMETER_NUM*2);
}
*/
void Load_Default_Parameters()
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
int i;
	for(i=0;i<PARAMETER_NUM-2;i++)
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	607b      	str	r3, [r7, #4]
 800f9e6:	e00a      	b.n	800f9fe <Load_Default_Parameters+0x22>
		Parameters[i]=Para_Default_Table[i];
 800f9e8:	4a09      	ldr	r2, [pc, #36]	; (800fa10 <Load_Default_Parameters+0x34>)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f9f0:	4a08      	ldr	r2, [pc, #32]	; (800fa14 <Load_Default_Parameters+0x38>)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<PARAMETER_NUM-2;i++)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	607b      	str	r3, [r7, #4]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2b8b      	cmp	r3, #139	; 0x8b
 800fa02:	ddf1      	ble.n	800f9e8 <Load_Default_Parameters+0xc>
//	memcpy(&Parameters, &Para_Default_Table, PARAMETER_NUM*2);
}
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr
 800fa10:	08021fa8 	.word	0x08021fa8
 800fa14:	200088f0 	.word	0x200088f0

0800fa18 <Write_All_Parameters>:

void Write_All_Parameters()
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
int i;

	PARAMETER_FLAG=0x5aa5;
 800fa1e:	4b1d      	ldr	r3, [pc, #116]	; (800fa94 <Write_All_Parameters+0x7c>)
 800fa20:	f645 22a5 	movw	r2, #23205	; 0x5aa5
 800fa24:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	PARAMETER_SUM=0;
 800fa28:	4b1a      	ldr	r3, [pc, #104]	; (800fa94 <Write_All_Parameters+0x7c>)
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	for(i=0;i<PARAMETER_NUM-1;i++)
 800fa30:	2300      	movs	r3, #0
 800fa32:	607b      	str	r3, [r7, #4]
 800fa34:	e00e      	b.n	800fa54 <Write_All_Parameters+0x3c>
	{
		PARAMETER_SUM+=Parameters[i];
 800fa36:	4b17      	ldr	r3, [pc, #92]	; (800fa94 <Write_All_Parameters+0x7c>)
 800fa38:	f8b3 211a 	ldrh.w	r2, [r3, #282]	; 0x11a
 800fa3c:	4915      	ldr	r1, [pc, #84]	; (800fa94 <Write_All_Parameters+0x7c>)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fa44:	4413      	add	r3, r2
 800fa46:	b29a      	uxth	r2, r3
 800fa48:	4b12      	ldr	r3, [pc, #72]	; (800fa94 <Write_All_Parameters+0x7c>)
 800fa4a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	for(i=0;i<PARAMETER_NUM-1;i++)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	3301      	adds	r3, #1
 800fa52:	607b      	str	r3, [r7, #4]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b8c      	cmp	r3, #140	; 0x8c
 800fa58:	dded      	ble.n	800fa36 <Write_All_Parameters+0x1e>
	}
	if(writeAT24C16(PARAMETER_ADDR, (uint8_t*)&Parameters,PARAMETER_NUM*2)== HAL_OK)
 800fa5a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800fa5e:	490d      	ldr	r1, [pc, #52]	; (800fa94 <Write_All_Parameters+0x7c>)
 800fa60:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fa64:	f7ff fea6 	bl	800f7b4 <writeAT24C16>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d107      	bne.n	800fa7e <Write_All_Parameters+0x66>
	{
		AlarmFlag&=~I2C_ERROR;
 800fa6e:	4b0a      	ldr	r3, [pc, #40]	; (800fa98 <Write_All_Parameters+0x80>)
 800fa70:	881b      	ldrh	r3, [r3, #0]
 800fa72:	f023 0304 	bic.w	r3, r3, #4
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <Write_All_Parameters+0x80>)
 800fa7a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		AlarmFlag|=I2C_ERROR;
	}
}
 800fa7c:	e006      	b.n	800fa8c <Write_All_Parameters+0x74>
		AlarmFlag|=I2C_ERROR;
 800fa7e:	4b06      	ldr	r3, [pc, #24]	; (800fa98 <Write_All_Parameters+0x80>)
 800fa80:	881b      	ldrh	r3, [r3, #0]
 800fa82:	f043 0304 	orr.w	r3, r3, #4
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	4b03      	ldr	r3, [pc, #12]	; (800fa98 <Write_All_Parameters+0x80>)
 800fa8a:	801a      	strh	r2, [r3, #0]
}
 800fa8c:	bf00      	nop
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	200088f0 	.word	0x200088f0
 800fa98:	2000493c 	.word	0x2000493c

0800fa9c <Read_All_Parameters>:

void Read_All_Parameters()
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
uint16_t sum;
int i;
	
	// read date from EEPROM
	if(readAT24C16(PARAMETER_ADDR, (uint8_t*)&Parameters,PARAMETER_NUM*2)==HAL_OK)
 800faa2:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800faa6:	491f      	ldr	r1, [pc, #124]	; (800fb24 <Read_All_Parameters+0x88>)
 800faa8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800faac:	f7ff ff0e 	bl	800f8cc <readAT24C16>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d12a      	bne.n	800fb0c <Read_All_Parameters+0x70>
	{
		AlarmFlag&=~I2C_ERROR;
 800fab6:	4b1c      	ldr	r3, [pc, #112]	; (800fb28 <Read_All_Parameters+0x8c>)
 800fab8:	881b      	ldrh	r3, [r3, #0]
 800faba:	f023 0304 	bic.w	r3, r3, #4
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	4b19      	ldr	r3, [pc, #100]	; (800fb28 <Read_All_Parameters+0x8c>)
 800fac2:	801a      	strh	r2, [r3, #0]
		sum=0;
 800fac4:	2300      	movs	r3, #0
 800fac6:	80fb      	strh	r3, [r7, #6]
		for(i=0;i<PARAMETER_NUM-1;i++)
 800fac8:	2300      	movs	r3, #0
 800faca:	603b      	str	r3, [r7, #0]
 800facc:	e009      	b.n	800fae2 <Read_All_Parameters+0x46>
		{
			sum+=Parameters[i];
 800face:	4a15      	ldr	r2, [pc, #84]	; (800fb24 <Read_All_Parameters+0x88>)
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800fad6:	88fb      	ldrh	r3, [r7, #6]
 800fad8:	4413      	add	r3, r2
 800fada:	80fb      	strh	r3, [r7, #6]
		for(i=0;i<PARAMETER_NUM-1;i++)
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	3301      	adds	r3, #1
 800fae0:	603b      	str	r3, [r7, #0]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	2b8c      	cmp	r3, #140	; 0x8c
 800fae6:	ddf2      	ble.n	800face <Read_All_Parameters+0x32>
		}
		if(PARAMETER_FLAG!=0x5aa5 || PARAMETER_SUM!=sum )
 800fae8:	4b0e      	ldr	r3, [pc, #56]	; (800fb24 <Read_All_Parameters+0x88>)
 800faea:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800faee:	f645 22a5 	movw	r2, #23205	; 0x5aa5
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d105      	bne.n	800fb02 <Read_All_Parameters+0x66>
 800faf6:	4b0b      	ldr	r3, [pc, #44]	; (800fb24 <Read_All_Parameters+0x88>)
 800faf8:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800fafc:	88fa      	ldrh	r2, [r7, #6]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d00b      	beq.n	800fb1a <Read_All_Parameters+0x7e>
		{
			Load_Default_Parameters();
 800fb02:	f7ff ff6b 	bl	800f9dc <Load_Default_Parameters>
			Write_All_Parameters();
 800fb06:	f7ff ff87 	bl	800fa18 <Write_All_Parameters>
	}
	else
	{
		AlarmFlag|=I2C_ERROR;
	}
}
 800fb0a:	e006      	b.n	800fb1a <Read_All_Parameters+0x7e>
		AlarmFlag|=I2C_ERROR;
 800fb0c:	4b06      	ldr	r3, [pc, #24]	; (800fb28 <Read_All_Parameters+0x8c>)
 800fb0e:	881b      	ldrh	r3, [r3, #0]
 800fb10:	f043 0304 	orr.w	r3, r3, #4
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	4b04      	ldr	r3, [pc, #16]	; (800fb28 <Read_All_Parameters+0x8c>)
 800fb18:	801a      	strh	r2, [r3, #0]
}
 800fb1a:	bf00      	nop
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	200088f0 	.word	0x200088f0
 800fb28:	2000493c 	.word	0x2000493c

0800fb2c <SendBufByUsart>:
//	pesp->clientID = atoi(clientID);
//	pesp->dataSize = atoi(dataSize);
//	pesp->pData = (uint8_t*) dataBuffer;
//}

void SendBufByUsart(USART_DATA *pRx, uint8_t *buf, int len) {
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(pRx->UsartHandle, buf, len, HAL_MAX_DELAY);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6818      	ldr	r0, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	f04f 33ff 	mov.w	r3, #4294967295
 800fb44:	68b9      	ldr	r1, [r7, #8]
 800fb46:	f7f6 fdd4 	bl	80066f2 <HAL_UART_Transmit>
}
 800fb4a:	bf00      	nop
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <SendUsartData>:
void SendUsartData(USART_DATA *pRx) {
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b082      	sub	sp, #8
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(pRx->UsartHandle, pRx->TxBuf, pRx->tx_len, HAL_MAX_DELAY);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6818      	ldr	r0, [r3, #0]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f503 7185 	add.w	r1, r3, #266	; 0x10a
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 800fb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb6e:	f7f6 fdc0 	bl	80066f2 <HAL_UART_Transmit>
}
 800fb72:	bf00      	nop
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
	...

0800fb7c <SendBufByCan>:
//CAN 分批发送 buf中的数据
void SendBufByCan(int DataID, uint8_t *pBuf, int len) 
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b08a      	sub	sp, #40	; 0x28
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
	uint8_t buf[8];
	int i, j;
	int cnt = len / 6;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	4a4b      	ldr	r2, [pc, #300]	; (800fcb8 <SendBufByCan+0x13c>)
 800fb8c:	fb82 1203 	smull	r1, r2, r2, r3
 800fb90:	17db      	asrs	r3, r3, #31
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	61fb      	str	r3, [r7, #28]

	j = 0;
 800fb96:	2300      	movs	r3, #0
 800fb98:	623b      	str	r3, [r7, #32]
	for (i = 0; i < cnt; i++) {
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	627b      	str	r3, [r7, #36]	; 0x24
 800fb9e:	e039      	b.n	800fc14 <SendBufByCan+0x98>

		buf[0] = j;
 800fba0:	6a3b      	ldr	r3, [r7, #32]
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	753b      	strb	r3, [r7, #20]
		buf[1] = j >> 8;		//offset index
 800fba6:	6a3b      	ldr	r3, [r7, #32]
 800fba8:	121b      	asrs	r3, r3, #8
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	757b      	strb	r3, [r7, #21]

		buf[2] = pBuf[j];
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	68ba      	ldr	r2, [r7, #8]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	75bb      	strb	r3, [r7, #22]
		buf[3] = pBuf[j + 1];
 800fbb8:	6a3b      	ldr	r3, [r7, #32]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	68ba      	ldr	r2, [r7, #8]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	75fb      	strb	r3, [r7, #23]
		buf[4] = pBuf[j + 2];
 800fbc4:	6a3b      	ldr	r3, [r7, #32]
 800fbc6:	3302      	adds	r3, #2
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	4413      	add	r3, r2
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	763b      	strb	r3, [r7, #24]
		buf[5] = pBuf[j + 3];
 800fbd0:	6a3b      	ldr	r3, [r7, #32]
 800fbd2:	3303      	adds	r3, #3
 800fbd4:	68ba      	ldr	r2, [r7, #8]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	767b      	strb	r3, [r7, #25]
		buf[6] = pBuf[j + 4];
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	3304      	adds	r3, #4
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	76bb      	strb	r3, [r7, #26]
		buf[7] = pBuf[j + 5];
 800fbe8:	6a3b      	ldr	r3, [r7, #32]
 800fbea:	3305      	adds	r3, #5
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	4413      	add	r3, r2
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	76fb      	strb	r3, [r7, #27]
		j += 6;
 800fbf4:	6a3b      	ldr	r3, [r7, #32]
 800fbf6:	3306      	adds	r3, #6
 800fbf8:	623b      	str	r3, [r7, #32]
		CanSendData(DataID, 8, buf);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f107 0214 	add.w	r2, r7, #20
 800fc00:	2108      	movs	r1, #8
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7ff fbd0 	bl	800f3a8 <CanSendData>
		osDelay(1);
 800fc08:	2001      	movs	r0, #1
 800fc0a:	f7fa fa4f 	bl	800a0ac <osDelay>
	for (i = 0; i < cnt; i++) {
 800fc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc10:	3301      	adds	r3, #1
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24
 800fc14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	dbc1      	blt.n	800fba0 <SendBufByCan+0x24>
	}
	if (len % 6) {
 800fc1c:	6879      	ldr	r1, [r7, #4]
 800fc1e:	4b26      	ldr	r3, [pc, #152]	; (800fcb8 <SendBufByCan+0x13c>)
 800fc20:	fb83 3201 	smull	r3, r2, r3, r1
 800fc24:	17cb      	asrs	r3, r1, #31
 800fc26:	1ad2      	subs	r2, r2, r3
 800fc28:	4613      	mov	r3, r2
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	005b      	lsls	r3, r3, #1
 800fc30:	1aca      	subs	r2, r1, r3
 800fc32:	2a00      	cmp	r2, #0
 800fc34:	d034      	beq.n	800fca0 <SendBufByCan+0x124>
		i = 0;
 800fc36:	2300      	movs	r3, #0
 800fc38:	627b      	str	r3, [r7, #36]	; 0x24
		buf[i++] = j;
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3c:	1c5a      	adds	r2, r3, #1
 800fc3e:	627a      	str	r2, [r7, #36]	; 0x24
 800fc40:	6a3a      	ldr	r2, [r7, #32]
 800fc42:	b2d2      	uxtb	r2, r2
 800fc44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fc48:	440b      	add	r3, r1
 800fc4a:	f803 2c14 	strb.w	r2, [r3, #-20]
		buf[i++] = j >> 8;		//offset index
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	1219      	asrs	r1, r3, #8
 800fc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc54:	1c5a      	adds	r2, r3, #1
 800fc56:	627a      	str	r2, [r7, #36]	; 0x24
 800fc58:	b2ca      	uxtb	r2, r1
 800fc5a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fc5e:	440b      	add	r3, r1
 800fc60:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (; j < len; j++) {
 800fc64:	e00e      	b.n	800fc84 <SendBufByCan+0x108>
			buf[i++] = pBuf[j];
 800fc66:	6a3b      	ldr	r3, [r7, #32]
 800fc68:	68ba      	ldr	r2, [r7, #8]
 800fc6a:	441a      	add	r2, r3
 800fc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6e:	1c59      	adds	r1, r3, #1
 800fc70:	6279      	str	r1, [r7, #36]	; 0x24
 800fc72:	7812      	ldrb	r2, [r2, #0]
 800fc74:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fc78:	440b      	add	r3, r1
 800fc7a:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (; j < len; j++) {
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	3301      	adds	r3, #1
 800fc82:	623b      	str	r3, [r7, #32]
 800fc84:	6a3a      	ldr	r2, [r7, #32]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	dbec      	blt.n	800fc66 <SendBufByCan+0xea>
		}
		CanSendData(DataID, i, buf);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc90:	f107 0214 	add.w	r2, r7, #20
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7ff fb87 	bl	800f3a8 <CanSendData>
		osDelay(1);
 800fc9a:	2001      	movs	r0, #1
 800fc9c:	f7fa fa06 	bl	800a0ac <osDelay>
	}
	CanSendData(DataID, 0, buf);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f107 0214 	add.w	r2, r7, #20
 800fca6:	2100      	movs	r1, #0
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7ff fb7d 	bl	800f3a8 <CanSendData>
}
 800fcae:	bf00      	nop
 800fcb0:	3728      	adds	r7, #40	; 0x28
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	2aaaaaab 	.word	0x2aaaaaab

0800fcbc <SendDataToSlaveByCan>:

int SendDataToSlaveByCan(uint8_t StationNum, uint8_t *pData, uint16_t dataSize,int timeout) 
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b086      	sub	sp, #24
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60b9      	str	r1, [r7, #8]
 800fcc4:	607b      	str	r3, [r7, #4]
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	73fb      	strb	r3, [r7, #15]
 800fcca:	4613      	mov	r3, r2
 800fccc:	81bb      	strh	r3, [r7, #12]
	int StdId = (DATA_OF_MASTER & 0x7f) | (StationNum << 7);
 800fcce:	7bfb      	ldrb	r3, [r7, #15]
 800fcd0:	01db      	lsls	r3, r3, #7
 800fcd2:	f043 0312 	orr.w	r3, r3, #18
 800fcd6:	613b      	str	r3, [r7, #16]
	SendBufByCan(StdId, pData, dataSize);
 800fcd8:	89bb      	ldrh	r3, [r7, #12]
 800fcda:	461a      	mov	r2, r3
 800fcdc:	68b9      	ldr	r1, [r7, #8]
 800fcde:	6938      	ldr	r0, [r7, #16]
 800fce0:	f7ff ff4c 	bl	800fb7c <SendBufByCan>
	SlaveDataFlag = 0;
 800fce4:	4b0e      	ldr	r3, [pc, #56]	; (800fd20 <SendDataToSlaveByCan+0x64>)
 800fce6:	2200      	movs	r2, #0
 800fce8:	801a      	strh	r2, [r3, #0]
	SlaveDataLen = 0;
 800fcea:	4b0e      	ldr	r3, [pc, #56]	; (800fd24 <SendDataToSlaveByCan+0x68>)
 800fcec:	2200      	movs	r2, #0
 800fcee:	801a      	strh	r2, [r3, #0]
	int i;

	for (i = 0; i < timeout; i++) 
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	617b      	str	r3, [r7, #20]
 800fcf4:	e009      	b.n	800fd0a <SendDataToSlaveByCan+0x4e>
	{
		osDelay(1);
 800fcf6:	2001      	movs	r0, #1
 800fcf8:	f7fa f9d8 	bl	800a0ac <osDelay>
		if (SlaveDataFlag)break;
 800fcfc:	4b08      	ldr	r3, [pc, #32]	; (800fd20 <SendDataToSlaveByCan+0x64>)
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d107      	bne.n	800fd14 <SendDataToSlaveByCan+0x58>
	for (i = 0; i < timeout; i++) 
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	3301      	adds	r3, #1
 800fd08:	617b      	str	r3, [r7, #20]
 800fd0a:	697a      	ldr	r2, [r7, #20]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	dbf1      	blt.n	800fcf6 <SendDataToSlaveByCan+0x3a>
 800fd12:	e000      	b.n	800fd16 <SendDataToSlaveByCan+0x5a>
		if (SlaveDataFlag)break;
 800fd14:	bf00      	nop
	}
	return i;
 800fd16:	697b      	ldr	r3, [r7, #20]
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3718      	adds	r7, #24
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	20008f28 	.word	0x20008f28
 800fd24:	20008a0c 	.word	0x20008a0c

0800fd28 <SaveCanFrmaeToBuf>:
//接收的CAN数据帧保存到DstBuf ,msg buf前2个字节是偏印地址
int SaveCanFrmaeToBuf(CAN_MSG *msg, uint8_t *DstBuf) {
 800fd28:	b480      	push	{r7}
 800fd2a:	b087      	sub	sp, #28
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
	int len = msg->RxHead.DLC;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	695b      	ldr	r3, [r3, #20]
 800fd36:	60fb      	str	r3, [r7, #12]
	int i;
	int addr = msg->RxBuffer[0];
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fd3e:	613b      	str	r3, [r7, #16]
	addr += (msg->RxBuffer[1] << 8);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fd46:	021b      	lsls	r3, r3, #8
 800fd48:	693a      	ldr	r2, [r7, #16]
 800fd4a:	4413      	add	r3, r2
 800fd4c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < len - 2; i++) {
 800fd4e:	2300      	movs	r3, #0
 800fd50:	617b      	str	r3, [r7, #20]
 800fd52:	e00f      	b.n	800fd74 <SaveCanFrmaeToBuf+0x4c>
		DstBuf[addr++] = msg->RxBuffer[i + 2];
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	1c9a      	adds	r2, r3, #2
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	1c59      	adds	r1, r3, #1
 800fd5c:	6139      	str	r1, [r7, #16]
 800fd5e:	4619      	mov	r1, r3
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	440b      	add	r3, r1
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	440a      	add	r2, r1
 800fd68:	f892 2020 	ldrb.w	r2, [r2, #32]
 800fd6c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len - 2; i++) {
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	3301      	adds	r3, #1
 800fd72:	617b      	str	r3, [r7, #20]
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	3b02      	subs	r3, #2
 800fd78:	697a      	ldr	r2, [r7, #20]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	dbea      	blt.n	800fd54 <SaveCanFrmaeToBuf+0x2c>
	}
	return addr;
 800fd7e:	693b      	ldr	r3, [r7, #16]
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	371c      	adds	r7, #28
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr

0800fd8c <CanMsgProc>:
void CanMsgProc(CAN_MSG *msg) 
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
	if(msg->RxHead.ExtId)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d00e      	beq.n	800fdba <CanMsgProc+0x2e>
	{
		if(msg->RxHead.RTR)//==1)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d008      	beq.n	800fdb6 <CanMsgProc+0x2a>
		{
			switch(msg->RxHead.ExtId)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	4a25      	ldr	r2, [pc, #148]	; (800fe40 <CanMsgProc+0xb4>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d000      	beq.n	800fdb0 <CanMsgProc+0x24>
			{
				case BROADCAST_EXTID:
					HAL_NVIC_SystemReset();
					break;
				default:
					break;
 800fdae:	e003      	b.n	800fdb8 <CanMsgProc+0x2c>
					HAL_NVIC_SystemReset();
 800fdb0:	f7f3 fa17 	bl	80031e2 <HAL_NVIC_SystemReset>
					break;
 800fdb4:	e000      	b.n	800fdb8 <CanMsgProc+0x2c>
			}
		}
 800fdb6:	bf00      	nop
		return;
 800fdb8:	e03f      	b.n	800fe3a <CanMsgProc+0xae>
	}
//	int which = msg->RxHead.StdId >> 7;		//station num

	int DataID = msg->RxHead.StdId & 0x7f;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdc2:	60fb      	str	r3, [r7, #12]

	if(msg->RxHead.RTR==1)//Զ��֡
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	691b      	ldr	r3, [r3, #16]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d036      	beq.n	800fe3a <CanMsgProc+0xae>
//			}
//		}
	}
	else//DATA
	{
		switch (DataID) 
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b12      	cmp	r3, #18
 800fdd0:	d013      	beq.n	800fdfa <CanMsgProc+0x6e>
 800fdd2:	2b40      	cmp	r3, #64	; 0x40
 800fdd4:	d000      	beq.n	800fdd8 <CanMsgProc+0x4c>
				{
					MasterDataLen=SaveCanFrmaeToBuf(msg,MasterDataBuf);
				}
				break;
			default:
				break;
 800fdd6:	e030      	b.n	800fe3a <CanMsgProc+0xae>
				if (msg->RxHead.DLC == 0)			//������һ�����ݰ�
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	695b      	ldr	r3, [r3, #20]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d103      	bne.n	800fde8 <CanMsgProc+0x5c>
					SlaveDataFlag = 1;
 800fde0:	4b18      	ldr	r3, [pc, #96]	; (800fe44 <CanMsgProc+0xb8>)
 800fde2:	2201      	movs	r2, #1
 800fde4:	801a      	strh	r2, [r3, #0]
				break;
 800fde6:	e028      	b.n	800fe3a <CanMsgProc+0xae>
					SlaveDataLen = SaveCanFrmaeToBuf(msg, SlaveDataBuf);
 800fde8:	4917      	ldr	r1, [pc, #92]	; (800fe48 <CanMsgProc+0xbc>)
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7ff ff9c 	bl	800fd28 <SaveCanFrmaeToBuf>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	4b15      	ldr	r3, [pc, #84]	; (800fe4c <CanMsgProc+0xc0>)
 800fdf6:	801a      	strh	r2, [r3, #0]
				break;
 800fdf8:	e01f      	b.n	800fe3a <CanMsgProc+0xae>
				if(MasterFlag) break;
 800fdfa:	4b15      	ldr	r3, [pc, #84]	; (800fe50 <CanMsgProc+0xc4>)
 800fdfc:	881b      	ldrh	r3, [r3, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d11a      	bne.n	800fe38 <CanMsgProc+0xac>
				if(msg->RxHead.DLC==0)	//���յ����������ݰ�
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	695b      	ldr	r3, [r3, #20]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d10d      	bne.n	800fe26 <CanMsgProc+0x9a>
					int size =ParseModeBusData(MasterDataBuf,MasterDataLen,CanBuffer);
 800fe0a:	4b12      	ldr	r3, [pc, #72]	; (800fe54 <CanMsgProc+0xc8>)
 800fe0c:	881b      	ldrh	r3, [r3, #0]
 800fe0e:	4a12      	ldr	r2, [pc, #72]	; (800fe58 <CanMsgProc+0xcc>)
 800fe10:	4619      	mov	r1, r3
 800fe12:	4812      	ldr	r0, [pc, #72]	; (800fe5c <CanMsgProc+0xd0>)
 800fe14:	f7fe fb0c 	bl	800e430 <ParseModeBusData>
 800fe18:	60b8      	str	r0, [r7, #8]
					SendBufByCan(DATA_OF_SLAVE,(uint8_t*)CanBuffer,size);
 800fe1a:	68ba      	ldr	r2, [r7, #8]
 800fe1c:	490e      	ldr	r1, [pc, #56]	; (800fe58 <CanMsgProc+0xcc>)
 800fe1e:	2040      	movs	r0, #64	; 0x40
 800fe20:	f7ff feac 	bl	800fb7c <SendBufByCan>
				break;
 800fe24:	e009      	b.n	800fe3a <CanMsgProc+0xae>
					MasterDataLen=SaveCanFrmaeToBuf(msg,MasterDataBuf);
 800fe26:	490d      	ldr	r1, [pc, #52]	; (800fe5c <CanMsgProc+0xd0>)
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7ff ff7d 	bl	800fd28 <SaveCanFrmaeToBuf>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	4b08      	ldr	r3, [pc, #32]	; (800fe54 <CanMsgProc+0xc8>)
 800fe34:	801a      	strh	r2, [r3, #0]
				break;
 800fe36:	e000      	b.n	800fe3a <CanMsgProc+0xae>
				if(MasterFlag) break;
 800fe38:	bf00      	nop
		}
	}
}
 800fe3a:	3710      	adds	r7, #16
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	12345678 	.word	0x12345678
 800fe44:	20008f28 	.word	0x20008f28
 800fe48:	20008f2c 	.word	0x20008f2c
 800fe4c:	20008a0c 	.word	0x20008a0c
 800fe50:	2000494c 	.word	0x2000494c
 800fe54:	2000912c 	.word	0x2000912c
 800fe58:	2000902c 	.word	0x2000902c
 800fe5c:	20008a10 	.word	0x20008a10

0800fe60 <ParseUsartModBusData>:

void ParseUsartModBusData(USART_DATA *pUsartData) {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b086      	sub	sp, #24
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
	if (CRC16(pUsartData->RxBuf, pUsartData->rx_len) != 0) //CRCУ�����
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f103 0208 	add.w	r2, r3, #8
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	88db      	ldrh	r3, [r3, #6]
 800fe72:	4619      	mov	r1, r3
 800fe74:	4610      	mov	r0, r2
 800fe76:	f7fd f8f9 	bl	800d06c <CRC16>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d16e      	bne.n	800ff5e <ParseUsartModBusData+0xfe>
		return;
	uint8_t StationNum, FunctionCode;
	uint16_t Register, regNumber;
	StationNum = pUsartData->RxBuf[0];		//��ַ��
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	7a1b      	ldrb	r3, [r3, #8]
 800fe84:	75fb      	strb	r3, [r7, #23]
	FunctionCode = pUsartData->RxBuf[1];	//������
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	7a5b      	ldrb	r3, [r3, #9]
 800fe8a:	75bb      	strb	r3, [r7, #22]
	Register = pUsartData->RxBuf[2] << 8;	//�Ĵ�����ַ 16bit
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	7a9b      	ldrb	r3, [r3, #10]
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	021b      	lsls	r3, r3, #8
 800fe94:	82bb      	strh	r3, [r7, #20]
	Register |= pUsartData->RxBuf[3];
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7adb      	ldrb	r3, [r3, #11]
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	8abb      	ldrh	r3, [r7, #20]
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	82bb      	strh	r3, [r7, #20]
	regNumber = pUsartData->RxBuf[4] << 8;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	7b1b      	ldrb	r3, [r3, #12]
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	021b      	lsls	r3, r3, #8
 800feaa:	827b      	strh	r3, [r7, #18]
	regNumber |= pUsartData->RxBuf[5];
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	7b5b      	ldrb	r3, [r3, #13]
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	8a7b      	ldrh	r3, [r7, #18]
 800feb4:	4313      	orrs	r3, r2
 800feb6:	827b      	strh	r3, [r7, #18]
//		pdata[0]=(uint8_t)StationNum;
//		pdata[1]=(uint8_t)LocalAddr;
//		HAL_UART_Transmit(&huart1, pdata, 2,HAL_MAX_DELAY);
//	LED2_T;

	if(StationNum==LocalAddr)//Èç¹ûÊÇ±¾»úµØÖ·
 800feb8:	7dfb      	ldrb	r3, [r7, #23]
 800feba:	b29a      	uxth	r2, r3
 800febc:	4b2b      	ldr	r3, [pc, #172]	; (800ff6c <ParseUsartModBusData+0x10c>)
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d113      	bne.n	800feec <ParseUsartModBusData+0x8c>
	{
		pUsartData->tx_len=ParseModeBusData(pUsartData->RxBuf,pUsartData->rx_len,pUsartData->TxBuf);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f103 0008 	add.w	r0, r3, #8
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	88d9      	ldrh	r1, [r3, #6]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800fed4:	461a      	mov	r2, r3
 800fed6:	f7fe faab 	bl	800e430 <ParseModeBusData>
 800feda:	4603      	mov	r3, r0
 800fedc:	b29a      	uxth	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		SendUsartData(pUsartData);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff fe34 	bl	800fb52 <SendUsartData>
		return;
 800feea:	e03b      	b.n	800ff64 <ParseUsartModBusData+0x104>
	}

	if(MasterFlag==0) return;//Èç¹û²»ÊÇÖ÷»ú¾Í·µ»Ø
 800feec:	4b20      	ldr	r3, [pc, #128]	; (800ff70 <ParseUsartModBusData+0x110>)
 800feee:	881b      	ldrh	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d036      	beq.n	800ff62 <ParseUsartModBusData+0x102>

	if(StationNum==0)							//�㲥��ַ
 800fef4:	7dfb      	ldrb	r3, [r7, #23]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d119      	bne.n	800ff2e <ParseUsartModBusData+0xce>
	{
		if(Register==ResetRegister && FunctionCode==WriteSingleRegister)	//��λϵͳ�Ĵ���
 800fefa:	8abb      	ldrh	r3, [r7, #20]
 800fefc:	2b64      	cmp	r3, #100	; 0x64
 800fefe:	d116      	bne.n	800ff2e <ParseUsartModBusData+0xce>
 800ff00:	7dbb      	ldrb	r3, [r7, #22]
 800ff02:	2b06      	cmp	r3, #6
 800ff04:	d113      	bne.n	800ff2e <ParseUsartModBusData+0xce>
		{
			SendBufByUsart(pUsartData, pUsartData->RxBuf, pUsartData->rx_len);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f103 0108 	add.w	r1, r3, #8
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	88db      	ldrh	r3, [r3, #6]
 800ff10:	461a      	mov	r2, r3
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7ff fe0a 	bl	800fb2c <SendBufByUsart>
			CanSendRemoteExd(BROADCAST_EXTID,0,0);//�㲥��λ
 800ff18:	2200      	movs	r2, #0
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	4815      	ldr	r0, [pc, #84]	; (800ff74 <ParseUsartModBusData+0x114>)
 800ff1e:	f7ff fa83 	bl	800f428 <CanSendRemoteExd>
			osDelay(10);
 800ff22:	200a      	movs	r0, #10
 800ff24:	f7fa f8c2 	bl	800a0ac <osDelay>
			HAL_NVIC_SystemReset();
 800ff28:	f7f3 f95b 	bl	80031e2 <HAL_NVIC_SystemReset>
			return;
 800ff2c:	e01a      	b.n	800ff64 <ParseUsartModBusData+0x104>
		}
	}

	//������ת�����ӻ�
	int timeout = 100;
 800ff2e:	2364      	movs	r3, #100	; 0x64
 800ff30:	60fb      	str	r3, [r7, #12]
	int ret = SendDataToSlaveByCan(StationNum, pUsartData->RxBuf, pUsartData->rx_len,timeout);//35
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f103 0108 	add.w	r1, r3, #8
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	88da      	ldrh	r2, [r3, #6]
 800ff3c:	7df8      	ldrb	r0, [r7, #23]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f7ff febc 	bl	800fcbc <SendDataToSlaveByCan>
 800ff44:	60b8      	str	r0, [r7, #8]
//	printf("paras time=%d\n",ret);
	if (ret < timeout)
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	da0a      	bge.n	800ff64 <ParseUsartModBusData+0x104>
	{
		SendBufByUsart(pUsartData, SlaveDataBuf, SlaveDataLen);
 800ff4e:	4b0a      	ldr	r3, [pc, #40]	; (800ff78 <ParseUsartModBusData+0x118>)
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	4909      	ldr	r1, [pc, #36]	; (800ff7c <ParseUsartModBusData+0x11c>)
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7ff fde8 	bl	800fb2c <SendBufByUsart>
 800ff5c:	e002      	b.n	800ff64 <ParseUsartModBusData+0x104>
		return;
 800ff5e:	bf00      	nop
 800ff60:	e000      	b.n	800ff64 <ParseUsartModBusData+0x104>
	if(MasterFlag==0) return;//Èç¹û²»ÊÇÖ÷»ú¾Í·µ»Ø
 800ff62:	bf00      	nop
	} 
	else 
	{
	//printf("timeout=%d\n",timeout);
	}
}
 800ff64:	3718      	adds	r7, #24
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	200086b8 	.word	0x200086b8
 800ff70:	2000494c 	.word	0x2000494c
 800ff74:	12345678 	.word	0x12345678
 800ff78:	20008a0c 	.word	0x20008a0c
 800ff7c:	20008f2c 	.word	0x20008f2c

0800ff80 <__libc_init_array>:
 800ff80:	b570      	push	{r4, r5, r6, lr}
 800ff82:	4e0d      	ldr	r6, [pc, #52]	; (800ffb8 <__libc_init_array+0x38>)
 800ff84:	4c0d      	ldr	r4, [pc, #52]	; (800ffbc <__libc_init_array+0x3c>)
 800ff86:	1ba4      	subs	r4, r4, r6
 800ff88:	10a4      	asrs	r4, r4, #2
 800ff8a:	2500      	movs	r5, #0
 800ff8c:	42a5      	cmp	r5, r4
 800ff8e:	d109      	bne.n	800ffa4 <__libc_init_array+0x24>
 800ff90:	4e0b      	ldr	r6, [pc, #44]	; (800ffc0 <__libc_init_array+0x40>)
 800ff92:	4c0c      	ldr	r4, [pc, #48]	; (800ffc4 <__libc_init_array+0x44>)
 800ff94:	f000 f82c 	bl	800fff0 <_init>
 800ff98:	1ba4      	subs	r4, r4, r6
 800ff9a:	10a4      	asrs	r4, r4, #2
 800ff9c:	2500      	movs	r5, #0
 800ff9e:	42a5      	cmp	r5, r4
 800ffa0:	d105      	bne.n	800ffae <__libc_init_array+0x2e>
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ffa8:	4798      	blx	r3
 800ffaa:	3501      	adds	r5, #1
 800ffac:	e7ee      	b.n	800ff8c <__libc_init_array+0xc>
 800ffae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ffb2:	4798      	blx	r3
 800ffb4:	3501      	adds	r5, #1
 800ffb6:	e7f2      	b.n	800ff9e <__libc_init_array+0x1e>
 800ffb8:	080220c8 	.word	0x080220c8
 800ffbc:	080220c8 	.word	0x080220c8
 800ffc0:	080220c8 	.word	0x080220c8
 800ffc4:	080220cc 	.word	0x080220cc

0800ffc8 <memcpy>:
 800ffc8:	b510      	push	{r4, lr}
 800ffca:	1e43      	subs	r3, r0, #1
 800ffcc:	440a      	add	r2, r1
 800ffce:	4291      	cmp	r1, r2
 800ffd0:	d100      	bne.n	800ffd4 <memcpy+0xc>
 800ffd2:	bd10      	pop	{r4, pc}
 800ffd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffdc:	e7f7      	b.n	800ffce <memcpy+0x6>

0800ffde <memset>:
 800ffde:	4402      	add	r2, r0
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d100      	bne.n	800ffe8 <memset+0xa>
 800ffe6:	4770      	bx	lr
 800ffe8:	f803 1b01 	strb.w	r1, [r3], #1
 800ffec:	e7f9      	b.n	800ffe2 <memset+0x4>
	...

0800fff0 <_init>:
 800fff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff2:	bf00      	nop
 800fff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fff6:	bc08      	pop	{r3}
 800fff8:	469e      	mov	lr, r3
 800fffa:	4770      	bx	lr

0800fffc <_fini>:
 800fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffe:	bf00      	nop
 8010000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010002:	bc08      	pop	{r3}
 8010004:	469e      	mov	lr, r3
 8010006:	4770      	bx	lr
