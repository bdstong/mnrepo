
F407Eth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016884  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000259c  08016a14  08016a14  00026a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018fb0  08018fb0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08018fb0  08018fb0  00028fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018fb8  08018fb8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018fb8  08018fb8  00028fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018fbc  08018fbc  00028fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08018fc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019560  200001fc  080191bc  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001975c  080191bc  0003975c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c604  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008b16  00000000  00000000  0007c830  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002608  00000000  00000000  00085348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002340  00000000  00000000  00087950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033262  00000000  00000000  00089c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000320d1  00000000  00000000  000bcef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2e55  00000000  00000000  000eefc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1e18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a488  00000000  00000000  001e1e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080169fc 	.word	0x080169fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	080169fc 	.word	0x080169fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_CAN1_Init+0x64>)
 8000586:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <MX_CAN1_Init+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_CAN1_Init+0x64>)
 800058c:	2206      	movs	r2, #6
 800058e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_CAN1_Init+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_CAN1_Init+0x64>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_CAN1_Init+0x64>)
 800059e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80005a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005a6:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80005aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005d2:	f001 f85b 	bl	800168c <HAL_CAN_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005dc:	f000 fc96 	bl	8000f0c <Error_Handler>
  }

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20006104 	.word	0x20006104
 80005e8:	40006400 	.word	0x40006400

080005ec <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_CAN2_Init+0x64>)
 80005f2:	4a18      	ldr	r2, [pc, #96]	; (8000654 <MX_CAN2_Init+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_CAN2_Init+0x64>)
 80005f8:	2206      	movs	r2, #6
 80005fa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_CAN2_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_CAN2_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_CAN2_Init+0x64>)
 800060a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800060e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_CAN2_Init+0x64>)
 8000612:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000616:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_CAN2_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_CAN2_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_CAN2_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_CAN2_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_CAN2_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_CAN2_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_CAN2_Init+0x64>)
 800063e:	f001 f825 	bl	800168c <HAL_CAN_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000648:	f000 fc60 	bl	8000f0c <Error_Handler>
  }

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200060dc 	.word	0x200060dc
 8000654:	40006800 	.word	0x40006800

08000658 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a53      	ldr	r2, [pc, #332]	; (80007c4 <HAL_CAN_MspInit+0x16c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d146      	bne.n	8000708 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800067a:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <HAL_CAN_MspInit+0x170>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	4a51      	ldr	r2, [pc, #324]	; (80007c8 <HAL_CAN_MspInit+0x170>)
 8000682:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000684:	4b50      	ldr	r3, [pc, #320]	; (80007c8 <HAL_CAN_MspInit+0x170>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10d      	bne.n	80006a8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
 8000690:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <HAL_CAN_MspInit+0x174>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a4d      	ldr	r2, [pc, #308]	; (80007cc <HAL_CAN_MspInit+0x174>)
 8000696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b4b      	ldr	r3, [pc, #300]	; (80007cc <HAL_CAN_MspInit+0x174>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	4b47      	ldr	r3, [pc, #284]	; (80007cc <HAL_CAN_MspInit+0x174>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a46      	ldr	r2, [pc, #280]	; (80007cc <HAL_CAN_MspInit+0x174>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <HAL_CAN_MspInit+0x174>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006d6:	2309      	movs	r3, #9
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	483b      	ldr	r0, [pc, #236]	; (80007d0 <HAL_CAN_MspInit+0x178>)
 80006e2:	f003 fb73 	bl	8003dcc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2105      	movs	r1, #5
 80006ea:	2014      	movs	r0, #20
 80006ec:	f001 ff2d 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006f0:	2014      	movs	r0, #20
 80006f2:	f001 ff46 	bl	8002582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2105      	movs	r1, #5
 80006fa:	2015      	movs	r0, #21
 80006fc:	f001 ff25 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000700:	2015      	movs	r0, #21
 8000702:	f001 ff3e 	bl	8002582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000706:	e058      	b.n	80007ba <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <HAL_CAN_MspInit+0x17c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d153      	bne.n	80007ba <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <HAL_CAN_MspInit+0x174>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a2c      	ldr	r2, [pc, #176]	; (80007cc <HAL_CAN_MspInit+0x174>)
 800071c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <HAL_CAN_MspInit+0x174>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <HAL_CAN_MspInit+0x170>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <HAL_CAN_MspInit+0x170>)
 8000736:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <HAL_CAN_MspInit+0x170>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d10d      	bne.n	800075c <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_CAN_MspInit+0x174>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a20      	ldr	r2, [pc, #128]	; (80007cc <HAL_CAN_MspInit+0x174>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <HAL_CAN_MspInit+0x174>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HAL_CAN_MspInit+0x174>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a19      	ldr	r2, [pc, #100]	; (80007cc <HAL_CAN_MspInit+0x174>)
 8000766:	f043 0302 	orr.w	r3, r3, #2
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HAL_CAN_MspInit+0x174>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000778:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800078a:	2309      	movs	r3, #9
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4810      	ldr	r0, [pc, #64]	; (80007d8 <HAL_CAN_MspInit+0x180>)
 8000796:	f003 fb19 	bl	8003dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2105      	movs	r1, #5
 800079e:	2040      	movs	r0, #64	; 0x40
 80007a0:	f001 fed3 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007a4:	2040      	movs	r0, #64	; 0x40
 80007a6:	f001 feec 	bl	8002582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2105      	movs	r1, #5
 80007ae:	2041      	movs	r0, #65	; 0x41
 80007b0:	f001 fecb 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007b4:	2041      	movs	r0, #65	; 0x41
 80007b6:	f001 fee4 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	; 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40006400 	.word	0x40006400
 80007c8:	20000218 	.word	0x20000218
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020000 	.word	0x40020000
 80007d4:	40006800 	.word	0x40006800
 80007d8:	40020400 	.word	0x40020400

080007dc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_DMA_Init+0x68>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_DMA_Init+0x68>)
 80007ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_DMA_Init+0x68>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_DMA_Init+0x68>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <MX_DMA_Init+0x68>)
 8000808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_DMA_Init+0x68>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2105      	movs	r1, #5
 800081e:	200c      	movs	r0, #12
 8000820:	f001 fe93 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000824:	200c      	movs	r0, #12
 8000826:	f001 feac 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2105      	movs	r1, #5
 800082e:	203a      	movs	r0, #58	; 0x3a
 8000830:	f001 fe8b 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000834:	203a      	movs	r0, #58	; 0x3a
 8000836:	f001 fea4 	bl	8002582 <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b0c8      	sub	sp, #288	; 0x120
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize();
 800084e:	f006 ffcd 	bl	80077ec <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of ethMsgQueue */
  const osMessageQueueAttr_t ethMsgQueue_attributes = {
 8000852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	4b82      	ldr	r3, [pc, #520]	; (8000a70 <MX_FREERTOS_Init+0x228>)
 8000866:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    .name = "ethMsgQueue"
  };
  ethMsgQueueHandle = osMessageQueueNew (16, sizeof(ETH_MSG), &ethMsgQueue_attributes);
 800086a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800086e:	461a      	mov	r2, r3
 8000870:	2110      	movs	r1, #16
 8000872:	2010      	movs	r0, #16
 8000874:	f007 fcbc 	bl	80081f0 <osMessageQueueNew>
 8000878:	4602      	mov	r2, r0
 800087a:	4b7e      	ldr	r3, [pc, #504]	; (8000a74 <MX_FREERTOS_Init+0x22c>)
 800087c:	601a      	str	r2, [r3, #0]

  /* definition and creation of canRxQueue */
  const osMessageQueueAttr_t canRxQueue_attributes = {
 800087e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	4b79      	ldr	r3, [pc, #484]	; (8000a78 <MX_FREERTOS_Init+0x230>)
 8000892:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    .name = "canRxQueue"
  };
  canRxQueueHandle = osMessageQueueNew (16, sizeof(CAN_MSG), &canRxQueue_attributes);
 8000896:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800089a:	461a      	mov	r2, r3
 800089c:	2128      	movs	r1, #40	; 0x28
 800089e:	2010      	movs	r0, #16
 80008a0:	f007 fca6 	bl	80081f0 <osMessageQueueNew>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b75      	ldr	r3, [pc, #468]	; (8000a7c <MX_FREERTOS_Init+0x234>)
 80008a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of espCmdQueue */
  const osMessageQueueAttr_t espCmdQueue_attributes = {
 80008aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	4b70      	ldr	r3, [pc, #448]	; (8000a80 <MX_FREERTOS_Init+0x238>)
 80008be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    .name = "espCmdQueue"
  };
  espCmdQueueHandle = osMessageQueueNew (16, sizeof(Esp_DataTypeDef), &espCmdQueue_attributes);
 80008c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80008c6:	461a      	mov	r2, r3
 80008c8:	210c      	movs	r1, #12
 80008ca:	2010      	movs	r0, #16
 80008cc:	f007 fc90 	bl	80081f0 <osMessageQueueNew>
 80008d0:	4602      	mov	r2, r0
 80008d2:	4b6c      	ldr	r3, [pc, #432]	; (8000a84 <MX_FREERTOS_Init+0x23c>)
 80008d4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 80008d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80008da:	2224      	movs	r2, #36	; 0x24
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f014 feae 	bl	8015640 <memset>
 80008e4:	4b68      	ldr	r3, [pc, #416]	; (8000a88 <MX_FREERTOS_Init+0x240>)
 80008e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80008ea:	4b68      	ldr	r3, [pc, #416]	; (8000a8c <MX_FREERTOS_Init+0x244>)
 80008ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80008f0:	235c      	movs	r3, #92	; 0x5c
 80008f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80008f6:	4b66      	ldr	r3, [pc, #408]	; (8000a90 <MX_FREERTOS_Init+0x248>)
 80008f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80008fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000904:	2318      	movs	r3, #24
 8000906:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    .stack_size = sizeof(defaultTaskBuffer),
    .cb_mem = &defaultTaskControlBlock,
    .cb_size = sizeof(defaultTaskControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800090a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800090e:	461a      	mov	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	4860      	ldr	r0, [pc, #384]	; (8000a94 <MX_FREERTOS_Init+0x24c>)
 8000914:	f006 fffa 	bl	800790c <osThreadNew>
 8000918:	4602      	mov	r2, r0
 800091a:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <MX_FREERTOS_Init+0x250>)
 800091c:	601a      	str	r2, [r3, #0]

  /* definition and creation of ethTask */
  const osThreadAttr_t ethTask_attributes = {
 800091e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000922:	2224      	movs	r2, #36	; 0x24
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f014 fe8a 	bl	8015640 <memset>
 800092c:	4b5b      	ldr	r3, [pc, #364]	; (8000a9c <MX_FREERTOS_Init+0x254>)
 800092e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <MX_FREERTOS_Init+0x258>)
 8000934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000938:	235c      	movs	r3, #92	; 0x5c
 800093a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800093e:	4b59      	ldr	r3, [pc, #356]	; (8000aa4 <MX_FREERTOS_Init+0x25c>)
 8000940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800094c:	2308      	movs	r3, #8
 800094e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    .stack_size = sizeof(ethTaskBuffer),
    .cb_mem = &ethTaskControlBlock,
    .cb_size = sizeof(ethTaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 8000952:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000956:	461a      	mov	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	4853      	ldr	r0, [pc, #332]	; (8000aa8 <MX_FREERTOS_Init+0x260>)
 800095c:	f006 ffd6 	bl	800790c <osThreadNew>
 8000960:	4602      	mov	r2, r0
 8000962:	4b52      	ldr	r3, [pc, #328]	; (8000aac <MX_FREERTOS_Init+0x264>)
 8000964:	601a      	str	r2, [r3, #0]

  /* definition and creation of usart1Task */
  const osThreadAttr_t usart1Task_attributes = {
 8000966:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800096a:	2224      	movs	r2, #36	; 0x24
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f014 fe66 	bl	8015640 <memset>
 8000974:	4b4e      	ldr	r3, [pc, #312]	; (8000ab0 <MX_FREERTOS_Init+0x268>)
 8000976:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000978:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <MX_FREERTOS_Init+0x26c>)
 800097a:	677b      	str	r3, [r7, #116]	; 0x74
 800097c:	235c      	movs	r3, #92	; 0x5c
 800097e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000980:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <MX_FREERTOS_Init+0x270>)
 8000982:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800098c:	2308      	movs	r3, #8
 800098e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    .stack_size = sizeof(usart1TaskBuffer),
    .cb_mem = &usart1TaskControlBlock,
    .cb_size = sizeof(usart1TaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  usart1TaskHandle = osThreadNew(StartUsart1Task, NULL, &usart1Task_attributes);
 8000992:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000996:	461a      	mov	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	4848      	ldr	r0, [pc, #288]	; (8000abc <MX_FREERTOS_Init+0x274>)
 800099c:	f006 ffb6 	bl	800790c <osThreadNew>
 80009a0:	4602      	mov	r2, r0
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <MX_FREERTOS_Init+0x278>)
 80009a4:	601a      	str	r2, [r3, #0]

  /* definition and creation of can1Task */
  const osThreadAttr_t can1Task_attributes = {
 80009a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009aa:	2224      	movs	r2, #36	; 0x24
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f014 fe46 	bl	8015640 <memset>
 80009b4:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <MX_FREERTOS_Init+0x27c>)
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <MX_FREERTOS_Init+0x280>)
 80009ba:	653b      	str	r3, [r7, #80]	; 0x50
 80009bc:	235c      	movs	r3, #92	; 0x5c
 80009be:	657b      	str	r3, [r7, #84]	; 0x54
 80009c0:	4b42      	ldr	r3, [pc, #264]	; (8000acc <MX_FREERTOS_Init+0x284>)
 80009c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009ca:	2308      	movs	r3, #8
 80009cc:	663b      	str	r3, [r7, #96]	; 0x60
    .stack_size = sizeof(can1TaskBuffer),
    .cb_mem = &can1TaskControlBlock,
    .cb_size = sizeof(can1TaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  can1TaskHandle = osThreadNew(StartCan1Task, NULL, &can1Task_attributes);
 80009ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009d2:	461a      	mov	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	483e      	ldr	r0, [pc, #248]	; (8000ad0 <MX_FREERTOS_Init+0x288>)
 80009d8:	f006 ff98 	bl	800790c <osThreadNew>
 80009dc:	4602      	mov	r2, r0
 80009de:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <MX_FREERTOS_Init+0x28c>)
 80009e0:	601a      	str	r2, [r3, #0]

  /* definition and creation of usart3Task */
  const osThreadAttr_t usart3Task_attributes = {
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	2224      	movs	r2, #36	; 0x24
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f014 fe28 	bl	8015640 <memset>
 80009f0:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <MX_FREERTOS_Init+0x290>)
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
 80009f4:	4b39      	ldr	r3, [pc, #228]	; (8000adc <MX_FREERTOS_Init+0x294>)
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f8:	235c      	movs	r3, #92	; 0x5c
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_FREERTOS_Init+0x298>)
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
 8000a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a06:	2308      	movs	r3, #8
 8000a08:	63fb      	str	r3, [r7, #60]	; 0x3c
    .stack_size = sizeof(usart3TaskBuffer),
    .cb_mem = &usart3TaskControlBlock,
    .cb_size = sizeof(usart3TaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  usart3TaskHandle = osThreadNew(StartUsart3Task, NULL, &usart3Task_attributes);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	4834      	ldr	r0, [pc, #208]	; (8000ae4 <MX_FREERTOS_Init+0x29c>)
 8000a14:	f006 ff7a 	bl	800790c <osThreadNew>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <MX_FREERTOS_Init+0x2a0>)
 8000a1c:	601a      	str	r2, [r3, #0]

  /* definition and creation of espTask */
  const osThreadAttr_t espTask_attributes = {
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4618      	mov	r0, r3
 8000a22:	2324      	movs	r3, #36	; 0x24
 8000a24:	461a      	mov	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f014 fe0a 	bl	8015640 <memset>
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <MX_FREERTOS_Init+0x2a4>)
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	463b      	mov	r3, r7
 8000a34:	4a2e      	ldr	r2, [pc, #184]	; (8000af0 <MX_FREERTOS_Init+0x2a8>)
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	463b      	mov	r3, r7
 8000a3a:	225c      	movs	r2, #92	; 0x5c
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4a2c      	ldr	r2, [pc, #176]	; (8000af4 <MX_FREERTOS_Init+0x2ac>)
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	463b      	mov	r3, r7
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2208      	movs	r2, #8
 8000a50:	619a      	str	r2, [r3, #24]
    .stack_size = sizeof(espTaskBuffer),
    .cb_mem = &espTaskControlBlock,
    .cb_size = sizeof(espTaskControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  espTaskHandle = osThreadNew(StartEspTask, NULL, &espTask_attributes);
 8000a52:	463b      	mov	r3, r7
 8000a54:	461a      	mov	r2, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	4827      	ldr	r0, [pc, #156]	; (8000af8 <MX_FREERTOS_Init+0x2b0>)
 8000a5a:	f006 ff57 	bl	800790c <osThreadNew>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_FREERTOS_Init+0x2b4>)
 8000a62:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a64:	bf00      	nop
 8000a66:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	08016a14 	.word	0x08016a14
 8000a74:	20006f14 	.word	0x20006f14
 8000a78:	08016a20 	.word	0x08016a20
 8000a7c:	20006454 	.word	0x20006454
 8000a80:	08016a2c 	.word	0x08016a2c
 8000a84:	20006f74 	.word	0x20006f74
 8000a88:	08016a38 	.word	0x08016a38
 8000a8c:	20006cb8 	.word	0x20006cb8
 8000a90:	2000645c 	.word	0x2000645c
 8000a94:	08000b01 	.word	0x08000b01
 8000a98:	2000612c 	.word	0x2000612c
 8000a9c:	08016a44 	.word	0x08016a44
 8000aa0:	20006f18 	.word	0x20006f18
 8000aa4:	200061f0 	.word	0x200061f0
 8000aa8:	08000b31 	.word	0x08000b31
 8000aac:	20006130 	.word	0x20006130
 8000ab0:	08016a4c 	.word	0x08016a4c
 8000ab4:	20006138 	.word	0x20006138
 8000ab8:	2000665c 	.word	0x2000665c
 8000abc:	08014c61 	.word	0x08014c61
 8000ac0:	20006458 	.word	0x20006458
 8000ac4:	08016a58 	.word	0x08016a58
 8000ac8:	2000685c 	.word	0x2000685c
 8000acc:	20006d14 	.word	0x20006d14
 8000ad0:	08000b41 	.word	0x08000b41
 8000ad4:	20006450 	.word	0x20006450
 8000ad8:	08016a64 	.word	0x08016a64
 8000adc:	20006194 	.word	0x20006194
 8000ae0:	200068b8 	.word	0x200068b8
 8000ae4:	08014d01 	.word	0x08014d01
 8000ae8:	20006134 	.word	0x20006134
 8000aec:	08016a70 	.word	0x08016a70
 8000af0:	200063f0 	.word	0x200063f0
 8000af4:	20006ab8 	.word	0x20006ab8
 8000af8:	08014ded 	.word	0x08014ded
 8000afc:	2000644c 	.word	0x2000644c

08000b00 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b08:	f006 fa24 	bl	8006f54 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	LED0_T;
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <StartDefaultTask+0x28>)
 8000b10:	f003 fb0f 	bl	8004132 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000b14:	2064      	movs	r0, #100	; 0x64
 8000b16:	f007 f899 	bl	8007c4c <osDelay>
	RunTime++;
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <StartDefaultTask+0x2c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a02      	ldr	r2, [pc, #8]	; (8000b2c <StartDefaultTask+0x2c>)
 8000b22:	6013      	str	r3, [r2, #0]
	LED0_T;
 8000b24:	e7f2      	b.n	8000b0c <StartDefaultTask+0xc>
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	200060bc 	.word	0x200060bc

08000b30 <StartEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEthTask */
__weak void StartEthTask(void *argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEthTask */
  /* Infinite loop */
  for(;;)
  {
//	  LED1_T;
    osDelay(10);
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f007 f887 	bl	8007c4c <osDelay>
 8000b3e:	e7fb      	b.n	8000b38 <StartEthTask+0x8>

08000b40 <StartCan1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCan1Task */
__weak void StartCan1Task(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCan1Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f007 f87f 	bl	8007c4c <osDelay>
 8000b4e:	e7fb      	b.n	8000b48 <StartCan1Task+0x8>

08000b50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a55      	ldr	r2, [pc, #340]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b53      	ldr	r3, [pc, #332]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	4b4f      	ldr	r3, [pc, #316]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a4e      	ldr	r2, [pc, #312]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b48      	ldr	r3, [pc, #288]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a47      	ldr	r2, [pc, #284]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000ba8:	f043 0320 	orr.w	r3, r3, #32
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a40      	ldr	r2, [pc, #256]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a39      	ldr	r2, [pc, #228]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <MX_GPIO_Init+0x174>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2118      	movs	r1, #24
 8000c2e:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <MX_GPIO_Init+0x178>)
 8000c30:	f003 fa66 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	4824      	ldr	r0, [pc, #144]	; (8000ccc <MX_GPIO_Init+0x17c>)
 8000c3a:	f003 fa61 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c44:	4821      	ldr	r0, [pc, #132]	; (8000ccc <MX_GPIO_Init+0x17c>)
 8000c46:	f003 fa5b 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000c4a:	2318      	movs	r3, #24
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4819      	ldr	r0, [pc, #100]	; (8000cc8 <MX_GPIO_Init+0x178>)
 8000c62:	f003 f8b3 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin|KEY3_Pin;
 8000c66:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4815      	ldr	r0, [pc, #84]	; (8000cd0 <MX_GPIO_Init+0x180>)
 8000c7c:	f003 f8a6 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_GPIO_Init+0x17c>)
 8000c98:	f003 f898 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x17c>)
 8000cb6:	f003 f889 	bl	8003dcc <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40021800 	.word	0x40021800
 8000cd0:	40021400 	.word	0x40021400

08000cd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_I2C1_Init+0x54>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x58>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_I2C1_Init+0x50>)
 8000d12:	f003 fa29 	bl	8004168 <HAL_I2C_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d1c:	f000 f8f6 	bl	8000f0c <Error_Handler>
  }

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20006f78 	.word	0x20006f78
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	000186a0 	.word	0x000186a0

08000d30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <HAL_I2C_MspInit+0xa0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d13a      	bne.n	8000dc8 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
		__HAL_RCC_I2C2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <HAL_I2C_MspInit+0xa8>)
 8000da8:	f003 f810 	bl	8003dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_I2C_MspInit+0xa4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020400 	.word	0x40020400

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de0:	f000 fbf0 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de4:	f000 f816 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de8:	f7ff feb2 	bl	8000b50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dec:	f7ff fcf6 	bl	80007dc <MX_DMA_Init>
  MX_CAN1_Init();
 8000df0:	f7ff fbc6 	bl	8000580 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000df4:	f7ff fbfa 	bl	80005ec <MX_CAN2_Init>
  MX_I2C1_Init();
 8000df8:	f7ff ff6c 	bl	8000cd4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dfc:	f000 fa70 	bl	80012e0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e00:	f000 fa98 	bl	8001334 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  InitMyApp();
 8000e04:	f013 feb4 	bl	8014b70 <InitMyApp>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000e08:	f7ff fd1e 	bl	8000848 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e0c:	f006 fd22 	bl	8007854 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <main+0x34>
	...

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	; 0x50
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	2230      	movs	r2, #48	; 0x30
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f014 fc0c 	bl	8015640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <SystemClock_Config+0xcc>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <SystemClock_Config+0xcc>)
 8000e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <SystemClock_Config+0xcc>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e70:	2301      	movs	r3, #1
 8000e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e84:	2304      	movs	r3, #4
 8000e86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e88:	23a8      	movs	r3, #168	; 0xa8
 8000e8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e90:	2304      	movs	r3, #4
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 f915 	bl	80050c8 <HAL_RCC_OscConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ea4:	f000 f832 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eac:	2302      	movs	r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000eba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ebe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 fb6e 	bl	80055a8 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ed2:	f000 f81b 	bl	8000f0c <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3750      	adds	r7, #80	; 0x50
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efa:	f000 fb85 	bl	8001608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010000 	.word	0x40010000

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_MspInit+0x54>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <HAL_MspInit+0x54>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x54>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_MspInit+0x54>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_MspInit+0x54>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_MspInit+0x54>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	f06f 0001 	mvn.w	r0, #1
 8000f62:	f001 faf2 	bl	800254a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	2019      	movs	r0, #25
 8000f8a:	f001 fade 	bl	800254a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000f8e:	2019      	movs	r0, #25
 8000f90:	f001 faf7 	bl	8002582 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <HAL_InitTick+0xa4>)
 8000f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9c:	4a1e      	ldr	r2, [pc, #120]	; (8001018 <HAL_InitTick+0xa4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_InitTick+0xa4>)
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fb0:	f107 0210 	add.w	r2, r7, #16
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 fce6 	bl	800598c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000fc0:	f004 fcd0 	bl	8005964 <HAL_RCC_GetPCLK2Freq>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fcc:	4a13      	ldr	r2, [pc, #76]	; (800101c <HAL_InitTick+0xa8>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	0c9b      	lsrs	r3, r3, #18
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_InitTick+0xac>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <HAL_InitTick+0xb0>)
 8000fdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_InitTick+0xac>)
 8000fe0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_InitTick+0xac>)
 8000fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_InitTick+0xac>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_InitTick+0xac>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <HAL_InitTick+0xac>)
 8000ffa:	f004 fcf9 	bl	80059f0 <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d104      	bne.n	800100e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <HAL_InitTick+0xac>)
 8001006:	f004 fd28 	bl	8005a5a <HAL_TIM_Base_Start_IT>
 800100a:	4603      	mov	r3, r0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3730      	adds	r7, #48	; 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	431bde83 	.word	0x431bde83
 8001020:	20006fcc 	.word	0x20006fcc
 8001024:	40010000 	.word	0x40010000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <MemManage_Handler+0x4>

08001042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <UsageFault_Handler+0x4>

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <DMA1_Stream1_IRQHandler+0x10>)
 8001062:	f001 fc39 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000700c 	.word	0x2000700c

08001070 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <CAN1_RX0_IRQHandler+0x10>)
 8001076:	f000 ff71 	bl	8001f5c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20006104 	.word	0x20006104

08001084 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <CAN1_RX1_IRQHandler+0x10>)
 800108a:	f000 ff67 	bl	8001f5c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20006104 	.word	0x20006104

08001098 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800109e:	f004 fd00 	bl	8005aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20006fcc 	.word	0x20006fcc

080010ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <USART1_IRQHandler+0x3c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	2b10      	cmp	r3, #16
 80010be:	d10c      	bne.n	80010da <USART1_IRQHandler+0x2e>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <USART1_IRQHandler+0x3c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <USART1_IRQHandler+0x3c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
		UART1_IDLECallBack();
 80010d6:	f012 fe97 	bl	8013e08 <UART1_IDLECallBack>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <USART1_IRQHandler+0x3c>)
 80010dc:	f005 f888 	bl	80061f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000710c 	.word	0x2000710c

080010ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <USART3_IRQHandler+0x3c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	2b10      	cmp	r3, #16
 80010fe:	d10c      	bne.n	800111a <USART3_IRQHandler+0x2e>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <USART3_IRQHandler+0x3c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <USART3_IRQHandler+0x3c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
		UART1_IDLECallBack();
 8001116:	f012 fe77 	bl	8013e08 <UART1_IDLECallBack>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <USART3_IRQHandler+0x3c>)
 800111c:	f005 f868 	bl	80061f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000706c 	.word	0x2000706c

0800112c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <DMA2_Stream2_IRQHandler+0x10>)
 8001132:	f001 fbd1 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200070ac 	.word	0x200070ac

08001140 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <ETH_IRQHandler+0x10>)
 8001146:	f002 fa15 	bl	8003574 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20008a68 	.word	0x20008a68

08001154 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <CAN2_RX0_IRQHandler+0x10>)
 800115a:	f000 feff 	bl	8001f5c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200060dc 	.word	0x200060dc

08001168 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <CAN2_RX1_IRQHandler+0x10>)
 800116e:	f000 fef5 	bl	8001f5c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200060dc 	.word	0x200060dc

0800117c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e00a      	b.n	80011a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800118e:	f3af 8000 	nop.w
 8001192:	4601      	mov	r1, r0
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	60ba      	str	r2, [r7, #8]
 800119a:	b2ca      	uxtb	r2, r1
 800119c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbf0      	blt.n	800118e <_read+0x12>
	}

return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e009      	b.n	80011dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	60ba      	str	r2, [r7, #8]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f013 fc69 	bl	8014aa8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbf1      	blt.n	80011c8 <_write+0x12>
	}
	return len;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_close>:

int _close(int file)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
	return -1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001216:	605a      	str	r2, [r3, #4]
	return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_isatty>:

int _isatty(int file)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	return 1;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <_sbrk+0x50>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x16>
		heap_end = &end;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <_sbrk+0x50>)
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <_sbrk+0x54>)
 800126c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <_sbrk+0x50>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <_sbrk+0x50>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	466a      	mov	r2, sp
 800127e:	4293      	cmp	r3, r2
 8001280:	d905      	bls.n	800128e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <_sbrk+0x58>)
 8001284:	220c      	movs	r2, #12
 8001286:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	e006      	b.n	800129c <_sbrk+0x44>
	}

	heap_end += incr;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <_sbrk+0x50>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <_sbrk+0x50>)
 8001298:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	2000021c 	.word	0x2000021c
 80012ac:	20019760 	.word	0x20019760
 80012b0:	200176b8 	.word	0x200176b8

080012b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <SystemInit+0x28>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <SystemInit+0x28>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SystemInit+0x28>)
 80012ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ce:	609a      	str	r2, [r3, #8]
#endif
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_USART1_UART_Init+0x4c>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <MX_USART1_UART_Init+0x50>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_USART1_UART_Init+0x4c>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_USART1_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_USART1_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_USART1_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_USART1_UART_Init+0x4c>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_USART1_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_USART1_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART1_UART_Init+0x4c>)
 8001318:	f004 fda8 	bl	8005e6c <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001322:	f7ff fdf3 	bl	8000f0c <Error_Handler>
  }

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000710c 	.word	0x2000710c
 8001330:	40011000 	.word	0x40011000

08001334 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_USART3_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 800136c:	f004 fd7e 	bl	8005e6c <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f7ff fdc9 	bl	8000f0c <Error_Handler>
  }

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000706c 	.word	0x2000706c
 8001384:	40004800 	.word	0x40004800

08001388 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a69      	ldr	r2, [pc, #420]	; (800154c <HAL_UART_MspInit+0x1c4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d163      	bne.n	8001472 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a67      	ldr	r2, [pc, #412]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 80013b4:	f043 0310 	orr.w	r3, r3, #16
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	4b61      	ldr	r3, [pc, #388]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a60      	ldr	r2, [pc, #384]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b5e      	ldr	r3, [pc, #376]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f4:	2307      	movs	r3, #7
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4855      	ldr	r0, [pc, #340]	; (8001554 <HAL_UART_MspInit+0x1cc>)
 8001400:	f002 fce4 	bl	8003dcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001404:	4b54      	ldr	r3, [pc, #336]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 8001406:	4a55      	ldr	r2, [pc, #340]	; (800155c <HAL_UART_MspInit+0x1d4>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800140a:	4b53      	ldr	r3, [pc, #332]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 800140c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001410:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 8001420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001424:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001426:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142c:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001444:	4844      	ldr	r0, [pc, #272]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 8001446:	f001 f8af 	bl	80025a8 <HAL_DMA_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001450:	f7ff fd5c 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a40      	ldr	r2, [pc, #256]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
 800145a:	4a3f      	ldr	r2, [pc, #252]	; (8001558 <HAL_UART_MspInit+0x1d0>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2105      	movs	r1, #5
 8001464:	2025      	movs	r0, #37	; 0x25
 8001466:	f001 f870 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146a:	2025      	movs	r0, #37	; 0x25
 800146c:	f001 f889 	bl	8002582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001470:	e067      	b.n	8001542 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <HAL_UART_MspInit+0x1d8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d162      	bne.n	8001542 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	4b33      	ldr	r3, [pc, #204]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 8001486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b29      	ldr	r3, [pc, #164]	; (8001550 <HAL_UART_MspInit+0x1c8>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014be:	2301      	movs	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c6:	2307      	movs	r3, #7
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4824      	ldr	r0, [pc, #144]	; (8001564 <HAL_UART_MspInit+0x1dc>)
 80014d2:	f002 fc7b 	bl	8003dcc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 80014d8:	4a24      	ldr	r2, [pc, #144]	; (800156c <HAL_UART_MspInit+0x1e4>)
 80014da:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 80014de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 80014f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 8001518:	f001 f846 	bl	80025a8 <HAL_DMA_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001522:	f7ff fcf3 	bl	8000f0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_UART_MspInit+0x1e0>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2105      	movs	r1, #5
 8001536:	2027      	movs	r0, #39	; 0x27
 8001538:	f001 f807 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800153c:	2027      	movs	r0, #39	; 0x27
 800153e:	f001 f820 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3730      	adds	r7, #48	; 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40011000 	.word	0x40011000
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	200070ac 	.word	0x200070ac
 800155c:	40026440 	.word	0x40026440
 8001560:	40004800 	.word	0x40004800
 8001564:	40020400 	.word	0x40020400
 8001568:	2000700c 	.word	0x2000700c
 800156c:	40026028 	.word	0x40026028

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001574:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001576:	e003      	b.n	8001580 <LoopCopyDataInit>

08001578 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800157a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800157c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800157e:	3104      	adds	r1, #4

08001580 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001580:	480b      	ldr	r0, [pc, #44]	; (80015b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001584:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001586:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001588:	d3f6      	bcc.n	8001578 <CopyDataInit>
  ldr  r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800158c:	e002      	b.n	8001594 <LoopFillZerobss>

0800158e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800158e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001590:	f842 3b04 	str.w	r3, [r2], #4

08001594 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001596:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001598:	d3f9      	bcc.n	800158e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800159a:	f7ff fe8b 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f014 f811 	bl	80155c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff fc1b 	bl	8000ddc <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015ac:	08018fc0 	.word	0x08018fc0
  ldr  r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015b4:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 80015b8:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 80015bc:	2001975c 	.word	0x2001975c

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 ffa1 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fcbe 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fc90 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008
 800162c:	2000714c 	.word	0x2000714c

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000714c 	.word	0x2000714c

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff ffee 	bl	8001630 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_Delay+0x40>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffde 	bl	8001630 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0ed      	b.n	800187a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7fe ffd4 	bl	8000658 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0202 	bic.w	r2, r2, #2
 80016be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c0:	f7ff ffb6 	bl	8001630 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016c6:	e012      	b.n	80016ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c8:	f7ff ffb2 	bl	8001630 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	d90b      	bls.n	80016ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2205      	movs	r2, #5
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0c5      	b.n	800187a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1e5      	bne.n	80016c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800170c:	f7ff ff90 	bl	8001630 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001712:	e012      	b.n	800173a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001714:	f7ff ff8c 	bl	8001630 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b0a      	cmp	r3, #10
 8001720:	d90b      	bls.n	800173a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2205      	movs	r2, #5
 8001732:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e09f      	b.n	800187a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0e5      	beq.n	8001714 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7e1b      	ldrb	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e007      	b.n	8001772 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7e5b      	ldrb	r3, [r3, #25]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e007      	b.n	800179c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800179a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e9b      	ldrb	r3, [r3, #26]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d108      	bne.n	80017b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0220 	orr.w	r2, r2, #32
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e007      	b.n	80017c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0220 	bic.w	r2, r2, #32
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7edb      	ldrb	r3, [r3, #27]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d108      	bne.n	80017e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0210 	bic.w	r2, r2, #16
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e007      	b.n	80017f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0210 	orr.w	r2, r2, #16
 80017ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7f1b      	ldrb	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d108      	bne.n	800180a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0208 	orr.w	r2, r2, #8
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e007      	b.n	800181a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0208 	bic.w	r2, r2, #8
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7f5b      	ldrb	r3, [r3, #29]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d108      	bne.n	8001834 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0204 	orr.w	r2, r2, #4
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e007      	b.n	8001844 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0204 	bic.w	r2, r2, #4
 8001842:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	ea42 0103 	orr.w	r1, r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800189c:	7cfb      	ldrb	r3, [r7, #19]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d003      	beq.n	80018aa <HAL_CAN_ConfigFilter+0x26>
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	f040 80be 	bne.w	8001a26 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80018aa:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_CAN_ConfigFilter+0x1bc>)
 80018ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2201      	movs	r2, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d123      	bne.n	8001954 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800192e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3248      	adds	r2, #72	; 0x48
 8001934:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001948:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800194a:	6979      	ldr	r1, [r7, #20]
 800194c:	3348      	adds	r3, #72	; 0x48
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d122      	bne.n	80019a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800197c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3248      	adds	r2, #72	; 0x48
 8001982:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001996:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001998:	6979      	ldr	r1, [r7, #20]
 800199a:	3348      	adds	r3, #72	; 0x48
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	401a      	ands	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019bc:	e007      	b.n	80019ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	401a      	ands	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019e8:	e007      	b.n	80019fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a18:	f023 0201 	bic.w	r2, r3, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e006      	b.n	8001a34 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
  }
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40006400 	.word	0x40006400

08001a44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d12e      	bne.n	8001ab6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a70:	f7ff fdde 	bl	8001630 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a76:	e012      	b.n	8001a9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a78:	f7ff fdda 	bl	8001630 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b0a      	cmp	r3, #10
 8001a84:	d90b      	bls.n	8001a9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2205      	movs	r2, #5
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e012      	b.n	8001ac4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e5      	bne.n	8001a78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e006      	b.n	8001ac4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aea:	7ffb      	ldrb	r3, [r7, #31]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d003      	beq.n	8001af8 <HAL_CAN_AddTxMessage+0x2c>
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	f040 80b8 	bne.w	8001c68 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80a0 	beq.w	8001c58 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	0e1b      	lsrs	r3, r3, #24
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d907      	bls.n	8001b38 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e09e      	b.n	8001c76 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10d      	bne.n	8001b66 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	6809      	ldr	r1, [r1, #0]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3318      	adds	r3, #24
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	440b      	add	r3, r1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e00f      	b.n	8001b86 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b70:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b7a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3318      	adds	r3, #24
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	440b      	add	r3, r1
 8001b84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3318      	adds	r3, #24
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	440b      	add	r3, r1
 8001b96:	3304      	adds	r3, #4
 8001b98:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	7d1b      	ldrb	r3, [r3, #20]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d111      	bne.n	8001bc6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3318      	adds	r3, #24
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	6811      	ldr	r1, [r2, #0]
 8001bb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3318      	adds	r3, #24
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3307      	adds	r3, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	061a      	lsls	r2, r3, #24
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3306      	adds	r3, #6
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3305      	adds	r3, #5
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	4313      	orrs	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	3204      	adds	r2, #4
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	4610      	mov	r0, r2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	6811      	ldr	r1, [r2, #0]
 8001bee:	ea43 0200 	orr.w	r2, r3, r0
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001bfc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3303      	adds	r3, #3
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	061a      	lsls	r2, r3, #24
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3302      	adds	r3, #2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3301      	adds	r3, #1
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	4610      	mov	r0, r2
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	6811      	ldr	r1, [r2, #0]
 8001c24:	ea43 0200 	orr.w	r2, r3, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	440b      	add	r3, r1
 8001c2e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3318      	adds	r3, #24
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	4413      	add	r3, r2
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	6811      	ldr	r1, [r2, #0]
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3318      	adds	r3, #24
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	440b      	add	r3, r1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e00e      	b.n	8001c76 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e006      	b.n	8001c76 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
  }
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c94:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d002      	beq.n	8001ca2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d11d      	bne.n	8001cde <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d00:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d003      	beq.n	8001d10 <HAL_CAN_GetRxMessage+0x24>
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	f040 80f3 	bne.w	8001ef6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d116      	bne.n	8001d52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0e7      	b.n	8001f04 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d107      	bne.n	8001d52 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0d8      	b.n	8001f04 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	331b      	adds	r3, #27
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0204 	and.w	r2, r3, #4
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10c      	bne.n	8001d8a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	331b      	adds	r3, #27
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	0d5b      	lsrs	r3, r3, #21
 8001d80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e00b      	b.n	8001da2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	331b      	adds	r3, #27
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	331b      	adds	r3, #27
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0202 	and.w	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	331b      	adds	r3, #27
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	331b      	adds	r3, #27
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4413      	add	r3, r2
 8001ddc:	3304      	adds	r3, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	331b      	adds	r3, #27
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	3304      	adds	r3, #4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0a1a      	lsrs	r2, r3, #8
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0c1a      	lsrs	r2, r3, #16
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	3302      	adds	r3, #2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	0e1a      	lsrs	r2, r3, #24
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	3303      	adds	r3, #3
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	3304      	adds	r3, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0a1a      	lsrs	r2, r3, #8
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	3305      	adds	r3, #5
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	0c1a      	lsrs	r2, r3, #16
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	3306      	adds	r3, #6
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0e1a      	lsrs	r2, r3, #24
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	3307      	adds	r3, #7
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d108      	bne.n	8001ee2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	e007      	b.n	8001ef2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e006      	b.n	8001f04 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
  }
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f20:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d002      	beq.n	8001f2e <HAL_CAN_ActivateNotification+0x1e>
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d109      	bne.n	8001f42 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6959      	ldr	r1, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e006      	b.n	8001f50 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
  }
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d07c      	beq.n	800209c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d023      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f97d 	bl	80022be <HAL_CAN_TxMailbox0CompleteCallback>
 8001fc4:	e016      	b.n	8001ff4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd8:	e00c      	b.n	8001ff4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
 8001fec:	e002      	b.n	8001ff4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f983 	bl	80022fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002006:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f95d 	bl	80022d2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002018:	e016      	b.n	8002048 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	e00c      	b.n	8002048 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	e002      	b.n	8002048 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f963 	bl	800230e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d024      	beq.n	800209c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800205a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f93d 	bl	80022e6 <HAL_CAN_TxMailbox2CompleteCallback>
 800206c:	e016      	b.n	800209c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	e00c      	b.n	800209c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	e002      	b.n	800209c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f943 	bl	8002322 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2210      	movs	r2, #16
 80020be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2208      	movs	r2, #8
 80020da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f92a 	bl	8002336 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f011 feae 	bl	8013e5c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2208      	movs	r2, #8
 800213e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f90c 	bl	800235e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8f3 	bl	800234a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2210      	movs	r2, #16
 800217e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f8f6 	bl	8002372 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2208      	movs	r2, #8
 80021a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8ef 	bl	8002386 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d075      	beq.n	800229e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d06c      	beq.n	8002296 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03d      	beq.n	8002296 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d038      	beq.n	8002296 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800222a:	2b30      	cmp	r3, #48	; 0x30
 800222c:	d017      	beq.n	800225e <HAL_CAN_IRQHandler+0x302>
 800222e:	2b30      	cmp	r3, #48	; 0x30
 8002230:	d804      	bhi.n	800223c <HAL_CAN_IRQHandler+0x2e0>
 8002232:	2b10      	cmp	r3, #16
 8002234:	d009      	beq.n	800224a <HAL_CAN_IRQHandler+0x2ee>
 8002236:	2b20      	cmp	r3, #32
 8002238:	d00c      	beq.n	8002254 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800223a:	e024      	b.n	8002286 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800223c:	2b50      	cmp	r3, #80	; 0x50
 800223e:	d018      	beq.n	8002272 <HAL_CAN_IRQHandler+0x316>
 8002240:	2b60      	cmp	r3, #96	; 0x60
 8002242:	d01b      	beq.n	800227c <HAL_CAN_IRQHandler+0x320>
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	d00f      	beq.n	8002268 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002248:	e01d      	b.n	8002286 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002252:	e018      	b.n	8002286 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f043 0310 	orr.w	r3, r3, #16
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800225c:	e013      	b.n	8002286 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f043 0320 	orr.w	r3, r3, #32
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002266:	e00e      	b.n	8002286 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002270:	e009      	b.n	8002286 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800227a:	e004      	b.n	8002286 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002284:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002294:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2204      	movs	r2, #4
 800229c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f872 	bl	800239a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	; (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002510:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <__NVIC_SystemReset+0x20>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800251c:	4903      	ldr	r1, [pc, #12]	; (800252c <__NVIC_SystemReset+0x20>)
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <__NVIC_SystemReset+0x24>)
 8002520:	4313      	orrs	r3, r2
 8002522:	60cb      	str	r3, [r1, #12]
 8002524:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <__NVIC_SystemReset+0x1c>
 800252c:	e000ed00 	.word	0xe000ed00
 8002530:	05fa0004 	.word	0x05fa0004

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff37 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff4c 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff9c 	bl	80024a4 <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff6b 	bl	8002450 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff3f 	bl	8002414 <__NVIC_EnableIRQ>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80025a2:	f7ff ffb3 	bl	800250c <__NVIC_SystemReset>
	...

080025a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff f83c 	bl	8001630 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e099      	b.n	80026f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e4:	e00f      	b.n	8002606 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e6:	f7ff f823 	bl	8001630 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d908      	bls.n	8002606 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e078      	b.n	80026f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e8      	bne.n	80025e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <HAL_DMA_Init+0x158>)
 8002620:	4013      	ands	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002632:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2b04      	cmp	r3, #4
 800265e:	d107      	bne.n	8002670 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	4313      	orrs	r3, r2
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0307 	bic.w	r3, r3, #7
 8002686:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2b04      	cmp	r3, #4
 8002698:	d117      	bne.n	80026ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fb01 	bl	8002cb4 <DMA_CheckFifoParam>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2240      	movs	r2, #64	; 0x40
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026c6:	2301      	movs	r3, #1
 80026c8:	e016      	b.n	80026f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fab8 	bl	8002c48 <DMA_CalcBaseAndBitshift>
 80026d8:	4603      	mov	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	223f      	movs	r2, #63	; 0x3f
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	f010803f 	.word	0xf010803f

08002704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_DMA_Start_IT+0x26>
 8002726:	2302      	movs	r3, #2
 8002728:	e040      	b.n	80027ac <HAL_DMA_Start_IT+0xa8>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d12f      	bne.n	800279e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa4a 	bl	8002bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	223f      	movs	r2, #63	; 0x3f
 800275e:	409a      	lsls	r2, r3
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0216 	orr.w	r2, r2, #22
 8002772:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0208 	orr.w	r2, r2, #8
 800278a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e005      	b.n	80027aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
 80027a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027c2:	f7fe ff35 	bl	8001630 <HAL_GetTick>
 80027c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d008      	beq.n	80027e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e052      	b.n	800288c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0216 	bic.w	r2, r2, #22
 80027f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002804:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <HAL_DMA_Abort+0x62>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0208 	bic.w	r2, r2, #8
 8002824:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002836:	e013      	b.n	8002860 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002838:	f7fe fefa 	bl	8001630 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b05      	cmp	r3, #5
 8002844:	d90c      	bls.n	8002860 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2203      	movs	r2, #3
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e015      	b.n	800288c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e4      	bne.n	8002838 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	223f      	movs	r2, #63	; 0x3f
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d004      	beq.n	80028b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00c      	b.n	80028cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2205      	movs	r2, #5
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028e4:	4b92      	ldr	r3, [pc, #584]	; (8002b30 <HAL_DMA_IRQHandler+0x258>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a92      	ldr	r2, [pc, #584]	; (8002b34 <HAL_DMA_IRQHandler+0x25c>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a9b      	lsrs	r3, r3, #10
 80028f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	2208      	movs	r2, #8
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01a      	beq.n	8002944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d013      	beq.n	8002944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0204 	bic.w	r2, r2, #4
 800292a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	2208      	movs	r2, #8
 8002932:	409a      	lsls	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	2201      	movs	r2, #1
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d012      	beq.n	800297a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2201      	movs	r2, #1
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f043 0202 	orr.w	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	2204      	movs	r2, #4
 8002980:	409a      	lsls	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	2204      	movs	r2, #4
 800299e:	409a      	lsls	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	2210      	movs	r2, #16
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d043      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03c      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	2210      	movs	r2, #16
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d024      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
 8002a06:	e01f      	b.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01b      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
 8002a18:	e016      	b.n	8002a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0208 	bic.w	r2, r2, #8
 8002a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 808e 	beq.w	8002b76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8086 	beq.w	8002b76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	2220      	movs	r2, #32
 8002a70:	409a      	lsls	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d136      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0216 	bic.w	r2, r2, #22
 8002a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0x1da>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0208 	bic.w	r2, r2, #8
 8002ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	223f      	movs	r2, #63	; 0x3f
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d07d      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
        }
        return;
 8002aee:	e078      	b.n	8002be2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01c      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d108      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d030      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e02b      	b.n	8002b76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d027      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
 8002b2e:	e022      	b.n	8002b76 <HAL_DMA_IRQHandler+0x29e>
 8002b30:	20000000 	.word	0x20000000
 8002b34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0210 	bic.w	r2, r2, #16
 8002b54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d032      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d022      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2205      	movs	r2, #5
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d307      	bcc.n	8002bbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f2      	bne.n	8002ba2 <HAL_DMA_IRQHandler+0x2ca>
 8002bbc:	e000      	b.n	8002bc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
 8002be0:	e000      	b.n	8002be4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002be2:	bf00      	nop
    }
  }
}
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop

08002bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d108      	bne.n	8002c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c2a:	e007      	b.n	8002c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3b10      	subs	r3, #16
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <DMA_CalcBaseAndBitshift+0x64>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d909      	bls.n	8002c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	659a      	str	r2, [r3, #88]	; 0x58
 8002c88:	e007      	b.n	8002c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	aaaaaaab 	.word	0xaaaaaaab
 8002cb0:	080188c8 	.word	0x080188c8

08002cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11f      	bne.n	8002d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d855      	bhi.n	8002d80 <DMA_CheckFifoParam+0xcc>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <DMA_CheckFifoParam+0x28>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cff 	.word	0x08002cff
 8002ce4:	08002ced 	.word	0x08002ced
 8002ce8:	08002d81 	.word	0x08002d81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d045      	beq.n	8002d84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfc:	e042      	b.n	8002d84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d06:	d13f      	bne.n	8002d88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e03c      	b.n	8002d88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d16:	d121      	bne.n	8002d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d836      	bhi.n	8002d8c <DMA_CheckFifoParam+0xd8>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <DMA_CheckFifoParam+0x70>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d3b 	.word	0x08002d3b
 8002d2c:	08002d35 	.word	0x08002d35
 8002d30:	08002d4d 	.word	0x08002d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e02f      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d024      	beq.n	8002d90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4a:	e021      	b.n	8002d90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d54:	d11e      	bne.n	8002d94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d5a:	e01b      	b.n	8002d94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d902      	bls.n	8002d68 <DMA_CheckFifoParam+0xb4>
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d003      	beq.n	8002d6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d66:	e018      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6c:	e015      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00e      	beq.n	8002d98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7e:	e00b      	b.n	8002d98 <DMA_CheckFifoParam+0xe4>
      break;
 8002d80:	bf00      	nop
 8002d82:	e00a      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;
 8002d84:	bf00      	nop
 8002d86:	e008      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e006      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;
 8002d8c:	bf00      	nop
 8002d8e:	e004      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;
 8002d90:	bf00      	nop
 8002d92:	e002      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;   
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;
 8002d98:	bf00      	nop
    }
  } 
  
  return status; 
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002db8:	4baa      	ldr	r3, [pc, #680]	; (8003064 <HAL_ETH_Init+0x2bc>)
 8002dba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e185      	b.n	80030da <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f004 f9e4 	bl	80071b0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	4b9e      	ldr	r3, [pc, #632]	; (8003068 <HAL_ETH_Init+0x2c0>)
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	4a9d      	ldr	r2, [pc, #628]	; (8003068 <HAL_ETH_Init+0x2c0>)
 8002df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df6:	6453      	str	r3, [r2, #68]	; 0x44
 8002df8:	4b9b      	ldr	r3, [pc, #620]	; (8003068 <HAL_ETH_Init+0x2c0>)
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e04:	4b99      	ldr	r3, [pc, #612]	; (800306c <HAL_ETH_Init+0x2c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a98      	ldr	r2, [pc, #608]	; (800306c <HAL_ETH_Init+0x2c4>)
 8002e0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e0e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e10:	4b96      	ldr	r3, [pc, #600]	; (800306c <HAL_ETH_Init+0x2c4>)
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4994      	ldr	r1, [pc, #592]	; (800306c <HAL_ETH_Init+0x2c4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e34:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e36:	f7fe fbfb 	bl	8001630 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002e3c:	e011      	b.n	8002e62 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002e3e:	f7fe fbf7 	bl	8001630 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e4c:	d909      	bls.n	8002e62 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e13b      	b.n	80030da <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e4      	bne.n	8002e3e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f023 031c 	bic.w	r3, r3, #28
 8002e82:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e84:	f002 fd4e 	bl	8005924 <HAL_RCC_GetHCLKFreq>
 8002e88:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	4a78      	ldr	r2, [pc, #480]	; (8003070 <HAL_ETH_Init+0x2c8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d908      	bls.n	8002ea4 <HAL_ETH_Init+0xfc>
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4a77      	ldr	r2, [pc, #476]	; (8003074 <HAL_ETH_Init+0x2cc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d804      	bhi.n	8002ea4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e027      	b.n	8002ef4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4a73      	ldr	r2, [pc, #460]	; (8003074 <HAL_ETH_Init+0x2cc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d908      	bls.n	8002ebe <HAL_ETH_Init+0x116>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4a72      	ldr	r2, [pc, #456]	; (8003078 <HAL_ETH_Init+0x2d0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d804      	bhi.n	8002ebe <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f043 030c 	orr.w	r3, r3, #12
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	e01a      	b.n	8002ef4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4a6d      	ldr	r2, [pc, #436]	; (8003078 <HAL_ETH_Init+0x2d0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d903      	bls.n	8002ece <HAL_ETH_Init+0x126>
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4a6c      	ldr	r2, [pc, #432]	; (800307c <HAL_ETH_Init+0x2d4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d911      	bls.n	8002ef2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4a6a      	ldr	r2, [pc, #424]	; (800307c <HAL_ETH_Init+0x2d4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d908      	bls.n	8002ee8 <HAL_ETH_Init+0x140>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_ETH_Init+0x2d8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d804      	bhi.n	8002ee8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	e005      	b.n	8002ef4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f043 0310 	orr.w	r3, r3, #16
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	e000      	b.n	8002ef4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002ef2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002efc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f00:	2100      	movs	r1, #0
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fc19 	bl	800373a <HAL_ETH_WritePHYRegister>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002f12:	6939      	ldr	r1, [r7, #16]
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fca5 	bl	8003864 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0d9      	b.n	80030da <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002f26:	20ff      	movs	r0, #255	; 0xff
 8002f28:	f7fe fb8e 	bl	8001648 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a7 	beq.w	8003084 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f36:	f7fe fb7b 	bl	8001630 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	461a      	mov	r2, r3
 8002f42:	2101      	movs	r1, #1
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fb90 	bl	800366a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002f4a:	f7fe fb71 	bl	8001630 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d90f      	bls.n	8002f7c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f60:	6939      	ldr	r1, [r7, #16]
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fc7e 	bl	8003864 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0ae      	b.n	80030da <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0da      	beq.n	8002f3c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002f86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fbd4 	bl	800373a <HAL_ETH_WritePHYRegister>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f9c:	6939      	ldr	r1, [r7, #16]
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fc60 	bl	8003864 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002fac:	2301      	movs	r3, #1
 8002fae:	e094      	b.n	80030da <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fe fb3e 	bl	8001630 <HAL_GetTick>
 8002fb4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fb53 	bl	800366a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002fc4:	f7fe fb34 	bl	8001630 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d90f      	bls.n	8002ff6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002fda:	6939      	ldr	r1, [r7, #16]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fc41 	bl	8003864 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e071      	b.n	80030da <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0da      	beq.n	8002fb6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003000:	f107 030c 	add.w	r3, r7, #12
 8003004:	461a      	mov	r2, r3
 8003006:	211f      	movs	r1, #31
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fb2e 	bl	800366a <HAL_ETH_ReadPHYRegister>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003018:	6939      	ldr	r1, [r7, #16]
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fc22 	bl	8003864 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003028:	2301      	movs	r3, #1
 800302a:	e056      	b.n	80030da <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d004      	beq.n	8003040 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	e002      	b.n	8003046 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	e037      	b.n	80030c8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	e032      	b.n	80030c8 <HAL_ETH_Init+0x320>
 8003062:	bf00      	nop
 8003064:	03938700 	.word	0x03938700
 8003068:	40023800 	.word	0x40023800
 800306c:	40013800 	.word	0x40013800
 8003070:	01312cff 	.word	0x01312cff
 8003074:	02160ebf 	.word	0x02160ebf
 8003078:	039386ff 	.word	0x039386ff
 800307c:	05f5e0ff 	.word	0x05f5e0ff
 8003080:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003094:	4313      	orrs	r3, r2
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fb4c 	bl	800373a <HAL_ETH_WritePHYRegister>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030ac:	6939      	ldr	r1, [r7, #16]
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fbd8 	bl	8003864 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00c      	b.n	80030da <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80030c0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80030c4:	f7fe fac0 	bl	8001648 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80030c8:	6939      	ldr	r1, [r7, #16]
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fbca 	bl	8003864 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop

080030e4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_ETH_DMATxDescListInit+0x20>
 8003100:	2302      	movs	r3, #2
 8003102:	e052      	b.n	80031aa <HAL_ETH_DMATxDescListInit+0xc6>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e030      	b.n	8003182 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015b      	lsls	r3, r3, #5
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	4413      	add	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003130:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	461a      	mov	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	d208      	bcs.n	8003176 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	015b      	lsls	r3, r3, #5
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4413      	add	r3, r2
 800316e:	461a      	mov	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	60da      	str	r2, [r3, #12]
 8003174:	e002      	b.n	800317c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d3ca      	bcc.n	8003120 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003194:	3310      	adds	r3, #16
 8003196:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_ETH_DMARxDescListInit+0x20>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e056      	b.n	8003284 <HAL_ETH_DMARxDescListInit+0xce>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e034      	b.n	800325c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	015b      	lsls	r3, r3, #5
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4413      	add	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003202:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800320a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	461a      	mov	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	3b01      	subs	r3, #1
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	429a      	cmp	r2, r3
 800323c:	d208      	bcs.n	8003250 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	3301      	adds	r3, #1
 8003242:	015b      	lsls	r3, r3, #5
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	4413      	add	r3, r2
 8003248:	461a      	mov	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	e002      	b.n	8003256 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3301      	adds	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d3c6      	bcc.n	80031f2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800326e:	330c      	adds	r3, #12
 8003270:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_ETH_TransmitFrame+0x24>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0cd      	b.n	8003450 <HAL_ETH_TransmitFrame+0x1c0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80032da:	2301      	movs	r3, #1
 80032dc:	e0b8      	b.n	8003450 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da09      	bge.n	80032fc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2212      	movs	r2, #18
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0a9      	b.n	8003450 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003302:	4293      	cmp	r3, r2
 8003304:	d915      	bls.n	8003332 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	4a54      	ldr	r2, [pc, #336]	; (800345c <HAL_ETH_TransmitFrame+0x1cc>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0a9b      	lsrs	r3, r3, #10
 8003310:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4b51      	ldr	r3, [pc, #324]	; (800345c <HAL_ETH_TransmitFrame+0x1cc>)
 8003316:	fba3 1302 	umull	r1, r3, r3, r2
 800331a:	0a9b      	lsrs	r3, r3, #10
 800331c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e001      	b.n	8003336 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003332:	2301      	movs	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d11c      	bne.n	8003376 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800334a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003356:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003366:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	461a      	mov	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
 8003374:	e04b      	b.n	800340e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	e044      	b.n	8003406 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800338a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d107      	bne.n	80033a2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033a0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80033aa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d116      	bne.n	80033e4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80033c4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_ETH_TransmitFrame+0x1d0>)
 80033ca:	fb02 f203 	mul.w	r2, r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80033d6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80033e2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033f2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3301      	adds	r3, #1
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	429a      	cmp	r2, r3
 800340c:	d3b6      	bcc.n	800337c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003416:	3314      	adds	r3, #20
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342a:	3314      	adds	r3, #20
 800342c:	2204      	movs	r2, #4
 800342e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003438:	3304      	adds	r3, #4
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	ac02b00b 	.word	0xac02b00b
 8003460:	fffffa0c 	.word	0xfffffa0c

08003464 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800347a:	2302      	movs	r3, #2
 800347c:	e074      	b.n	8003568 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800348e:	e05a      	b.n	8003546 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a4:	d10d      	bne.n	80034c2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
 80034c0:	e041      	b.n	8003546 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	461a      	mov	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28
 80034e6:	e02e      	b.n	8003546 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d103      	bne.n	800350a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003516:	1f1a      	subs	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e010      	b.n	8003568 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	db02      	blt.n	8003556 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d99c      	bls.n	8003490 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	3314      	adds	r3, #20
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d112      	bne.n	80035b6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f003 febb 	bl	800730c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359e:	3314      	adds	r3, #20
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b4:	e01b      	b.n	80035ee <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035be:	3314      	adds	r3, #20
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d111      	bne.n	80035ee <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f839 	bl	8003642 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d8:	3314      	adds	r3, #20
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f6:	3314      	adds	r3, #20
 80035f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035fc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003606:	3314      	adds	r3, #20
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800360e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003612:	d112      	bne.n	800363a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f81e 	bl	8003656 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003622:	3314      	adds	r3, #20
 8003624:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003628:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	460b      	mov	r3, r1
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b82      	cmp	r3, #130	; 0x82
 800368a:	d101      	bne.n	8003690 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
 800368e:	e050      	b.n	8003732 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2282      	movs	r2, #130	; 0x82
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 031c 	and.w	r3, r3, #28
 80036a6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8a1b      	ldrh	r3, [r3, #16]
 80036ac:	02db      	lsls	r3, r3, #11
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	019b      	lsls	r3, r3, #6
 80036ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0302 	bic.w	r3, r3, #2
 80036ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80036dc:	f7fd ffa8 	bl	8001630 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036e2:	e015      	b.n	8003710 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80036e4:	f7fd ffa4 	bl	8001630 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f2:	d309      	bcc.n	8003708 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e014      	b.n	8003732 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e4      	bne.n	80036e4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	b29b      	uxth	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	460b      	mov	r3, r1
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b42      	cmp	r3, #66	; 0x42
 800375a:	d101      	bne.n	8003760 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	e04e      	b.n	80037fe <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2242      	movs	r2, #66	; 0x42
 8003764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 031c 	and.w	r3, r3, #28
 8003776:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8a1b      	ldrh	r3, [r3, #16]
 800377c:	02db      	lsls	r3, r3, #11
 800377e:	b29b      	uxth	r3, r3
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003786:	897b      	ldrh	r3, [r7, #10]
 8003788:	019b      	lsls	r3, r3, #6
 800378a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80037b6:	f7fd ff3b 	bl	8001630 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037bc:	e015      	b.n	80037ea <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80037be:	f7fd ff37 	bl	8001630 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d309      	bcc.n	80037e2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e00d      	b.n	80037fe <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e4      	bne.n	80037be <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_ETH_Start+0x16>
 8003818:	2302      	movs	r3, #2
 800381a:	e01f      	b.n	800385c <HAL_ETH_Start+0x56>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fa1b 	bl	8003c68 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fa35 	bl	8003ca2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fa7f 	bl	8003d3c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa4c 	bl	8003cdc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fa61 	bl	8003d0c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b0b0      	sub	sp, #192	; 0xc0
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003880:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003888:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800388a:	2300      	movs	r3, #0
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800388e:	2300      	movs	r3, #0
 8003890:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003892:	2300      	movs	r3, #0
 8003894:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800389a:	2300      	movs	r3, #0
 800389c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800389e:	2300      	movs	r3, #0
 80038a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80038aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ae:	663b      	str	r3, [r7, #96]	; 0x60
 80038b0:	e001      	b.n	80038b6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80038b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ba:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80038bc:	2300      	movs	r3, #0
 80038be:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80038c0:	2300      	movs	r3, #0
 80038c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80038d0:	2340      	movs	r3, #64	; 0x40
 80038d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800390a:	2300      	movs	r3, #0
 800390c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003922:	2300      	movs	r3, #0
 8003924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003938:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800393c:	4bac      	ldr	r3, [pc, #688]	; (8003bf0 <ETH_MACDMAConfig+0x38c>)
 800393e:	4013      	ands	r3, r2
 8003940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003944:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003948:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800394c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800394e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003950:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003956:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800395a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800395c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800395e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003964:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003968:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800396a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800396c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800396e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003970:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003974:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003978:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800397a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800398c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003998:	2001      	movs	r0, #1
 800399a:	f7fd fe55 	bl	8001648 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039a6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80039aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039ac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80039ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80039b0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80039b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80039b6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80039b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80039bc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80039be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80039c2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80039c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80039c8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80039cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80039d4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039d6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80039e2:	2001      	movs	r0, #1
 80039e4:	f7fd fe30 	bl	8001648 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039f0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039fa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003a04:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003a10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a14:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003a18:	4013      	ands	r3, r2
 8003a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003a1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a22:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003a24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003a28:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003a2e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003a34:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003a3a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003a3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003a40:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003a42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a54:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7fd fdf1 	bl	8001648 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a6e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003a70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003a74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f7fd fddc 	bl	8001648 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a98:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003aa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003aac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003abe:	2304      	movs	r3, #4
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003acc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aee:	3318      	adds	r3, #24
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003af6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003afa:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <ETH_MACDMAConfig+0x390>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003b02:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003b04:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003b06:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003b08:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003b0a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003b0c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003b0e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003b10:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003b12:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003b14:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003b16:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003b18:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003b1a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003b1e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003b22:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003b24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b36:	3318      	adds	r3, #24
 8003b38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b3c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b46:	3318      	adds	r3, #24
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b4e:	2001      	movs	r0, #1
 8003b50:	f7fd fd7a 	bl	8001648 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b62:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b68:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003b6c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003b70:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003b74:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b78:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003b7a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003b7e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f7fd fd53 	bl	8001648 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003baa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bae:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10f      	bne.n	8003bd8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc0:	331c      	adds	r3, #28
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd4:	331c      	adds	r3, #28
 8003bd6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2100      	movs	r1, #0
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f809 	bl	8003bf8 <ETH_MACAddressConfig>
}
 8003be6:	bf00      	nop
 8003be8:	37c0      	adds	r7, #192	; 0xc0
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	ff20810f 	.word	0xff20810f
 8003bf4:	f8de3f23 	.word	0xf8de3f23

08003bf8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3305      	adds	r3, #5
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	3204      	adds	r2, #4
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <ETH_MACAddressConfig+0x68>)
 8003c1a:	4413      	add	r3, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3303      	adds	r3, #3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	061a      	lsls	r2, r3, #24
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3301      	adds	r3, #1
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <ETH_MACAddressConfig+0x6c>)
 8003c4a:	4413      	add	r3, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6013      	str	r3, [r2, #0]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40028040 	.word	0x40028040
 8003c64:	40028044 	.word	0x40028044

08003c68 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0208 	orr.w	r2, r2, #8
 8003c82:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f000 f87f 	bl	8003d90 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	601a      	str	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0204 	orr.w	r2, r2, #4
 8003cbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f000 f862 	bl	8003d90 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cec:	3318      	adds	r3, #24
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1c:	3318      	adds	r3, #24
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0202 	orr.w	r2, r2, #2
 8003d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2c:	3318      	adds	r3, #24
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d50:	3318      	adds	r3, #24
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d60:	3318      	adds	r3, #24
 8003d62:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6c:	3318      	adds	r3, #24
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003d72:	2001      	movs	r0, #1
 8003d74:	f000 f80c 	bl	8003d90 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d82:	3318      	adds	r3, #24
 8003d84:	601a      	str	r2, [r3, #0]
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <ETH_Delay+0x34>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <ETH_Delay+0x38>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	0a5b      	lsrs	r3, r3, #9
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003dac:	bf00      	nop
  } 
  while (Delay --);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1e5a      	subs	r2, r3, #1
 8003db2:	60fa      	str	r2, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f9      	bne.n	8003dac <ETH_Delay+0x1c>
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	10624dd3 	.word	0x10624dd3

08003dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e16b      	b.n	80040c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003de8:	2201      	movs	r2, #1
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	f040 815a 	bne.w	80040ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d00b      	beq.n	8003e26 <HAL_GPIO_Init+0x5a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d007      	beq.n	8003e26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e1a:	2b11      	cmp	r3, #17
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b12      	cmp	r3, #18
 8003e24:	d130      	bne.n	8003e88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 0201 	and.w	r2, r3, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2203      	movs	r2, #3
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0xfc>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b12      	cmp	r3, #18
 8003ec6:	d123      	bne.n	8003f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	08da      	lsrs	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3208      	adds	r2, #8
 8003ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	220f      	movs	r2, #15
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	08da      	lsrs	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3208      	adds	r2, #8
 8003f0a:	69b9      	ldr	r1, [r7, #24]
 8003f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0203 	and.w	r2, r3, #3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80b4 	beq.w	80040ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <HAL_GPIO_Init+0x308>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	4a5e      	ldr	r2, [pc, #376]	; (80040d4 <HAL_GPIO_Init+0x308>)
 8003f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f60:	6453      	str	r3, [r2, #68]	; 0x44
 8003f62:	4b5c      	ldr	r3, [pc, #368]	; (80040d4 <HAL_GPIO_Init+0x308>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6e:	4a5a      	ldr	r2, [pc, #360]	; (80040d8 <HAL_GPIO_Init+0x30c>)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	3302      	adds	r3, #2
 8003f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a51      	ldr	r2, [pc, #324]	; (80040dc <HAL_GPIO_Init+0x310>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02b      	beq.n	8003ff2 <HAL_GPIO_Init+0x226>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a50      	ldr	r2, [pc, #320]	; (80040e0 <HAL_GPIO_Init+0x314>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d025      	beq.n	8003fee <HAL_GPIO_Init+0x222>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a4f      	ldr	r2, [pc, #316]	; (80040e4 <HAL_GPIO_Init+0x318>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01f      	beq.n	8003fea <HAL_GPIO_Init+0x21e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a4e      	ldr	r2, [pc, #312]	; (80040e8 <HAL_GPIO_Init+0x31c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d019      	beq.n	8003fe6 <HAL_GPIO_Init+0x21a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4d      	ldr	r2, [pc, #308]	; (80040ec <HAL_GPIO_Init+0x320>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_GPIO_Init+0x216>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4c      	ldr	r2, [pc, #304]	; (80040f0 <HAL_GPIO_Init+0x324>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00d      	beq.n	8003fde <HAL_GPIO_Init+0x212>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4b      	ldr	r2, [pc, #300]	; (80040f4 <HAL_GPIO_Init+0x328>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <HAL_GPIO_Init+0x20e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_GPIO_Init+0x32c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <HAL_GPIO_Init+0x20a>
 8003fd2:	2307      	movs	r3, #7
 8003fd4:	e00e      	b.n	8003ff4 <HAL_GPIO_Init+0x228>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	e00c      	b.n	8003ff4 <HAL_GPIO_Init+0x228>
 8003fda:	2306      	movs	r3, #6
 8003fdc:	e00a      	b.n	8003ff4 <HAL_GPIO_Init+0x228>
 8003fde:	2305      	movs	r3, #5
 8003fe0:	e008      	b.n	8003ff4 <HAL_GPIO_Init+0x228>
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	e006      	b.n	8003ff4 <HAL_GPIO_Init+0x228>
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e004      	b.n	8003ff4 <HAL_GPIO_Init+0x228>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e002      	b.n	8003ff4 <HAL_GPIO_Init+0x228>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <HAL_GPIO_Init+0x228>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	f002 0203 	and.w	r2, r2, #3
 8003ffa:	0092      	lsls	r2, r2, #2
 8003ffc:	4093      	lsls	r3, r2
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004004:	4934      	ldr	r1, [pc, #208]	; (80040d8 <HAL_GPIO_Init+0x30c>)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	3302      	adds	r3, #2
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004012:	4b3a      	ldr	r3, [pc, #232]	; (80040fc <HAL_GPIO_Init+0x330>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004036:	4a31      	ldr	r2, [pc, #196]	; (80040fc <HAL_GPIO_Init+0x330>)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800403c:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <HAL_GPIO_Init+0x330>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_GPIO_Init+0x330>)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004066:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_GPIO_Init+0x330>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800408a:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <HAL_GPIO_Init+0x330>)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_GPIO_Init+0x330>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040b4:	4a11      	ldr	r2, [pc, #68]	; (80040fc <HAL_GPIO_Init+0x330>)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3301      	adds	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b0f      	cmp	r3, #15
 80040c4:	f67f ae90 	bls.w	8003de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040c8:	bf00      	nop
 80040ca:	3724      	adds	r7, #36	; 0x24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40013800 	.word	0x40013800
 80040dc:	40020000 	.word	0x40020000
 80040e0:	40020400 	.word	0x40020400
 80040e4:	40020800 	.word	0x40020800
 80040e8:	40020c00 	.word	0x40020c00
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40021400 	.word	0x40021400
 80040f4:	40021800 	.word	0x40021800
 80040f8:	40021c00 	.word	0x40021c00
 80040fc:	40013c00 	.word	0x40013c00

08004100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
 800410c:	4613      	mov	r3, r2
 800410e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004110:	787b      	ldrb	r3, [r7, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800411c:	e003      	b.n	8004126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800411e:	887b      	ldrh	r3, [r7, #2]
 8004120:	041a      	lsls	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	619a      	str	r2, [r3, #24]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	887b      	ldrh	r3, [r7, #2]
 8004144:	401a      	ands	r2, r3
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	429a      	cmp	r2, r3
 800414a:	d104      	bne.n	8004156 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	041a      	lsls	r2, r3, #16
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004154:	e002      	b.n	800415c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e11f      	b.n	80043ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc fdce 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041cc:	f001 fbb6 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 80041d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4a7b      	ldr	r2, [pc, #492]	; (80043c4 <HAL_I2C_Init+0x25c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d807      	bhi.n	80041ec <HAL_I2C_Init+0x84>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a7a      	ldr	r2, [pc, #488]	; (80043c8 <HAL_I2C_Init+0x260>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bf94      	ite	ls
 80041e4:	2301      	movls	r3, #1
 80041e6:	2300      	movhi	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e006      	b.n	80041fa <HAL_I2C_Init+0x92>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a77      	ldr	r2, [pc, #476]	; (80043cc <HAL_I2C_Init+0x264>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	bf94      	ite	ls
 80041f4:	2301      	movls	r3, #1
 80041f6:	2300      	movhi	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0db      	b.n	80043ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a72      	ldr	r2, [pc, #456]	; (80043d0 <HAL_I2C_Init+0x268>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	0c9b      	lsrs	r3, r3, #18
 800420c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a64      	ldr	r2, [pc, #400]	; (80043c4 <HAL_I2C_Init+0x25c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d802      	bhi.n	800423c <HAL_I2C_Init+0xd4>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3301      	adds	r3, #1
 800423a:	e009      	b.n	8004250 <HAL_I2C_Init+0xe8>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004242:	fb02 f303 	mul.w	r3, r2, r3
 8004246:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <HAL_I2C_Init+0x26c>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	3301      	adds	r3, #1
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	430b      	orrs	r3, r1
 8004256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4956      	ldr	r1, [pc, #344]	; (80043c4 <HAL_I2C_Init+0x25c>)
 800426c:	428b      	cmp	r3, r1
 800426e:	d80d      	bhi.n	800428c <HAL_I2C_Init+0x124>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1e59      	subs	r1, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fbb1 f3f3 	udiv	r3, r1, r3
 800427e:	3301      	adds	r3, #1
 8004280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004284:	2b04      	cmp	r3, #4
 8004286:	bf38      	it	cc
 8004288:	2304      	movcc	r3, #4
 800428a:	e04f      	b.n	800432c <HAL_I2C_Init+0x1c4>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d111      	bne.n	80042b8 <HAL_I2C_Init+0x150>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1e58      	subs	r0, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	440b      	add	r3, r1
 80042a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e012      	b.n	80042de <HAL_I2C_Init+0x176>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1e58      	subs	r0, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6859      	ldr	r1, [r3, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	0099      	lsls	r1, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ce:	3301      	adds	r3, #1
 80042d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_I2C_Init+0x17e>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e022      	b.n	800432c <HAL_I2C_Init+0x1c4>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10e      	bne.n	800430c <HAL_I2C_Init+0x1a4>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1e58      	subs	r0, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	460b      	mov	r3, r1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	440b      	add	r3, r1
 80042fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004300:	3301      	adds	r3, #1
 8004302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430a:	e00f      	b.n	800432c <HAL_I2C_Init+0x1c4>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1e58      	subs	r0, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	0099      	lsls	r1, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004322:	3301      	adds	r3, #1
 8004324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	6809      	ldr	r1, [r1, #0]
 8004330:	4313      	orrs	r3, r2
 8004332:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800435a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6911      	ldr	r1, [r2, #16]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	4311      	orrs	r1, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	430b      	orrs	r3, r1
 800436e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	000186a0 	.word	0x000186a0
 80043c8:	001e847f 	.word	0x001e847f
 80043cc:	003d08ff 	.word	0x003d08ff
 80043d0:	431bde83 	.word	0x431bde83
 80043d4:	10624dd3 	.word	0x10624dd3

080043d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	817b      	strh	r3, [r7, #10]
 80043ea:	460b      	mov	r3, r1
 80043ec:	813b      	strh	r3, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043f2:	f7fd f91d 	bl	8001630 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b20      	cmp	r3, #32
 8004402:	f040 80d9 	bne.w	80045b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2319      	movs	r3, #25
 800440c:	2201      	movs	r2, #1
 800440e:	496d      	ldr	r1, [pc, #436]	; (80045c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fc7b 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
 800441e:	e0cc      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_I2C_Mem_Write+0x56>
 800442a:	2302      	movs	r3, #2
 800442c:	e0c5      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d007      	beq.n	8004454 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2221      	movs	r2, #33	; 0x21
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a3a      	ldr	r2, [r7, #32]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a4d      	ldr	r2, [pc, #308]	; (80045c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004496:	88f8      	ldrh	r0, [r7, #6]
 8004498:	893a      	ldrh	r2, [r7, #8]
 800449a:	8979      	ldrh	r1, [r7, #10]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4603      	mov	r3, r0
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fab6 	bl	8004a18 <I2C_RequestMemoryWrite>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d052      	beq.n	8004558 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e081      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fcfc 	bl	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d107      	bne.n	80044de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e06b      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	781a      	ldrb	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b04      	cmp	r3, #4
 800451e:	d11b      	bne.n	8004558 <HAL_I2C_Mem_Write+0x180>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d017      	beq.n	8004558 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1aa      	bne.n	80044b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fce8 	bl	8004f3a <I2C_WaitOnBTFFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00d      	beq.n	800458c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	2b04      	cmp	r3, #4
 8004576:	d107      	bne.n	8004588 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004586:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e016      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	00100002 	.word	0x00100002
 80045c8:	ffff0000 	.word	0xffff0000

080045cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08c      	sub	sp, #48	; 0x30
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	4608      	mov	r0, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	817b      	strh	r3, [r7, #10]
 80045de:	460b      	mov	r3, r1
 80045e0:	813b      	strh	r3, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045e6:	f7fd f823 	bl	8001630 <HAL_GetTick>
 80045ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	f040 8208 	bne.w	8004a0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2319      	movs	r3, #25
 8004600:	2201      	movs	r2, #1
 8004602:	497b      	ldr	r1, [pc, #492]	; (80047f0 <HAL_I2C_Mem_Read+0x224>)
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fb81 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
 8004612:	e1fb      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Mem_Read+0x56>
 800461e:	2302      	movs	r3, #2
 8004620:	e1f4      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d007      	beq.n	8004648 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2222      	movs	r2, #34	; 0x22
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a5b      	ldr	r2, [pc, #364]	; (80047f4 <HAL_I2C_Mem_Read+0x228>)
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468a:	88f8      	ldrh	r0, [r7, #6]
 800468c:	893a      	ldrh	r2, [r7, #8]
 800468e:	8979      	ldrh	r1, [r7, #10]
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	4603      	mov	r3, r0
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa50 	bl	8004b40 <I2C_RequestMemoryRead>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e1b0      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d113      	bne.n	80046da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b2:	2300      	movs	r3, #0
 80046b4:	623b      	str	r3, [r7, #32]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	623b      	str	r3, [r7, #32]
 80046c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e184      	b.n	80049e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d11b      	bne.n	800471a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e164      	b.n	80049e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	2b02      	cmp	r3, #2
 8004720:	d11b      	bne.n	800475a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004730:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004740:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	e144      	b.n	80049e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004770:	e138      	b.n	80049e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	2b03      	cmp	r3, #3
 8004778:	f200 80f1 	bhi.w	800495e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004780:	2b01      	cmp	r3, #1
 8004782:	d123      	bne.n	80047cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fc17 	bl	8004fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e139      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ca:	e10b      	b.n	80049e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d14e      	bne.n	8004872 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	2200      	movs	r2, #0
 80047dc:	4906      	ldr	r1, [pc, #24]	; (80047f8 <HAL_I2C_Mem_Read+0x22c>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fa94 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e10e      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
 80047ee:	bf00      	nop
 80047f0:	00100002 	.word	0x00100002
 80047f4:	ffff0000 	.word	0xffff0000
 80047f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004870:	e0b8      	b.n	80049e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2200      	movs	r2, #0
 800487a:	4966      	ldr	r1, [pc, #408]	; (8004a14 <HAL_I2C_Mem_Read+0x448>)
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fa45 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0bf      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2200      	movs	r2, #0
 80048d6:	494f      	ldr	r1, [pc, #316]	; (8004a14 <HAL_I2C_Mem_Read+0x448>)
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fa17 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e091      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800495c:	e042      	b.n	80049e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004960:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fb2a 	bl	8004fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e04c      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d118      	bne.n	80049e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f47f aec2 	bne.w	8004772 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
  }
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3728      	adds	r7, #40	; 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	00010004 	.word	0x00010004

08004a18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	817b      	strh	r3, [r7, #10]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	813b      	strh	r3, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f95c 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00c      	beq.n	8004a74 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e05f      	b.n	8004b34 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a74:	897b      	ldrh	r3, [r7, #10]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	492c      	ldr	r1, [pc, #176]	; (8004b3c <I2C_RequestMemoryWrite+0x124>)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f995 	bl	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e04c      	b.n	8004b34 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	6a39      	ldr	r1, [r7, #32]
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f9ff 	bl	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00d      	beq.n	8004adc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d107      	bne.n	8004ad8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e02b      	b.n	8004b34 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d105      	bne.n	8004aee <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae2:	893b      	ldrh	r3, [r7, #8]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]
 8004aec:	e021      	b.n	8004b32 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aee:	893b      	ldrh	r3, [r7, #8]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afe:	6a39      	ldr	r1, [r7, #32]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f9d9 	bl	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d107      	bne.n	8004b24 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e005      	b.n	8004b34 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b28:	893b      	ldrh	r3, [r7, #8]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	00010002 	.word	0x00010002

08004b40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	817b      	strh	r3, [r7, #10]
 8004b52:	460b      	mov	r3, r1
 8004b54:	813b      	strh	r3, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f8c0 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0a9      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bac:	897b      	ldrh	r3, [r7, #10]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	6a3a      	ldr	r2, [r7, #32]
 8004bc0:	4951      	ldr	r1, [pc, #324]	; (8004d08 <I2C_RequestMemoryRead+0x1c8>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f8f9 	bl	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e096      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	6a39      	ldr	r1, [r7, #32]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f963 	bl	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d107      	bne.n	8004c10 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e075      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d105      	bne.n	8004c26 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]
 8004c24:	e021      	b.n	8004c6a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c26:	893b      	ldrh	r3, [r7, #8]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c36:	6a39      	ldr	r1, [r7, #32]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f93d 	bl	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d107      	bne.n	8004c5c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e04f      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c60:	893b      	ldrh	r3, [r7, #8]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	6a39      	ldr	r1, [r7, #32]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f922 	bl	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00d      	beq.n	8004c96 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d107      	bne.n	8004c92 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e034      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f82a 	bl	8004d0c <I2C_WaitOnFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e013      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cd8:	897b      	ldrh	r3, [r7, #10]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	6a3a      	ldr	r2, [r7, #32]
 8004cec:	4906      	ldr	r1, [pc, #24]	; (8004d08 <I2C_RequestMemoryRead+0x1c8>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f863 	bl	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	00010002 	.word	0x00010002

08004d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1c:	e025      	b.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d021      	beq.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fc fc83 	bl	8001630 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d116      	bne.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e023      	b.n	8004db2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10d      	bne.n	8004d90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	e00c      	b.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d0b6      	beq.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc8:	e051      	b.n	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd8:	d123      	bne.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004df2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e046      	b.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d021      	beq.n	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7fc fc01 	bl	8001630 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f043 0220 	orr.w	r2, r3, #32
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e020      	b.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10c      	bne.n	8004e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4013      	ands	r3, r2
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bf14      	ite	ne
 8004e8a:	2301      	movne	r3, #1
 8004e8c:	2300      	moveq	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	e00b      	b.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	43da      	mvns	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf14      	ite	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	2300      	moveq	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d18d      	bne.n	8004dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ec4:	e02d      	b.n	8004f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f8ce 	bl	8005068 <I2C_IsAcknowledgeFailed>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e02d      	b.n	8004f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d021      	beq.n	8004f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ede:	f7fc fba7 	bl	8001630 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d302      	bcc.n	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d116      	bne.n	8004f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e007      	b.n	8004f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b80      	cmp	r3, #128	; 0x80
 8004f2e:	d1ca      	bne.n	8004ec6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f46:	e02d      	b.n	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f88d 	bl	8005068 <I2C_IsAcknowledgeFailed>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e02d      	b.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d021      	beq.n	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f60:	f7fc fb66 	bl	8001630 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d302      	bcc.n	8004f76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d116      	bne.n	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	f043 0220 	orr.w	r2, r3, #32
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e007      	b.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d1ca      	bne.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc8:	e042      	b.n	8005050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d119      	bne.n	800500c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0210 	mvn.w	r2, #16
 8004fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e029      	b.n	8005060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500c:	f7fc fb10 	bl	8001630 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d116      	bne.n	8005050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e007      	b.n	8005060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d1b5      	bne.n	8004fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507e:	d11b      	bne.n	80050b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005088:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	f043 0204 	orr.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e25b      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d075      	beq.n	80051d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050e6:	4ba3      	ldr	r3, [pc, #652]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d00c      	beq.n	800510c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f2:	4ba0      	ldr	r3, [pc, #640]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d112      	bne.n	8005124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050fe:	4b9d      	ldr	r3, [pc, #628]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800510a:	d10b      	bne.n	8005124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510c:	4b99      	ldr	r3, [pc, #612]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05b      	beq.n	80051d0 <HAL_RCC_OscConfig+0x108>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d157      	bne.n	80051d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e236      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512c:	d106      	bne.n	800513c <HAL_RCC_OscConfig+0x74>
 800512e:	4b91      	ldr	r3, [pc, #580]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a90      	ldr	r2, [pc, #576]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e01d      	b.n	8005178 <HAL_RCC_OscConfig+0xb0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005144:	d10c      	bne.n	8005160 <HAL_RCC_OscConfig+0x98>
 8005146:	4b8b      	ldr	r3, [pc, #556]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a8a      	ldr	r2, [pc, #552]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	4b88      	ldr	r3, [pc, #544]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a87      	ldr	r2, [pc, #540]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e00b      	b.n	8005178 <HAL_RCC_OscConfig+0xb0>
 8005160:	4b84      	ldr	r3, [pc, #528]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a83      	ldr	r2, [pc, #524]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	4b81      	ldr	r3, [pc, #516]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a80      	ldr	r2, [pc, #512]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d013      	beq.n	80051a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7fc fa56 	bl	8001630 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005188:	f7fc fa52 	bl	8001630 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e1fb      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	4b76      	ldr	r3, [pc, #472]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0xc0>
 80051a6:	e014      	b.n	80051d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fc fa42 	bl	8001630 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b0:	f7fc fa3e 	bl	8001630 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	; 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e1e7      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c2:	4b6c      	ldr	r3, [pc, #432]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0xe8>
 80051ce:	e000      	b.n	80051d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d063      	beq.n	80052a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051de:	4b65      	ldr	r3, [pc, #404]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ea:	4b62      	ldr	r3, [pc, #392]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d11c      	bne.n	8005230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f6:	4b5f      	ldr	r3, [pc, #380]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d116      	bne.n	8005230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	4b5c      	ldr	r3, [pc, #368]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_RCC_OscConfig+0x152>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e1bb      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521a:	4b56      	ldr	r3, [pc, #344]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4952      	ldr	r1, [pc, #328]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522e:	e03a      	b.n	80052a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005238:	4b4f      	ldr	r3, [pc, #316]	; (8005378 <HAL_RCC_OscConfig+0x2b0>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fc f9f7 	bl	8001630 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005246:	f7fc f9f3 	bl	8001630 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e19c      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005258:	4b46      	ldr	r3, [pc, #280]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4940      	ldr	r1, [pc, #256]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]
 8005278:	e015      	b.n	80052a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527a:	4b3f      	ldr	r3, [pc, #252]	; (8005378 <HAL_RCC_OscConfig+0x2b0>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fc f9d6 	bl	8001630 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005288:	f7fc f9d2 	bl	8001630 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e17b      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d030      	beq.n	8005314 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCC_OscConfig+0x2b4>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fc f9b6 	bl	8001630 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c8:	f7fc f9b2 	bl	8001630 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e15b      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052da:	4b26      	ldr	r3, [pc, #152]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 80052dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x200>
 80052e6:	e015      	b.n	8005314 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e8:	4b24      	ldr	r3, [pc, #144]	; (800537c <HAL_RCC_OscConfig+0x2b4>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ee:	f7fc f99f 	bl	8001630 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f6:	f7fc f99b 	bl	8001630 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e144      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800530a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80a0 	beq.w	8005462 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005326:	4b13      	ldr	r3, [pc, #76]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10f      	bne.n	8005352 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4a0e      	ldr	r2, [pc, #56]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005340:	6413      	str	r3, [r2, #64]	; 0x40
 8005342:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <HAL_RCC_OscConfig+0x2ac>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534e:	2301      	movs	r3, #1
 8005350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_OscConfig+0x2b8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d121      	bne.n	80053a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_RCC_OscConfig+0x2b8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a07      	ldr	r2, [pc, #28]	; (8005380 <HAL_RCC_OscConfig+0x2b8>)
 8005364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536a:	f7fc f961 	bl	8001630 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005370:	e011      	b.n	8005396 <HAL_RCC_OscConfig+0x2ce>
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	42470000 	.word	0x42470000
 800537c:	42470e80 	.word	0x42470e80
 8005380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005384:	f7fc f954 	bl	8001630 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e0fd      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005396:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x4d4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d106      	bne.n	80053b8 <HAL_RCC_OscConfig+0x2f0>
 80053aa:	4b7d      	ldr	r3, [pc, #500]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a7c      	ldr	r2, [pc, #496]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
 80053b6:	e01c      	b.n	80053f2 <HAL_RCC_OscConfig+0x32a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b05      	cmp	r3, #5
 80053be:	d10c      	bne.n	80053da <HAL_RCC_OscConfig+0x312>
 80053c0:	4b77      	ldr	r3, [pc, #476]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	4a76      	ldr	r2, [pc, #472]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053c6:	f043 0304 	orr.w	r3, r3, #4
 80053ca:	6713      	str	r3, [r2, #112]	; 0x70
 80053cc:	4b74      	ldr	r3, [pc, #464]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	4a73      	ldr	r2, [pc, #460]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	6713      	str	r3, [r2, #112]	; 0x70
 80053d8:	e00b      	b.n	80053f2 <HAL_RCC_OscConfig+0x32a>
 80053da:	4b71      	ldr	r3, [pc, #452]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	4a70      	ldr	r2, [pc, #448]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70
 80053e6:	4b6e      	ldr	r3, [pc, #440]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	4a6d      	ldr	r2, [pc, #436]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d015      	beq.n	8005426 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fa:	f7fc f919 	bl	8001630 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005400:	e00a      	b.n	8005418 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005402:	f7fc f915 	bl	8001630 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e0bc      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005418:	4b61      	ldr	r3, [pc, #388]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 800541a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ee      	beq.n	8005402 <HAL_RCC_OscConfig+0x33a>
 8005424:	e014      	b.n	8005450 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005426:	f7fc f903 	bl	8001630 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542c:	e00a      	b.n	8005444 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542e:	f7fc f8ff 	bl	8001630 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	4293      	cmp	r3, r2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e0a6      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005444:	4b56      	ldr	r3, [pc, #344]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ee      	bne.n	800542e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d105      	bne.n	8005462 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005456:	4b52      	ldr	r3, [pc, #328]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a51      	ldr	r2, [pc, #324]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 800545c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8092 	beq.w	8005590 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800546c:	4b4c      	ldr	r3, [pc, #304]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b08      	cmp	r3, #8
 8005476:	d05c      	beq.n	8005532 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d141      	bne.n	8005504 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005480:	4b48      	ldr	r3, [pc, #288]	; (80055a4 <HAL_RCC_OscConfig+0x4dc>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005486:	f7fc f8d3 	bl	8001630 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800548e:	f7fc f8cf 	bl	8001630 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e078      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a0:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f0      	bne.n	800548e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	019b      	lsls	r3, r3, #6
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	3b01      	subs	r3, #1
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	4933      	ldr	r1, [pc, #204]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d6:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <HAL_RCC_OscConfig+0x4dc>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fc f8a8 	bl	8001630 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fc f8a4 	bl	8001630 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e04d      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f6:	4b2a      	ldr	r3, [pc, #168]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x41c>
 8005502:	e045      	b.n	8005590 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005504:	4b27      	ldr	r3, [pc, #156]	; (80055a4 <HAL_RCC_OscConfig+0x4dc>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550a:	f7fc f891 	bl	8001630 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005512:	f7fc f88d 	bl	8001630 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e036      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005524:	4b1e      	ldr	r3, [pc, #120]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x44a>
 8005530:	e02e      	b.n	8005590 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e029      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800553e:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <HAL_RCC_OscConfig+0x4d8>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	429a      	cmp	r2, r3
 8005550:	d11c      	bne.n	800558c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d115      	bne.n	800558c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005566:	4013      	ands	r3, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800556c:	4293      	cmp	r3, r2
 800556e:	d10d      	bne.n	800558c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d106      	bne.n	800558c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40007000 	.word	0x40007000
 80055a0:	40023800 	.word	0x40023800
 80055a4:	42470060 	.word	0x42470060

080055a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0cc      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055bc:	4b68      	ldr	r3, [pc, #416]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d90c      	bls.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b65      	ldr	r3, [pc, #404]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b63      	ldr	r3, [pc, #396]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0b8      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055fc:	4b59      	ldr	r3, [pc, #356]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a58      	ldr	r2, [pc, #352]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005614:	4b53      	ldr	r3, [pc, #332]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a52      	ldr	r2, [pc, #328]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800561e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	4b50      	ldr	r3, [pc, #320]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	494d      	ldr	r1, [pc, #308]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d044      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005646:	4b47      	ldr	r3, [pc, #284]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d119      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e07f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d003      	beq.n	8005666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005662:	2b03      	cmp	r3, #3
 8005664:	d107      	bne.n	8005676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005666:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e06f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005676:	4b3b      	ldr	r3, [pc, #236]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e067      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005686:	4b37      	ldr	r3, [pc, #220]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4934      	ldr	r1, [pc, #208]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	4313      	orrs	r3, r2
 8005696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005698:	f7fb ffca 	bl	8001630 <HAL_GetTick>
 800569c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a0:	f7fb ffc6 	bl	8001630 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e04f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 020c 	and.w	r2, r3, #12
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1eb      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c8:	4b25      	ldr	r3, [pc, #148]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d20c      	bcs.n	80056f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b22      	ldr	r3, [pc, #136]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b20      	ldr	r3, [pc, #128]	; (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e032      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056fc:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4916      	ldr	r1, [pc, #88]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	490e      	ldr	r1, [pc, #56]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800572e:	f000 f821 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 8005732:	4601      	mov	r1, r0
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <HAL_RCC_ClockConfig+0x1c0>)
 8005740:	5cd3      	ldrb	r3, [r2, r3]
 8005742:	fa21 f303 	lsr.w	r3, r1, r3
 8005746:	4a09      	ldr	r2, [pc, #36]	; (800576c <HAL_RCC_ClockConfig+0x1c4>)
 8005748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <HAL_RCC_ClockConfig+0x1c8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fb fc10 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40023c00 	.word	0x40023c00
 8005764:	40023800 	.word	0x40023800
 8005768:	080188b0 	.word	0x080188b0
 800576c:	20000000 	.word	0x20000000
 8005770:	20000004 	.word	0x20000004

08005774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	2300      	movs	r3, #0
 8005784:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b04      	cmp	r3, #4
 8005794:	d007      	beq.n	80057a6 <HAL_RCC_GetSysClockFreq+0x32>
 8005796:	2b08      	cmp	r3, #8
 8005798:	d008      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x38>
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 80b4 	bne.w	8005908 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057a0:	4b5e      	ldr	r3, [pc, #376]	; (800591c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057a2:	60bb      	str	r3, [r7, #8]
       break;
 80057a4:	e0b3      	b.n	800590e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057a6:	4b5e      	ldr	r3, [pc, #376]	; (8005920 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80057a8:	60bb      	str	r3, [r7, #8]
      break;
 80057aa:	e0b0      	b.n	800590e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057ac:	4b5a      	ldr	r3, [pc, #360]	; (8005918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057b6:	4b58      	ldr	r3, [pc, #352]	; (8005918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d04a      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c2:	4b55      	ldr	r3, [pc, #340]	; (8005918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	ea03 0501 	and.w	r5, r3, r1
 80057d8:	ea04 0602 	and.w	r6, r4, r2
 80057dc:	4629      	mov	r1, r5
 80057de:	4632      	mov	r2, r6
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	f04f 0400 	mov.w	r4, #0
 80057e8:	0154      	lsls	r4, r2, #5
 80057ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057ee:	014b      	lsls	r3, r1, #5
 80057f0:	4619      	mov	r1, r3
 80057f2:	4622      	mov	r2, r4
 80057f4:	1b49      	subs	r1, r1, r5
 80057f6:	eb62 0206 	sbc.w	r2, r2, r6
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	f04f 0400 	mov.w	r4, #0
 8005802:	0194      	lsls	r4, r2, #6
 8005804:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005808:	018b      	lsls	r3, r1, #6
 800580a:	1a5b      	subs	r3, r3, r1
 800580c:	eb64 0402 	sbc.w	r4, r4, r2
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	00e2      	lsls	r2, r4, #3
 800581a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800581e:	00d9      	lsls	r1, r3, #3
 8005820:	460b      	mov	r3, r1
 8005822:	4614      	mov	r4, r2
 8005824:	195b      	adds	r3, r3, r5
 8005826:	eb44 0406 	adc.w	r4, r4, r6
 800582a:	f04f 0100 	mov.w	r1, #0
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	0262      	lsls	r2, r4, #9
 8005834:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005838:	0259      	lsls	r1, r3, #9
 800583a:	460b      	mov	r3, r1
 800583c:	4614      	mov	r4, r2
 800583e:	4618      	mov	r0, r3
 8005840:	4621      	mov	r1, r4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f04f 0400 	mov.w	r4, #0
 8005848:	461a      	mov	r2, r3
 800584a:	4623      	mov	r3, r4
 800584c:	f7fa fd18 	bl	8000280 <__aeabi_uldivmod>
 8005850:	4603      	mov	r3, r0
 8005852:	460c      	mov	r4, r1
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e049      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005858:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	099b      	lsrs	r3, r3, #6
 800585e:	f04f 0400 	mov.w	r4, #0
 8005862:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	ea03 0501 	and.w	r5, r3, r1
 800586e:	ea04 0602 	and.w	r6, r4, r2
 8005872:	4629      	mov	r1, r5
 8005874:	4632      	mov	r2, r6
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	f04f 0400 	mov.w	r4, #0
 800587e:	0154      	lsls	r4, r2, #5
 8005880:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005884:	014b      	lsls	r3, r1, #5
 8005886:	4619      	mov	r1, r3
 8005888:	4622      	mov	r2, r4
 800588a:	1b49      	subs	r1, r1, r5
 800588c:	eb62 0206 	sbc.w	r2, r2, r6
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f04f 0400 	mov.w	r4, #0
 8005898:	0194      	lsls	r4, r2, #6
 800589a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800589e:	018b      	lsls	r3, r1, #6
 80058a0:	1a5b      	subs	r3, r3, r1
 80058a2:	eb64 0402 	sbc.w	r4, r4, r2
 80058a6:	f04f 0100 	mov.w	r1, #0
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	00e2      	lsls	r2, r4, #3
 80058b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058b4:	00d9      	lsls	r1, r3, #3
 80058b6:	460b      	mov	r3, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	195b      	adds	r3, r3, r5
 80058bc:	eb44 0406 	adc.w	r4, r4, r6
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	02a2      	lsls	r2, r4, #10
 80058ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058ce:	0299      	lsls	r1, r3, #10
 80058d0:	460b      	mov	r3, r1
 80058d2:	4614      	mov	r4, r2
 80058d4:	4618      	mov	r0, r3
 80058d6:	4621      	mov	r1, r4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f04f 0400 	mov.w	r4, #0
 80058de:	461a      	mov	r2, r3
 80058e0:	4623      	mov	r3, r4
 80058e2:	f7fa fccd 	bl	8000280 <__aeabi_uldivmod>
 80058e6:	4603      	mov	r3, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	0c1b      	lsrs	r3, r3, #16
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	3301      	adds	r3, #1
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	60bb      	str	r3, [r7, #8]
      break;
 8005906:	e002      	b.n	800590e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800590a:	60bb      	str	r3, [r7, #8]
      break;
 800590c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800590e:	68bb      	ldr	r3, [r7, #8]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005918:	40023800 	.word	0x40023800
 800591c:	00f42400 	.word	0x00f42400
 8005920:	007a1200 	.word	0x007a1200

08005924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <HAL_RCC_GetHCLKFreq+0x14>)
 800592a:	681b      	ldr	r3, [r3, #0]
}
 800592c:	4618      	mov	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000000 	.word	0x20000000

0800593c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005940:	f7ff fff0 	bl	8005924 <HAL_RCC_GetHCLKFreq>
 8005944:	4601      	mov	r1, r0
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	0a9b      	lsrs	r3, r3, #10
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	4a03      	ldr	r2, [pc, #12]	; (8005960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005952:	5cd3      	ldrb	r3, [r2, r3]
 8005954:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40023800 	.word	0x40023800
 8005960:	080188c0 	.word	0x080188c0

08005964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005968:	f7ff ffdc 	bl	8005924 <HAL_RCC_GetHCLKFreq>
 800596c:	4601      	mov	r1, r0
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0b5b      	lsrs	r3, r3, #13
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4a03      	ldr	r2, [pc, #12]	; (8005988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800597a:	5cd3      	ldrb	r3, [r2, r3]
 800597c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40023800 	.word	0x40023800
 8005988:	080188c0 	.word	0x080188c0

0800598c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	220f      	movs	r2, #15
 800599a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800599c:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 0203 	and.w	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059a8:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <HAL_RCC_GetClockConfig+0x5c>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_RCC_GetClockConfig+0x5c>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059ce:	4b07      	ldr	r3, [pc, #28]	; (80059ec <HAL_RCC_GetClockConfig+0x60>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	601a      	str	r2, [r3, #0]
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40023c00 	.word	0x40023c00

080059f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e01d      	b.n	8005a3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f815 	bl	8005a46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f000 f968 	bl	8005d04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0201 	orr.w	r2, r2, #1
 8005a70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b06      	cmp	r3, #6
 8005a82:	d007      	beq.n	8005a94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d122      	bne.n	8005afe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d11b      	bne.n	8005afe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0202 	mvn.w	r2, #2
 8005ace:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8ee 	bl	8005cc6 <HAL_TIM_IC_CaptureCallback>
 8005aea:	e005      	b.n	8005af8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8e0 	bl	8005cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f8f1 	bl	8005cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d122      	bne.n	8005b52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d11b      	bne.n	8005b52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f06f 0204 	mvn.w	r2, #4
 8005b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f8c4 	bl	8005cc6 <HAL_TIM_IC_CaptureCallback>
 8005b3e:	e005      	b.n	8005b4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f8b6 	bl	8005cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f8c7 	bl	8005cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d122      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d11b      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f06f 0208 	mvn.w	r2, #8
 8005b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f89a 	bl	8005cc6 <HAL_TIM_IC_CaptureCallback>
 8005b92:	e005      	b.n	8005ba0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f88c 	bl	8005cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f89d 	bl	8005cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d122      	bne.n	8005bfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d11b      	bne.n	8005bfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f06f 0210 	mvn.w	r2, #16
 8005bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2208      	movs	r2, #8
 8005bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f870 	bl	8005cc6 <HAL_TIM_IC_CaptureCallback>
 8005be6:	e005      	b.n	8005bf4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f862 	bl	8005cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f873 	bl	8005cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d10e      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d107      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f06f 0201 	mvn.w	r2, #1
 8005c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fb f961 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	d10e      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d107      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f903 	bl	8005e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d10e      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d107      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f838 	bl	8005cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d10e      	bne.n	8005caa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d107      	bne.n	8005caa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0220 	mvn.w	r2, #32
 8005ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8cd 	bl	8005e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a40      	ldr	r2, [pc, #256]	; (8005e18 <TIM_Base_SetConfig+0x114>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d013      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d22:	d00f      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a3d      	ldr	r2, [pc, #244]	; (8005e1c <TIM_Base_SetConfig+0x118>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00b      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a3c      	ldr	r2, [pc, #240]	; (8005e20 <TIM_Base_SetConfig+0x11c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d007      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a3b      	ldr	r2, [pc, #236]	; (8005e24 <TIM_Base_SetConfig+0x120>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a3a      	ldr	r2, [pc, #232]	; (8005e28 <TIM_Base_SetConfig+0x124>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d108      	bne.n	8005d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a2f      	ldr	r2, [pc, #188]	; (8005e18 <TIM_Base_SetConfig+0x114>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d02b      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d64:	d027      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <TIM_Base_SetConfig+0x118>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d023      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a2b      	ldr	r2, [pc, #172]	; (8005e20 <TIM_Base_SetConfig+0x11c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01f      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a2a      	ldr	r2, [pc, #168]	; (8005e24 <TIM_Base_SetConfig+0x120>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01b      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a29      	ldr	r2, [pc, #164]	; (8005e28 <TIM_Base_SetConfig+0x124>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d017      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a28      	ldr	r2, [pc, #160]	; (8005e2c <TIM_Base_SetConfig+0x128>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a27      	ldr	r2, [pc, #156]	; (8005e30 <TIM_Base_SetConfig+0x12c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00f      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a26      	ldr	r2, [pc, #152]	; (8005e34 <TIM_Base_SetConfig+0x130>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00b      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a25      	ldr	r2, [pc, #148]	; (8005e38 <TIM_Base_SetConfig+0x134>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d007      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a24      	ldr	r2, [pc, #144]	; (8005e3c <TIM_Base_SetConfig+0x138>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a23      	ldr	r2, [pc, #140]	; (8005e40 <TIM_Base_SetConfig+0x13c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d108      	bne.n	8005dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <TIM_Base_SetConfig+0x114>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_Base_SetConfig+0xf8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a0c      	ldr	r2, [pc, #48]	; (8005e28 <TIM_Base_SetConfig+0x124>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d103      	bne.n	8005e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	615a      	str	r2, [r3, #20]
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40010000 	.word	0x40010000
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40000800 	.word	0x40000800
 8005e24:	40000c00 	.word	0x40000c00
 8005e28:	40010400 	.word	0x40010400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800
 8005e38:	40001800 	.word	0x40001800
 8005e3c:	40001c00 	.word	0x40001c00
 8005e40:	40002000 	.word	0x40002000

08005e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e03f      	b.n	8005efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fb fa78 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2224      	movs	r2, #36	; 0x24
 8005e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fcd3 	bl	800685c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b088      	sub	sp, #32
 8005f0a:	af02      	add	r7, sp, #8
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	f040 8083 	bne.w	800602e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_UART_Transmit+0x2e>
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e07b      	b.n	8006030 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit+0x40>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e074      	b.n	8006030 <HAL_UART_Transmit+0x12a>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2221      	movs	r2, #33	; 0x21
 8005f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f5c:	f7fb fb68 	bl	8001630 <HAL_GetTick>
 8005f60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005f76:	e042      	b.n	8005ffe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8e:	d122      	bne.n	8005fd6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2200      	movs	r2, #0
 8005f98:	2180      	movs	r1, #128	; 0x80
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fadc 	bl	8006558 <UART_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e042      	b.n	8006030 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3302      	adds	r3, #2
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	e017      	b.n	8005ffe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60bb      	str	r3, [r7, #8]
 8005fd4:	e013      	b.n	8005ffe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fab9 	bl	8006558 <UART_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e01f      	b.n	8006030 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	60ba      	str	r2, [r7, #8]
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1b7      	bne.n	8005f78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2200      	movs	r2, #0
 8006010:	2140      	movs	r1, #64	; 0x40
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 faa0 	bl	8006558 <UART_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e006      	b.n	8006030 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b20      	cmp	r3, #32
 8006050:	d166      	bne.n	8006120 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_UART_Receive_DMA+0x26>
 8006058:	88fb      	ldrh	r3, [r7, #6]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e05f      	b.n	8006122 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_UART_Receive_DMA+0x38>
 800606c:	2302      	movs	r3, #2
 800606e:	e058      	b.n	8006122 <HAL_UART_Receive_DMA+0xea>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2222      	movs	r2, #34	; 0x22
 800608e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	4a25      	ldr	r2, [pc, #148]	; (800612c <HAL_UART_Receive_DMA+0xf4>)
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609e:	4a24      	ldr	r2, [pc, #144]	; (8006130 <HAL_UART_Receive_DMA+0xf8>)
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	4a23      	ldr	r2, [pc, #140]	; (8006134 <HAL_UART_Receive_DMA+0xfc>)
 80060a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	2200      	movs	r2, #0
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80060b2:	f107 0308 	add.w	r3, r7, #8
 80060b6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4619      	mov	r1, r3
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	f7fc fb1b 	bl	8002704 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80060ce:	2300      	movs	r3, #0
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695a      	ldr	r2, [r3, #20]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	08006441 	.word	0x08006441
 8006130:	080064a9 	.word	0x080064a9
 8006134:	080064c5 	.word	0x080064c5

08006138 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b21      	cmp	r3, #33	; 0x21
 8006164:	d116      	bne.n	8006194 <HAL_UART_DMAStop+0x5c>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d013      	beq.n	8006194 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800617a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	4618      	mov	r0, r3
 800618a:	f7fc fb13 	bl	80027b4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa2c 	bl	80065ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	bf0c      	ite	eq
 80061a2:	2301      	moveq	r3, #1
 80061a4:	2300      	movne	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b22      	cmp	r3, #34	; 0x22
 80061b4:	d116      	bne.n	80061e4 <HAL_UART_DMAStop+0xac>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d013      	beq.n	80061e4 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ca:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fc faeb 	bl	80027b4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa1a 	bl	8006618 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10d      	bne.n	8006242 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_UART_IRQHandler+0x52>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa8c 	bl	8006758 <UART_Receive_IT>
      return;
 8006240:	e0d1      	b.n	80063e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80b0 	beq.w	80063aa <HAL_UART_IRQHandler+0x1ba>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d105      	bne.n	8006260 <HAL_UART_IRQHandler+0x70>
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 80a5 	beq.w	80063aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_UART_IRQHandler+0x90>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006278:	f043 0201 	orr.w	r2, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_UART_IRQHandler+0xb0>
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006298:	f043 0202 	orr.w	r2, r3, #2
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_UART_IRQHandler+0xd0>
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b8:	f043 0204 	orr.w	r2, r3, #4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00f      	beq.n	80062ea <HAL_UART_IRQHandler+0xfa>
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <HAL_UART_IRQHandler+0xee>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e2:	f043 0208 	orr.w	r2, r3, #8
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d078      	beq.n	80063e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <HAL_UART_IRQHandler+0x11c>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa26 	bl	8006758 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d102      	bne.n	8006334 <HAL_UART_IRQHandler+0x144>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d031      	beq.n	8006398 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f96f 	bl	8006618 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d123      	bne.n	8006390 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695a      	ldr	r2, [r3, #20]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006356:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	2b00      	cmp	r3, #0
 800635e:	d013      	beq.n	8006388 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	4a21      	ldr	r2, [pc, #132]	; (80063ec <HAL_UART_IRQHandler+0x1fc>)
 8006366:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636c:	4618      	mov	r0, r3
 800636e:	f7fc fa91 	bl	8002894 <HAL_DMA_Abort_IT>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d016      	beq.n	80063a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006382:	4610      	mov	r0, r2
 8006384:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006386:	e00e      	b.n	80063a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f84f 	bl	800642c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638e:	e00a      	b.n	80063a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f84b 	bl	800642c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006396:	e006      	b.n	80063a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f847 	bl	800642c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80063a4:	e01e      	b.n	80063e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a6:	bf00      	nop
    return;
 80063a8:	e01c      	b.n	80063e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <HAL_UART_IRQHandler+0x1d6>
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f95c 	bl	800667c <UART_Transmit_IT>
    return;
 80063c4:	e00f      	b.n	80063e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <HAL_UART_IRQHandler+0x1f6>
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f9a4 	bl	8006728 <UART_EndTransmit_IT>
    return;
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80063e4:	bf00      	nop
  }
}
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	08006655 	.word	0x08006655

080063f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d11e      	bne.n	800649a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006470:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695a      	ldr	r2, [r3, #20]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695a      	ldr	r2, [r3, #20]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006490:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff ffb2 	bl	8006404 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7ff ffae 	bl	8006418 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064bc:	bf00      	nop
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e0:	2b80      	cmp	r3, #128	; 0x80
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b21      	cmp	r3, #33	; 0x21
 80064f6:	d108      	bne.n	800650a <UART_DMAError+0x46>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2200      	movs	r2, #0
 8006502:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006504:	68b8      	ldr	r0, [r7, #8]
 8006506:	f000 f871 	bl	80065ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	bf0c      	ite	eq
 8006518:	2301      	moveq	r3, #1
 800651a:	2300      	movne	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b22      	cmp	r3, #34	; 0x22
 800652a:	d108      	bne.n	800653e <UART_DMAError+0x7a>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006538:	68b8      	ldr	r0, [r7, #8]
 800653a:	f000 f86d 	bl	8006618 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	f043 0210 	orr.w	r2, r3, #16
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800654a:	68b8      	ldr	r0, [r7, #8]
 800654c:	f7ff ff6e 	bl	800642c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4613      	mov	r3, r2
 8006566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006568:	e02c      	b.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006570:	d028      	beq.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <UART_WaitOnFlagUntilTimeout+0x30>
 8006578:	f7fb f85a 	bl	8001630 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	d21d      	bcs.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006596:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e00f      	b.n	80065e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4013      	ands	r3, r2
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	bf0c      	ite	eq
 80065d4:	2301      	moveq	r3, #1
 80065d6:	2300      	movne	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d0c3      	beq.n	800656a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006602:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800662e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0201 	bic.w	r2, r2, #1
 800663e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff fedc 	bl	800642c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b21      	cmp	r3, #33	; 0x21
 800668e:	d144      	bne.n	800671a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006698:	d11a      	bne.n	80066d0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	1c9a      	adds	r2, r3, #2
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	621a      	str	r2, [r3, #32]
 80066c2:	e00e      	b.n	80066e2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]
 80066ce:	e008      	b.n	80066e2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	1c59      	adds	r1, r3, #1
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6211      	str	r1, [r2, #32]
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	4619      	mov	r1, r3
 80066f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10f      	bne.n	8006716 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006704:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006714:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800673e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff fe51 	bl	80063f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b22      	cmp	r3, #34	; 0x22
 800676a:	d171      	bne.n	8006850 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006774:	d123      	bne.n	80067be <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10e      	bne.n	80067a2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	1c9a      	adds	r2, r3, #2
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	629a      	str	r2, [r3, #40]	; 0x28
 80067a0:	e029      	b.n	80067f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	629a      	str	r2, [r3, #40]	; 0x28
 80067bc:	e01b      	b.n	80067f6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6858      	ldr	r0, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6291      	str	r1, [r2, #40]	; 0x28
 80067d6:	b2c2      	uxtb	r2, r0
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e00c      	b.n	80067f6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	1c58      	adds	r0, r3, #1
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	6288      	str	r0, [r1, #40]	; 0x28
 80067ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29b      	uxth	r3, r3
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4619      	mov	r1, r3
 8006804:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006806:	2b00      	cmp	r3, #0
 8006808:	d120      	bne.n	800684c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0220 	bic.w	r2, r2, #32
 8006818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006828:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff fdde 	bl	8006404 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e002      	b.n	8006852 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	e000      	b.n	8006852 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
  }
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800689e:	f023 030c 	bic.w	r3, r3, #12
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	430b      	orrs	r3, r1
 80068aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ca:	f040 818b 	bne.w	8006be4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4ac1      	ldr	r2, [pc, #772]	; (8006bd8 <UART_SetConfig+0x37c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d005      	beq.n	80068e4 <UART_SetConfig+0x88>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4abf      	ldr	r2, [pc, #764]	; (8006bdc <UART_SetConfig+0x380>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	f040 80bd 	bne.w	8006a5e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068e4:	f7ff f83e 	bl	8005964 <HAL_RCC_GetPCLK2Freq>
 80068e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	461d      	mov	r5, r3
 80068ee:	f04f 0600 	mov.w	r6, #0
 80068f2:	46a8      	mov	r8, r5
 80068f4:	46b1      	mov	r9, r6
 80068f6:	eb18 0308 	adds.w	r3, r8, r8
 80068fa:	eb49 0409 	adc.w	r4, r9, r9
 80068fe:	4698      	mov	r8, r3
 8006900:	46a1      	mov	r9, r4
 8006902:	eb18 0805 	adds.w	r8, r8, r5
 8006906:	eb49 0906 	adc.w	r9, r9, r6
 800690a:	f04f 0100 	mov.w	r1, #0
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006916:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800691a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800691e:	4688      	mov	r8, r1
 8006920:	4691      	mov	r9, r2
 8006922:	eb18 0005 	adds.w	r0, r8, r5
 8006926:	eb49 0106 	adc.w	r1, r9, r6
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	461d      	mov	r5, r3
 8006930:	f04f 0600 	mov.w	r6, #0
 8006934:	196b      	adds	r3, r5, r5
 8006936:	eb46 0406 	adc.w	r4, r6, r6
 800693a:	461a      	mov	r2, r3
 800693c:	4623      	mov	r3, r4
 800693e:	f7f9 fc9f 	bl	8000280 <__aeabi_uldivmod>
 8006942:	4603      	mov	r3, r0
 8006944:	460c      	mov	r4, r1
 8006946:	461a      	mov	r2, r3
 8006948:	4ba5      	ldr	r3, [pc, #660]	; (8006be0 <UART_SetConfig+0x384>)
 800694a:	fba3 2302 	umull	r2, r3, r3, r2
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	461d      	mov	r5, r3
 8006958:	f04f 0600 	mov.w	r6, #0
 800695c:	46a9      	mov	r9, r5
 800695e:	46b2      	mov	sl, r6
 8006960:	eb19 0309 	adds.w	r3, r9, r9
 8006964:	eb4a 040a 	adc.w	r4, sl, sl
 8006968:	4699      	mov	r9, r3
 800696a:	46a2      	mov	sl, r4
 800696c:	eb19 0905 	adds.w	r9, r9, r5
 8006970:	eb4a 0a06 	adc.w	sl, sl, r6
 8006974:	f04f 0100 	mov.w	r1, #0
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006980:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006984:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006988:	4689      	mov	r9, r1
 800698a:	4692      	mov	sl, r2
 800698c:	eb19 0005 	adds.w	r0, r9, r5
 8006990:	eb4a 0106 	adc.w	r1, sl, r6
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	461d      	mov	r5, r3
 800699a:	f04f 0600 	mov.w	r6, #0
 800699e:	196b      	adds	r3, r5, r5
 80069a0:	eb46 0406 	adc.w	r4, r6, r6
 80069a4:	461a      	mov	r2, r3
 80069a6:	4623      	mov	r3, r4
 80069a8:	f7f9 fc6a 	bl	8000280 <__aeabi_uldivmod>
 80069ac:	4603      	mov	r3, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	461a      	mov	r2, r3
 80069b2:	4b8b      	ldr	r3, [pc, #556]	; (8006be0 <UART_SetConfig+0x384>)
 80069b4:	fba3 1302 	umull	r1, r3, r3, r2
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	2164      	movs	r1, #100	; 0x64
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	3332      	adds	r3, #50	; 0x32
 80069c6:	4a86      	ldr	r2, [pc, #536]	; (8006be0 <UART_SetConfig+0x384>)
 80069c8:	fba2 2303 	umull	r2, r3, r2, r3
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069d4:	4498      	add	r8, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	461d      	mov	r5, r3
 80069da:	f04f 0600 	mov.w	r6, #0
 80069de:	46a9      	mov	r9, r5
 80069e0:	46b2      	mov	sl, r6
 80069e2:	eb19 0309 	adds.w	r3, r9, r9
 80069e6:	eb4a 040a 	adc.w	r4, sl, sl
 80069ea:	4699      	mov	r9, r3
 80069ec:	46a2      	mov	sl, r4
 80069ee:	eb19 0905 	adds.w	r9, r9, r5
 80069f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80069f6:	f04f 0100 	mov.w	r1, #0
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	4692      	mov	sl, r2
 8006a0e:	eb19 0005 	adds.w	r0, r9, r5
 8006a12:	eb4a 0106 	adc.w	r1, sl, r6
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	461d      	mov	r5, r3
 8006a1c:	f04f 0600 	mov.w	r6, #0
 8006a20:	196b      	adds	r3, r5, r5
 8006a22:	eb46 0406 	adc.w	r4, r6, r6
 8006a26:	461a      	mov	r2, r3
 8006a28:	4623      	mov	r3, r4
 8006a2a:	f7f9 fc29 	bl	8000280 <__aeabi_uldivmod>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	460c      	mov	r4, r1
 8006a32:	461a      	mov	r2, r3
 8006a34:	4b6a      	ldr	r3, [pc, #424]	; (8006be0 <UART_SetConfig+0x384>)
 8006a36:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2164      	movs	r1, #100	; 0x64
 8006a3e:	fb01 f303 	mul.w	r3, r1, r3
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	3332      	adds	r3, #50	; 0x32
 8006a48:	4a65      	ldr	r2, [pc, #404]	; (8006be0 <UART_SetConfig+0x384>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	f003 0207 	and.w	r2, r3, #7
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4442      	add	r2, r8
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	e26f      	b.n	8006f3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a5e:	f7fe ff6d 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 8006a62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	461d      	mov	r5, r3
 8006a68:	f04f 0600 	mov.w	r6, #0
 8006a6c:	46a8      	mov	r8, r5
 8006a6e:	46b1      	mov	r9, r6
 8006a70:	eb18 0308 	adds.w	r3, r8, r8
 8006a74:	eb49 0409 	adc.w	r4, r9, r9
 8006a78:	4698      	mov	r8, r3
 8006a7a:	46a1      	mov	r9, r4
 8006a7c:	eb18 0805 	adds.w	r8, r8, r5
 8006a80:	eb49 0906 	adc.w	r9, r9, r6
 8006a84:	f04f 0100 	mov.w	r1, #0
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a98:	4688      	mov	r8, r1
 8006a9a:	4691      	mov	r9, r2
 8006a9c:	eb18 0005 	adds.w	r0, r8, r5
 8006aa0:	eb49 0106 	adc.w	r1, r9, r6
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	461d      	mov	r5, r3
 8006aaa:	f04f 0600 	mov.w	r6, #0
 8006aae:	196b      	adds	r3, r5, r5
 8006ab0:	eb46 0406 	adc.w	r4, r6, r6
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4623      	mov	r3, r4
 8006ab8:	f7f9 fbe2 	bl	8000280 <__aeabi_uldivmod>
 8006abc:	4603      	mov	r3, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4b47      	ldr	r3, [pc, #284]	; (8006be0 <UART_SetConfig+0x384>)
 8006ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac8:	095b      	lsrs	r3, r3, #5
 8006aca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	461d      	mov	r5, r3
 8006ad2:	f04f 0600 	mov.w	r6, #0
 8006ad6:	46a9      	mov	r9, r5
 8006ad8:	46b2      	mov	sl, r6
 8006ada:	eb19 0309 	adds.w	r3, r9, r9
 8006ade:	eb4a 040a 	adc.w	r4, sl, sl
 8006ae2:	4699      	mov	r9, r3
 8006ae4:	46a2      	mov	sl, r4
 8006ae6:	eb19 0905 	adds.w	r9, r9, r5
 8006aea:	eb4a 0a06 	adc.w	sl, sl, r6
 8006aee:	f04f 0100 	mov.w	r1, #0
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b02:	4689      	mov	r9, r1
 8006b04:	4692      	mov	sl, r2
 8006b06:	eb19 0005 	adds.w	r0, r9, r5
 8006b0a:	eb4a 0106 	adc.w	r1, sl, r6
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	461d      	mov	r5, r3
 8006b14:	f04f 0600 	mov.w	r6, #0
 8006b18:	196b      	adds	r3, r5, r5
 8006b1a:	eb46 0406 	adc.w	r4, r6, r6
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4623      	mov	r3, r4
 8006b22:	f7f9 fbad 	bl	8000280 <__aeabi_uldivmod>
 8006b26:	4603      	mov	r3, r0
 8006b28:	460c      	mov	r4, r1
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <UART_SetConfig+0x384>)
 8006b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	2164      	movs	r1, #100	; 0x64
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	3332      	adds	r3, #50	; 0x32
 8006b40:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <UART_SetConfig+0x384>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b4e:	4498      	add	r8, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	461d      	mov	r5, r3
 8006b54:	f04f 0600 	mov.w	r6, #0
 8006b58:	46a9      	mov	r9, r5
 8006b5a:	46b2      	mov	sl, r6
 8006b5c:	eb19 0309 	adds.w	r3, r9, r9
 8006b60:	eb4a 040a 	adc.w	r4, sl, sl
 8006b64:	4699      	mov	r9, r3
 8006b66:	46a2      	mov	sl, r4
 8006b68:	eb19 0905 	adds.w	r9, r9, r5
 8006b6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b70:	f04f 0100 	mov.w	r1, #0
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b84:	4689      	mov	r9, r1
 8006b86:	4692      	mov	sl, r2
 8006b88:	eb19 0005 	adds.w	r0, r9, r5
 8006b8c:	eb4a 0106 	adc.w	r1, sl, r6
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	461d      	mov	r5, r3
 8006b96:	f04f 0600 	mov.w	r6, #0
 8006b9a:	196b      	adds	r3, r5, r5
 8006b9c:	eb46 0406 	adc.w	r4, r6, r6
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4623      	mov	r3, r4
 8006ba4:	f7f9 fb6c 	bl	8000280 <__aeabi_uldivmod>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	461a      	mov	r2, r3
 8006bae:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <UART_SetConfig+0x384>)
 8006bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	2164      	movs	r1, #100	; 0x64
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	3332      	adds	r3, #50	; 0x32
 8006bc2:	4a07      	ldr	r2, [pc, #28]	; (8006be0 <UART_SetConfig+0x384>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	f003 0207 	and.w	r2, r3, #7
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4442      	add	r2, r8
 8006bd4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006bd6:	e1b2      	b.n	8006f3e <UART_SetConfig+0x6e2>
 8006bd8:	40011000 	.word	0x40011000
 8006bdc:	40011400 	.word	0x40011400
 8006be0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4ad7      	ldr	r2, [pc, #860]	; (8006f48 <UART_SetConfig+0x6ec>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d005      	beq.n	8006bfa <UART_SetConfig+0x39e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4ad6      	ldr	r2, [pc, #856]	; (8006f4c <UART_SetConfig+0x6f0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	f040 80d1 	bne.w	8006d9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bfa:	f7fe feb3 	bl	8005964 <HAL_RCC_GetPCLK2Freq>
 8006bfe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	469a      	mov	sl, r3
 8006c04:	f04f 0b00 	mov.w	fp, #0
 8006c08:	46d0      	mov	r8, sl
 8006c0a:	46d9      	mov	r9, fp
 8006c0c:	eb18 0308 	adds.w	r3, r8, r8
 8006c10:	eb49 0409 	adc.w	r4, r9, r9
 8006c14:	4698      	mov	r8, r3
 8006c16:	46a1      	mov	r9, r4
 8006c18:	eb18 080a 	adds.w	r8, r8, sl
 8006c1c:	eb49 090b 	adc.w	r9, r9, fp
 8006c20:	f04f 0100 	mov.w	r1, #0
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c34:	4688      	mov	r8, r1
 8006c36:	4691      	mov	r9, r2
 8006c38:	eb1a 0508 	adds.w	r5, sl, r8
 8006c3c:	eb4b 0609 	adc.w	r6, fp, r9
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4619      	mov	r1, r3
 8006c46:	f04f 0200 	mov.w	r2, #0
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	f04f 0400 	mov.w	r4, #0
 8006c52:	0094      	lsls	r4, r2, #2
 8006c54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c58:	008b      	lsls	r3, r1, #2
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	4631      	mov	r1, r6
 8006c62:	f7f9 fb0d 	bl	8000280 <__aeabi_uldivmod>
 8006c66:	4603      	mov	r3, r0
 8006c68:	460c      	mov	r4, r1
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4bb8      	ldr	r3, [pc, #736]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	469b      	mov	fp, r3
 8006c7c:	f04f 0c00 	mov.w	ip, #0
 8006c80:	46d9      	mov	r9, fp
 8006c82:	46e2      	mov	sl, ip
 8006c84:	eb19 0309 	adds.w	r3, r9, r9
 8006c88:	eb4a 040a 	adc.w	r4, sl, sl
 8006c8c:	4699      	mov	r9, r3
 8006c8e:	46a2      	mov	sl, r4
 8006c90:	eb19 090b 	adds.w	r9, r9, fp
 8006c94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c98:	f04f 0100 	mov.w	r1, #0
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cac:	4689      	mov	r9, r1
 8006cae:	4692      	mov	sl, r2
 8006cb0:	eb1b 0509 	adds.w	r5, fp, r9
 8006cb4:	eb4c 060a 	adc.w	r6, ip, sl
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	f04f 0400 	mov.w	r4, #0
 8006cca:	0094      	lsls	r4, r2, #2
 8006ccc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cd0:	008b      	lsls	r3, r1, #2
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4623      	mov	r3, r4
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	4631      	mov	r1, r6
 8006cda:	f7f9 fad1 	bl	8000280 <__aeabi_uldivmod>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4b9a      	ldr	r3, [pc, #616]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cea:	095b      	lsrs	r3, r3, #5
 8006cec:	2164      	movs	r1, #100	; 0x64
 8006cee:	fb01 f303 	mul.w	r3, r1, r3
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	3332      	adds	r3, #50	; 0x32
 8006cf8:	4a95      	ldr	r2, [pc, #596]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d04:	4498      	add	r8, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	469b      	mov	fp, r3
 8006d0a:	f04f 0c00 	mov.w	ip, #0
 8006d0e:	46d9      	mov	r9, fp
 8006d10:	46e2      	mov	sl, ip
 8006d12:	eb19 0309 	adds.w	r3, r9, r9
 8006d16:	eb4a 040a 	adc.w	r4, sl, sl
 8006d1a:	4699      	mov	r9, r3
 8006d1c:	46a2      	mov	sl, r4
 8006d1e:	eb19 090b 	adds.w	r9, r9, fp
 8006d22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d26:	f04f 0100 	mov.w	r1, #0
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d3a:	4689      	mov	r9, r1
 8006d3c:	4692      	mov	sl, r2
 8006d3e:	eb1b 0509 	adds.w	r5, fp, r9
 8006d42:	eb4c 060a 	adc.w	r6, ip, sl
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	f04f 0400 	mov.w	r4, #0
 8006d58:	0094      	lsls	r4, r2, #2
 8006d5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d5e:	008b      	lsls	r3, r1, #2
 8006d60:	461a      	mov	r2, r3
 8006d62:	4623      	mov	r3, r4
 8006d64:	4628      	mov	r0, r5
 8006d66:	4631      	mov	r1, r6
 8006d68:	f7f9 fa8a 	bl	8000280 <__aeabi_uldivmod>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	461a      	mov	r2, r3
 8006d72:	4b77      	ldr	r3, [pc, #476]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006d74:	fba3 1302 	umull	r1, r3, r3, r2
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	2164      	movs	r1, #100	; 0x64
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	3332      	adds	r3, #50	; 0x32
 8006d86:	4a72      	ldr	r2, [pc, #456]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006d88:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	f003 020f 	and.w	r2, r3, #15
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4442      	add	r2, r8
 8006d98:	609a      	str	r2, [r3, #8]
 8006d9a:	e0d0      	b.n	8006f3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d9c:	f7fe fdce 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 8006da0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	469a      	mov	sl, r3
 8006da6:	f04f 0b00 	mov.w	fp, #0
 8006daa:	46d0      	mov	r8, sl
 8006dac:	46d9      	mov	r9, fp
 8006dae:	eb18 0308 	adds.w	r3, r8, r8
 8006db2:	eb49 0409 	adc.w	r4, r9, r9
 8006db6:	4698      	mov	r8, r3
 8006db8:	46a1      	mov	r9, r4
 8006dba:	eb18 080a 	adds.w	r8, r8, sl
 8006dbe:	eb49 090b 	adc.w	r9, r9, fp
 8006dc2:	f04f 0100 	mov.w	r1, #0
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006dce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006dd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006dd6:	4688      	mov	r8, r1
 8006dd8:	4691      	mov	r9, r2
 8006dda:	eb1a 0508 	adds.w	r5, sl, r8
 8006dde:	eb4b 0609 	adc.w	r6, fp, r9
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	f04f 0400 	mov.w	r4, #0
 8006df4:	0094      	lsls	r4, r2, #2
 8006df6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006dfa:	008b      	lsls	r3, r1, #2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4623      	mov	r3, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	4631      	mov	r1, r6
 8006e04:	f7f9 fa3c 	bl	8000280 <__aeabi_uldivmod>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4b50      	ldr	r3, [pc, #320]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006e10:	fba3 2302 	umull	r2, r3, r3, r2
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	469b      	mov	fp, r3
 8006e1e:	f04f 0c00 	mov.w	ip, #0
 8006e22:	46d9      	mov	r9, fp
 8006e24:	46e2      	mov	sl, ip
 8006e26:	eb19 0309 	adds.w	r3, r9, r9
 8006e2a:	eb4a 040a 	adc.w	r4, sl, sl
 8006e2e:	4699      	mov	r9, r3
 8006e30:	46a2      	mov	sl, r4
 8006e32:	eb19 090b 	adds.w	r9, r9, fp
 8006e36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e3a:	f04f 0100 	mov.w	r1, #0
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e4e:	4689      	mov	r9, r1
 8006e50:	4692      	mov	sl, r2
 8006e52:	eb1b 0509 	adds.w	r5, fp, r9
 8006e56:	eb4c 060a 	adc.w	r6, ip, sl
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	f04f 0400 	mov.w	r4, #0
 8006e6c:	0094      	lsls	r4, r2, #2
 8006e6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e72:	008b      	lsls	r3, r1, #2
 8006e74:	461a      	mov	r2, r3
 8006e76:	4623      	mov	r3, r4
 8006e78:	4628      	mov	r0, r5
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	f7f9 fa00 	bl	8000280 <__aeabi_uldivmod>
 8006e80:	4603      	mov	r3, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	461a      	mov	r2, r3
 8006e86:	4b32      	ldr	r3, [pc, #200]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	; 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	3332      	adds	r3, #50	; 0x32
 8006e9a:	4a2d      	ldr	r2, [pc, #180]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea6:	4498      	add	r8, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	469b      	mov	fp, r3
 8006eac:	f04f 0c00 	mov.w	ip, #0
 8006eb0:	46d9      	mov	r9, fp
 8006eb2:	46e2      	mov	sl, ip
 8006eb4:	eb19 0309 	adds.w	r3, r9, r9
 8006eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8006ebc:	4699      	mov	r9, r3
 8006ebe:	46a2      	mov	sl, r4
 8006ec0:	eb19 090b 	adds.w	r9, r9, fp
 8006ec4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ec8:	f04f 0100 	mov.w	r1, #0
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006edc:	4689      	mov	r9, r1
 8006ede:	4692      	mov	sl, r2
 8006ee0:	eb1b 0509 	adds.w	r5, fp, r9
 8006ee4:	eb4c 060a 	adc.w	r6, ip, sl
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4619      	mov	r1, r3
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	f04f 0400 	mov.w	r4, #0
 8006efa:	0094      	lsls	r4, r2, #2
 8006efc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f00:	008b      	lsls	r3, r1, #2
 8006f02:	461a      	mov	r2, r3
 8006f04:	4623      	mov	r3, r4
 8006f06:	4628      	mov	r0, r5
 8006f08:	4631      	mov	r1, r6
 8006f0a:	f7f9 f9b9 	bl	8000280 <__aeabi_uldivmod>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	461a      	mov	r2, r3
 8006f14:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006f16:	fba3 1302 	umull	r1, r3, r3, r2
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	2164      	movs	r1, #100	; 0x64
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	3332      	adds	r3, #50	; 0x32
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <UART_SetConfig+0x6f4>)
 8006f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4442      	add	r2, r8
 8006f3a:	609a      	str	r2, [r3, #8]
}
 8006f3c:	e7ff      	b.n	8006f3e <UART_SetConfig+0x6e2>
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f48:	40011000 	.word	0x40011000
 8006f4c:	40011400 	.word	0x40011400
 8006f50:	51eb851f 	.word	0x51eb851f

08006f54 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006f5a:	4b8c      	ldr	r3, [pc, #560]	; (800718c <MX_LWIP_Init+0x238>)
 8006f5c:	22c0      	movs	r2, #192	; 0xc0
 8006f5e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006f60:	4b8a      	ldr	r3, [pc, #552]	; (800718c <MX_LWIP_Init+0x238>)
 8006f62:	22a8      	movs	r2, #168	; 0xa8
 8006f64:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006f66:	4b89      	ldr	r3, [pc, #548]	; (800718c <MX_LWIP_Init+0x238>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8006f6c:	4b87      	ldr	r3, [pc, #540]	; (800718c <MX_LWIP_Init+0x238>)
 8006f6e:	226f      	movs	r2, #111	; 0x6f
 8006f70:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006f72:	4b87      	ldr	r3, [pc, #540]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006f78:	4b85      	ldr	r3, [pc, #532]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006f7a:	22ff      	movs	r2, #255	; 0xff
 8006f7c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006f7e:	4b84      	ldr	r3, [pc, #528]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006f84:	4b82      	ldr	r3, [pc, #520]	; (8007190 <MX_LWIP_Init+0x23c>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006f8a:	4b82      	ldr	r3, [pc, #520]	; (8007194 <MX_LWIP_Init+0x240>)
 8006f8c:	22c0      	movs	r2, #192	; 0xc0
 8006f8e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006f90:	4b80      	ldr	r3, [pc, #512]	; (8007194 <MX_LWIP_Init+0x240>)
 8006f92:	22a8      	movs	r2, #168	; 0xa8
 8006f94:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006f96:	4b7f      	ldr	r3, [pc, #508]	; (8007194 <MX_LWIP_Init+0x240>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006f9c:	4b7d      	ldr	r3, [pc, #500]	; (8007194 <MX_LWIP_Init+0x240>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	f004 fdd5 	bl	800bb54 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006faa:	4b78      	ldr	r3, [pc, #480]	; (800718c <MX_LWIP_Init+0x238>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	061a      	lsls	r2, r3, #24
 8006fb0:	4b76      	ldr	r3, [pc, #472]	; (800718c <MX_LWIP_Init+0x238>)
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	4b74      	ldr	r3, [pc, #464]	; (800718c <MX_LWIP_Init+0x238>)
 8006fba:	789b      	ldrb	r3, [r3, #2]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	4a72      	ldr	r2, [pc, #456]	; (800718c <MX_LWIP_Init+0x238>)
 8006fc2:	78d2      	ldrb	r2, [r2, #3]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	061a      	lsls	r2, r3, #24
 8006fc8:	4b70      	ldr	r3, [pc, #448]	; (800718c <MX_LWIP_Init+0x238>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	0619      	lsls	r1, r3, #24
 8006fce:	4b6f      	ldr	r3, [pc, #444]	; (800718c <MX_LWIP_Init+0x238>)
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	041b      	lsls	r3, r3, #16
 8006fd4:	4319      	orrs	r1, r3
 8006fd6:	4b6d      	ldr	r3, [pc, #436]	; (800718c <MX_LWIP_Init+0x238>)
 8006fd8:	789b      	ldrb	r3, [r3, #2]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	496b      	ldr	r1, [pc, #428]	; (800718c <MX_LWIP_Init+0x238>)
 8006fe0:	78c9      	ldrb	r1, [r1, #3]
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fea:	431a      	orrs	r2, r3
 8006fec:	4b67      	ldr	r3, [pc, #412]	; (800718c <MX_LWIP_Init+0x238>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	0619      	lsls	r1, r3, #24
 8006ff2:	4b66      	ldr	r3, [pc, #408]	; (800718c <MX_LWIP_Init+0x238>)
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	4319      	orrs	r1, r3
 8006ffa:	4b64      	ldr	r3, [pc, #400]	; (800718c <MX_LWIP_Init+0x238>)
 8006ffc:	789b      	ldrb	r3, [r3, #2]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	430b      	orrs	r3, r1
 8007002:	4962      	ldr	r1, [pc, #392]	; (800718c <MX_LWIP_Init+0x238>)
 8007004:	78c9      	ldrb	r1, [r1, #3]
 8007006:	430b      	orrs	r3, r1
 8007008:	0a1b      	lsrs	r3, r3, #8
 800700a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800700e:	431a      	orrs	r2, r3
 8007010:	4b5e      	ldr	r3, [pc, #376]	; (800718c <MX_LWIP_Init+0x238>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	0619      	lsls	r1, r3, #24
 8007016:	4b5d      	ldr	r3, [pc, #372]	; (800718c <MX_LWIP_Init+0x238>)
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	4319      	orrs	r1, r3
 800701e:	4b5b      	ldr	r3, [pc, #364]	; (800718c <MX_LWIP_Init+0x238>)
 8007020:	789b      	ldrb	r3, [r3, #2]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	430b      	orrs	r3, r1
 8007026:	4959      	ldr	r1, [pc, #356]	; (800718c <MX_LWIP_Init+0x238>)
 8007028:	78c9      	ldrb	r1, [r1, #3]
 800702a:	430b      	orrs	r3, r1
 800702c:	0e1b      	lsrs	r3, r3, #24
 800702e:	4313      	orrs	r3, r2
 8007030:	4a59      	ldr	r2, [pc, #356]	; (8007198 <MX_LWIP_Init+0x244>)
 8007032:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007034:	4b56      	ldr	r3, [pc, #344]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	061a      	lsls	r2, r3, #24
 800703a:	4b55      	ldr	r3, [pc, #340]	; (8007190 <MX_LWIP_Init+0x23c>)
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	431a      	orrs	r2, r3
 8007042:	4b53      	ldr	r3, [pc, #332]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007044:	789b      	ldrb	r3, [r3, #2]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	4313      	orrs	r3, r2
 800704a:	4a51      	ldr	r2, [pc, #324]	; (8007190 <MX_LWIP_Init+0x23c>)
 800704c:	78d2      	ldrb	r2, [r2, #3]
 800704e:	4313      	orrs	r3, r2
 8007050:	061a      	lsls	r2, r3, #24
 8007052:	4b4f      	ldr	r3, [pc, #316]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	0619      	lsls	r1, r3, #24
 8007058:	4b4d      	ldr	r3, [pc, #308]	; (8007190 <MX_LWIP_Init+0x23c>)
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	041b      	lsls	r3, r3, #16
 800705e:	4319      	orrs	r1, r3
 8007060:	4b4b      	ldr	r3, [pc, #300]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007062:	789b      	ldrb	r3, [r3, #2]
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	430b      	orrs	r3, r1
 8007068:	4949      	ldr	r1, [pc, #292]	; (8007190 <MX_LWIP_Init+0x23c>)
 800706a:	78c9      	ldrb	r1, [r1, #3]
 800706c:	430b      	orrs	r3, r1
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007074:	431a      	orrs	r2, r3
 8007076:	4b46      	ldr	r3, [pc, #280]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	0619      	lsls	r1, r3, #24
 800707c:	4b44      	ldr	r3, [pc, #272]	; (8007190 <MX_LWIP_Init+0x23c>)
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	041b      	lsls	r3, r3, #16
 8007082:	4319      	orrs	r1, r3
 8007084:	4b42      	ldr	r3, [pc, #264]	; (8007190 <MX_LWIP_Init+0x23c>)
 8007086:	789b      	ldrb	r3, [r3, #2]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	430b      	orrs	r3, r1
 800708c:	4940      	ldr	r1, [pc, #256]	; (8007190 <MX_LWIP_Init+0x23c>)
 800708e:	78c9      	ldrb	r1, [r1, #3]
 8007090:	430b      	orrs	r3, r1
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007098:	431a      	orrs	r2, r3
 800709a:	4b3d      	ldr	r3, [pc, #244]	; (8007190 <MX_LWIP_Init+0x23c>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	0619      	lsls	r1, r3, #24
 80070a0:	4b3b      	ldr	r3, [pc, #236]	; (8007190 <MX_LWIP_Init+0x23c>)
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	4319      	orrs	r1, r3
 80070a8:	4b39      	ldr	r3, [pc, #228]	; (8007190 <MX_LWIP_Init+0x23c>)
 80070aa:	789b      	ldrb	r3, [r3, #2]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	430b      	orrs	r3, r1
 80070b0:	4937      	ldr	r1, [pc, #220]	; (8007190 <MX_LWIP_Init+0x23c>)
 80070b2:	78c9      	ldrb	r1, [r1, #3]
 80070b4:	430b      	orrs	r3, r1
 80070b6:	0e1b      	lsrs	r3, r3, #24
 80070b8:	4313      	orrs	r3, r2
 80070ba:	4a38      	ldr	r2, [pc, #224]	; (800719c <MX_LWIP_Init+0x248>)
 80070bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80070be:	4b35      	ldr	r3, [pc, #212]	; (8007194 <MX_LWIP_Init+0x240>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	061a      	lsls	r2, r3, #24
 80070c4:	4b33      	ldr	r3, [pc, #204]	; (8007194 <MX_LWIP_Init+0x240>)
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	431a      	orrs	r2, r3
 80070cc:	4b31      	ldr	r3, [pc, #196]	; (8007194 <MX_LWIP_Init+0x240>)
 80070ce:	789b      	ldrb	r3, [r3, #2]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	4313      	orrs	r3, r2
 80070d4:	4a2f      	ldr	r2, [pc, #188]	; (8007194 <MX_LWIP_Init+0x240>)
 80070d6:	78d2      	ldrb	r2, [r2, #3]
 80070d8:	4313      	orrs	r3, r2
 80070da:	061a      	lsls	r2, r3, #24
 80070dc:	4b2d      	ldr	r3, [pc, #180]	; (8007194 <MX_LWIP_Init+0x240>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	0619      	lsls	r1, r3, #24
 80070e2:	4b2c      	ldr	r3, [pc, #176]	; (8007194 <MX_LWIP_Init+0x240>)
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	041b      	lsls	r3, r3, #16
 80070e8:	4319      	orrs	r1, r3
 80070ea:	4b2a      	ldr	r3, [pc, #168]	; (8007194 <MX_LWIP_Init+0x240>)
 80070ec:	789b      	ldrb	r3, [r3, #2]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	430b      	orrs	r3, r1
 80070f2:	4928      	ldr	r1, [pc, #160]	; (8007194 <MX_LWIP_Init+0x240>)
 80070f4:	78c9      	ldrb	r1, [r1, #3]
 80070f6:	430b      	orrs	r3, r1
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070fe:	431a      	orrs	r2, r3
 8007100:	4b24      	ldr	r3, [pc, #144]	; (8007194 <MX_LWIP_Init+0x240>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	0619      	lsls	r1, r3, #24
 8007106:	4b23      	ldr	r3, [pc, #140]	; (8007194 <MX_LWIP_Init+0x240>)
 8007108:	785b      	ldrb	r3, [r3, #1]
 800710a:	041b      	lsls	r3, r3, #16
 800710c:	4319      	orrs	r1, r3
 800710e:	4b21      	ldr	r3, [pc, #132]	; (8007194 <MX_LWIP_Init+0x240>)
 8007110:	789b      	ldrb	r3, [r3, #2]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	430b      	orrs	r3, r1
 8007116:	491f      	ldr	r1, [pc, #124]	; (8007194 <MX_LWIP_Init+0x240>)
 8007118:	78c9      	ldrb	r1, [r1, #3]
 800711a:	430b      	orrs	r3, r1
 800711c:	0a1b      	lsrs	r3, r3, #8
 800711e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007122:	431a      	orrs	r2, r3
 8007124:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <MX_LWIP_Init+0x240>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	0619      	lsls	r1, r3, #24
 800712a:	4b1a      	ldr	r3, [pc, #104]	; (8007194 <MX_LWIP_Init+0x240>)
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	041b      	lsls	r3, r3, #16
 8007130:	4319      	orrs	r1, r3
 8007132:	4b18      	ldr	r3, [pc, #96]	; (8007194 <MX_LWIP_Init+0x240>)
 8007134:	789b      	ldrb	r3, [r3, #2]
 8007136:	021b      	lsls	r3, r3, #8
 8007138:	430b      	orrs	r3, r1
 800713a:	4916      	ldr	r1, [pc, #88]	; (8007194 <MX_LWIP_Init+0x240>)
 800713c:	78c9      	ldrb	r1, [r1, #3]
 800713e:	430b      	orrs	r3, r1
 8007140:	0e1b      	lsrs	r3, r3, #24
 8007142:	4313      	orrs	r3, r2
 8007144:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <MX_LWIP_Init+0x24c>)
 8007146:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007148:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <MX_LWIP_Init+0x250>)
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	4b16      	ldr	r3, [pc, #88]	; (80071a8 <MX_LWIP_Init+0x254>)
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	2300      	movs	r3, #0
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <MX_LWIP_Init+0x24c>)
 8007156:	4a11      	ldr	r2, [pc, #68]	; (800719c <MX_LWIP_Init+0x248>)
 8007158:	490f      	ldr	r1, [pc, #60]	; (8007198 <MX_LWIP_Init+0x244>)
 800715a:	4814      	ldr	r0, [pc, #80]	; (80071ac <MX_LWIP_Init+0x258>)
 800715c:	f005 f9b6 	bl	800c4cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007160:	4812      	ldr	r0, [pc, #72]	; (80071ac <MX_LWIP_Init+0x258>)
 8007162:	f005 fa93 	bl	800c68c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <MX_LWIP_Init+0x258>)
 8007168:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800716c:	089b      	lsrs	r3, r3, #2
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007178:	480c      	ldr	r0, [pc, #48]	; (80071ac <MX_LWIP_Init+0x258>)
 800717a:	f005 fa97 	bl	800c6ac <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800717e:	e002      	b.n	8007186 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8007180:	480a      	ldr	r0, [pc, #40]	; (80071ac <MX_LWIP_Init+0x258>)
 8007182:	f005 fad7 	bl	800c734 <netif_set_down>
}
 8007186:	bf00      	nop
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	2000718c 	.word	0x2000718c
 8007190:	20007188 	.word	0x20007188
 8007194:	20007150 	.word	0x20007150
 8007198:	20007184 	.word	0x20007184
 800719c:	20007190 	.word	0x20007190
 80071a0:	20007194 	.word	0x20007194
 80071a4:	0800bb11 	.word	0x0800bb11
 80071a8:	08007781 	.word	0x08007781
 80071ac:	20007154 	.word	0x20007154

080071b0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	; 0x38
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	605a      	str	r2, [r3, #4]
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a4a      	ldr	r2, [pc, #296]	; (80072f8 <HAL_ETH_MspInit+0x148>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	f040 808d 	bne.w	80072ee <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80071d4:	2300      	movs	r3, #0
 80071d6:	623b      	str	r3, [r7, #32]
 80071d8:	4b48      	ldr	r3, [pc, #288]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	4a47      	ldr	r2, [pc, #284]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 80071de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071e2:	6313      	str	r3, [r2, #48]	; 0x30
 80071e4:	4b45      	ldr	r3, [pc, #276]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ec:	623b      	str	r3, [r7, #32]
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	4b41      	ldr	r3, [pc, #260]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	4a40      	ldr	r2, [pc, #256]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 80071fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007200:	4b3e      	ldr	r3, [pc, #248]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	2300      	movs	r3, #0
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	4b3a      	ldr	r3, [pc, #232]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	4a39      	ldr	r2, [pc, #228]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 8007216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800721a:	6313      	str	r3, [r2, #48]	; 0x30
 800721c:	4b37      	ldr	r3, [pc, #220]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	4b33      	ldr	r3, [pc, #204]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	4a32      	ldr	r2, [pc, #200]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 8007232:	f043 0304 	orr.w	r3, r3, #4
 8007236:	6313      	str	r3, [r2, #48]	; 0x30
 8007238:	4b30      	ldr	r3, [pc, #192]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007244:	2300      	movs	r3, #0
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	4b2c      	ldr	r3, [pc, #176]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	4a2b      	ldr	r2, [pc, #172]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	6313      	str	r3, [r2, #48]	; 0x30
 8007254:	4b29      	ldr	r3, [pc, #164]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	4b25      	ldr	r3, [pc, #148]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 8007266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007268:	4a24      	ldr	r2, [pc, #144]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 800726a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800726e:	6313      	str	r3, [r2, #48]	; 0x30
 8007270:	4b22      	ldr	r3, [pc, #136]	; (80072fc <HAL_ETH_MspInit+0x14c>)
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800727c:	2332      	movs	r3, #50	; 0x32
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007280:	2302      	movs	r3, #2
 8007282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007284:	2300      	movs	r3, #0
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007288:	2303      	movs	r3, #3
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800728c:	230b      	movs	r3, #11
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007294:	4619      	mov	r1, r3
 8007296:	481a      	ldr	r0, [pc, #104]	; (8007300 <HAL_ETH_MspInit+0x150>)
 8007298:	f7fc fd98 	bl	8003dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800729c:	2386      	movs	r3, #134	; 0x86
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072a0:	2302      	movs	r3, #2
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072a8:	2303      	movs	r3, #3
 80072aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072ac:	230b      	movs	r3, #11
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072b4:	4619      	mov	r1, r3
 80072b6:	4813      	ldr	r0, [pc, #76]	; (8007304 <HAL_ETH_MspInit+0x154>)
 80072b8:	f7fc fd88 	bl	8003dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80072bc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072c2:	2302      	movs	r3, #2
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ca:	2303      	movs	r3, #3
 80072cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072ce:	230b      	movs	r3, #11
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80072d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d6:	4619      	mov	r1, r3
 80072d8:	480b      	ldr	r0, [pc, #44]	; (8007308 <HAL_ETH_MspInit+0x158>)
 80072da:	f7fc fd77 	bl	8003dcc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80072de:	2200      	movs	r2, #0
 80072e0:	2105      	movs	r1, #5
 80072e2:	203d      	movs	r0, #61	; 0x3d
 80072e4:	f7fb f931 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80072e8:	203d      	movs	r0, #61	; 0x3d
 80072ea:	f7fb f94a 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80072ee:	bf00      	nop
 80072f0:	3738      	adds	r7, #56	; 0x38
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	40028000 	.word	0x40028000
 80072fc:	40023800 	.word	0x40023800
 8007300:	40020800 	.word	0x40020800
 8007304:	40020000 	.word	0x40020000
 8007308:	40021800 	.word	0x40021800

0800730c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007314:	4b04      	ldr	r3, [pc, #16]	; (8007328 <HAL_ETH_RxCpltCallback+0x1c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f000 ff11 	bl	8008140 <osSemaphoreRelease>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000220 	.word	0x20000220

0800732c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800732c:	b580      	push	{r7, lr}
 800732e:	b08e      	sub	sp, #56	; 0x38
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  osThreadAttr_t attributes;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007334:	4b4d      	ldr	r3, [pc, #308]	; (800746c <low_level_init+0x140>)
 8007336:	4a4e      	ldr	r2, [pc, #312]	; (8007470 <low_level_init+0x144>)
 8007338:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800733a:	4b4c      	ldr	r3, [pc, #304]	; (800746c <low_level_init+0x140>)
 800733c:	2201      	movs	r2, #1
 800733e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8007340:	4b4a      	ldr	r3, [pc, #296]	; (800746c <low_level_init+0x140>)
 8007342:	2201      	movs	r2, #1
 8007344:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007346:	2300      	movs	r3, #0
 8007348:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800734a:	2380      	movs	r3, #128	; 0x80
 800734c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800734e:	23e1      	movs	r3, #225	; 0xe1
 8007350:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007352:	2300      	movs	r3, #0
 8007354:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007356:	2300      	movs	r3, #0
 8007358:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800735a:	2300      	movs	r3, #0
 800735c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800735e:	4a43      	ldr	r2, [pc, #268]	; (800746c <low_level_init+0x140>)
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8007366:	4b41      	ldr	r3, [pc, #260]	; (800746c <low_level_init+0x140>)
 8007368:	2201      	movs	r2, #1
 800736a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800736c:	4b3f      	ldr	r3, [pc, #252]	; (800746c <low_level_init+0x140>)
 800736e:	2200      	movs	r2, #0
 8007370:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007372:	4b3e      	ldr	r3, [pc, #248]	; (800746c <low_level_init+0x140>)
 8007374:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007378:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800737a:	483c      	ldr	r0, [pc, #240]	; (800746c <low_level_init+0x140>)
 800737c:	f7fb fd14 	bl	8002da8 <HAL_ETH_Init>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (hal_eth_init_status == HAL_OK)
 8007386:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800738a:	2b00      	cmp	r3, #0
 800738c:	d108      	bne.n	80073a0 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007394:	f043 0304 	orr.w	r3, r3, #4
 8007398:	b2da      	uxtb	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80073a0:	2304      	movs	r3, #4
 80073a2:	4a34      	ldr	r2, [pc, #208]	; (8007474 <low_level_init+0x148>)
 80073a4:	4934      	ldr	r1, [pc, #208]	; (8007478 <low_level_init+0x14c>)
 80073a6:	4831      	ldr	r0, [pc, #196]	; (800746c <low_level_init+0x140>)
 80073a8:	f7fb fe9c 	bl	80030e4 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80073ac:	2304      	movs	r3, #4
 80073ae:	4a33      	ldr	r2, [pc, #204]	; (800747c <low_level_init+0x150>)
 80073b0:	4933      	ldr	r1, [pc, #204]	; (8007480 <low_level_init+0x154>)
 80073b2:	482e      	ldr	r0, [pc, #184]	; (800746c <low_level_init+0x140>)
 80073b4:	f7fb feff 	bl	80031b6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2206      	movs	r2, #6
 80073bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80073c0:	4b2a      	ldr	r3, [pc, #168]	; (800746c <low_level_init+0x140>)
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	781a      	ldrb	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80073cc:	4b27      	ldr	r3, [pc, #156]	; (800746c <low_level_init+0x140>)
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	785a      	ldrb	r2, [r3, #1]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80073d8:	4b24      	ldr	r3, [pc, #144]	; (800746c <low_level_init+0x140>)
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	789a      	ldrb	r2, [r3, #2]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80073e4:	4b21      	ldr	r3, [pc, #132]	; (800746c <low_level_init+0x140>)
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	78da      	ldrb	r2, [r3, #3]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80073f0:	4b1e      	ldr	r3, [pc, #120]	; (800746c <low_level_init+0x140>)
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	791a      	ldrb	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80073fc:	4b1b      	ldr	r3, [pc, #108]	; (800746c <low_level_init+0x140>)
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	795a      	ldrb	r2, [r3, #5]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800740e:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007416:	f043 030a 	orr.w	r3, r3, #10
 800741a:	b2da      	uxtb	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8007422:	2200      	movs	r2, #0
 8007424:	2101      	movs	r1, #1
 8007426:	2001      	movs	r0, #1
 8007428:	f000 fd86 	bl	8007f38 <osSemaphoreNew>
 800742c:	4602      	mov	r2, r0
 800742e:	4b15      	ldr	r3, [pc, #84]	; (8007484 <low_level_init+0x158>)
 8007430:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007432:	f107 0310 	add.w	r3, r7, #16
 8007436:	2224      	movs	r2, #36	; 0x24
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f00e f900 	bl	8015640 <memset>
  attributes.name = "EthIf";
 8007440:	4b11      	ldr	r3, [pc, #68]	; (8007488 <low_level_init+0x15c>)
 8007442:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007444:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 800744a:	2330      	movs	r3, #48	; 0x30
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 800744e:	f107 0310 	add.w	r3, r7, #16
 8007452:	461a      	mov	r2, r3
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	480d      	ldr	r0, [pc, #52]	; (800748c <low_level_init+0x160>)
 8007458:	f000 fa58 	bl	800790c <osThreadNew>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800745c:	4803      	ldr	r0, [pc, #12]	; (800746c <low_level_init+0x140>)
 800745e:	f7fc f9d2 	bl	8003806 <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8007462:	bf00      	nop
 8007464:	3738      	adds	r7, #56	; 0x38
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20008a68 	.word	0x20008a68
 8007470:	40028000 	.word	0x40028000
 8007474:	20008ab0 	.word	0x20008ab0
 8007478:	20007198 	.word	0x20007198
 800747c:	20007218 	.word	0x20007218
 8007480:	200089e8 	.word	0x200089e8
 8007484:	20000220 	.word	0x20000220
 8007488:	08016a78 	.word	0x08016a78
 800748c:	08007731 	.word	0x08007731

08007490 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800749a:	4b4b      	ldr	r3, [pc, #300]	; (80075c8 <low_level_output+0x138>)
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80074b2:	4b45      	ldr	r3, [pc, #276]	; (80075c8 <low_level_output+0x138>)
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	623b      	str	r3, [r7, #32]
 80074c0:	e05a      	b.n	8007578 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	da03      	bge.n	80074d2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80074ca:	23f8      	movs	r3, #248	; 0xf8
 80074cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80074d0:	e05c      	b.n	800758c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	895b      	ldrh	r3, [r3, #10]
 80074d6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80074dc:	e02f      	b.n	800753e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	18d0      	adds	r0, r2, r3
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	18d1      	adds	r1, r2, r3
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80074f2:	3304      	adds	r3, #4
 80074f4:	461a      	mov	r2, r3
 80074f6:	f00e f898 	bl	801562a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	da03      	bge.n	8007510 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007508:	23f8      	movs	r3, #248	; 0xf8
 800750a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800750e:	e03d      	b.n	800758c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007520:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800752c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007538:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	4413      	add	r3, r2
 8007544:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007548:	4293      	cmp	r3, r2
 800754a:	d8c8      	bhi.n	80074de <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	18d0      	adds	r0, r2, r3
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	4413      	add	r3, r2
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4619      	mov	r1, r3
 800755e:	f00e f864 	bl	801562a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	623b      	str	r3, [r7, #32]
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1a1      	bne.n	80074c2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800757e:	6979      	ldr	r1, [r7, #20]
 8007580:	4811      	ldr	r0, [pc, #68]	; (80075c8 <low_level_output+0x138>)
 8007582:	f7fb fe85 	bl	8003290 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800758c:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <low_level_output+0x138>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007594:	3314      	adds	r3, #20
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0320 	and.w	r3, r3, #32
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00d      	beq.n	80075bc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80075a0:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <low_level_output+0x138>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a8:	3314      	adds	r3, #20
 80075aa:	2220      	movs	r2, #32
 80075ac:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80075ae:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <low_level_output+0x138>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b6:	3304      	adds	r3, #4
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80075bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3728      	adds	r7, #40	; 0x28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20008a68 	.word	0x20008a68

080075cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08c      	sub	sp, #48	; 0x30
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80075f0:	484e      	ldr	r0, [pc, #312]	; (800772c <low_level_input+0x160>)
 80075f2:	f7fb ff37 	bl	8003464 <HAL_ETH_GetReceivedFrame_IT>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <low_level_input+0x34>
    return NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e091      	b.n	8007724 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007600:	4b4a      	ldr	r3, [pc, #296]	; (800772c <low_level_input+0x160>)
 8007602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007604:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007606:	4b49      	ldr	r3, [pc, #292]	; (800772c <low_level_input+0x160>)
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800760c:	89fb      	ldrh	r3, [r7, #14]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d006      	beq.n	8007620 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007612:	89fb      	ldrh	r3, [r7, #14]
 8007614:	2203      	movs	r2, #3
 8007616:	4619      	mov	r1, r3
 8007618:	2004      	movs	r0, #4
 800761a:	f005 f8ad 	bl	800c778 <pbuf_alloc>
 800761e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d04b      	beq.n	80076be <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007626:	4b41      	ldr	r3, [pc, #260]	; (800772c <low_level_input+0x160>)
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007632:	62bb      	str	r3, [r7, #40]	; 0x28
 8007634:	e040      	b.n	80076b8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	895b      	ldrh	r3, [r3, #10]
 800763a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007640:	e021      	b.n	8007686 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	18d0      	adds	r0, r2, r3
 800764a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	18d1      	adds	r1, r2, r3
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007656:	3304      	adds	r3, #4
 8007658:	461a      	mov	r2, r3
 800765a:	f00d ffe6 	bl	801562a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	4413      	add	r3, r2
 8007670:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007674:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007680:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	4413      	add	r3, r2
 800768c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007690:	4293      	cmp	r3, r2
 8007692:	d8d6      	bhi.n	8007642 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	18d0      	adds	r0, r2, r3
 800769c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4619      	mov	r1, r3
 80076a6:	f00d ffc0 	bl	801562a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	4413      	add	r3, r2
 80076b0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1bb      	bne.n	8007636 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80076be:	4b1b      	ldr	r3, [pc, #108]	; (800772c <low_level_input+0x160>)
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	e00b      	b.n	80076e2 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	3301      	adds	r3, #1
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <low_level_input+0x160>)
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d3ee      	bcc.n	80076ca <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <low_level_input+0x160>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80076f2:	4b0e      	ldr	r3, [pc, #56]	; (800772c <low_level_input+0x160>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fa:	3314      	adds	r3, #20
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00d      	beq.n	8007722 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007706:	4b09      	ldr	r3, [pc, #36]	; (800772c <low_level_input+0x160>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770e:	3314      	adds	r3, #20
 8007710:	2280      	movs	r2, #128	; 0x80
 8007712:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <low_level_input+0x160>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771c:	3308      	adds	r3, #8
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007724:	4618      	mov	r0, r3
 8007726:	3730      	adds	r7, #48	; 0x30
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20008a68 	.word	0x20008a68

08007730 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800773c:	4b0f      	ldr	r3, [pc, #60]	; (800777c <ethernetif_input+0x4c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f04f 31ff 	mov.w	r1, #4294967295
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fc95 	bl	8008074 <osSemaphoreAcquire>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f5      	bne.n	800773c <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff ff3b 	bl	80075cc <low_level_input>
 8007756:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	68b8      	ldr	r0, [r7, #8]
 8007766:	4798      	blx	r3
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800776e:	68b8      	ldr	r0, [r7, #8]
 8007770:	f005 fb70 	bl	800ce54 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1ea      	bne.n	8007750 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800777a:	e7df      	b.n	800773c <ethernetif_input+0xc>
 800777c:	20000220 	.word	0x20000220

08007780 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <ethernetif_init+0x1c>
 800778e:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <ethernetif_init+0x48>)
 8007790:	f240 221b 	movw	r2, #539	; 0x21b
 8007794:	490d      	ldr	r1, [pc, #52]	; (80077cc <ethernetif_init+0x4c>)
 8007796:	480e      	ldr	r0, [pc, #56]	; (80077d0 <ethernetif_init+0x50>)
 8007798:	f00d ff5a 	bl	8015650 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2273      	movs	r2, #115	; 0x73
 80077a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2274      	movs	r2, #116	; 0x74
 80077a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <ethernetif_init+0x54>)
 80077b0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <ethernetif_init+0x58>)
 80077b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fdb7 	bl	800732c <low_level_init>

  return ERR_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	08016a80 	.word	0x08016a80
 80077cc:	08016a9c 	.word	0x08016a9c
 80077d0:	08016aac 	.word	0x08016aac
 80077d4:	08012051 	.word	0x08012051
 80077d8:	08007491 	.word	0x08007491

080077dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80077e0:	f7f9 ff26 	bl	8001630 <HAL_GetTick>
 80077e4:	4603      	mov	r3, r0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077f2:	f3ef 8305 	mrs	r3, IPSR
 80077f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80077f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10f      	bne.n	800781e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007802:	607b      	str	r3, [r7, #4]
  return(result);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <osKernelInitialize+0x32>
 800780a:	4b11      	ldr	r3, [pc, #68]	; (8007850 <osKernelInitialize+0x64>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d109      	bne.n	8007826 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007812:	f3ef 8311 	mrs	r3, BASEPRI
 8007816:	603b      	str	r3, [r7, #0]
  return(result);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800781e:	f06f 0305 	mvn.w	r3, #5
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e00c      	b.n	8007840 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <osKernelInitialize+0x64>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800782e:	4b08      	ldr	r3, [pc, #32]	; (8007850 <osKernelInitialize+0x64>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	e002      	b.n	8007840 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800783a:	f04f 33ff 	mov.w	r3, #4294967295
 800783e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000224 	.word	0x20000224

08007854 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800785a:	f3ef 8305 	mrs	r3, IPSR
 800785e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007860:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10f      	bne.n	8007886 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007866:	f3ef 8310 	mrs	r3, PRIMASK
 800786a:	607b      	str	r3, [r7, #4]
  return(result);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <osKernelStart+0x32>
 8007872:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <osKernelStart+0x64>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d109      	bne.n	800788e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800787a:	f3ef 8311 	mrs	r3, BASEPRI
 800787e:	603b      	str	r3, [r7, #0]
  return(result);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007886:	f06f 0305 	mvn.w	r3, #5
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	e00e      	b.n	80078ac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800788e:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <osKernelStart+0x64>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d107      	bne.n	80078a6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <osKernelStart+0x64>)
 8007898:	2202      	movs	r2, #2
 800789a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800789c:	f002 f964 	bl	8009b68 <vTaskStartScheduler>
      stat = osOK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e002      	b.n	80078ac <osKernelStart+0x58>
    } else {
      stat = osError;
 80078a6:	f04f 33ff 	mov.w	r3, #4294967295
 80078aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078ac:	68fb      	ldr	r3, [r7, #12]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000224 	.word	0x20000224

080078bc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c2:	f3ef 8305 	mrs	r3, IPSR
 80078c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80078c8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10f      	bne.n	80078ee <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ce:	f3ef 8310 	mrs	r3, PRIMASK
 80078d2:	607b      	str	r3, [r7, #4]
  return(result);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <osKernelGetTickCount+0x32>
 80078da:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <osKernelGetTickCount+0x4c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d109      	bne.n	80078f6 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078e2:	f3ef 8311 	mrs	r3, BASEPRI
 80078e6:	603b      	str	r3, [r7, #0]
  return(result);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80078ee:	f002 fa59 	bl	8009da4 <xTaskGetTickCountFromISR>
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	e002      	b.n	80078fc <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80078f6:	f002 fa45 	bl	8009d84 <xTaskGetTickCount>
 80078fa:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80078fc:	68fb      	ldr	r3, [r7, #12]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000224 	.word	0x20000224

0800790c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b092      	sub	sp, #72	; 0x48
 8007910:	af04      	add	r7, sp, #16
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800791c:	f3ef 8305 	mrs	r3, IPSR
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007924:	2b00      	cmp	r3, #0
 8007926:	f040 8094 	bne.w	8007a52 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792a:	f3ef 8310 	mrs	r3, PRIMASK
 800792e:	623b      	str	r3, [r7, #32]
  return(result);
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f040 808d 	bne.w	8007a52 <osThreadNew+0x146>
 8007938:	4b48      	ldr	r3, [pc, #288]	; (8007a5c <osThreadNew+0x150>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d106      	bne.n	800794e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007940:	f3ef 8311 	mrs	r3, BASEPRI
 8007944:	61fb      	str	r3, [r7, #28]
  return(result);
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b00      	cmp	r3, #0
 800794a:	f040 8082 	bne.w	8007a52 <osThreadNew+0x146>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d07e      	beq.n	8007a52 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007954:	2380      	movs	r3, #128	; 0x80
 8007956:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007958:	2318      	movs	r3, #24
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800795c:	2300      	movs	r3, #0
 800795e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007960:	f107 031b 	add.w	r3, r7, #27
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007966:	f04f 33ff 	mov.w	r3, #4294967295
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d045      	beq.n	80079fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <osThreadNew+0x74>
        name = attr->name;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <osThreadNew+0x9a>
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	2b38      	cmp	r3, #56	; 0x38
 8007998:	d805      	bhi.n	80079a6 <osThreadNew+0x9a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <osThreadNew+0x9e>
        return (NULL);
 80079a6:	2300      	movs	r3, #0
 80079a8:	e054      	b.n	8007a54 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	089b      	lsrs	r3, r3, #2
 80079b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <osThreadNew+0xd4>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	2b5b      	cmp	r3, #91	; 0x5b
 80079c8:	d90a      	bls.n	80079e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d006      	beq.n	80079e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <osThreadNew+0xd4>
        mem = 1;
 80079da:	2301      	movs	r3, #1
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079de:	e010      	b.n	8007a02 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10c      	bne.n	8007a02 <osThreadNew+0xf6>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d108      	bne.n	8007a02 <osThreadNew+0xf6>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <osThreadNew+0xf6>
          mem = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80079fc:	e001      	b.n	8007a02 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d110      	bne.n	8007a2a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a10:	9202      	str	r2, [sp, #8]
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f001 feda 	bl	80097d8 <xTaskCreateStatic>
 8007a24:	4603      	mov	r3, r0
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	e013      	b.n	8007a52 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d110      	bne.n	8007a52 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f107 0314 	add.w	r3, r7, #20
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f001 ff21 	bl	800988a <xTaskCreate>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d001      	beq.n	8007a52 <osThreadNew+0x146>
          hTask = NULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a52:	697b      	ldr	r3, [r7, #20]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3738      	adds	r7, #56	; 0x38
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20000224 	.word	0x20000224

08007a60 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08a      	sub	sp, #40	; 0x28
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <osThreadFlagsSet+0x1a>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da03      	bge.n	8007a82 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8007a7a:	f06f 0303 	mvn.w	r3, #3
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e046      	b.n	8007b10 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8007a82:	f04f 33ff 	mov.w	r3, #4294967295
 8007a86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a88:	f3ef 8305 	mrs	r3, IPSR
 8007a8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a8e:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10f      	bne.n	8007ab4 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a94:	f3ef 8310 	mrs	r3, PRIMASK
 8007a98:	617b      	str	r3, [r7, #20]
  return(result);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <osThreadFlagsSet+0x54>
 8007aa0:	4b1e      	ldr	r3, [pc, #120]	; (8007b1c <osThreadFlagsSet+0xbc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d126      	bne.n	8007af6 <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8007aac:	613b      	str	r3, [r7, #16]
  return(result);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d020      	beq.n	8007af6 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007ab8:	f107 0308 	add.w	r3, r7, #8
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	69f8      	ldr	r0, [r7, #28]
 8007ac6:	f002 ff3f 	bl	800a948 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007aca:	f107 020c 	add.w	r2, r7, #12
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	69f8      	ldr	r0, [r7, #28]
 8007ada:	f002 ff35 	bl	800a948 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d015      	beq.n	8007b10 <osThreadFlagsSet+0xb0>
 8007ae4:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <osThreadFlagsSet+0xc0>)
 8007ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	e00c      	b.n	8007b10 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007af6:	2300      	movs	r3, #0
 8007af8:	2201      	movs	r2, #1
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	69f8      	ldr	r0, [r7, #28]
 8007afe:	f002 fe81 	bl	800a804 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	2200      	movs	r2, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	69f8      	ldr	r0, [r7, #28]
 8007b0c:	f002 fe7a 	bl	800a804 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8007b10:	68fb      	ldr	r3, [r7, #12]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3720      	adds	r7, #32
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000224 	.word	0x20000224
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08e      	sub	sp, #56	; 0x38
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b30:	f3ef 8305 	mrs	r3, IPSR
 8007b34:	61fb      	str	r3, [r7, #28]
  return(result);
 8007b36:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10f      	bne.n	8007b5c <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b40:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <osThreadFlagsWait+0x38>
 8007b48:	4b3f      	ldr	r3, [pc, #252]	; (8007c48 <osThreadFlagsWait+0x124>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d109      	bne.n	8007b64 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b50:	f3ef 8311 	mrs	r3, BASEPRI
 8007b54:	617b      	str	r3, [r7, #20]
  return(result);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8007b5c:	f06f 0305 	mvn.w	r3, #5
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
 8007b62:	e06b      	b.n	8007c3c <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da03      	bge.n	8007b72 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8007b6a:	f06f 0303 	mvn.w	r3, #3
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b70:	e064      	b.n	8007c3c <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b80:	e001      	b.n	8007b86 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8007b8e:	f002 f8f9 	bl	8009d84 <xTaskGetTickCount>
 8007b92:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8007b94:	f107 0210 	add.w	r2, r7, #16
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f002 fdd7 	bl	800a750 <xTaskNotifyWait>
 8007ba2:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d137      	bne.n	8007c1a <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8007baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00c      	beq.n	8007bde <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	4013      	ands	r3, r2
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d032      	beq.n	8007c36 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10f      	bne.n	8007bf6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8007bd6:	f06f 0302 	mvn.w	r3, #2
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007bdc:	e02e      	b.n	8007c3c <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d128      	bne.n	8007c3a <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d103      	bne.n	8007bf6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8007bee:	f06f 0302 	mvn.w	r3, #2
 8007bf2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007bf4:	e022      	b.n	8007c3c <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007bf6:	f002 f8c5 	bl	8009d84 <xTaskGetTickCount>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8007c02:	6a3a      	ldr	r2, [r7, #32]
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d902      	bls.n	8007c10 <osThreadFlagsWait+0xec>
          tout  = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0e:	e00e      	b.n	8007c2e <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8007c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c18:	e009      	b.n	8007c2e <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d103      	bne.n	8007c28 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8007c20:	f06f 0302 	mvn.w	r3, #2
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
 8007c26:	e002      	b.n	8007c2e <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007c28:	f06f 0301 	mvn.w	r3, #1
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1af      	bne.n	8007b94 <osThreadFlagsWait+0x70>
 8007c34:	e002      	b.n	8007c3c <osThreadFlagsWait+0x118>
            break;
 8007c36:	bf00      	nop
 8007c38:	e000      	b.n	8007c3c <osThreadFlagsWait+0x118>
            break;
 8007c3a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3738      	adds	r7, #56	; 0x38
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000224 	.word	0x20000224

08007c4c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c54:	f3ef 8305 	mrs	r3, IPSR
 8007c58:	613b      	str	r3, [r7, #16]
  return(result);
 8007c5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10f      	bne.n	8007c80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c60:	f3ef 8310 	mrs	r3, PRIMASK
 8007c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d109      	bne.n	8007c80 <osDelay+0x34>
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <osDelay+0x58>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d109      	bne.n	8007c88 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c74:	f3ef 8311 	mrs	r3, BASEPRI
 8007c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <osDelay+0x3c>
    stat = osErrorISR;
 8007c80:	f06f 0305 	mvn.w	r3, #5
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e007      	b.n	8007c98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 ff34 	bl	8009b00 <vTaskDelay>
    }
  }

  return (stat);
 8007c98:	697b      	ldr	r3, [r7, #20]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000224 	.word	0x20000224

08007ca8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb4:	f3ef 8305 	mrs	r3, IPSR
 8007cb8:	613b      	str	r3, [r7, #16]
  return(result);
 8007cba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f040 8085 	bne.w	8007dcc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d17e      	bne.n	8007dcc <osMutexNew+0x124>
 8007cce:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <osMutexNew+0x130>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d105      	bne.n	8007ce2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8007cda:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d174      	bne.n	8007dcc <osMutexNew+0x124>
    if (attr != NULL) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	623b      	str	r3, [r7, #32]
 8007cee:	e001      	b.n	8007cf4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <osMutexNew+0x5c>
      rmtx = 1U;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	e001      	b.n	8007d08 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	f003 0308 	and.w	r3, r3, #8
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d15c      	bne.n	8007dcc <osMutexNew+0x124>
      mem = -1;
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295
 8007d16:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d015      	beq.n	8007d4a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d006      	beq.n	8007d34 <osMutexNew+0x8c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b4f      	cmp	r3, #79	; 0x4f
 8007d2c:	d902      	bls.n	8007d34 <osMutexNew+0x8c>
          mem = 1;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	61bb      	str	r3, [r7, #24]
 8007d32:	e00c      	b.n	8007d4e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d108      	bne.n	8007d4e <osMutexNew+0xa6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d104      	bne.n	8007d4e <osMutexNew+0xa6>
            mem = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	61bb      	str	r3, [r7, #24]
 8007d48:	e001      	b.n	8007d4e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d112      	bne.n	8007d7a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	2004      	movs	r0, #4
 8007d62:	f000 fe05 	bl	8008970 <xQueueCreateMutexStatic>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24
 8007d68:	e016      	b.n	8007d98 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	2001      	movs	r0, #1
 8007d72:	f000 fdfd 	bl	8008970 <xQueueCreateMutexStatic>
 8007d76:	6278      	str	r0, [r7, #36]	; 0x24
 8007d78:	e00e      	b.n	8007d98 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10b      	bne.n	8007d98 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007d86:	2004      	movs	r0, #4
 8007d88:	f000 fdda 	bl	8008940 <xQueueCreateMutex>
 8007d8c:	6278      	str	r0, [r7, #36]	; 0x24
 8007d8e:	e003      	b.n	8007d98 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007d90:	2001      	movs	r0, #1
 8007d92:	f000 fdd5 	bl	8008940 <xQueueCreateMutex>
 8007d96:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <osMutexNew+0x110>
        if (attr != NULL) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <osMutexNew+0x104>
          name = attr->name;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	e001      	b.n	8007db0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007db0:	6979      	ldr	r1, [r7, #20]
 8007db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007db4:	f001 fc8a 	bl	80096cc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d006      	beq.n	8007dcc <osMutexNew+0x124>
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3728      	adds	r7, #40	; 0x28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000224 	.word	0x20000224

08007ddc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dfa:	f3ef 8305 	mrs	r3, IPSR
 8007dfe:	613b      	str	r3, [r7, #16]
  return(result);
 8007e00:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10f      	bne.n	8007e26 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e06:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <osMutexAcquire+0x4a>
 8007e12:	4b20      	ldr	r3, [pc, #128]	; (8007e94 <osMutexAcquire+0xb8>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d109      	bne.n	8007e2e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007e26:	f06f 0305 	mvn.w	r3, #5
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	e02c      	b.n	8007e88 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007e34:	f06f 0303 	mvn.w	r3, #3
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	e025      	b.n	8007e88 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d011      	beq.n	8007e66 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	69b8      	ldr	r0, [r7, #24]
 8007e46:	f000 fde1 	bl	8008a0c <xQueueTakeMutexRecursive>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d01b      	beq.n	8007e88 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007e56:	f06f 0301 	mvn.w	r3, #1
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	e014      	b.n	8007e88 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007e5e:	f06f 0302 	mvn.w	r3, #2
 8007e62:	61fb      	str	r3, [r7, #28]
 8007e64:	e010      	b.n	8007e88 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	69b8      	ldr	r0, [r7, #24]
 8007e6a:	f001 f95f 	bl	800912c <xQueueSemaphoreTake>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d009      	beq.n	8007e88 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8007e7a:	f06f 0301 	mvn.w	r3, #1
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	e002      	b.n	8007e88 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007e82:	f06f 0302 	mvn.w	r3, #2
 8007e86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007e88:	69fb      	ldr	r3, [r7, #28]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000224 	.word	0x20000224

08007e98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb4:	f3ef 8305 	mrs	r3, IPSR
 8007eb8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eba:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10f      	bne.n	8007ee0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d109      	bne.n	8007ee0 <osMutexRelease+0x48>
 8007ecc:	4b19      	ldr	r3, [pc, #100]	; (8007f34 <osMutexRelease+0x9c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d109      	bne.n	8007ee8 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ed8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007ee0:	f06f 0305 	mvn.w	r3, #5
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	e01f      	b.n	8007f28 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007eee:	f06f 0303 	mvn.w	r3, #3
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e018      	b.n	8007f28 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007efc:	69b8      	ldr	r0, [r7, #24]
 8007efe:	f000 fd52 	bl	80089a6 <xQueueGiveMutexRecursive>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d00f      	beq.n	8007f28 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007f08:	f06f 0302 	mvn.w	r3, #2
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	e00b      	b.n	8007f28 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007f10:	2300      	movs	r3, #0
 8007f12:	2200      	movs	r2, #0
 8007f14:	2100      	movs	r1, #0
 8007f16:	69b8      	ldr	r0, [r7, #24]
 8007f18:	f000 fe14 	bl	8008b44 <xQueueGenericSend>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d002      	beq.n	8007f28 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007f22:	f06f 0302 	mvn.w	r3, #2
 8007f26:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007f28:	69fb      	ldr	r3, [r7, #28]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000224 	.word	0x20000224

08007f38 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08c      	sub	sp, #48	; 0x30
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f48:	f3ef 8305 	mrs	r3, IPSR
 8007f4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f4e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 8088 	bne.w	8008066 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f56:	f3ef 8310 	mrs	r3, PRIMASK
 8007f5a:	617b      	str	r3, [r7, #20]
  return(result);
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f040 8081 	bne.w	8008066 <osSemaphoreNew+0x12e>
 8007f64:	4b42      	ldr	r3, [pc, #264]	; (8008070 <osSemaphoreNew+0x138>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d105      	bne.n	8007f78 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f70:	613b      	str	r3, [r7, #16]
  return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d176      	bne.n	8008066 <osSemaphoreNew+0x12e>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d073      	beq.n	8008066 <osSemaphoreNew+0x12e>
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d86f      	bhi.n	8008066 <osSemaphoreNew+0x12e>
    mem = -1;
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d015      	beq.n	8007fbe <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <osSemaphoreNew+0x70>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	2b4f      	cmp	r3, #79	; 0x4f
 8007fa0:	d902      	bls.n	8007fa8 <osSemaphoreNew+0x70>
        mem = 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	623b      	str	r3, [r7, #32]
 8007fa6:	e00c      	b.n	8007fc2 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d108      	bne.n	8007fc2 <osSemaphoreNew+0x8a>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d104      	bne.n	8007fc2 <osSemaphoreNew+0x8a>
          mem = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	623b      	str	r3, [r7, #32]
 8007fbc:	e001      	b.n	8007fc2 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d04d      	beq.n	8008066 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d129      	bne.n	8008024 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d10b      	bne.n	8007fee <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	2303      	movs	r3, #3
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	f000 fbbf 	bl	8008768 <xQueueGenericCreateStatic>
 8007fea:	6278      	str	r0, [r7, #36]	; 0x24
 8007fec:	e005      	b.n	8007ffa <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007fee:	2203      	movs	r2, #3
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	f000 fc2a 	bl	800884c <xQueueGenericCreate>
 8007ff8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d022      	beq.n	8008046 <osSemaphoreNew+0x10e>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01f      	beq.n	8008046 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008006:	2300      	movs	r3, #0
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800800e:	f000 fd99 	bl	8008b44 <xQueueGenericSend>
 8008012:	4603      	mov	r3, r0
 8008014:	2b01      	cmp	r3, #1
 8008016:	d016      	beq.n	8008046 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8008018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800801a:	f001 fa0c 	bl	8009436 <vQueueDelete>
            hSemaphore = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
 8008022:	e010      	b.n	8008046 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d108      	bne.n	800803c <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	461a      	mov	r2, r3
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fd1f 	bl	8008a76 <xQueueCreateCountingSemaphoreStatic>
 8008038:	6278      	str	r0, [r7, #36]	; 0x24
 800803a:	e004      	b.n	8008046 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 fd4e 	bl	8008ae0 <xQueueCreateCountingSemaphore>
 8008044:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00c      	beq.n	8008066 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <osSemaphoreNew+0x122>
          name = attr->name;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	61fb      	str	r3, [r7, #28]
 8008058:	e001      	b.n	800805e <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800805e:	69f9      	ldr	r1, [r7, #28]
 8008060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008062:	f001 fb33 	bl	80096cc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008068:	4618      	mov	r0, r3
 800806a:	3728      	adds	r7, #40	; 0x28
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000224 	.word	0x20000224

08008074 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d103      	bne.n	8008094 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800808c:	f06f 0303 	mvn.w	r3, #3
 8008090:	61fb      	str	r3, [r7, #28]
 8008092:	e04b      	b.n	800812c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008094:	f3ef 8305 	mrs	r3, IPSR
 8008098:	617b      	str	r3, [r7, #20]
  return(result);
 800809a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10f      	bne.n	80080c0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080a0:	f3ef 8310 	mrs	r3, PRIMASK
 80080a4:	613b      	str	r3, [r7, #16]
  return(result);
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d109      	bne.n	80080c0 <osSemaphoreAcquire+0x4c>
 80080ac:	4b22      	ldr	r3, [pc, #136]	; (8008138 <osSemaphoreAcquire+0xc4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d128      	bne.n	8008106 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080b4:	f3ef 8311 	mrs	r3, BASEPRI
 80080b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d022      	beq.n	8008106 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80080c6:	f06f 0303 	mvn.w	r3, #3
 80080ca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80080cc:	e02d      	b.n	800812a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80080d2:	f107 0308 	add.w	r3, r7, #8
 80080d6:	461a      	mov	r2, r3
 80080d8:	2100      	movs	r1, #0
 80080da:	69b8      	ldr	r0, [r7, #24]
 80080dc:	f001 f92e 	bl	800933c <xQueueReceiveFromISR>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d003      	beq.n	80080ee <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80080e6:	f06f 0302 	mvn.w	r3, #2
 80080ea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80080ec:	e01d      	b.n	800812a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01a      	beq.n	800812a <osSemaphoreAcquire+0xb6>
 80080f4:	4b11      	ldr	r3, [pc, #68]	; (800813c <osSemaphoreAcquire+0xc8>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008104:	e011      	b.n	800812a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	69b8      	ldr	r0, [r7, #24]
 800810a:	f001 f80f 	bl	800912c <xQueueSemaphoreTake>
 800810e:	4603      	mov	r3, r0
 8008110:	2b01      	cmp	r3, #1
 8008112:	d00b      	beq.n	800812c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800811a:	f06f 0301 	mvn.w	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	e004      	b.n	800812c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008122:	f06f 0302 	mvn.w	r3, #2
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	e000      	b.n	800812c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800812a:	bf00      	nop
      }
    }
  }

  return (stat);
 800812c:	69fb      	ldr	r3, [r7, #28]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3720      	adds	r7, #32
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000224 	.word	0x20000224
 800813c:	e000ed04 	.word	0xe000ed04

08008140 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800814c:	2300      	movs	r3, #0
 800814e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008156:	f06f 0303 	mvn.w	r3, #3
 800815a:	61fb      	str	r3, [r7, #28]
 800815c:	e03e      	b.n	80081dc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800815e:	f3ef 8305 	mrs	r3, IPSR
 8008162:	617b      	str	r3, [r7, #20]
  return(result);
 8008164:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10f      	bne.n	800818a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800816a:	f3ef 8310 	mrs	r3, PRIMASK
 800816e:	613b      	str	r3, [r7, #16]
  return(result);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <osSemaphoreRelease+0x4a>
 8008176:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <osSemaphoreRelease+0xa8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d120      	bne.n	80081c0 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800817e:	f3ef 8311 	mrs	r3, BASEPRI
 8008182:	60fb      	str	r3, [r7, #12]
  return(result);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d01a      	beq.n	80081c0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800818e:	f107 0308 	add.w	r3, r7, #8
 8008192:	4619      	mov	r1, r3
 8008194:	69b8      	ldr	r0, [r7, #24]
 8008196:	f000 fe63 	bl	8008e60 <xQueueGiveFromISR>
 800819a:	4603      	mov	r3, r0
 800819c:	2b01      	cmp	r3, #1
 800819e:	d003      	beq.n	80081a8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80081a0:	f06f 0302 	mvn.w	r3, #2
 80081a4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081a6:	e018      	b.n	80081da <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <osSemaphoreRelease+0x9a>
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <osSemaphoreRelease+0xac>)
 80081b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081be:	e00c      	b.n	80081da <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081c0:	2300      	movs	r3, #0
 80081c2:	2200      	movs	r2, #0
 80081c4:	2100      	movs	r1, #0
 80081c6:	69b8      	ldr	r0, [r7, #24]
 80081c8:	f000 fcbc 	bl	8008b44 <xQueueGenericSend>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d004      	beq.n	80081dc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80081d2:	f06f 0302 	mvn.w	r3, #2
 80081d6:	61fb      	str	r3, [r7, #28]
 80081d8:	e000      	b.n	80081dc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081da:	bf00      	nop
    }
  }

  return (stat);
 80081dc:	69fb      	ldr	r3, [r7, #28]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3720      	adds	r7, #32
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20000224 	.word	0x20000224
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08c      	sub	sp, #48	; 0x30
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008200:	f3ef 8305 	mrs	r3, IPSR
 8008204:	61bb      	str	r3, [r7, #24]
  return(result);
 8008206:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008208:	2b00      	cmp	r3, #0
 800820a:	d170      	bne.n	80082ee <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800820c:	f3ef 8310 	mrs	r3, PRIMASK
 8008210:	617b      	str	r3, [r7, #20]
  return(result);
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d16a      	bne.n	80082ee <osMessageQueueNew+0xfe>
 8008218:	4b37      	ldr	r3, [pc, #220]	; (80082f8 <osMessageQueueNew+0x108>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d105      	bne.n	800822c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008220:	f3ef 8311 	mrs	r3, BASEPRI
 8008224:	613b      	str	r3, [r7, #16]
  return(result);
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d160      	bne.n	80082ee <osMessageQueueNew+0xfe>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d05d      	beq.n	80082ee <osMessageQueueNew+0xfe>
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d05a      	beq.n	80082ee <osMessageQueueNew+0xfe>
    mem = -1;
 8008238:	f04f 33ff 	mov.w	r3, #4294967295
 800823c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d029      	beq.n	8008298 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d012      	beq.n	8008272 <osMessageQueueNew+0x82>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2b4f      	cmp	r3, #79	; 0x4f
 8008252:	d90e      	bls.n	8008272 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	fb01 f303 	mul.w	r3, r1, r3
 8008268:	429a      	cmp	r2, r3
 800826a:	d302      	bcc.n	8008272 <osMessageQueueNew+0x82>
        mem = 1;
 800826c:	2301      	movs	r3, #1
 800826e:	623b      	str	r3, [r7, #32]
 8008270:	e014      	b.n	800829c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d110      	bne.n	800829c <osMessageQueueNew+0xac>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10c      	bne.n	800829c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008286:	2b00      	cmp	r3, #0
 8008288:	d108      	bne.n	800829c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d104      	bne.n	800829c <osMessageQueueNew+0xac>
          mem = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	623b      	str	r3, [r7, #32]
 8008296:	e001      	b.n	800829c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10c      	bne.n	80082bc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691a      	ldr	r2, [r3, #16]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6899      	ldr	r1, [r3, #8]
 80082aa:	2300      	movs	r3, #0
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	460b      	mov	r3, r1
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fa58 	bl	8008768 <xQueueGenericCreateStatic>
 80082b8:	6278      	str	r0, [r7, #36]	; 0x24
 80082ba:	e008      	b.n	80082ce <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d105      	bne.n	80082ce <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80082c2:	2200      	movs	r2, #0
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fac0 	bl	800884c <xQueueGenericCreate>
 80082cc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00c      	beq.n	80082ee <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	e001      	b.n	80082e6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80082e6:	69f9      	ldr	r1, [r7, #28]
 80082e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ea:	f001 f9ef 	bl	80096cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3728      	adds	r7, #40	; 0x28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000224 	.word	0x20000224

080082fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08a      	sub	sp, #40	; 0x28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	4613      	mov	r3, r2
 800830a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008310:	2300      	movs	r3, #0
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008314:	f3ef 8305 	mrs	r3, IPSR
 8008318:	61fb      	str	r3, [r7, #28]
  return(result);
 800831a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10f      	bne.n	8008340 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008320:	f3ef 8310 	mrs	r3, PRIMASK
 8008324:	61bb      	str	r3, [r7, #24]
  return(result);
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d109      	bne.n	8008340 <osMessageQueuePut+0x44>
 800832c:	4b2b      	ldr	r3, [pc, #172]	; (80083dc <osMessageQueuePut+0xe0>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d12e      	bne.n	8008392 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008334:	f3ef 8311 	mrs	r3, BASEPRI
 8008338:	617b      	str	r3, [r7, #20]
  return(result);
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d028      	beq.n	8008392 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <osMessageQueuePut+0x56>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <osMessageQueuePut+0x56>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008352:	f06f 0303 	mvn.w	r3, #3
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008358:	e039      	b.n	80083ce <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800835e:	f107 0210 	add.w	r2, r7, #16
 8008362:	2300      	movs	r3, #0
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	6a38      	ldr	r0, [r7, #32]
 8008368:	f000 fce6 	bl	8008d38 <xQueueGenericSendFromISR>
 800836c:	4603      	mov	r3, r0
 800836e:	2b01      	cmp	r3, #1
 8008370:	d003      	beq.n	800837a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008372:	f06f 0302 	mvn.w	r3, #2
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008378:	e029      	b.n	80083ce <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d026      	beq.n	80083ce <osMessageQueuePut+0xd2>
 8008380:	4b17      	ldr	r3, [pc, #92]	; (80083e0 <osMessageQueuePut+0xe4>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008390:	e01d      	b.n	80083ce <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <osMessageQueuePut+0xa2>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800839e:	f06f 0303 	mvn.w	r3, #3
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
 80083a4:	e014      	b.n	80083d0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80083a6:	2300      	movs	r3, #0
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	68b9      	ldr	r1, [r7, #8]
 80083ac:	6a38      	ldr	r0, [r7, #32]
 80083ae:	f000 fbc9 	bl	8008b44 <xQueueGenericSend>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d00b      	beq.n	80083d0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80083be:	f06f 0301 	mvn.w	r3, #1
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
 80083c4:	e004      	b.n	80083d0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80083c6:	f06f 0302 	mvn.w	r3, #2
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
 80083cc:	e000      	b.n	80083d0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083ce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3728      	adds	r7, #40	; 0x28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000224 	.word	0x20000224
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	; 0x28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fa:	f3ef 8305 	mrs	r3, IPSR
 80083fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8008400:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10f      	bne.n	8008426 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008406:	f3ef 8310 	mrs	r3, PRIMASK
 800840a:	61bb      	str	r3, [r7, #24]
  return(result);
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <osMessageQueueGet+0x42>
 8008412:	4b2b      	ldr	r3, [pc, #172]	; (80084c0 <osMessageQueueGet+0xdc>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d12e      	bne.n	8008478 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800841a:	f3ef 8311 	mrs	r3, BASEPRI
 800841e:	617b      	str	r3, [r7, #20]
  return(result);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d028      	beq.n	8008478 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <osMessageQueueGet+0x54>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <osMessageQueueGet+0x54>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008438:	f06f 0303 	mvn.w	r3, #3
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800843e:	e038      	b.n	80084b2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008440:	2300      	movs	r3, #0
 8008442:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008444:	f107 0310 	add.w	r3, r7, #16
 8008448:	461a      	mov	r2, r3
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	6a38      	ldr	r0, [r7, #32]
 800844e:	f000 ff75 	bl	800933c <xQueueReceiveFromISR>
 8008452:	4603      	mov	r3, r0
 8008454:	2b01      	cmp	r3, #1
 8008456:	d003      	beq.n	8008460 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008458:	f06f 0302 	mvn.w	r3, #2
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800845e:	e028      	b.n	80084b2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d025      	beq.n	80084b2 <osMessageQueueGet+0xce>
 8008466:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <osMessageQueueGet+0xe0>)
 8008468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008476:	e01c      	b.n	80084b2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <osMessageQueueGet+0xa0>
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d103      	bne.n	800848c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008484:	f06f 0303 	mvn.w	r3, #3
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
 800848a:	e013      	b.n	80084b4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	6a38      	ldr	r0, [r7, #32]
 8008492:	f000 fd6f 	bl	8008f74 <xQueueReceive>
 8008496:	4603      	mov	r3, r0
 8008498:	2b01      	cmp	r3, #1
 800849a:	d00b      	beq.n	80084b4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80084a2:	f06f 0301 	mvn.w	r3, #1
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
 80084a8:	e004      	b.n	80084b4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80084aa:	f06f 0302 	mvn.w	r3, #2
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
 80084b0:	e000      	b.n	80084b4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3728      	adds	r7, #40	; 0x28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20000224 	.word	0x20000224
 80084c4:	e000ed04 	.word	0xe000ed04

080084c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4a07      	ldr	r2, [pc, #28]	; (80084f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80084d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4a06      	ldr	r2, [pc, #24]	; (80084f8 <vApplicationGetIdleTaskMemory+0x30>)
 80084de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2280      	movs	r2, #128	; 0x80
 80084e4:	601a      	str	r2, [r3, #0]
}
 80084e6:	bf00      	nop
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000228 	.word	0x20000228
 80084f8:	20000284 	.word	0x20000284

080084fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4a07      	ldr	r2, [pc, #28]	; (8008528 <vApplicationGetTimerTaskMemory+0x2c>)
 800850c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	4a06      	ldr	r2, [pc, #24]	; (800852c <vApplicationGetTimerTaskMemory+0x30>)
 8008512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800851a:	601a      	str	r2, [r3, #0]
}
 800851c:	bf00      	nop
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	20000484 	.word	0x20000484
 800852c:	200004e0 	.word	0x200004e0

08008530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f103 0208 	add.w	r2, r3, #8
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f103 0208 	add.w	r2, r3, #8
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f103 0208 	add.w	r2, r3, #8
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	601a      	str	r2, [r3, #0]
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d103      	bne.n	80085f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	e00c      	b.n	800860c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3308      	adds	r3, #8
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	e002      	b.n	8008600 <vListInsert+0x2e>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	d2f6      	bcs.n	80085fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	601a      	str	r2, [r3, #0]
}
 8008638:	bf00      	nop
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6892      	ldr	r2, [r2, #8]
 800865a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6852      	ldr	r2, [r2, #4]
 8008664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	429a      	cmp	r2, r3
 800866e:	d103      	bne.n	8008678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	1e5a      	subs	r2, r3, #1
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d109      	bne.n	80086c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60bb      	str	r3, [r7, #8]
 80086be:	e7fe      	b.n	80086be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80086c0:	f002 fe8c 	bl	800b3dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086d0:	fb01 f303 	mul.w	r3, r1, r3
 80086d4:	441a      	add	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f0:	3b01      	subs	r3, #1
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086f6:	fb01 f303 	mul.w	r3, r1, r3
 80086fa:	441a      	add	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	22ff      	movs	r2, #255	; 0xff
 8008704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	22ff      	movs	r2, #255	; 0xff
 800870c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d114      	bne.n	8008740 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d01a      	beq.n	8008754 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3310      	adds	r3, #16
 8008722:	4618      	mov	r0, r3
 8008724:	f001 fcb8 	bl	800a098 <xTaskRemoveFromEventList>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d012      	beq.n	8008754 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800872e:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <xQueueGenericReset+0xcc>)
 8008730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	e009      	b.n	8008754 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3310      	adds	r3, #16
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff fef3 	bl	8008530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3324      	adds	r3, #36	; 0x24
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff feee 	bl	8008530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008754:	f002 fe70 	bl	800b438 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008758:	2301      	movs	r3, #1
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08e      	sub	sp, #56	; 0x38
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d109      	bne.n	8008790 <xQueueGenericCreateStatic+0x28>
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	62bb      	str	r3, [r7, #40]	; 0x28
 800878e:	e7fe      	b.n	800878e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <xQueueGenericCreateStatic+0x42>
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
 80087a8:	e7fe      	b.n	80087a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <xQueueGenericCreateStatic+0x4e>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <xQueueGenericCreateStatic+0x52>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <xQueueGenericCreateStatic+0x54>
 80087ba:	2300      	movs	r3, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d109      	bne.n	80087d4 <xQueueGenericCreateStatic+0x6c>
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	623b      	str	r3, [r7, #32]
 80087d2:	e7fe      	b.n	80087d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <xQueueGenericCreateStatic+0x78>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <xQueueGenericCreateStatic+0x7c>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <xQueueGenericCreateStatic+0x7e>
 80087e4:	2300      	movs	r3, #0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d109      	bne.n	80087fe <xQueueGenericCreateStatic+0x96>
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	61fb      	str	r3, [r7, #28]
 80087fc:	e7fe      	b.n	80087fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087fe:	2350      	movs	r3, #80	; 0x50
 8008800:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b50      	cmp	r3, #80	; 0x50
 8008806:	d009      	beq.n	800881c <xQueueGenericCreateStatic+0xb4>
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	61bb      	str	r3, [r7, #24]
 800881a:	e7fe      	b.n	800881a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00d      	beq.n	8008842 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800882e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	4613      	mov	r3, r2
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 f842 	bl	80088c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008844:	4618      	mov	r0, r3
 8008846:	3730      	adds	r7, #48	; 0x30
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af02      	add	r7, sp, #8
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	4613      	mov	r3, r2
 8008858:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d109      	bne.n	8008874 <xQueueGenericCreate+0x28>
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	e7fe      	b.n	8008872 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800887a:	2300      	movs	r3, #0
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	e004      	b.n	800888a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	3350      	adds	r3, #80	; 0x50
 800888e:	4618      	mov	r0, r3
 8008890:	f002 febe 	bl	800b610 <pvPortMalloc>
 8008894:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00f      	beq.n	80088bc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	3350      	adds	r3, #80	; 0x50
 80088a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088aa:	79fa      	ldrb	r2, [r7, #7]
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	4613      	mov	r3, r2
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	68b9      	ldr	r1, [r7, #8]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f805 	bl	80088c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80088bc:	69bb      	ldr	r3, [r7, #24]
	}
 80088be:	4618      	mov	r0, r3
 80088c0:	3720      	adds	r7, #32
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	e002      	b.n	80088e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088f4:	2101      	movs	r1, #1
 80088f6:	69b8      	ldr	r0, [r7, #24]
 80088f8:	f7ff fece 	bl	8008698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008904:	bf00      	nop
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00e      	beq.n	8008938 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800892c:	2300      	movs	r3, #0
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f906 	bl	8008b44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800894a:	2301      	movs	r3, #1
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	2300      	movs	r3, #0
 8008950:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	461a      	mov	r2, r3
 8008956:	6939      	ldr	r1, [r7, #16]
 8008958:	6978      	ldr	r0, [r7, #20]
 800895a:	f7ff ff77 	bl	800884c <xQueueGenericCreate>
 800895e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f7ff ffd3 	bl	800890c <prvInitialiseMutex>

		return pxNewQueue;
 8008966:	68fb      	ldr	r3, [r7, #12]
	}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af02      	add	r7, sp, #8
 8008976:	4603      	mov	r3, r0
 8008978:	6039      	str	r1, [r7, #0]
 800897a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800897c:	2301      	movs	r3, #1
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	2300      	movs	r3, #0
 8008982:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2200      	movs	r2, #0
 800898c:	6939      	ldr	r1, [r7, #16]
 800898e:	6978      	ldr	r0, [r7, #20]
 8008990:	f7ff feea 	bl	8008768 <xQueueGenericCreateStatic>
 8008994:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f7ff ffb8 	bl	800890c <prvInitialiseMutex>

		return pxNewQueue;
 800899c:	68fb      	ldr	r3, [r7, #12]
	}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80089a6:	b590      	push	{r4, r7, lr}
 80089a8:	b087      	sub	sp, #28
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d109      	bne.n	80089cc <xQueueGiveMutexRecursive+0x26>
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	e7fe      	b.n	80089ca <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	685c      	ldr	r4, [r3, #4]
 80089d0:	f001 fd1e 	bl	800a410 <xTaskGetCurrentTaskHandle>
 80089d4:	4603      	mov	r3, r0
 80089d6:	429c      	cmp	r4, r3
 80089d8:	d111      	bne.n	80089fe <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	1e5a      	subs	r2, r3, #1
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80089ec:	2300      	movs	r3, #0
 80089ee:	2200      	movs	r2, #0
 80089f0:	2100      	movs	r1, #0
 80089f2:	6938      	ldr	r0, [r7, #16]
 80089f4:	f000 f8a6 	bl	8008b44 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80089f8:	2301      	movs	r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	e001      	b.n	8008a02 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008a02:	697b      	ldr	r3, [r7, #20]
	}
 8008a04:	4618      	mov	r0, r3
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd90      	pop	{r4, r7, pc}

08008a0c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008a0c:	b590      	push	{r4, r7, lr}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d109      	bne.n	8008a34 <xQueueTakeMutexRecursive+0x28>
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	e7fe      	b.n	8008a32 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	685c      	ldr	r4, [r3, #4]
 8008a38:	f001 fcea 	bl	800a410 <xTaskGetCurrentTaskHandle>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	429c      	cmp	r4, r3
 8008a40:	d107      	bne.n	8008a52 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	e00c      	b.n	8008a6c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6938      	ldr	r0, [r7, #16]
 8008a56:	f000 fb69 	bl	800912c <xQueueSemaphoreTake>
 8008a5a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d004      	beq.n	8008a6c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008a6c:	697b      	ldr	r3, [r7, #20]
	}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd90      	pop	{r4, r7, pc}

08008a76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b08a      	sub	sp, #40	; 0x28
 8008a7a:	af02      	add	r7, sp, #8
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d109      	bne.n	8008a9c <xQueueCreateCountingSemaphoreStatic+0x26>
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	61bb      	str	r3, [r7, #24]
 8008a9a:	e7fe      	b.n	8008a9a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d909      	bls.n	8008ab8 <xQueueCreateCountingSemaphoreStatic+0x42>
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	e7fe      	b.n	8008ab6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ab8:	2302      	movs	r3, #2
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff fe50 	bl	8008768 <xQueueGenericCreateStatic>
 8008ac8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
	}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d109      	bne.n	8008b04 <xQueueCreateCountingSemaphore+0x24>
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	e7fe      	b.n	8008b02 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d909      	bls.n	8008b20 <xQueueCreateCountingSemaphore+0x40>
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	e7fe      	b.n	8008b1e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b20:	2202      	movs	r2, #2
 8008b22:	2100      	movs	r1, #0
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff fe91 	bl	800884c <xQueueGenericCreate>
 8008b2a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b38:	697b      	ldr	r3, [r7, #20]
	}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08e      	sub	sp, #56	; 0x38
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b52:	2300      	movs	r3, #0
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <xQueueGenericSend+0x30>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b72:	e7fe      	b.n	8008b72 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <xQueueGenericSend+0x3e>
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <xQueueGenericSend+0x42>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <xQueueGenericSend+0x44>
 8008b86:	2300      	movs	r3, #0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d109      	bne.n	8008ba0 <xQueueGenericSend+0x5c>
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9e:	e7fe      	b.n	8008b9e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d103      	bne.n	8008bae <xQueueGenericSend+0x6a>
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <xQueueGenericSend+0x6e>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <xQueueGenericSend+0x70>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d109      	bne.n	8008bcc <xQueueGenericSend+0x88>
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	623b      	str	r3, [r7, #32]
 8008bca:	e7fe      	b.n	8008bca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bcc:	f001 fc30 	bl	800a430 <xTaskGetSchedulerState>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <xQueueGenericSend+0x98>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <xQueueGenericSend+0x9c>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <xQueueGenericSend+0x9e>
 8008be0:	2300      	movs	r3, #0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d109      	bne.n	8008bfa <xQueueGenericSend+0xb6>
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	61fb      	str	r3, [r7, #28]
 8008bf8:	e7fe      	b.n	8008bf8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bfa:	f002 fbef 	bl	800b3dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d302      	bcc.n	8008c10 <xQueueGenericSend+0xcc>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d129      	bne.n	8008c64 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c16:	f000 fc48 	bl	80094aa <prvCopyDataToQueue>
 8008c1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d010      	beq.n	8008c46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	3324      	adds	r3, #36	; 0x24
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 fa35 	bl	800a098 <xTaskRemoveFromEventList>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d013      	beq.n	8008c5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c34:	4b3f      	ldr	r3, [pc, #252]	; (8008d34 <xQueueGenericSend+0x1f0>)
 8008c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	e00a      	b.n	8008c5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d007      	beq.n	8008c5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c4c:	4b39      	ldr	r3, [pc, #228]	; (8008d34 <xQueueGenericSend+0x1f0>)
 8008c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c5c:	f002 fbec 	bl	800b438 <vPortExitCritical>
				return pdPASS;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e063      	b.n	8008d2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c6a:	f002 fbe5 	bl	800b438 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e05c      	b.n	8008d2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d106      	bne.n	8008c86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 fa6d 	bl	800a15c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c82:	2301      	movs	r3, #1
 8008c84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c86:	f002 fbd7 	bl	800b438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c8a:	f000 ffd1 	bl	8009c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c8e:	f002 fba5 	bl	800b3dc <vPortEnterCritical>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c98:	b25b      	sxtb	r3, r3
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d103      	bne.n	8008ca8 <xQueueGenericSend+0x164>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cae:	b25b      	sxtb	r3, r3
 8008cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb4:	d103      	bne.n	8008cbe <xQueueGenericSend+0x17a>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cbe:	f002 fbbb 	bl	800b438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cc2:	1d3a      	adds	r2, r7, #4
 8008cc4:	f107 0314 	add.w	r3, r7, #20
 8008cc8:	4611      	mov	r1, r2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f001 fa5c 	bl	800a188 <xTaskCheckForTimeOut>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d124      	bne.n	8008d20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cd8:	f000 fcdf 	bl	800969a <prvIsQueueFull>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d018      	beq.n	8008d14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	3310      	adds	r3, #16
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f001 f986 	bl	8009ffc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cf2:	f000 fc6a 	bl	80095ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cf6:	f000 ffa9 	bl	8009c4c <xTaskResumeAll>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f47f af7c 	bne.w	8008bfa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008d02:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <xQueueGenericSend+0x1f0>)
 8008d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	e772      	b.n	8008bfa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d16:	f000 fc58 	bl	80095ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d1a:	f000 ff97 	bl	8009c4c <xTaskResumeAll>
 8008d1e:	e76c      	b.n	8008bfa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d22:	f000 fc52 	bl	80095ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d26:	f000 ff91 	bl	8009c4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d2a:	2300      	movs	r3, #0
		}
	}
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3738      	adds	r7, #56	; 0x38
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	e000ed04 	.word	0xe000ed04

08008d38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08e      	sub	sp, #56	; 0x38
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <xQueueGenericSendFromISR+0x2c>
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
 8008d62:	e7fe      	b.n	8008d62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d103      	bne.n	8008d72 <xQueueGenericSendFromISR+0x3a>
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <xQueueGenericSendFromISR+0x3e>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <xQueueGenericSendFromISR+0x40>
 8008d76:	2300      	movs	r3, #0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d109      	bne.n	8008d90 <xQueueGenericSendFromISR+0x58>
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	623b      	str	r3, [r7, #32]
 8008d8e:	e7fe      	b.n	8008d8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d103      	bne.n	8008d9e <xQueueGenericSendFromISR+0x66>
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <xQueueGenericSendFromISR+0x6a>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e000      	b.n	8008da4 <xQueueGenericSendFromISR+0x6c>
 8008da2:	2300      	movs	r3, #0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <xQueueGenericSendFromISR+0x84>
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	e7fe      	b.n	8008dba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dbc:	f002 fbea 	bl	800b594 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008dc0:	f3ef 8211 	mrs	r2, BASEPRI
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	61ba      	str	r2, [r7, #24]
 8008dd6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d302      	bcc.n	8008dee <xQueueGenericSendFromISR+0xb6>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d12c      	bne.n	8008e48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dfe:	f000 fb54 	bl	80094aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d112      	bne.n	8008e32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d016      	beq.n	8008e42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	3324      	adds	r3, #36	; 0x24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f001 f93d 	bl	800a098 <xTaskRemoveFromEventList>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00e      	beq.n	8008e42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00b      	beq.n	8008e42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e007      	b.n	8008e42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e36:	3301      	adds	r3, #1
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	b25a      	sxtb	r2, r3
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e42:	2301      	movs	r3, #1
 8008e44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008e46:	e001      	b.n	8008e4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3738      	adds	r7, #56	; 0x38
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08e      	sub	sp, #56	; 0x38
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d109      	bne.n	8008e88 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	623b      	str	r3, [r7, #32]
 8008e86:	e7fe      	b.n	8008e86 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d009      	beq.n	8008ea4 <xQueueGiveFromISR+0x44>
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	61fb      	str	r3, [r7, #28]
 8008ea2:	e7fe      	b.n	8008ea2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d103      	bne.n	8008eb4 <xQueueGiveFromISR+0x54>
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <xQueueGiveFromISR+0x58>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e000      	b.n	8008eba <xQueueGiveFromISR+0x5a>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <xQueueGiveFromISR+0x72>
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	e7fe      	b.n	8008ed0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ed2:	f002 fb5f 	bl	800b594 <vPortValidateInterruptPriority>
	__asm volatile
 8008ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	617a      	str	r2, [r7, #20]
 8008eec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008eee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d22b      	bcs.n	8008f5a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1c:	d112      	bne.n	8008f44 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d016      	beq.n	8008f54 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	3324      	adds	r3, #36	; 0x24
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 f8b4 	bl	800a098 <xTaskRemoveFromEventList>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00e      	beq.n	8008f54 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	e007      	b.n	8008f54 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f48:	3301      	adds	r3, #1
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	b25a      	sxtb	r2, r3
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f54:	2301      	movs	r3, #1
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
 8008f58:	e001      	b.n	8008f5e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3738      	adds	r7, #56	; 0x38
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08c      	sub	sp, #48	; 0x30
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f80:	2300      	movs	r3, #0
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d109      	bne.n	8008fa2 <xQueueReceive+0x2e>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	623b      	str	r3, [r7, #32]
 8008fa0:	e7fe      	b.n	8008fa0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <xQueueReceive+0x3c>
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <xQueueReceive+0x40>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <xQueueReceive+0x42>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <xQueueReceive+0x5a>
 8008fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	61fb      	str	r3, [r7, #28]
 8008fcc:	e7fe      	b.n	8008fcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fce:	f001 fa2f 	bl	800a430 <xTaskGetSchedulerState>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <xQueueReceive+0x6a>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <xQueueReceive+0x6e>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <xQueueReceive+0x70>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d109      	bne.n	8008ffc <xQueueReceive+0x88>
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	61bb      	str	r3, [r7, #24]
 8008ffa:	e7fe      	b.n	8008ffa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ffc:	f002 f9ee 	bl	800b3dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01f      	beq.n	800904c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009010:	f000 fab5 	bl	800957e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	1e5a      	subs	r2, r3, #1
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00f      	beq.n	8009044 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	3310      	adds	r3, #16
 8009028:	4618      	mov	r0, r3
 800902a:	f001 f835 	bl	800a098 <xTaskRemoveFromEventList>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009034:	4b3c      	ldr	r3, [pc, #240]	; (8009128 <xQueueReceive+0x1b4>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009044:	f002 f9f8 	bl	800b438 <vPortExitCritical>
				return pdPASS;
 8009048:	2301      	movs	r3, #1
 800904a:	e069      	b.n	8009120 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d103      	bne.n	800905a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009052:	f002 f9f1 	bl	800b438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009056:	2300      	movs	r3, #0
 8009058:	e062      	b.n	8009120 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d106      	bne.n	800906e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009060:	f107 0310 	add.w	r3, r7, #16
 8009064:	4618      	mov	r0, r3
 8009066:	f001 f879 	bl	800a15c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800906a:	2301      	movs	r3, #1
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800906e:	f002 f9e3 	bl	800b438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009072:	f000 fddd 	bl	8009c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009076:	f002 f9b1 	bl	800b3dc <vPortEnterCritical>
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009080:	b25b      	sxtb	r3, r3
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d103      	bne.n	8009090 <xQueueReceive+0x11c>
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009096:	b25b      	sxtb	r3, r3
 8009098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909c:	d103      	bne.n	80090a6 <xQueueReceive+0x132>
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090a6:	f002 f9c7 	bl	800b438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090aa:	1d3a      	adds	r2, r7, #4
 80090ac:	f107 0310 	add.w	r3, r7, #16
 80090b0:	4611      	mov	r1, r2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 f868 	bl	800a188 <xTaskCheckForTimeOut>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d123      	bne.n	8009106 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c0:	f000 fad5 	bl	800966e <prvIsQueueEmpty>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d017      	beq.n	80090fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	3324      	adds	r3, #36	; 0x24
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	4611      	mov	r1, r2
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 ff92 	bl	8009ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090da:	f000 fa76 	bl	80095ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090de:	f000 fdb5 	bl	8009c4c <xTaskResumeAll>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d189      	bne.n	8008ffc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80090e8:	4b0f      	ldr	r3, [pc, #60]	; (8009128 <xQueueReceive+0x1b4>)
 80090ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	e780      	b.n	8008ffc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090fc:	f000 fa65 	bl	80095ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009100:	f000 fda4 	bl	8009c4c <xTaskResumeAll>
 8009104:	e77a      	b.n	8008ffc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009108:	f000 fa5f 	bl	80095ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800910c:	f000 fd9e 	bl	8009c4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009112:	f000 faac 	bl	800966e <prvIsQueueEmpty>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	f43f af6f 	beq.w	8008ffc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800911e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009120:	4618      	mov	r0, r3
 8009122:	3730      	adds	r7, #48	; 0x30
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	e000ed04 	.word	0xe000ed04

0800912c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08e      	sub	sp, #56	; 0x38
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009136:	2300      	movs	r3, #0
 8009138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800913e:	2300      	movs	r3, #0
 8009140:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d109      	bne.n	800915c <xQueueSemaphoreTake+0x30>
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	623b      	str	r3, [r7, #32]
 800915a:	e7fe      	b.n	800915a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <xQueueSemaphoreTake+0x4c>
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	e7fe      	b.n	8009176 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009178:	f001 f95a 	bl	800a430 <xTaskGetSchedulerState>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d102      	bne.n	8009188 <xQueueSemaphoreTake+0x5c>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <xQueueSemaphoreTake+0x60>
 8009188:	2301      	movs	r3, #1
 800918a:	e000      	b.n	800918e <xQueueSemaphoreTake+0x62>
 800918c:	2300      	movs	r3, #0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <xQueueSemaphoreTake+0x7a>
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	61bb      	str	r3, [r7, #24]
 80091a4:	e7fe      	b.n	80091a4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80091a6:	f002 f919 	bl	800b3dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d024      	beq.n	8009200 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	1e5a      	subs	r2, r3, #1
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d104      	bne.n	80091d0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80091c6:	f001 faaf 	bl	800a728 <pvTaskIncrementMutexHeldCount>
 80091ca:	4602      	mov	r2, r0
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00f      	beq.n	80091f8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	3310      	adds	r3, #16
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 ff5b 	bl	800a098 <xTaskRemoveFromEventList>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091e8:	4b53      	ldr	r3, [pc, #332]	; (8009338 <xQueueSemaphoreTake+0x20c>)
 80091ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091f8:	f002 f91e 	bl	800b438 <vPortExitCritical>
				return pdPASS;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e096      	b.n	800932e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d110      	bne.n	8009228 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	2b00      	cmp	r3, #0
 800920a:	d009      	beq.n	8009220 <xQueueSemaphoreTake+0xf4>
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	e7fe      	b.n	800921e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009220:	f002 f90a 	bl	800b438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009224:	2300      	movs	r3, #0
 8009226:	e082      	b.n	800932e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800922e:	f107 030c 	add.w	r3, r7, #12
 8009232:	4618      	mov	r0, r3
 8009234:	f000 ff92 	bl	800a15c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009238:	2301      	movs	r3, #1
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800923c:	f002 f8fc 	bl	800b438 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009240:	f000 fcf6 	bl	8009c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009244:	f002 f8ca 	bl	800b3dc <vPortEnterCritical>
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800924e:	b25b      	sxtb	r3, r3
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d103      	bne.n	800925e <xQueueSemaphoreTake+0x132>
 8009256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009264:	b25b      	sxtb	r3, r3
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926a:	d103      	bne.n	8009274 <xQueueSemaphoreTake+0x148>
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009274:	f002 f8e0 	bl	800b438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009278:	463a      	mov	r2, r7
 800927a:	f107 030c 	add.w	r3, r7, #12
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f000 ff81 	bl	800a188 <xTaskCheckForTimeOut>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d132      	bne.n	80092f2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800928c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800928e:	f000 f9ee 	bl	800966e <prvIsQueueEmpty>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d026      	beq.n	80092e6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80092a0:	f002 f89c 	bl	800b3dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 f8df 	bl	800a46c <xTaskPriorityInherit>
 80092ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80092b0:	f002 f8c2 	bl	800b438 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	3324      	adds	r3, #36	; 0x24
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fe9d 	bl	8009ffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092c4:	f000 f981 	bl	80095ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092c8:	f000 fcc0 	bl	8009c4c <xTaskResumeAll>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f47f af69 	bne.w	80091a6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80092d4:	4b18      	ldr	r3, [pc, #96]	; (8009338 <xQueueSemaphoreTake+0x20c>)
 80092d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	e75f      	b.n	80091a6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80092e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e8:	f000 f96f 	bl	80095ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092ec:	f000 fcae 	bl	8009c4c <xTaskResumeAll>
 80092f0:	e759      	b.n	80091a6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80092f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f4:	f000 f969 	bl	80095ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092f8:	f000 fca8 	bl	8009c4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092fe:	f000 f9b6 	bl	800966e <prvIsQueueEmpty>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	f43f af4e 	beq.w	80091a6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00d      	beq.n	800932c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009310:	f002 f864 	bl	800b3dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009316:	f000 f8b0 	bl	800947a <prvGetDisinheritPriorityAfterTimeout>
 800931a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009322:	4618      	mov	r0, r3
 8009324:	f001 f97c 	bl	800a620 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009328:	f002 f886 	bl	800b438 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800932c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800932e:	4618      	mov	r0, r3
 8009330:	3738      	adds	r7, #56	; 0x38
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08e      	sub	sp, #56	; 0x38
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <xQueueReceiveFromISR+0x2a>
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	623b      	str	r3, [r7, #32]
 8009364:	e7fe      	b.n	8009364 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d103      	bne.n	8009374 <xQueueReceiveFromISR+0x38>
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <xQueueReceiveFromISR+0x3c>
 8009374:	2301      	movs	r3, #1
 8009376:	e000      	b.n	800937a <xQueueReceiveFromISR+0x3e>
 8009378:	2300      	movs	r3, #0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d109      	bne.n	8009392 <xQueueReceiveFromISR+0x56>
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e7fe      	b.n	8009390 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009392:	f002 f8ff 	bl	800b594 <vPortValidateInterruptPriority>
	__asm volatile
 8009396:	f3ef 8211 	mrs	r2, BASEPRI
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	61ba      	str	r2, [r7, #24]
 80093ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80093ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d02f      	beq.n	800941e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093cc:	f000 f8d7 	bl	800957e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	1e5a      	subs	r2, r3, #1
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80093d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e0:	d112      	bne.n	8009408 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d016      	beq.n	8009418 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	3310      	adds	r3, #16
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fe52 	bl	800a098 <xTaskRemoveFromEventList>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00e      	beq.n	8009418 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	e007      	b.n	8009418 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800940c:	3301      	adds	r3, #1
 800940e:	b2db      	uxtb	r3, r3
 8009410:	b25a      	sxtb	r2, r3
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009418:	2301      	movs	r3, #1
 800941a:	637b      	str	r3, [r7, #52]	; 0x34
 800941c:	e001      	b.n	8009422 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800941e:	2300      	movs	r3, #0
 8009420:	637b      	str	r3, [r7, #52]	; 0x34
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800942c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800942e:	4618      	mov	r0, r3
 8009430:	3738      	adds	r7, #56	; 0x38
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d109      	bne.n	800945c <vQueueDelete+0x26>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	60bb      	str	r3, [r7, #8]
 800945a:	e7fe      	b.n	800945a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 f95d 	bl	800971c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009468:	2b00      	cmp	r3, #0
 800946a:	d102      	bne.n	8009472 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f002 f991 	bl	800b794 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	2b00      	cmp	r3, #0
 8009488:	d006      	beq.n	8009498 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	e001      	b.n	800949c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800949c:	68fb      	ldr	r3, [r7, #12]
	}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b086      	sub	sp, #24
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10d      	bne.n	80094e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d14d      	bne.n	800956c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 f837 	bl	800a548 <xTaskPriorityDisinherit>
 80094da:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	605a      	str	r2, [r3, #4]
 80094e2:	e043      	b.n	800956c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d119      	bne.n	800951e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6898      	ldr	r0, [r3, #8]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	461a      	mov	r2, r3
 80094f4:	68b9      	ldr	r1, [r7, #8]
 80094f6:	f00c f898 	bl	801562a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	441a      	add	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	d32b      	bcc.n	800956c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	609a      	str	r2, [r3, #8]
 800951c:	e026      	b.n	800956c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	68d8      	ldr	r0, [r3, #12]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009526:	461a      	mov	r2, r3
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	f00c f87e 	bl	801562a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	425b      	negs	r3, r3
 8009538:	441a      	add	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d207      	bcs.n	800955a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	425b      	negs	r3, r3
 8009554:	441a      	add	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d105      	bne.n	800956c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	3b01      	subs	r3, #1
 800956a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009574:	697b      	ldr	r3, [r7, #20]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d018      	beq.n	80095c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68da      	ldr	r2, [r3, #12]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	441a      	add	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d303      	bcc.n	80095b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68d9      	ldr	r1, [r3, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	461a      	mov	r2, r3
 80095bc:	6838      	ldr	r0, [r7, #0]
 80095be:	f00c f834 	bl	801562a <memcpy>
	}
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095d2:	f001 ff03 	bl	800b3dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095de:	e011      	b.n	8009604 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d012      	beq.n	800960e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3324      	adds	r3, #36	; 0x24
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fd53 	bl	800a098 <xTaskRemoveFromEventList>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095f8:	f000 fe26 	bl	800a248 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	3b01      	subs	r3, #1
 8009600:	b2db      	uxtb	r3, r3
 8009602:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009608:	2b00      	cmp	r3, #0
 800960a:	dce9      	bgt.n	80095e0 <prvUnlockQueue+0x16>
 800960c:	e000      	b.n	8009610 <prvUnlockQueue+0x46>
					break;
 800960e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	22ff      	movs	r2, #255	; 0xff
 8009614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009618:	f001 ff0e 	bl	800b438 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800961c:	f001 fede 	bl	800b3dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009626:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009628:	e011      	b.n	800964e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d012      	beq.n	8009658 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3310      	adds	r3, #16
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fd2e 	bl	800a098 <xTaskRemoveFromEventList>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009642:	f000 fe01 	bl	800a248 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	3b01      	subs	r3, #1
 800964a:	b2db      	uxtb	r3, r3
 800964c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800964e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009652:	2b00      	cmp	r3, #0
 8009654:	dce9      	bgt.n	800962a <prvUnlockQueue+0x60>
 8009656:	e000      	b.n	800965a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009658:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	22ff      	movs	r2, #255	; 0xff
 800965e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009662:	f001 fee9 	bl	800b438 <vPortExitCritical>
}
 8009666:	bf00      	nop
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009676:	f001 feb1 	bl	800b3dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967e:	2b00      	cmp	r3, #0
 8009680:	d102      	bne.n	8009688 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009682:	2301      	movs	r3, #1
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	e001      	b.n	800968c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009688:	2300      	movs	r3, #0
 800968a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800968c:	f001 fed4 	bl	800b438 <vPortExitCritical>

	return xReturn;
 8009690:	68fb      	ldr	r3, [r7, #12]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096a2:	f001 fe9b 	bl	800b3dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d102      	bne.n	80096b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096b2:	2301      	movs	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	e001      	b.n	80096bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096bc:	f001 febc 	bl	800b438 <vPortExitCritical>

	return xReturn;
 80096c0:	68fb      	ldr	r3, [r7, #12]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	e014      	b.n	8009706 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096dc:	4a0e      	ldr	r2, [pc, #56]	; (8009718 <vQueueAddToRegistry+0x4c>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10b      	bne.n	8009700 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096e8:	490b      	ldr	r1, [pc, #44]	; (8009718 <vQueueAddToRegistry+0x4c>)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096f2:	4a09      	ldr	r2, [pc, #36]	; (8009718 <vQueueAddToRegistry+0x4c>)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	4413      	add	r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096fe:	e005      	b.n	800970c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b07      	cmp	r3, #7
 800970a:	d9e7      	bls.n	80096dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800970c:	bf00      	nop
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	2000a280 	.word	0x2000a280

0800971c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	e016      	b.n	8009758 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800972a:	4a10      	ldr	r2, [pc, #64]	; (800976c <vQueueUnregisterQueue+0x50>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	4413      	add	r3, r2
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	429a      	cmp	r2, r3
 8009738:	d10b      	bne.n	8009752 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800973a:	4a0c      	ldr	r2, [pc, #48]	; (800976c <vQueueUnregisterQueue+0x50>)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2100      	movs	r1, #0
 8009740:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009744:	4a09      	ldr	r2, [pc, #36]	; (800976c <vQueueUnregisterQueue+0x50>)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	4413      	add	r3, r2
 800974c:	2200      	movs	r2, #0
 800974e:	605a      	str	r2, [r3, #4]
				break;
 8009750:	e005      	b.n	800975e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3301      	adds	r3, #1
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b07      	cmp	r3, #7
 800975c:	d9e5      	bls.n	800972a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800975e:	bf00      	nop
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	2000a280 	.word	0x2000a280

08009770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009780:	f001 fe2c 	bl	800b3dc <vPortEnterCritical>
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800978a:	b25b      	sxtb	r3, r3
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d103      	bne.n	800979a <vQueueWaitForMessageRestricted+0x2a>
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097a0:	b25b      	sxtb	r3, r3
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d103      	bne.n	80097b0 <vQueueWaitForMessageRestricted+0x40>
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097b0:	f001 fe42 	bl	800b438 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d106      	bne.n	80097ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	3324      	adds	r3, #36	; 0x24
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	68b9      	ldr	r1, [r7, #8]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 fc3d 	bl	800a044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097ca:	6978      	ldr	r0, [r7, #20]
 80097cc:	f7ff fefd 	bl	80095ca <prvUnlockQueue>
	}
 80097d0:	bf00      	nop
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08e      	sub	sp, #56	; 0x38
 80097dc:	af04      	add	r7, sp, #16
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <xTaskCreateStatic+0x28>
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	623b      	str	r3, [r7, #32]
 80097fe:	e7fe      	b.n	80097fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <xTaskCreateStatic+0x42>
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	e7fe      	b.n	8009818 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800981a:	235c      	movs	r3, #92	; 0x5c
 800981c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b5c      	cmp	r3, #92	; 0x5c
 8009822:	d009      	beq.n	8009838 <xTaskCreateStatic+0x60>
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	61bb      	str	r3, [r7, #24]
 8009836:	e7fe      	b.n	8009836 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	2b00      	cmp	r3, #0
 800983c:	d01e      	beq.n	800987c <xTaskCreateStatic+0xa4>
 800983e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009840:	2b00      	cmp	r3, #0
 8009842:	d01b      	beq.n	800987c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800984c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	2202      	movs	r2, #2
 8009852:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009856:	2300      	movs	r3, #0
 8009858:	9303      	str	r3, [sp, #12]
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	9302      	str	r3, [sp, #8]
 800985e:	f107 0314 	add.w	r3, r7, #20
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f850 	bl	8009914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009876:	f000 f8d3 	bl	8009a20 <prvAddNewTaskToReadyList>
 800987a:	e001      	b.n	8009880 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009880:	697b      	ldr	r3, [r7, #20]
	}
 8009882:	4618      	mov	r0, r3
 8009884:	3728      	adds	r7, #40	; 0x28
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800988a:	b580      	push	{r7, lr}
 800988c:	b08c      	sub	sp, #48	; 0x30
 800988e:	af04      	add	r7, sp, #16
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989a:	88fb      	ldrh	r3, [r7, #6]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 feb6 	bl	800b610 <pvPortMalloc>
 80098a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80098ac:	205c      	movs	r0, #92	; 0x5c
 80098ae:	f001 feaf 	bl	800b610 <pvPortMalloc>
 80098b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	631a      	str	r2, [r3, #48]	; 0x30
 80098c0:	e005      	b.n	80098ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098c2:	6978      	ldr	r0, [r7, #20]
 80098c4:	f001 ff66 	bl	800b794 <vPortFree>
 80098c8:	e001      	b.n	80098ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d017      	beq.n	8009904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098dc:	88fa      	ldrh	r2, [r7, #6]
 80098de:	2300      	movs	r3, #0
 80098e0:	9303      	str	r3, [sp, #12]
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	9302      	str	r3, [sp, #8]
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 f80e 	bl	8009914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098f8:	69f8      	ldr	r0, [r7, #28]
 80098fa:	f000 f891 	bl	8009a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098fe:	2301      	movs	r3, #1
 8009900:	61bb      	str	r3, [r7, #24]
 8009902:	e002      	b.n	800990a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009904:	f04f 33ff 	mov.w	r3, #4294967295
 8009908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800990a:	69bb      	ldr	r3, [r7, #24]
	}
 800990c:	4618      	mov	r0, r3
 800990e:	3720      	adds	r7, #32
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	461a      	mov	r2, r3
 800992c:	21a5      	movs	r1, #165	; 0xa5
 800992e:	f00b fe87 	bl	8015640 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800993c:	3b01      	subs	r3, #1
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	f023 0307 	bic.w	r3, r3, #7
 800994a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <prvInitialiseNewTask+0x56>
 8009956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	e7fe      	b.n	8009968 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800996a:	2300      	movs	r3, #0
 800996c:	61fb      	str	r3, [r7, #28]
 800996e:	e012      	b.n	8009996 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	7819      	ldrb	r1, [r3, #0]
 8009978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	4413      	add	r3, r2
 800997e:	3334      	adds	r3, #52	; 0x34
 8009980:	460a      	mov	r2, r1
 8009982:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	4413      	add	r3, r2
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	3301      	adds	r3, #1
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	2b0f      	cmp	r3, #15
 800999a:	d9e9      	bls.n	8009970 <prvInitialiseNewTask+0x5c>
 800999c:	e000      	b.n	80099a0 <prvInitialiseNewTask+0x8c>
		{
			break;
 800999e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	2b37      	cmp	r3, #55	; 0x37
 80099ac:	d901      	bls.n	80099b2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099ae:	2337      	movs	r3, #55	; 0x37
 80099b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	2200      	movs	r2, #0
 80099c2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	3304      	adds	r3, #4
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe fdd1 	bl	8008570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	3318      	adds	r3, #24
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fdcc 	bl	8008570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	2200      	movs	r2, #0
 80099f2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	68f9      	ldr	r1, [r7, #12]
 8009a00:	69b8      	ldr	r0, [r7, #24]
 8009a02:	f001 fbc7 	bl	800b194 <pxPortInitialiseStack>
 8009a06:	4602      	mov	r2, r0
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a18:	bf00      	nop
 8009a1a:	3720      	adds	r7, #32
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a28:	f001 fcd8 	bl	800b3dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <prvAddNewTaskToReadyList+0xc4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3301      	adds	r3, #1
 8009a32:	4a2c      	ldr	r2, [pc, #176]	; (8009ae4 <prvAddNewTaskToReadyList+0xc4>)
 8009a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a36:	4b2c      	ldr	r3, [pc, #176]	; (8009ae8 <prvAddNewTaskToReadyList+0xc8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d109      	bne.n	8009a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a3e:	4a2a      	ldr	r2, [pc, #168]	; (8009ae8 <prvAddNewTaskToReadyList+0xc8>)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a44:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <prvAddNewTaskToReadyList+0xc4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d110      	bne.n	8009a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a4c:	f000 fc20 	bl	800a290 <prvInitialiseTaskLists>
 8009a50:	e00d      	b.n	8009a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a52:	4b26      	ldr	r3, [pc, #152]	; (8009aec <prvAddNewTaskToReadyList+0xcc>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d109      	bne.n	8009a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a5a:	4b23      	ldr	r3, [pc, #140]	; (8009ae8 <prvAddNewTaskToReadyList+0xc8>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d802      	bhi.n	8009a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a68:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <prvAddNewTaskToReadyList+0xc8>)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a6e:	4b20      	ldr	r3, [pc, #128]	; (8009af0 <prvAddNewTaskToReadyList+0xd0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	4a1e      	ldr	r2, [pc, #120]	; (8009af0 <prvAddNewTaskToReadyList+0xd0>)
 8009a76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a78:	4b1d      	ldr	r3, [pc, #116]	; (8009af0 <prvAddNewTaskToReadyList+0xd0>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a84:	4b1b      	ldr	r3, [pc, #108]	; (8009af4 <prvAddNewTaskToReadyList+0xd4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d903      	bls.n	8009a94 <prvAddNewTaskToReadyList+0x74>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	4a18      	ldr	r2, [pc, #96]	; (8009af4 <prvAddNewTaskToReadyList+0xd4>)
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4a15      	ldr	r2, [pc, #84]	; (8009af8 <prvAddNewTaskToReadyList+0xd8>)
 8009aa2:	441a      	add	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe fd6d 	bl	800858a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ab0:	f001 fcc2 	bl	800b438 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ab4:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <prvAddNewTaskToReadyList+0xcc>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00e      	beq.n	8009ada <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009abc:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <prvAddNewTaskToReadyList+0xc8>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d207      	bcs.n	8009ada <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009aca:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <prvAddNewTaskToReadyList+0xdc>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000db4 	.word	0x20000db4
 8009ae8:	200008e0 	.word	0x200008e0
 8009aec:	20000dc0 	.word	0x20000dc0
 8009af0:	20000dd0 	.word	0x20000dd0
 8009af4:	20000dbc 	.word	0x20000dbc
 8009af8:	200008e4 	.word	0x200008e4
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d016      	beq.n	8009b40 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b12:	4b13      	ldr	r3, [pc, #76]	; (8009b60 <vTaskDelay+0x60>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d009      	beq.n	8009b2e <vTaskDelay+0x2e>
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	60bb      	str	r3, [r7, #8]
 8009b2c:	e7fe      	b.n	8009b2c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009b2e:	f000 f87f 	bl	8009c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b32:	2100      	movs	r1, #0
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 ffcf 	bl	800aad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b3a:	f000 f887 	bl	8009c4c <xTaskResumeAll>
 8009b3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d107      	bne.n	8009b56 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009b46:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <vTaskDelay+0x64>)
 8009b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b56:	bf00      	nop
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000ddc 	.word	0x20000ddc
 8009b64:	e000ed04 	.word	0xe000ed04

08009b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	; 0x28
 8009b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b76:	463a      	mov	r2, r7
 8009b78:	1d39      	adds	r1, r7, #4
 8009b7a:	f107 0308 	add.w	r3, r7, #8
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fca2 	bl	80084c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	9202      	str	r2, [sp, #8]
 8009b8c:	9301      	str	r3, [sp, #4]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	2300      	movs	r3, #0
 8009b94:	460a      	mov	r2, r1
 8009b96:	4920      	ldr	r1, [pc, #128]	; (8009c18 <vTaskStartScheduler+0xb0>)
 8009b98:	4820      	ldr	r0, [pc, #128]	; (8009c1c <vTaskStartScheduler+0xb4>)
 8009b9a:	f7ff fe1d 	bl	80097d8 <xTaskCreateStatic>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	4b1f      	ldr	r3, [pc, #124]	; (8009c20 <vTaskStartScheduler+0xb8>)
 8009ba2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ba4:	4b1e      	ldr	r3, [pc, #120]	; (8009c20 <vTaskStartScheduler+0xb8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bac:	2301      	movs	r3, #1
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	e001      	b.n	8009bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d102      	bne.n	8009bc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bbc:	f000 ffe0 	bl	800ab80 <xTimerCreateTimerTask>
 8009bc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d115      	bne.n	8009bf4 <vTaskStartScheduler+0x8c>
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bda:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <vTaskStartScheduler+0xbc>)
 8009bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009be2:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <vTaskStartScheduler+0xc0>)
 8009be4:	2201      	movs	r2, #1
 8009be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009be8:	4b10      	ldr	r3, [pc, #64]	; (8009c2c <vTaskStartScheduler+0xc4>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bee:	f001 fb57 	bl	800b2a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bf2:	e00d      	b.n	8009c10 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d109      	bne.n	8009c10 <vTaskStartScheduler+0xa8>
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	e7fe      	b.n	8009c0e <vTaskStartScheduler+0xa6>
}
 8009c10:	bf00      	nop
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	08016ad4 	.word	0x08016ad4
 8009c1c:	0800a261 	.word	0x0800a261
 8009c20:	20000dd8 	.word	0x20000dd8
 8009c24:	20000dd4 	.word	0x20000dd4
 8009c28:	20000dc0 	.word	0x20000dc0
 8009c2c:	20000db8 	.word	0x20000db8

08009c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <vTaskSuspendAll+0x18>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	4a03      	ldr	r2, [pc, #12]	; (8009c48 <vTaskSuspendAll+0x18>)
 8009c3c:	6013      	str	r3, [r2, #0]
}
 8009c3e:	bf00      	nop
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	20000ddc 	.word	0x20000ddc

08009c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c5a:	4b41      	ldr	r3, [pc, #260]	; (8009d60 <xTaskResumeAll+0x114>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d109      	bne.n	8009c76 <xTaskResumeAll+0x2a>
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	e7fe      	b.n	8009c74 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c76:	f001 fbb1 	bl	800b3dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c7a:	4b39      	ldr	r3, [pc, #228]	; (8009d60 <xTaskResumeAll+0x114>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	4a37      	ldr	r2, [pc, #220]	; (8009d60 <xTaskResumeAll+0x114>)
 8009c82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c84:	4b36      	ldr	r3, [pc, #216]	; (8009d60 <xTaskResumeAll+0x114>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d162      	bne.n	8009d52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c8c:	4b35      	ldr	r3, [pc, #212]	; (8009d64 <xTaskResumeAll+0x118>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d05e      	beq.n	8009d52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c94:	e02f      	b.n	8009cf6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c96:	4b34      	ldr	r3, [pc, #208]	; (8009d68 <xTaskResumeAll+0x11c>)
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3318      	adds	r3, #24
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fcce 	bl	8008644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fcc9 	bl	8008644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb6:	4b2d      	ldr	r3, [pc, #180]	; (8009d6c <xTaskResumeAll+0x120>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d903      	bls.n	8009cc6 <xTaskResumeAll+0x7a>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	4a2a      	ldr	r2, [pc, #168]	; (8009d6c <xTaskResumeAll+0x120>)
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4a27      	ldr	r2, [pc, #156]	; (8009d70 <xTaskResumeAll+0x124>)
 8009cd4:	441a      	add	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7fe fc54 	bl	800858a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce6:	4b23      	ldr	r3, [pc, #140]	; (8009d74 <xTaskResumeAll+0x128>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d302      	bcc.n	8009cf6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009cf0:	4b21      	ldr	r3, [pc, #132]	; (8009d78 <xTaskResumeAll+0x12c>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cf6:	4b1c      	ldr	r3, [pc, #112]	; (8009d68 <xTaskResumeAll+0x11c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1cb      	bne.n	8009c96 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d04:	f000 fb5e 	bl	800a3c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d08:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <xTaskResumeAll+0x130>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d010      	beq.n	8009d36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d14:	f000 f858 	bl	8009dc8 <xTaskIncrementTick>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009d1e:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <xTaskResumeAll+0x12c>)
 8009d20:	2201      	movs	r2, #1
 8009d22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1f1      	bne.n	8009d14 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009d30:	4b12      	ldr	r3, [pc, #72]	; (8009d7c <xTaskResumeAll+0x130>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d36:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <xTaskResumeAll+0x12c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d009      	beq.n	8009d52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d42:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <xTaskResumeAll+0x134>)
 8009d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d52:	f001 fb71 	bl	800b438 <vPortExitCritical>

	return xAlreadyYielded;
 8009d56:	68bb      	ldr	r3, [r7, #8]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20000ddc 	.word	0x20000ddc
 8009d64:	20000db4 	.word	0x20000db4
 8009d68:	20000d74 	.word	0x20000d74
 8009d6c:	20000dbc 	.word	0x20000dbc
 8009d70:	200008e4 	.word	0x200008e4
 8009d74:	200008e0 	.word	0x200008e0
 8009d78:	20000dc8 	.word	0x20000dc8
 8009d7c:	20000dc4 	.word	0x20000dc4
 8009d80:	e000ed04 	.word	0xe000ed04

08009d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <xTaskGetTickCount+0x1c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d90:	687b      	ldr	r3, [r7, #4]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	20000db8 	.word	0x20000db8

08009da4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009daa:	f001 fbf3 	bl	800b594 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009dae:	2300      	movs	r3, #0
 8009db0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009db2:	4b04      	ldr	r3, [pc, #16]	; (8009dc4 <xTaskGetTickCountFromISR+0x20>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009db8:	683b      	ldr	r3, [r7, #0]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000db8 	.word	0x20000db8

08009dc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dd2:	4b51      	ldr	r3, [pc, #324]	; (8009f18 <xTaskIncrementTick+0x150>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f040 808d 	bne.w	8009ef6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ddc:	4b4f      	ldr	r3, [pc, #316]	; (8009f1c <xTaskIncrementTick+0x154>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009de4:	4a4d      	ldr	r2, [pc, #308]	; (8009f1c <xTaskIncrementTick+0x154>)
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d11f      	bne.n	8009e30 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009df0:	4b4b      	ldr	r3, [pc, #300]	; (8009f20 <xTaskIncrementTick+0x158>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d009      	beq.n	8009e0e <xTaskIncrementTick+0x46>
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	603b      	str	r3, [r7, #0]
 8009e0c:	e7fe      	b.n	8009e0c <xTaskIncrementTick+0x44>
 8009e0e:	4b44      	ldr	r3, [pc, #272]	; (8009f20 <xTaskIncrementTick+0x158>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	4b43      	ldr	r3, [pc, #268]	; (8009f24 <xTaskIncrementTick+0x15c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a41      	ldr	r2, [pc, #260]	; (8009f20 <xTaskIncrementTick+0x158>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	4a41      	ldr	r2, [pc, #260]	; (8009f24 <xTaskIncrementTick+0x15c>)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	4b41      	ldr	r3, [pc, #260]	; (8009f28 <xTaskIncrementTick+0x160>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	4a3f      	ldr	r2, [pc, #252]	; (8009f28 <xTaskIncrementTick+0x160>)
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	f000 faca 	bl	800a3c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e30:	4b3e      	ldr	r3, [pc, #248]	; (8009f2c <xTaskIncrementTick+0x164>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d34e      	bcc.n	8009ed8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e3a:	4b39      	ldr	r3, [pc, #228]	; (8009f20 <xTaskIncrementTick+0x158>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <xTaskIncrementTick+0x80>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e000      	b.n	8009e4a <xTaskIncrementTick+0x82>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d004      	beq.n	8009e58 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e4e:	4b37      	ldr	r3, [pc, #220]	; (8009f2c <xTaskIncrementTick+0x164>)
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	601a      	str	r2, [r3, #0]
					break;
 8009e56:	e03f      	b.n	8009ed8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e58:	4b31      	ldr	r3, [pc, #196]	; (8009f20 <xTaskIncrementTick+0x158>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d203      	bcs.n	8009e78 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e70:	4a2e      	ldr	r2, [pc, #184]	; (8009f2c <xTaskIncrementTick+0x164>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6013      	str	r3, [r2, #0]
						break;
 8009e76:	e02f      	b.n	8009ed8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe fbe1 	bl	8008644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d004      	beq.n	8009e94 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3318      	adds	r3, #24
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fbd8 	bl	8008644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4b25      	ldr	r3, [pc, #148]	; (8009f30 <xTaskIncrementTick+0x168>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d903      	bls.n	8009ea8 <xTaskIncrementTick+0xe0>
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	4a22      	ldr	r2, [pc, #136]	; (8009f30 <xTaskIncrementTick+0x168>)
 8009ea6:	6013      	str	r3, [r2, #0]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4a1f      	ldr	r2, [pc, #124]	; (8009f34 <xTaskIncrementTick+0x16c>)
 8009eb6:	441a      	add	r2, r3
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f7fe fb63 	bl	800858a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec8:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <xTaskIncrementTick+0x170>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d3b3      	bcc.n	8009e3a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ed6:	e7b0      	b.n	8009e3a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ed8:	4b17      	ldr	r3, [pc, #92]	; (8009f38 <xTaskIncrementTick+0x170>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ede:	4915      	ldr	r1, [pc, #84]	; (8009f34 <xTaskIncrementTick+0x16c>)
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d907      	bls.n	8009f00 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	e004      	b.n	8009f00 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009ef6:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <xTaskIncrementTick+0x174>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3301      	adds	r3, #1
 8009efc:	4a0f      	ldr	r2, [pc, #60]	; (8009f3c <xTaskIncrementTick+0x174>)
 8009efe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <xTaskIncrementTick+0x178>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009f0c:	697b      	ldr	r3, [r7, #20]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3718      	adds	r7, #24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20000ddc 	.word	0x20000ddc
 8009f1c:	20000db8 	.word	0x20000db8
 8009f20:	20000d6c 	.word	0x20000d6c
 8009f24:	20000d70 	.word	0x20000d70
 8009f28:	20000dcc 	.word	0x20000dcc
 8009f2c:	20000dd4 	.word	0x20000dd4
 8009f30:	20000dbc 	.word	0x20000dbc
 8009f34:	200008e4 	.word	0x200008e4
 8009f38:	200008e0 	.word	0x200008e0
 8009f3c:	20000dc4 	.word	0x20000dc4
 8009f40:	20000dc8 	.word	0x20000dc8

08009f44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f4a:	4b27      	ldr	r3, [pc, #156]	; (8009fe8 <vTaskSwitchContext+0xa4>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f52:	4b26      	ldr	r3, [pc, #152]	; (8009fec <vTaskSwitchContext+0xa8>)
 8009f54:	2201      	movs	r2, #1
 8009f56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f58:	e040      	b.n	8009fdc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009f5a:	4b24      	ldr	r3, [pc, #144]	; (8009fec <vTaskSwitchContext+0xa8>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f60:	4b23      	ldr	r3, [pc, #140]	; (8009ff0 <vTaskSwitchContext+0xac>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	e00f      	b.n	8009f88 <vTaskSwitchContext+0x44>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d109      	bne.n	8009f82 <vTaskSwitchContext+0x3e>
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	607b      	str	r3, [r7, #4]
 8009f80:	e7fe      	b.n	8009f80 <vTaskSwitchContext+0x3c>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	491a      	ldr	r1, [pc, #104]	; (8009ff4 <vTaskSwitchContext+0xb0>)
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	440b      	add	r3, r1
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0e5      	beq.n	8009f68 <vTaskSwitchContext+0x24>
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4a13      	ldr	r2, [pc, #76]	; (8009ff4 <vTaskSwitchContext+0xb0>)
 8009fa8:	4413      	add	r3, r2
 8009faa:	60bb      	str	r3, [r7, #8]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	605a      	str	r2, [r3, #4]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d104      	bne.n	8009fcc <vTaskSwitchContext+0x88>
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	605a      	str	r2, [r3, #4]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	4a09      	ldr	r2, [pc, #36]	; (8009ff8 <vTaskSwitchContext+0xb4>)
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	4a06      	ldr	r2, [pc, #24]	; (8009ff0 <vTaskSwitchContext+0xac>)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6013      	str	r3, [r2, #0]
}
 8009fdc:	bf00      	nop
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	20000ddc 	.word	0x20000ddc
 8009fec:	20000dc8 	.word	0x20000dc8
 8009ff0:	20000dbc 	.word	0x20000dbc
 8009ff4:	200008e4 	.word	0x200008e4
 8009ff8:	200008e0 	.word	0x200008e0

08009ffc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d109      	bne.n	800a020 <vTaskPlaceOnEventList+0x24>
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	e7fe      	b.n	800a01e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <vTaskPlaceOnEventList+0x44>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3318      	adds	r3, #24
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7fe fad2 	bl	80085d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a02e:	2101      	movs	r1, #1
 800a030:	6838      	ldr	r0, [r7, #0]
 800a032:	f000 fd51 	bl	800aad8 <prvAddCurrentTaskToDelayedList>
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	200008e0 	.word	0x200008e0

0800a044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d109      	bne.n	800a06a <vTaskPlaceOnEventListRestricted+0x26>
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e7fe      	b.n	800a068 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a06a:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <vTaskPlaceOnEventListRestricted+0x50>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3318      	adds	r3, #24
 800a070:	4619      	mov	r1, r3
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f7fe fa89 	bl	800858a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a07e:	f04f 33ff 	mov.w	r3, #4294967295
 800a082:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	68b8      	ldr	r0, [r7, #8]
 800a088:	f000 fd26 	bl	800aad8 <prvAddCurrentTaskToDelayedList>
	}
 800a08c:	bf00      	nop
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	200008e0 	.word	0x200008e0

0800a098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d109      	bne.n	800a0c2 <xTaskRemoveFromEventList+0x2a>
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e7fe      	b.n	800a0c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fabc 	bl	8008644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0cc:	4b1d      	ldr	r3, [pc, #116]	; (800a144 <xTaskRemoveFromEventList+0xac>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d11d      	bne.n	800a110 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fab3 	bl	8008644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e2:	4b19      	ldr	r3, [pc, #100]	; (800a148 <xTaskRemoveFromEventList+0xb0>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d903      	bls.n	800a0f2 <xTaskRemoveFromEventList+0x5a>
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	4a16      	ldr	r2, [pc, #88]	; (800a148 <xTaskRemoveFromEventList+0xb0>)
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4a13      	ldr	r2, [pc, #76]	; (800a14c <xTaskRemoveFromEventList+0xb4>)
 800a100:	441a      	add	r2, r3
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	3304      	adds	r3, #4
 800a106:	4619      	mov	r1, r3
 800a108:	4610      	mov	r0, r2
 800a10a:	f7fe fa3e 	bl	800858a <vListInsertEnd>
 800a10e:	e005      	b.n	800a11c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	3318      	adds	r3, #24
 800a114:	4619      	mov	r1, r3
 800a116:	480e      	ldr	r0, [pc, #56]	; (800a150 <xTaskRemoveFromEventList+0xb8>)
 800a118:	f7fe fa37 	bl	800858a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a120:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <xTaskRemoveFromEventList+0xbc>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	429a      	cmp	r2, r3
 800a128:	d905      	bls.n	800a136 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a12a:	2301      	movs	r3, #1
 800a12c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a12e:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <xTaskRemoveFromEventList+0xc0>)
 800a130:	2201      	movs	r2, #1
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	e001      	b.n	800a13a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a13a:	697b      	ldr	r3, [r7, #20]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20000ddc 	.word	0x20000ddc
 800a148:	20000dbc 	.word	0x20000dbc
 800a14c:	200008e4 	.word	0x200008e4
 800a150:	20000d74 	.word	0x20000d74
 800a154:	200008e0 	.word	0x200008e0
 800a158:	20000dc8 	.word	0x20000dc8

0800a15c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a164:	4b06      	ldr	r3, [pc, #24]	; (800a180 <vTaskInternalSetTimeOutState+0x24>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <vTaskInternalSetTimeOutState+0x28>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	605a      	str	r2, [r3, #4]
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	20000dcc 	.word	0x20000dcc
 800a184:	20000db8 	.word	0x20000db8

0800a188 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d109      	bne.n	800a1ac <xTaskCheckForTimeOut+0x24>
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	613b      	str	r3, [r7, #16]
 800a1aa:	e7fe      	b.n	800a1aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d109      	bne.n	800a1c6 <xTaskCheckForTimeOut+0x3e>
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e7fe      	b.n	800a1c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a1c6:	f001 f909 	bl	800b3dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1ca:	4b1d      	ldr	r3, [pc, #116]	; (800a240 <xTaskCheckForTimeOut+0xb8>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e2:	d102      	bne.n	800a1ea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	61fb      	str	r3, [r7, #28]
 800a1e8:	e023      	b.n	800a232 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	4b15      	ldr	r3, [pc, #84]	; (800a244 <xTaskCheckForTimeOut+0xbc>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d007      	beq.n	800a206 <xTaskCheckForTimeOut+0x7e>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d302      	bcc.n	800a206 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e015      	b.n	800a232 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d20b      	bcs.n	800a228 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	1ad2      	subs	r2, r2, r3
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff ff9d 	bl	800a15c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a222:	2300      	movs	r3, #0
 800a224:	61fb      	str	r3, [r7, #28]
 800a226:	e004      	b.n	800a232 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a232:	f001 f901 	bl	800b438 <vPortExitCritical>

	return xReturn;
 800a236:	69fb      	ldr	r3, [r7, #28]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20000db8 	.word	0x20000db8
 800a244:	20000dcc 	.word	0x20000dcc

0800a248 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a248:	b480      	push	{r7}
 800a24a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a24c:	4b03      	ldr	r3, [pc, #12]	; (800a25c <vTaskMissedYield+0x14>)
 800a24e:	2201      	movs	r2, #1
 800a250:	601a      	str	r2, [r3, #0]
}
 800a252:	bf00      	nop
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000dc8 	.word	0x20000dc8

0800a260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a268:	f000 f852 	bl	800a310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <prvIdleTask+0x28>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d9f9      	bls.n	800a268 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a274:	4b05      	ldr	r3, [pc, #20]	; (800a28c <prvIdleTask+0x2c>)
 800a276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a284:	e7f0      	b.n	800a268 <prvIdleTask+0x8>
 800a286:	bf00      	nop
 800a288:	200008e4 	.word	0x200008e4
 800a28c:	e000ed04 	.word	0xe000ed04

0800a290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]
 800a29a:	e00c      	b.n	800a2b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4a12      	ldr	r2, [pc, #72]	; (800a2f0 <prvInitialiseTaskLists+0x60>)
 800a2a8:	4413      	add	r3, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe f940 	bl	8008530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	607b      	str	r3, [r7, #4]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b37      	cmp	r3, #55	; 0x37
 800a2ba:	d9ef      	bls.n	800a29c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2bc:	480d      	ldr	r0, [pc, #52]	; (800a2f4 <prvInitialiseTaskLists+0x64>)
 800a2be:	f7fe f937 	bl	8008530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2c2:	480d      	ldr	r0, [pc, #52]	; (800a2f8 <prvInitialiseTaskLists+0x68>)
 800a2c4:	f7fe f934 	bl	8008530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2c8:	480c      	ldr	r0, [pc, #48]	; (800a2fc <prvInitialiseTaskLists+0x6c>)
 800a2ca:	f7fe f931 	bl	8008530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2ce:	480c      	ldr	r0, [pc, #48]	; (800a300 <prvInitialiseTaskLists+0x70>)
 800a2d0:	f7fe f92e 	bl	8008530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2d4:	480b      	ldr	r0, [pc, #44]	; (800a304 <prvInitialiseTaskLists+0x74>)
 800a2d6:	f7fe f92b 	bl	8008530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2da:	4b0b      	ldr	r3, [pc, #44]	; (800a308 <prvInitialiseTaskLists+0x78>)
 800a2dc:	4a05      	ldr	r2, [pc, #20]	; (800a2f4 <prvInitialiseTaskLists+0x64>)
 800a2de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	; (800a30c <prvInitialiseTaskLists+0x7c>)
 800a2e2:	4a05      	ldr	r2, [pc, #20]	; (800a2f8 <prvInitialiseTaskLists+0x68>)
 800a2e4:	601a      	str	r2, [r3, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200008e4 	.word	0x200008e4
 800a2f4:	20000d44 	.word	0x20000d44
 800a2f8:	20000d58 	.word	0x20000d58
 800a2fc:	20000d74 	.word	0x20000d74
 800a300:	20000d88 	.word	0x20000d88
 800a304:	20000da0 	.word	0x20000da0
 800a308:	20000d6c 	.word	0x20000d6c
 800a30c:	20000d70 	.word	0x20000d70

0800a310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a316:	e019      	b.n	800a34c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a318:	f001 f860 	bl	800b3dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a31c:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <prvCheckTasksWaitingTermination+0x4c>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3304      	adds	r3, #4
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe f98b 	bl	8008644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a32e:	4b0c      	ldr	r3, [pc, #48]	; (800a360 <prvCheckTasksWaitingTermination+0x50>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3b01      	subs	r3, #1
 800a334:	4a0a      	ldr	r2, [pc, #40]	; (800a360 <prvCheckTasksWaitingTermination+0x50>)
 800a336:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a338:	4b0a      	ldr	r3, [pc, #40]	; (800a364 <prvCheckTasksWaitingTermination+0x54>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	4a09      	ldr	r2, [pc, #36]	; (800a364 <prvCheckTasksWaitingTermination+0x54>)
 800a340:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a342:	f001 f879 	bl	800b438 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f80e 	bl	800a368 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a34c:	4b05      	ldr	r3, [pc, #20]	; (800a364 <prvCheckTasksWaitingTermination+0x54>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e1      	bne.n	800a318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a354:	bf00      	nop
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	20000d88 	.word	0x20000d88
 800a360:	20000db4 	.word	0x20000db4
 800a364:	20000d9c 	.word	0x20000d9c

0800a368 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a376:	2b00      	cmp	r3, #0
 800a378:	d108      	bne.n	800a38c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 fa08 	bl	800b794 <vPortFree>
				vPortFree( pxTCB );
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f001 fa05 	bl	800b794 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a38a:	e017      	b.n	800a3bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a392:	2b01      	cmp	r3, #1
 800a394:	d103      	bne.n	800a39e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f001 f9fc 	bl	800b794 <vPortFree>
	}
 800a39c:	e00e      	b.n	800a3bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d009      	beq.n	800a3bc <prvDeleteTCB+0x54>
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	60fb      	str	r3, [r7, #12]
 800a3ba:	e7fe      	b.n	800a3ba <prvDeleteTCB+0x52>
	}
 800a3bc:	bf00      	nop
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3ca:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <prvResetNextTaskUnblockTime+0x44>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <prvResetNextTaskUnblockTime+0x14>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <prvResetNextTaskUnblockTime+0x16>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d004      	beq.n	800a3e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3de:	4b0b      	ldr	r3, [pc, #44]	; (800a40c <prvResetNextTaskUnblockTime+0x48>)
 800a3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3e6:	e008      	b.n	800a3fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a3e8:	4b07      	ldr	r3, [pc, #28]	; (800a408 <prvResetNextTaskUnblockTime+0x44>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	4a05      	ldr	r2, [pc, #20]	; (800a40c <prvResetNextTaskUnblockTime+0x48>)
 800a3f8:	6013      	str	r3, [r2, #0]
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20000d6c 	.word	0x20000d6c
 800a40c:	20000dd4 	.word	0x20000dd4

0800a410 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a416:	4b05      	ldr	r3, [pc, #20]	; (800a42c <xTaskGetCurrentTaskHandle+0x1c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a41c:	687b      	ldr	r3, [r7, #4]
	}
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	200008e0 	.word	0x200008e0

0800a430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a436:	4b0b      	ldr	r3, [pc, #44]	; (800a464 <xTaskGetSchedulerState+0x34>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a43e:	2301      	movs	r3, #1
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	e008      	b.n	800a456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a444:	4b08      	ldr	r3, [pc, #32]	; (800a468 <xTaskGetSchedulerState+0x38>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a44c:	2302      	movs	r3, #2
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	e001      	b.n	800a456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a452:	2300      	movs	r3, #0
 800a454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a456:	687b      	ldr	r3, [r7, #4]
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	20000dc0 	.word	0x20000dc0
 800a468:	20000ddc 	.word	0x20000ddc

0800a46c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d056      	beq.n	800a530 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a486:	4b2d      	ldr	r3, [pc, #180]	; (800a53c <xTaskPriorityInherit+0xd0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d246      	bcs.n	800a51e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	2b00      	cmp	r3, #0
 800a496:	db06      	blt.n	800a4a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a498:	4b28      	ldr	r3, [pc, #160]	; (800a53c <xTaskPriorityInherit+0xd0>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	6959      	ldr	r1, [r3, #20]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4a22      	ldr	r2, [pc, #136]	; (800a540 <xTaskPriorityInherit+0xd4>)
 800a4b8:	4413      	add	r3, r2
 800a4ba:	4299      	cmp	r1, r3
 800a4bc:	d101      	bne.n	800a4c2 <xTaskPriorityInherit+0x56>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <xTaskPriorityInherit+0x58>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d022      	beq.n	800a50e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fe f8b9 	bl	8008644 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4d2:	4b1a      	ldr	r3, [pc, #104]	; (800a53c <xTaskPriorityInherit+0xd0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e0:	4b18      	ldr	r3, [pc, #96]	; (800a544 <xTaskPriorityInherit+0xd8>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d903      	bls.n	800a4f0 <xTaskPriorityInherit+0x84>
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	4a15      	ldr	r2, [pc, #84]	; (800a544 <xTaskPriorityInherit+0xd8>)
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4a10      	ldr	r2, [pc, #64]	; (800a540 <xTaskPriorityInherit+0xd4>)
 800a4fe:	441a      	add	r2, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	3304      	adds	r3, #4
 800a504:	4619      	mov	r1, r3
 800a506:	4610      	mov	r0, r2
 800a508:	f7fe f83f 	bl	800858a <vListInsertEnd>
 800a50c:	e004      	b.n	800a518 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a50e:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <xTaskPriorityInherit+0xd0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a518:	2301      	movs	r3, #1
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	e008      	b.n	800a530 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a522:	4b06      	ldr	r3, [pc, #24]	; (800a53c <xTaskPriorityInherit+0xd0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	429a      	cmp	r2, r3
 800a52a:	d201      	bcs.n	800a530 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a52c:	2301      	movs	r3, #1
 800a52e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a530:	68fb      	ldr	r3, [r7, #12]
	}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	200008e0 	.word	0x200008e0
 800a540:	200008e4 	.word	0x200008e4
 800a544:	20000dbc 	.word	0x20000dbc

0800a548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d054      	beq.n	800a608 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a55e:	4b2d      	ldr	r3, [pc, #180]	; (800a614 <xTaskPriorityDisinherit+0xcc>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	429a      	cmp	r2, r3
 800a566:	d009      	beq.n	800a57c <xTaskPriorityDisinherit+0x34>
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	e7fe      	b.n	800a57a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a580:	2b00      	cmp	r3, #0
 800a582:	d109      	bne.n	800a598 <xTaskPriorityDisinherit+0x50>
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	60bb      	str	r3, [r7, #8]
 800a596:	e7fe      	b.n	800a596 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59c:	1e5a      	subs	r2, r3, #1
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d02c      	beq.n	800a608 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d128      	bne.n	800a608 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe f842 	bl	8008644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d8:	4b0f      	ldr	r3, [pc, #60]	; (800a618 <xTaskPriorityDisinherit+0xd0>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d903      	bls.n	800a5e8 <xTaskPriorityDisinherit+0xa0>
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e4:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <xTaskPriorityDisinherit+0xd0>)
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4a09      	ldr	r2, [pc, #36]	; (800a61c <xTaskPriorityDisinherit+0xd4>)
 800a5f6:	441a      	add	r2, r3
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4610      	mov	r0, r2
 800a600:	f7fd ffc3 	bl	800858a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a604:	2301      	movs	r3, #1
 800a606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a608:	697b      	ldr	r3, [r7, #20]
	}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	200008e0 	.word	0x200008e0
 800a618:	20000dbc 	.word	0x20000dbc
 800a61c:	200008e4 	.word	0x200008e4

0800a620 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a62e:	2301      	movs	r3, #1
 800a630:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d06d      	beq.n	800a714 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d109      	bne.n	800a654 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	e7fe      	b.n	800a652 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d902      	bls.n	800a664 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	61fb      	str	r3, [r7, #28]
 800a662:	e002      	b.n	800a66a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a668:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	429a      	cmp	r2, r3
 800a672:	d04f      	beq.n	800a714 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d14a      	bne.n	800a714 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a67e:	4b27      	ldr	r3, [pc, #156]	; (800a71c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	429a      	cmp	r2, r3
 800a686:	d109      	bne.n	800a69c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	60bb      	str	r3, [r7, #8]
 800a69a:	e7fe      	b.n	800a69a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	69fa      	ldr	r2, [r7, #28]
 800a6a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	db04      	blt.n	800a6ba <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	6959      	ldr	r1, [r3, #20]
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4a15      	ldr	r2, [pc, #84]	; (800a720 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6ca:	4413      	add	r3, r2
 800a6cc:	4299      	cmp	r1, r3
 800a6ce:	d101      	bne.n	800a6d4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d01c      	beq.n	800a714 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fd ffb0 	bl	8008644 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e8:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d903      	bls.n	800a6f8 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	4a0b      	ldr	r2, [pc, #44]	; (800a724 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4a06      	ldr	r2, [pc, #24]	; (800a720 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a706:	441a      	add	r2, r3
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fd ff3b 	bl	800858a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a714:	bf00      	nop
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	200008e0 	.word	0x200008e0
 800a720:	200008e4 	.word	0x200008e4
 800a724:	20000dbc 	.word	0x20000dbc

0800a728 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <pvTaskIncrementMutexHeldCount+0x24>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d004      	beq.n	800a73e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a734:	4b05      	ldr	r3, [pc, #20]	; (800a74c <pvTaskIncrementMutexHeldCount+0x24>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a73a:	3201      	adds	r2, #1
 800a73c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a73e:	4b03      	ldr	r3, [pc, #12]	; (800a74c <pvTaskIncrementMutexHeldCount+0x24>)
 800a740:	681b      	ldr	r3, [r3, #0]
	}
 800a742:	4618      	mov	r0, r3
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	200008e0 	.word	0x200008e0

0800a750 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a75e:	f000 fe3d 	bl	800b3dc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a762:	4b26      	ldr	r3, [pc, #152]	; (800a7fc <xTaskNotifyWait+0xac>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d01a      	beq.n	800a7a6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a770:	4b22      	ldr	r3, [pc, #136]	; (800a7fc <xTaskNotifyWait+0xac>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	43d2      	mvns	r2, r2
 800a77a:	400a      	ands	r2, r1
 800a77c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a77e:	4b1f      	ldr	r3, [pc, #124]	; (800a7fc <xTaskNotifyWait+0xac>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00b      	beq.n	800a7a6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a78e:	2101      	movs	r1, #1
 800a790:	6838      	ldr	r0, [r7, #0]
 800a792:	f000 f9a1 	bl	800aad8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a796:	4b1a      	ldr	r3, [pc, #104]	; (800a800 <xTaskNotifyWait+0xb0>)
 800a798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a7a6:	f000 fe47 	bl	800b438 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a7aa:	f000 fe17 	bl	800b3dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a7b4:	4b11      	ldr	r3, [pc, #68]	; (800a7fc <xTaskNotifyWait+0xac>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a7be:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <xTaskNotifyWait+0xac>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d002      	beq.n	800a7d2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	e008      	b.n	800a7e4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a7d2:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <xTaskNotifyWait+0xac>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	43d2      	mvns	r2, r2
 800a7dc:	400a      	ands	r2, r1
 800a7de:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7e4:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <xTaskNotifyWait+0xac>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800a7ee:	f000 fe23 	bl	800b438 <vPortExitCritical>

		return xReturn;
 800a7f2:	697b      	ldr	r3, [r7, #20]
	}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	200008e0 	.word	0x200008e0
 800a800:	e000ed04 	.word	0xe000ed04

0800a804 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08a      	sub	sp, #40	; 0x28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	603b      	str	r3, [r7, #0]
 800a810:	4613      	mov	r3, r2
 800a812:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a814:	2301      	movs	r3, #1
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <xTaskGenericNotify+0x2e>
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	61bb      	str	r3, [r7, #24]
 800a830:	e7fe      	b.n	800a830 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a836:	f000 fdd1 	bl	800b3dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a84e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a850:	6a3b      	ldr	r3, [r7, #32]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d827      	bhi.n	800a8ae <xTaskGenericNotify+0xaa>
 800a85e:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <xTaskGenericNotify+0x60>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a8af 	.word	0x0800a8af
 800a868:	0800a879 	.word	0x0800a879
 800a86c:	0800a887 	.word	0x0800a887
 800a870:	0800a893 	.word	0x0800a893
 800a874:	0800a89b 	.word	0x0800a89b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	431a      	orrs	r2, r3
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a884:	e013      	b.n	800a8ae <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a890:	e00d      	b.n	800a8ae <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a898:	e009      	b.n	800a8ae <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a89a:	7ffb      	ldrb	r3, [r7, #31]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d003      	beq.n	800a8a8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a8a6:	e001      	b.n	800a8ac <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a8ac:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a8ae:	7ffb      	ldrb	r3, [r7, #31]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d139      	bne.n	800a928 <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fd fec3 	bl	8008644 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c2:	4b1d      	ldr	r3, [pc, #116]	; (800a938 <xTaskGenericNotify+0x134>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d903      	bls.n	800a8d2 <xTaskGenericNotify+0xce>
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	4a1a      	ldr	r2, [pc, #104]	; (800a938 <xTaskGenericNotify+0x134>)
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4a17      	ldr	r2, [pc, #92]	; (800a93c <xTaskGenericNotify+0x138>)
 800a8e0:	441a      	add	r2, r3
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	f7fd fe4e 	bl	800858a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d009      	beq.n	800a90a <xTaskGenericNotify+0x106>
 800a8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	e7fe      	b.n	800a908 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90e:	4b0c      	ldr	r3, [pc, #48]	; (800a940 <xTaskGenericNotify+0x13c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	429a      	cmp	r2, r3
 800a916:	d907      	bls.n	800a928 <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a918:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <xTaskGenericNotify+0x140>)
 800a91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a928:	f000 fd86 	bl	800b438 <vPortExitCritical>

		return xReturn;
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a92e:	4618      	mov	r0, r3
 800a930:	3728      	adds	r7, #40	; 0x28
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20000dbc 	.word	0x20000dbc
 800a93c:	200008e4 	.word	0x200008e4
 800a940:	200008e0 	.word	0x200008e0
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08e      	sub	sp, #56	; 0x38
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	603b      	str	r3, [r7, #0]
 800a954:	4613      	mov	r3, r2
 800a956:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a958:	2301      	movs	r3, #1
 800a95a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d109      	bne.n	800a976 <xTaskGenericNotifyFromISR+0x2e>
 800a962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	627b      	str	r3, [r7, #36]	; 0x24
 800a974:	e7fe      	b.n	800a974 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a976:	f000 fe0d 	bl	800b594 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a97e:	f3ef 8211 	mrs	r2, BASEPRI
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	623a      	str	r2, [r7, #32]
 800a994:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a996:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a9ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d829      	bhi.n	800aa14 <xTaskGenericNotifyFromISR+0xcc>
 800a9c0:	a201      	add	r2, pc, #4	; (adr r2, 800a9c8 <xTaskGenericNotifyFromISR+0x80>)
 800a9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c6:	bf00      	nop
 800a9c8:	0800aa15 	.word	0x0800aa15
 800a9cc:	0800a9dd 	.word	0x0800a9dd
 800a9d0:	0800a9eb 	.word	0x0800a9eb
 800a9d4:	0800a9f7 	.word	0x0800a9f7
 800a9d8:	0800a9ff 	.word	0x0800a9ff
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a9e8:	e014      	b.n	800aa14 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a9f4:	e00e      	b.n	800aa14 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a9fc:	e00a      	b.n	800aa14 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a9fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d003      	beq.n	800aa0e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800aa0c:	e001      	b.n	800aa12 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800aa12:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800aa14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d146      	bne.n	800aaaa <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	e7fe      	b.n	800aa36 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa38:	4b21      	ldr	r3, [pc, #132]	; (800aac0 <xTaskGenericNotifyFromISR+0x178>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d11d      	bne.n	800aa7c <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	3304      	adds	r3, #4
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fd fdfd 	bl	8008644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4e:	4b1d      	ldr	r3, [pc, #116]	; (800aac4 <xTaskGenericNotifyFromISR+0x17c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d903      	bls.n	800aa5e <xTaskGenericNotifyFromISR+0x116>
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5a:	4a1a      	ldr	r2, [pc, #104]	; (800aac4 <xTaskGenericNotifyFromISR+0x17c>)
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4a17      	ldr	r2, [pc, #92]	; (800aac8 <xTaskGenericNotifyFromISR+0x180>)
 800aa6c:	441a      	add	r2, r3
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	3304      	adds	r3, #4
 800aa72:	4619      	mov	r1, r3
 800aa74:	4610      	mov	r0, r2
 800aa76:	f7fd fd88 	bl	800858a <vListInsertEnd>
 800aa7a:	e005      	b.n	800aa88 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	3318      	adds	r3, #24
 800aa80:	4619      	mov	r1, r3
 800aa82:	4812      	ldr	r0, [pc, #72]	; (800aacc <xTaskGenericNotifyFromISR+0x184>)
 800aa84:	f7fd fd81 	bl	800858a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8c:	4b10      	ldr	r3, [pc, #64]	; (800aad0 <xTaskGenericNotifyFromISR+0x188>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d909      	bls.n	800aaaa <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800aa96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800aa9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	e002      	b.n	800aaaa <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800aaa4:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <xTaskGenericNotifyFromISR+0x18c>)
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	617b      	str	r3, [r7, #20]
	__asm volatile
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800aab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3738      	adds	r7, #56	; 0x38
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20000ddc 	.word	0x20000ddc
 800aac4:	20000dbc 	.word	0x20000dbc
 800aac8:	200008e4 	.word	0x200008e4
 800aacc:	20000d74 	.word	0x20000d74
 800aad0:	200008e0 	.word	0x200008e0
 800aad4:	20000dc8 	.word	0x20000dc8

0800aad8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aae2:	4b21      	ldr	r3, [pc, #132]	; (800ab68 <prvAddCurrentTaskToDelayedList+0x90>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aae8:	4b20      	ldr	r3, [pc, #128]	; (800ab6c <prvAddCurrentTaskToDelayedList+0x94>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3304      	adds	r3, #4
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fd fda8 	bl	8008644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafa:	d10a      	bne.n	800ab12 <prvAddCurrentTaskToDelayedList+0x3a>
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab02:	4b1a      	ldr	r3, [pc, #104]	; (800ab6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4819      	ldr	r0, [pc, #100]	; (800ab70 <prvAddCurrentTaskToDelayedList+0x98>)
 800ab0c:	f7fd fd3d 	bl	800858a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab10:	e026      	b.n	800ab60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4413      	add	r3, r2
 800ab18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab1a:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d209      	bcs.n	800ab3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab2a:	4b12      	ldr	r3, [pc, #72]	; (800ab74 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	4b0f      	ldr	r3, [pc, #60]	; (800ab6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4619      	mov	r1, r3
 800ab36:	4610      	mov	r0, r2
 800ab38:	f7fd fd4b 	bl	80085d2 <vListInsert>
}
 800ab3c:	e010      	b.n	800ab60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab3e:	4b0e      	ldr	r3, [pc, #56]	; (800ab78 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	4b0a      	ldr	r3, [pc, #40]	; (800ab6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3304      	adds	r3, #4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7fd fd41 	bl	80085d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d202      	bcs.n	800ab60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab5a:	4a08      	ldr	r2, [pc, #32]	; (800ab7c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	6013      	str	r3, [r2, #0]
}
 800ab60:	bf00      	nop
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	20000db8 	.word	0x20000db8
 800ab6c:	200008e0 	.word	0x200008e0
 800ab70:	20000da0 	.word	0x20000da0
 800ab74:	20000d70 	.word	0x20000d70
 800ab78:	20000d6c 	.word	0x20000d6c
 800ab7c:	20000dd4 	.word	0x20000dd4

0800ab80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b08a      	sub	sp, #40	; 0x28
 800ab84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab8a:	f000 fac3 	bl	800b114 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab8e:	4b1c      	ldr	r3, [pc, #112]	; (800ac00 <xTimerCreateTimerTask+0x80>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d021      	beq.n	800abda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab9e:	1d3a      	adds	r2, r7, #4
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	f107 030c 	add.w	r3, r7, #12
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fd fca7 	bl	80084fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	9202      	str	r2, [sp, #8]
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	2302      	movs	r3, #2
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	2300      	movs	r3, #0
 800abbe:	460a      	mov	r2, r1
 800abc0:	4910      	ldr	r1, [pc, #64]	; (800ac04 <xTimerCreateTimerTask+0x84>)
 800abc2:	4811      	ldr	r0, [pc, #68]	; (800ac08 <xTimerCreateTimerTask+0x88>)
 800abc4:	f7fe fe08 	bl	80097d8 <xTaskCreateStatic>
 800abc8:	4602      	mov	r2, r0
 800abca:	4b10      	ldr	r3, [pc, #64]	; (800ac0c <xTimerCreateTimerTask+0x8c>)
 800abcc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800abce:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <xTimerCreateTimerTask+0x8c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800abd6:	2301      	movs	r3, #1
 800abd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d109      	bne.n	800abf4 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	e7fe      	b.n	800abf2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800abf4:	697b      	ldr	r3, [r7, #20]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20000e10 	.word	0x20000e10
 800ac04:	08016adc 	.word	0x08016adc
 800ac08:	0800ad29 	.word	0x0800ad29
 800ac0c:	20000e14 	.word	0x20000e14

0800ac10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08a      	sub	sp, #40	; 0x28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
 800ac1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d109      	bne.n	800ac3c <xTimerGenericCommand+0x2c>
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	623b      	str	r3, [r7, #32]
 800ac3a:	e7fe      	b.n	800ac3a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac3c:	4b19      	ldr	r3, [pc, #100]	; (800aca4 <xTimerGenericCommand+0x94>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d02a      	beq.n	800ac9a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b05      	cmp	r3, #5
 800ac54:	dc18      	bgt.n	800ac88 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac56:	f7ff fbeb 	bl	800a430 <xTaskGetSchedulerState>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d109      	bne.n	800ac74 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac60:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <xTimerGenericCommand+0x94>)
 800ac62:	6818      	ldr	r0, [r3, #0]
 800ac64:	f107 0110 	add.w	r1, r7, #16
 800ac68:	2300      	movs	r3, #0
 800ac6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6c:	f7fd ff6a 	bl	8008b44 <xQueueGenericSend>
 800ac70:	6278      	str	r0, [r7, #36]	; 0x24
 800ac72:	e012      	b.n	800ac9a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac74:	4b0b      	ldr	r3, [pc, #44]	; (800aca4 <xTimerGenericCommand+0x94>)
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	f107 0110 	add.w	r1, r7, #16
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f7fd ff60 	bl	8008b44 <xQueueGenericSend>
 800ac84:	6278      	str	r0, [r7, #36]	; 0x24
 800ac86:	e008      	b.n	800ac9a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac88:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <xTimerGenericCommand+0x94>)
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	f107 0110 	add.w	r1, r7, #16
 800ac90:	2300      	movs	r3, #0
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	f7fe f850 	bl	8008d38 <xQueueGenericSendFromISR>
 800ac98:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3728      	adds	r7, #40	; 0x28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20000e10 	.word	0x20000e10

0800aca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af02      	add	r7, sp, #8
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acb2:	4b1c      	ldr	r3, [pc, #112]	; (800ad24 <prvProcessExpiredTimer+0x7c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	3304      	adds	r3, #4
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fd fcbf 	bl	8008644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d121      	bne.n	800ad12 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	699a      	ldr	r2, [r3, #24]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	18d1      	adds	r1, r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	6978      	ldr	r0, [r7, #20]
 800acdc:	f000 f8c8 	bl	800ae70 <prvInsertTimerInActiveList>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d015      	beq.n	800ad12 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ace6:	2300      	movs	r3, #0
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	2300      	movs	r3, #0
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	2100      	movs	r1, #0
 800acf0:	6978      	ldr	r0, [r7, #20]
 800acf2:	f7ff ff8d 	bl	800ac10 <xTimerGenericCommand>
 800acf6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d109      	bne.n	800ad12 <prvProcessExpiredTimer+0x6a>
 800acfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	e7fe      	b.n	800ad10 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	6978      	ldr	r0, [r7, #20]
 800ad18:	4798      	blx	r3
}
 800ad1a:	bf00      	nop
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20000e08 	.word	0x20000e08

0800ad28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad30:	f107 0308 	add.w	r3, r7, #8
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f857 	bl	800ade8 <prvGetNextExpireTime>
 800ad3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 f803 	bl	800ad4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad46:	f000 f8d5 	bl	800aef4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad4a:	e7f1      	b.n	800ad30 <prvTimerTask+0x8>

0800ad4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad56:	f7fe ff6b 	bl	8009c30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad5a:	f107 0308 	add.w	r3, r7, #8
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 f866 	bl	800ae30 <prvSampleTimeNow>
 800ad64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d130      	bne.n	800adce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <prvProcessTimerOrBlockTask+0x3c>
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d806      	bhi.n	800ad88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad7a:	f7fe ff67 	bl	8009c4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad7e:	68f9      	ldr	r1, [r7, #12]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff ff91 	bl	800aca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad86:	e024      	b.n	800add2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d008      	beq.n	800ada0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <prvProcessTimerOrBlockTask+0x90>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	bf0c      	ite	eq
 800ad98:	2301      	moveq	r3, #1
 800ad9a:	2300      	movne	r3, #0
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ada0:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <prvProcessTimerOrBlockTask+0x94>)
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	4619      	mov	r1, r3
 800adae:	f7fe fcdf 	bl	8009770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800adb2:	f7fe ff4b 	bl	8009c4c <xTaskResumeAll>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10a      	bne.n	800add2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800adbc:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <prvProcessTimerOrBlockTask+0x98>)
 800adbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	f3bf 8f6f 	isb	sy
}
 800adcc:	e001      	b.n	800add2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adce:	f7fe ff3d 	bl	8009c4c <xTaskResumeAll>
}
 800add2:	bf00      	nop
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20000e0c 	.word	0x20000e0c
 800ade0:	20000e10 	.word	0x20000e10
 800ade4:	e000ed04 	.word	0xe000ed04

0800ade8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800adf0:	4b0e      	ldr	r3, [pc, #56]	; (800ae2c <prvGetNextExpireTime+0x44>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bf0c      	ite	eq
 800adfa:	2301      	moveq	r3, #1
 800adfc:	2300      	movne	r3, #0
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	461a      	mov	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d105      	bne.n	800ae1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae0e:	4b07      	ldr	r3, [pc, #28]	; (800ae2c <prvGetNextExpireTime+0x44>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	e001      	b.n	800ae1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	20000e08 	.word	0x20000e08

0800ae30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae38:	f7fe ffa4 	bl	8009d84 <xTaskGetTickCount>
 800ae3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae3e:	4b0b      	ldr	r3, [pc, #44]	; (800ae6c <prvSampleTimeNow+0x3c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d205      	bcs.n	800ae54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae48:	f000 f904 	bl	800b054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	e002      	b.n	800ae5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae5a:	4a04      	ldr	r2, [pc, #16]	; (800ae6c <prvSampleTimeNow+0x3c>)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae60:	68fb      	ldr	r3, [r7, #12]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000e18 	.word	0x20000e18

0800ae70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d812      	bhi.n	800aebc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	1ad2      	subs	r2, r2, r3
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d302      	bcc.n	800aeaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aea4:	2301      	movs	r3, #1
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	e01b      	b.n	800aee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aeaa:	4b10      	ldr	r3, [pc, #64]	; (800aeec <prvInsertTimerInActiveList+0x7c>)
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f7fd fb8c 	bl	80085d2 <vListInsert>
 800aeba:	e012      	b.n	800aee2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d206      	bcs.n	800aed2 <prvInsertTimerInActiveList+0x62>
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d302      	bcc.n	800aed2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aecc:	2301      	movs	r3, #1
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e007      	b.n	800aee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aed2:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <prvInsertTimerInActiveList+0x80>)
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7fd fb78 	bl	80085d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aee2:	697b      	ldr	r3, [r7, #20]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000e0c 	.word	0x20000e0c
 800aef0:	20000e08 	.word	0x20000e08

0800aef4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08e      	sub	sp, #56	; 0x38
 800aef8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aefa:	e099      	b.n	800b030 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	da17      	bge.n	800af32 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af02:	1d3b      	adds	r3, r7, #4
 800af04:	3304      	adds	r3, #4
 800af06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d109      	bne.n	800af22 <prvProcessReceivedCommands+0x2e>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	61fb      	str	r3, [r7, #28]
 800af20:	e7fe      	b.n	800af20 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af28:	6850      	ldr	r0, [r2, #4]
 800af2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af2c:	6892      	ldr	r2, [r2, #8]
 800af2e:	4611      	mov	r1, r2
 800af30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	db7a      	blt.n	800b02e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	3304      	adds	r3, #4
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fd fb7b 	bl	8008644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af4e:	463b      	mov	r3, r7
 800af50:	4618      	mov	r0, r3
 800af52:	f7ff ff6d 	bl	800ae30 <prvSampleTimeNow>
 800af56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b09      	cmp	r3, #9
 800af5c:	d868      	bhi.n	800b030 <prvProcessReceivedCommands+0x13c>
 800af5e:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <prvProcessReceivedCommands+0x70>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800af8d 	.word	0x0800af8d
 800af68:	0800af8d 	.word	0x0800af8d
 800af6c:	0800af8d 	.word	0x0800af8d
 800af70:	0800b031 	.word	0x0800b031
 800af74:	0800afe7 	.word	0x0800afe7
 800af78:	0800b01d 	.word	0x0800b01d
 800af7c:	0800af8d 	.word	0x0800af8d
 800af80:	0800af8d 	.word	0x0800af8d
 800af84:	0800b031 	.word	0x0800b031
 800af88:	0800afe7 	.word	0x0800afe7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	18d1      	adds	r1, r2, r3
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af9a:	f7ff ff69 	bl	800ae70 <prvInsertTimerInActiveList>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d045      	beq.n	800b030 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afaa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d13d      	bne.n	800b030 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	441a      	add	r2, r3
 800afbc:	2300      	movs	r3, #0
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	2300      	movs	r3, #0
 800afc2:	2100      	movs	r1, #0
 800afc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afc6:	f7ff fe23 	bl	800ac10 <xTimerGenericCommand>
 800afca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d12e      	bne.n	800b030 <prvProcessReceivedCommands+0x13c>
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	61bb      	str	r3, [r7, #24]
 800afe4:	e7fe      	b.n	800afe4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d109      	bne.n	800b008 <prvProcessReceivedCommands+0x114>
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	617b      	str	r3, [r7, #20]
 800b006:	e7fe      	b.n	800b006 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00a:	699a      	ldr	r2, [r3, #24]
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	18d1      	adds	r1, r2, r3
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b016:	f7ff ff2b 	bl	800ae70 <prvInsertTimerInActiveList>
					break;
 800b01a:	e009      	b.n	800b030 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b022:	2b00      	cmp	r3, #0
 800b024:	d104      	bne.n	800b030 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800b026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b028:	f000 fbb4 	bl	800b794 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b02c:	e000      	b.n	800b030 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b02e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <prvProcessReceivedCommands+0x15c>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	1d39      	adds	r1, r7, #4
 800b036:	2200      	movs	r2, #0
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fd ff9b 	bl	8008f74 <xQueueReceive>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	f47f af5b 	bne.w	800aefc <prvProcessReceivedCommands+0x8>
	}
}
 800b046:	bf00      	nop
 800b048:	3730      	adds	r7, #48	; 0x30
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000e10 	.word	0x20000e10

0800b054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b088      	sub	sp, #32
 800b058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b05a:	e044      	b.n	800b0e6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b05c:	4b2b      	ldr	r3, [pc, #172]	; (800b10c <prvSwitchTimerLists+0xb8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b066:	4b29      	ldr	r3, [pc, #164]	; (800b10c <prvSwitchTimerLists+0xb8>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3304      	adds	r3, #4
 800b074:	4618      	mov	r0, r3
 800b076:	f7fd fae5 	bl	8008644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d12d      	bne.n	800b0e6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4413      	add	r3, r2
 800b092:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d90e      	bls.n	800b0ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0a8:	4b18      	ldr	r3, [pc, #96]	; (800b10c <prvSwitchTimerLists+0xb8>)
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7fd fa8d 	bl	80085d2 <vListInsert>
 800b0b8:	e015      	b.n	800b0e6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff fda3 	bl	800ac10 <xTimerGenericCommand>
 800b0ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <prvSwitchTimerLists+0x92>
 800b0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	e7fe      	b.n	800b0e4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0e6:	4b09      	ldr	r3, [pc, #36]	; (800b10c <prvSwitchTimerLists+0xb8>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1b5      	bne.n	800b05c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0f0:	4b06      	ldr	r3, [pc, #24]	; (800b10c <prvSwitchTimerLists+0xb8>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0f6:	4b06      	ldr	r3, [pc, #24]	; (800b110 <prvSwitchTimerLists+0xbc>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a04      	ldr	r2, [pc, #16]	; (800b10c <prvSwitchTimerLists+0xb8>)
 800b0fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0fe:	4a04      	ldr	r2, [pc, #16]	; (800b110 <prvSwitchTimerLists+0xbc>)
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	6013      	str	r3, [r2, #0]
}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	20000e08 	.word	0x20000e08
 800b110:	20000e0c 	.word	0x20000e0c

0800b114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b11a:	f000 f95f 	bl	800b3dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b11e:	4b15      	ldr	r3, [pc, #84]	; (800b174 <prvCheckForValidListAndQueue+0x60>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d120      	bne.n	800b168 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b126:	4814      	ldr	r0, [pc, #80]	; (800b178 <prvCheckForValidListAndQueue+0x64>)
 800b128:	f7fd fa02 	bl	8008530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b12c:	4813      	ldr	r0, [pc, #76]	; (800b17c <prvCheckForValidListAndQueue+0x68>)
 800b12e:	f7fd f9ff 	bl	8008530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b132:	4b13      	ldr	r3, [pc, #76]	; (800b180 <prvCheckForValidListAndQueue+0x6c>)
 800b134:	4a10      	ldr	r2, [pc, #64]	; (800b178 <prvCheckForValidListAndQueue+0x64>)
 800b136:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b138:	4b12      	ldr	r3, [pc, #72]	; (800b184 <prvCheckForValidListAndQueue+0x70>)
 800b13a:	4a10      	ldr	r2, [pc, #64]	; (800b17c <prvCheckForValidListAndQueue+0x68>)
 800b13c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b13e:	2300      	movs	r3, #0
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	4b11      	ldr	r3, [pc, #68]	; (800b188 <prvCheckForValidListAndQueue+0x74>)
 800b144:	4a11      	ldr	r2, [pc, #68]	; (800b18c <prvCheckForValidListAndQueue+0x78>)
 800b146:	2110      	movs	r1, #16
 800b148:	200a      	movs	r0, #10
 800b14a:	f7fd fb0d 	bl	8008768 <xQueueGenericCreateStatic>
 800b14e:	4602      	mov	r2, r0
 800b150:	4b08      	ldr	r3, [pc, #32]	; (800b174 <prvCheckForValidListAndQueue+0x60>)
 800b152:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <prvCheckForValidListAndQueue+0x60>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b15c:	4b05      	ldr	r3, [pc, #20]	; (800b174 <prvCheckForValidListAndQueue+0x60>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	490b      	ldr	r1, [pc, #44]	; (800b190 <prvCheckForValidListAndQueue+0x7c>)
 800b162:	4618      	mov	r0, r3
 800b164:	f7fe fab2 	bl	80096cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b168:	f000 f966 	bl	800b438 <vPortExitCritical>
}
 800b16c:	bf00      	nop
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000e10 	.word	0x20000e10
 800b178:	20000de0 	.word	0x20000de0
 800b17c:	20000df4 	.word	0x20000df4
 800b180:	20000e08 	.word	0x20000e08
 800b184:	20000e0c 	.word	0x20000e0c
 800b188:	20000ebc 	.word	0x20000ebc
 800b18c:	20000e1c 	.word	0x20000e1c
 800b190:	08016ae4 	.word	0x08016ae4

0800b194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3b04      	subs	r3, #4
 800b1a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3b04      	subs	r3, #4
 800b1b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f023 0201 	bic.w	r2, r3, #1
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3b04      	subs	r3, #4
 800b1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1c4:	4a0c      	ldr	r2, [pc, #48]	; (800b1f8 <pxPortInitialiseStack+0x64>)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3b14      	subs	r3, #20
 800b1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3b04      	subs	r3, #4
 800b1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f06f 0202 	mvn.w	r2, #2
 800b1e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3b20      	subs	r3, #32
 800b1e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	0800b1fd 	.word	0x0800b1fd

0800b1fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <prvTaskExitError+0x50>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20e:	d009      	beq.n	800b224 <prvTaskExitError+0x28>
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
 800b222:	e7fe      	b.n	800b222 <prvTaskExitError+0x26>
 800b224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b236:	bf00      	nop
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0fc      	beq.n	800b238 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b23e:	bf00      	nop
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	2000000c 	.word	0x2000000c

0800b250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b250:	4b07      	ldr	r3, [pc, #28]	; (800b270 <pxCurrentTCBConst2>)
 800b252:	6819      	ldr	r1, [r3, #0]
 800b254:	6808      	ldr	r0, [r1, #0]
 800b256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	f380 8809 	msr	PSP, r0
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f04f 0000 	mov.w	r0, #0
 800b266:	f380 8811 	msr	BASEPRI, r0
 800b26a:	4770      	bx	lr
 800b26c:	f3af 8000 	nop.w

0800b270 <pxCurrentTCBConst2>:
 800b270:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop

0800b278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b278:	4808      	ldr	r0, [pc, #32]	; (800b29c <prvPortStartFirstTask+0x24>)
 800b27a:	6800      	ldr	r0, [r0, #0]
 800b27c:	6800      	ldr	r0, [r0, #0]
 800b27e:	f380 8808 	msr	MSP, r0
 800b282:	f04f 0000 	mov.w	r0, #0
 800b286:	f380 8814 	msr	CONTROL, r0
 800b28a:	b662      	cpsie	i
 800b28c:	b661      	cpsie	f
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	df00      	svc	0
 800b298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b29a:	bf00      	nop
 800b29c:	e000ed08 	.word	0xe000ed08

0800b2a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2a6:	4b44      	ldr	r3, [pc, #272]	; (800b3b8 <xPortStartScheduler+0x118>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a44      	ldr	r2, [pc, #272]	; (800b3bc <xPortStartScheduler+0x11c>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d109      	bne.n	800b2c4 <xPortStartScheduler+0x24>
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	613b      	str	r3, [r7, #16]
 800b2c2:	e7fe      	b.n	800b2c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2c4:	4b3c      	ldr	r3, [pc, #240]	; (800b3b8 <xPortStartScheduler+0x118>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a3d      	ldr	r2, [pc, #244]	; (800b3c0 <xPortStartScheduler+0x120>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d109      	bne.n	800b2e2 <xPortStartScheduler+0x42>
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	e7fe      	b.n	800b2e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2e2:	4b38      	ldr	r3, [pc, #224]	; (800b3c4 <xPortStartScheduler+0x124>)
 800b2e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	22ff      	movs	r2, #255	; 0xff
 800b2f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b304:	b2da      	uxtb	r2, r3
 800b306:	4b30      	ldr	r3, [pc, #192]	; (800b3c8 <xPortStartScheduler+0x128>)
 800b308:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b30a:	4b30      	ldr	r3, [pc, #192]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b30c:	2207      	movs	r2, #7
 800b30e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b310:	e009      	b.n	800b326 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b312:	4b2e      	ldr	r3, [pc, #184]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3b01      	subs	r3, #1
 800b318:	4a2c      	ldr	r2, [pc, #176]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b31a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	b2db      	uxtb	r3, r3
 800b324:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b326:	78fb      	ldrb	r3, [r7, #3]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32e:	2b80      	cmp	r3, #128	; 0x80
 800b330:	d0ef      	beq.n	800b312 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b332:	4b26      	ldr	r3, [pc, #152]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f1c3 0307 	rsb	r3, r3, #7
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d009      	beq.n	800b352 <xPortStartScheduler+0xb2>
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	60bb      	str	r3, [r7, #8]
 800b350:	e7fe      	b.n	800b350 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b352:	4b1e      	ldr	r3, [pc, #120]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	021b      	lsls	r3, r3, #8
 800b358:	4a1c      	ldr	r2, [pc, #112]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b35a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b35c:	4b1b      	ldr	r3, [pc, #108]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b364:	4a19      	ldr	r2, [pc, #100]	; (800b3cc <xPortStartScheduler+0x12c>)
 800b366:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b370:	4b17      	ldr	r3, [pc, #92]	; (800b3d0 <xPortStartScheduler+0x130>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a16      	ldr	r2, [pc, #88]	; (800b3d0 <xPortStartScheduler+0x130>)
 800b376:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b37a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b37c:	4b14      	ldr	r3, [pc, #80]	; (800b3d0 <xPortStartScheduler+0x130>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a13      	ldr	r2, [pc, #76]	; (800b3d0 <xPortStartScheduler+0x130>)
 800b382:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b386:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b388:	f000 f8d6 	bl	800b538 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b38c:	4b11      	ldr	r3, [pc, #68]	; (800b3d4 <xPortStartScheduler+0x134>)
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b392:	f000 f8f5 	bl	800b580 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b396:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <xPortStartScheduler+0x138>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a0f      	ldr	r2, [pc, #60]	; (800b3d8 <xPortStartScheduler+0x138>)
 800b39c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3a2:	f7ff ff69 	bl	800b278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3a6:	f7fe fdcd 	bl	8009f44 <vTaskSwitchContext>
	prvTaskExitError();
 800b3aa:	f7ff ff27 	bl	800b1fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	e000ed00 	.word	0xe000ed00
 800b3bc:	410fc271 	.word	0x410fc271
 800b3c0:	410fc270 	.word	0x410fc270
 800b3c4:	e000e400 	.word	0xe000e400
 800b3c8:	20000f0c 	.word	0x20000f0c
 800b3cc:	20000f10 	.word	0x20000f10
 800b3d0:	e000ed20 	.word	0xe000ed20
 800b3d4:	2000000c 	.word	0x2000000c
 800b3d8:	e000ef34 	.word	0xe000ef34

0800b3dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3f4:	4b0e      	ldr	r3, [pc, #56]	; (800b430 <vPortEnterCritical+0x54>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	4a0d      	ldr	r2, [pc, #52]	; (800b430 <vPortEnterCritical+0x54>)
 800b3fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <vPortEnterCritical+0x54>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d10e      	bne.n	800b424 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b406:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <vPortEnterCritical+0x58>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d009      	beq.n	800b424 <vPortEnterCritical+0x48>
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	603b      	str	r3, [r7, #0]
 800b422:	e7fe      	b.n	800b422 <vPortEnterCritical+0x46>
	}
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	2000000c 	.word	0x2000000c
 800b434:	e000ed04 	.word	0xe000ed04

0800b438 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b43e:	4b11      	ldr	r3, [pc, #68]	; (800b484 <vPortExitCritical+0x4c>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d109      	bne.n	800b45a <vPortExitCritical+0x22>
 800b446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44a:	f383 8811 	msr	BASEPRI, r3
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	607b      	str	r3, [r7, #4]
 800b458:	e7fe      	b.n	800b458 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b45a:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <vPortExitCritical+0x4c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3b01      	subs	r3, #1
 800b460:	4a08      	ldr	r2, [pc, #32]	; (800b484 <vPortExitCritical+0x4c>)
 800b462:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b464:	4b07      	ldr	r3, [pc, #28]	; (800b484 <vPortExitCritical+0x4c>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <vPortExitCritical+0x3e>
 800b46c:	2300      	movs	r3, #0
 800b46e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	2000000c 	.word	0x2000000c
	...

0800b490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b490:	f3ef 8009 	mrs	r0, PSP
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	4b15      	ldr	r3, [pc, #84]	; (800b4f0 <pxCurrentTCBConst>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	f01e 0f10 	tst.w	lr, #16
 800b4a0:	bf08      	it	eq
 800b4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4aa:	6010      	str	r0, [r2, #0]
 800b4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4b4:	f380 8811 	msr	BASEPRI, r0
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f7fe fd40 	bl	8009f44 <vTaskSwitchContext>
 800b4c4:	f04f 0000 	mov.w	r0, #0
 800b4c8:	f380 8811 	msr	BASEPRI, r0
 800b4cc:	bc09      	pop	{r0, r3}
 800b4ce:	6819      	ldr	r1, [r3, #0]
 800b4d0:	6808      	ldr	r0, [r1, #0]
 800b4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d6:	f01e 0f10 	tst.w	lr, #16
 800b4da:	bf08      	it	eq
 800b4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4e0:	f380 8809 	msr	PSP, r0
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	f3af 8000 	nop.w

0800b4f0 <pxCurrentTCBConst>:
 800b4f0:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop

0800b4f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b510:	f7fe fc5a 	bl	8009dc8 <xTaskIncrementTick>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b51a:	4b06      	ldr	r3, [pc, #24]	; (800b534 <SysTick_Handler+0x3c>)
 800b51c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	2300      	movs	r3, #0
 800b524:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b52c:	bf00      	nop
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	e000ed04 	.word	0xe000ed04

0800b538 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b538:	b480      	push	{r7}
 800b53a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b53c:	4b0b      	ldr	r3, [pc, #44]	; (800b56c <vPortSetupTimerInterrupt+0x34>)
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b542:	4b0b      	ldr	r3, [pc, #44]	; (800b570 <vPortSetupTimerInterrupt+0x38>)
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b548:	4b0a      	ldr	r3, [pc, #40]	; (800b574 <vPortSetupTimerInterrupt+0x3c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a0a      	ldr	r2, [pc, #40]	; (800b578 <vPortSetupTimerInterrupt+0x40>)
 800b54e:	fba2 2303 	umull	r2, r3, r2, r3
 800b552:	099b      	lsrs	r3, r3, #6
 800b554:	4a09      	ldr	r2, [pc, #36]	; (800b57c <vPortSetupTimerInterrupt+0x44>)
 800b556:	3b01      	subs	r3, #1
 800b558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b55a:	4b04      	ldr	r3, [pc, #16]	; (800b56c <vPortSetupTimerInterrupt+0x34>)
 800b55c:	2207      	movs	r2, #7
 800b55e:	601a      	str	r2, [r3, #0]
}
 800b560:	bf00      	nop
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	e000e010 	.word	0xe000e010
 800b570:	e000e018 	.word	0xe000e018
 800b574:	20000000 	.word	0x20000000
 800b578:	10624dd3 	.word	0x10624dd3
 800b57c:	e000e014 	.word	0xe000e014

0800b580 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b580:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b590 <vPortEnableVFP+0x10>
 800b584:	6801      	ldr	r1, [r0, #0]
 800b586:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b58a:	6001      	str	r1, [r0, #0]
 800b58c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b58e:	bf00      	nop
 800b590:	e000ed88 	.word	0xe000ed88

0800b594 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b59a:	f3ef 8305 	mrs	r3, IPSR
 800b59e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b0f      	cmp	r3, #15
 800b5a4:	d913      	bls.n	800b5ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5a6:	4a16      	ldr	r2, [pc, #88]	; (800b600 <vPortValidateInterruptPriority+0x6c>)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5b0:	4b14      	ldr	r3, [pc, #80]	; (800b604 <vPortValidateInterruptPriority+0x70>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	7afa      	ldrb	r2, [r7, #11]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d209      	bcs.n	800b5ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	607b      	str	r3, [r7, #4]
 800b5cc:	e7fe      	b.n	800b5cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5ce:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <vPortValidateInterruptPriority+0x74>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b5d6:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <vPortValidateInterruptPriority+0x78>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d909      	bls.n	800b5f2 <vPortValidateInterruptPriority+0x5e>
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	e7fe      	b.n	800b5f0 <vPortValidateInterruptPriority+0x5c>
	}
 800b5f2:	bf00      	nop
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	e000e3f0 	.word	0xe000e3f0
 800b604:	20000f0c 	.word	0x20000f0c
 800b608:	e000ed0c 	.word	0xe000ed0c
 800b60c:	20000f10 	.word	0x20000f10

0800b610 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08a      	sub	sp, #40	; 0x28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b618:	2300      	movs	r3, #0
 800b61a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b61c:	f7fe fb08 	bl	8009c30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b620:	4b57      	ldr	r3, [pc, #348]	; (800b780 <pvPortMalloc+0x170>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b628:	f000 f90c 	bl	800b844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b62c:	4b55      	ldr	r3, [pc, #340]	; (800b784 <pvPortMalloc+0x174>)
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4013      	ands	r3, r2
 800b634:	2b00      	cmp	r3, #0
 800b636:	f040 808c 	bne.w	800b752 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01c      	beq.n	800b67a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b640:	2208      	movs	r2, #8
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4413      	add	r3, r2
 800b646:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f003 0307 	and.w	r3, r3, #7
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d013      	beq.n	800b67a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f023 0307 	bic.w	r3, r3, #7
 800b658:	3308      	adds	r3, #8
 800b65a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f003 0307 	and.w	r3, r3, #7
 800b662:	2b00      	cmp	r3, #0
 800b664:	d009      	beq.n	800b67a <pvPortMalloc+0x6a>
 800b666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	e7fe      	b.n	800b678 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d068      	beq.n	800b752 <pvPortMalloc+0x142>
 800b680:	4b41      	ldr	r3, [pc, #260]	; (800b788 <pvPortMalloc+0x178>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	429a      	cmp	r2, r3
 800b688:	d863      	bhi.n	800b752 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b68a:	4b40      	ldr	r3, [pc, #256]	; (800b78c <pvPortMalloc+0x17c>)
 800b68c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b68e:	4b3f      	ldr	r3, [pc, #252]	; (800b78c <pvPortMalloc+0x17c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b694:	e004      	b.n	800b6a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d903      	bls.n	800b6b2 <pvPortMalloc+0xa2>
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1f1      	bne.n	800b696 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6b2:	4b33      	ldr	r3, [pc, #204]	; (800b780 <pvPortMalloc+0x170>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d04a      	beq.n	800b752 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2208      	movs	r2, #8
 800b6c2:	4413      	add	r3, r2
 800b6c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	685a      	ldr	r2, [r3, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	1ad2      	subs	r2, r2, r3
 800b6d6:	2308      	movs	r3, #8
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d91e      	bls.n	800b71c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	f003 0307 	and.w	r3, r3, #7
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d009      	beq.n	800b704 <pvPortMalloc+0xf4>
 800b6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	613b      	str	r3, [r7, #16]
 800b702:	e7fe      	b.n	800b702 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	1ad2      	subs	r2, r2, r3
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b716:	69b8      	ldr	r0, [r7, #24]
 800b718:	f000 f8f6 	bl	800b908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b71c:	4b1a      	ldr	r3, [pc, #104]	; (800b788 <pvPortMalloc+0x178>)
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	4a18      	ldr	r2, [pc, #96]	; (800b788 <pvPortMalloc+0x178>)
 800b728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b72a:	4b17      	ldr	r3, [pc, #92]	; (800b788 <pvPortMalloc+0x178>)
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	4b18      	ldr	r3, [pc, #96]	; (800b790 <pvPortMalloc+0x180>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d203      	bcs.n	800b73e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b736:	4b14      	ldr	r3, [pc, #80]	; (800b788 <pvPortMalloc+0x178>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a15      	ldr	r2, [pc, #84]	; (800b790 <pvPortMalloc+0x180>)
 800b73c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	4b10      	ldr	r3, [pc, #64]	; (800b784 <pvPortMalloc+0x174>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	431a      	orrs	r2, r3
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	2200      	movs	r2, #0
 800b750:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b752:	f7fe fa7b 	bl	8009c4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	f003 0307 	and.w	r3, r3, #7
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d009      	beq.n	800b774 <pvPortMalloc+0x164>
 800b760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	60fb      	str	r3, [r7, #12]
 800b772:	e7fe      	b.n	800b772 <pvPortMalloc+0x162>
	return pvReturn;
 800b774:	69fb      	ldr	r3, [r7, #28]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3728      	adds	r7, #40	; 0x28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20005f1c 	.word	0x20005f1c
 800b784:	20005f28 	.word	0x20005f28
 800b788:	20005f20 	.word	0x20005f20
 800b78c:	20005f14 	.word	0x20005f14
 800b790:	20005f24 	.word	0x20005f24

0800b794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d046      	beq.n	800b834 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7a6:	2308      	movs	r3, #8
 800b7a8:	425b      	negs	r3, r3
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	4b20      	ldr	r3, [pc, #128]	; (800b83c <vPortFree+0xa8>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4013      	ands	r3, r2
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d109      	bne.n	800b7d6 <vPortFree+0x42>
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	60fb      	str	r3, [r7, #12]
 800b7d4:	e7fe      	b.n	800b7d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d009      	beq.n	800b7f2 <vPortFree+0x5e>
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60bb      	str	r3, [r7, #8]
 800b7f0:	e7fe      	b.n	800b7f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	4b11      	ldr	r3, [pc, #68]	; (800b83c <vPortFree+0xa8>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d019      	beq.n	800b834 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d115      	bne.n	800b834 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	4b0b      	ldr	r3, [pc, #44]	; (800b83c <vPortFree+0xa8>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	43db      	mvns	r3, r3
 800b812:	401a      	ands	r2, r3
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b818:	f7fe fa0a 	bl	8009c30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	685a      	ldr	r2, [r3, #4]
 800b820:	4b07      	ldr	r3, [pc, #28]	; (800b840 <vPortFree+0xac>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4413      	add	r3, r2
 800b826:	4a06      	ldr	r2, [pc, #24]	; (800b840 <vPortFree+0xac>)
 800b828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b82a:	6938      	ldr	r0, [r7, #16]
 800b82c:	f000 f86c 	bl	800b908 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b830:	f7fe fa0c 	bl	8009c4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b834:	bf00      	nop
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20005f28 	.word	0x20005f28
 800b840:	20005f20 	.word	0x20005f20

0800b844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b84a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800b84e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b850:	4b27      	ldr	r3, [pc, #156]	; (800b8f0 <prvHeapInit+0xac>)
 800b852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f003 0307 	and.w	r3, r3, #7
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00c      	beq.n	800b878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	3307      	adds	r3, #7
 800b862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f023 0307 	bic.w	r3, r3, #7
 800b86a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	4a1f      	ldr	r2, [pc, #124]	; (800b8f0 <prvHeapInit+0xac>)
 800b874:	4413      	add	r3, r2
 800b876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b87c:	4a1d      	ldr	r2, [pc, #116]	; (800b8f4 <prvHeapInit+0xb0>)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b882:	4b1c      	ldr	r3, [pc, #112]	; (800b8f4 <prvHeapInit+0xb0>)
 800b884:	2200      	movs	r2, #0
 800b886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	4413      	add	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b890:	2208      	movs	r2, #8
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	1a9b      	subs	r3, r3, r2
 800b896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f023 0307 	bic.w	r3, r3, #7
 800b89e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4a15      	ldr	r2, [pc, #84]	; (800b8f8 <prvHeapInit+0xb4>)
 800b8a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8a6:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <prvHeapInit+0xb4>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8ae:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <prvHeapInit+0xb4>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	1ad2      	subs	r2, r2, r3
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <prvHeapInit+0xb4>)
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	4a0a      	ldr	r2, [pc, #40]	; (800b8fc <prvHeapInit+0xb8>)
 800b8d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	4a09      	ldr	r2, [pc, #36]	; (800b900 <prvHeapInit+0xbc>)
 800b8da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8dc:	4b09      	ldr	r3, [pc, #36]	; (800b904 <prvHeapInit+0xc0>)
 800b8de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8e2:	601a      	str	r2, [r3, #0]
}
 800b8e4:	bf00      	nop
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	20000f14 	.word	0x20000f14
 800b8f4:	20005f14 	.word	0x20005f14
 800b8f8:	20005f1c 	.word	0x20005f1c
 800b8fc:	20005f24 	.word	0x20005f24
 800b900:	20005f20 	.word	0x20005f20
 800b904:	20005f28 	.word	0x20005f28

0800b908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b910:	4b28      	ldr	r3, [pc, #160]	; (800b9b4 <prvInsertBlockIntoFreeList+0xac>)
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	e002      	b.n	800b91c <prvInsertBlockIntoFreeList+0x14>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	429a      	cmp	r2, r3
 800b924:	d8f7      	bhi.n	800b916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	4413      	add	r3, r2
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d108      	bne.n	800b94a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	441a      	add	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	441a      	add	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d118      	bne.n	800b990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	4b15      	ldr	r3, [pc, #84]	; (800b9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d00d      	beq.n	800b986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	441a      	add	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	e008      	b.n	800b998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b986:	4b0c      	ldr	r3, [pc, #48]	; (800b9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	e003      	b.n	800b998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d002      	beq.n	800b9a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9a6:	bf00      	nop
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	20005f14 	.word	0x20005f14
 800b9b8:	20005f1c 	.word	0x20005f1c

0800b9bc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800b9c4:	4b29      	ldr	r3, [pc, #164]	; (800ba6c <tcpip_thread+0xb0>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d005      	beq.n	800b9d8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800b9cc:	4b27      	ldr	r3, [pc, #156]	; (800ba6c <tcpip_thread+0xb0>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a27      	ldr	r2, [pc, #156]	; (800ba70 <tcpip_thread+0xb4>)
 800b9d2:	6812      	ldr	r2, [r2, #0]
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800b9d8:	4826      	ldr	r0, [pc, #152]	; (800ba74 <tcpip_thread+0xb8>)
 800b9da:	f008 f9bb 	bl	8013d54 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800b9de:	4825      	ldr	r0, [pc, #148]	; (800ba74 <tcpip_thread+0xb8>)
 800b9e0:	f008 f9c7 	bl	8013d72 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800b9e4:	f107 030c 	add.w	r3, r7, #12
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4823      	ldr	r0, [pc, #140]	; (800ba78 <tcpip_thread+0xbc>)
 800b9ec:	f005 fd92 	bl	8011514 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b9f0:	4820      	ldr	r0, [pc, #128]	; (800ba74 <tcpip_thread+0xb8>)
 800b9f2:	f008 f9af 	bl	8013d54 <sys_mutex_lock>
    if (msg == NULL) {
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b9fc:	4b1f      	ldr	r3, [pc, #124]	; (800ba7c <tcpip_thread+0xc0>)
 800b9fe:	2269      	movs	r2, #105	; 0x69
 800ba00:	491f      	ldr	r1, [pc, #124]	; (800ba80 <tcpip_thread+0xc4>)
 800ba02:	4820      	ldr	r0, [pc, #128]	; (800ba84 <tcpip_thread+0xc8>)
 800ba04:	f009 fe24 	bl	8015650 <iprintf>
      continue;
 800ba08:	e02f      	b.n	800ba6a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d011      	beq.n	800ba36 <tcpip_thread+0x7a>
 800ba12:	2b04      	cmp	r3, #4
 800ba14:	d01b      	beq.n	800ba4e <tcpip_thread+0x92>
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d120      	bne.n	800ba5c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	6850      	ldr	r0, [r2, #4]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	6892      	ldr	r2, [r2, #8]
 800ba26:	4611      	mov	r1, r2
 800ba28:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	2009      	movs	r0, #9
 800ba30:	f000 fd1a 	bl	800c468 <memp_free>
      break;
 800ba34:	e019      	b.n	800ba6a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	6892      	ldr	r2, [r2, #8]
 800ba3e:	4610      	mov	r0, r2
 800ba40:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4619      	mov	r1, r3
 800ba46:	2008      	movs	r0, #8
 800ba48:	f000 fd0e 	bl	800c468 <memp_free>
      break;
 800ba4c:	e00d      	b.n	800ba6a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	6892      	ldr	r2, [r2, #8]
 800ba56:	4610      	mov	r0, r2
 800ba58:	4798      	blx	r3
      break;
 800ba5a:	e006      	b.n	800ba6a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ba5c:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <tcpip_thread+0xc0>)
 800ba5e:	229b      	movs	r2, #155	; 0x9b
 800ba60:	4907      	ldr	r1, [pc, #28]	; (800ba80 <tcpip_thread+0xc4>)
 800ba62:	4808      	ldr	r0, [pc, #32]	; (800ba84 <tcpip_thread+0xc8>)
 800ba64:	f009 fdf4 	bl	8015650 <iprintf>
      break;
 800ba68:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800ba6a:	e7b8      	b.n	800b9de <tcpip_thread+0x22>
 800ba6c:	20005f2c 	.word	0x20005f2c
 800ba70:	20005f30 	.word	0x20005f30
 800ba74:	2000a2c0 	.word	0x2000a2c0
 800ba78:	20005f34 	.word	0x20005f34
 800ba7c:	08016aec 	.word	0x08016aec
 800ba80:	08016b1c 	.word	0x08016b1c
 800ba84:	08016b3c 	.word	0x08016b3c

0800ba88 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800ba94:	481a      	ldr	r0, [pc, #104]	; (800bb00 <tcpip_inpkt+0x78>)
 800ba96:	f008 f92a 	bl	8013cee <sys_mbox_valid>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d105      	bne.n	800baac <tcpip_inpkt+0x24>
 800baa0:	4b18      	ldr	r3, [pc, #96]	; (800bb04 <tcpip_inpkt+0x7c>)
 800baa2:	22b5      	movs	r2, #181	; 0xb5
 800baa4:	4918      	ldr	r1, [pc, #96]	; (800bb08 <tcpip_inpkt+0x80>)
 800baa6:	4819      	ldr	r0, [pc, #100]	; (800bb0c <tcpip_inpkt+0x84>)
 800baa8:	f009 fdd2 	bl	8015650 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800baac:	2009      	movs	r0, #9
 800baae:	f000 fc89 	bl	800c3c4 <memp_malloc>
 800bab2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800baba:	f04f 33ff 	mov.w	r3, #4294967295
 800babe:	e01a      	b.n	800baf6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2202      	movs	r2, #2
 800bac4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800bad8:	6979      	ldr	r1, [r7, #20]
 800bada:	4809      	ldr	r0, [pc, #36]	; (800bb00 <tcpip_inpkt+0x78>)
 800badc:	f008 f8bc 	bl	8013c58 <sys_mbox_trypost>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d006      	beq.n	800baf4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bae6:	6979      	ldr	r1, [r7, #20]
 800bae8:	2009      	movs	r0, #9
 800baea:	f000 fcbd 	bl	800c468 <memp_free>
    return ERR_MEM;
 800baee:	f04f 33ff 	mov.w	r3, #4294967295
 800baf2:	e000      	b.n	800baf6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800baf4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20005f34 	.word	0x20005f34
 800bb04:	08016aec 	.word	0x08016aec
 800bb08:	08016b64 	.word	0x08016b64
 800bb0c:	08016b3c 	.word	0x08016b3c

0800bb10 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bb20:	f003 0318 	and.w	r3, r3, #24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d006      	beq.n	800bb36 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bb28:	4a08      	ldr	r2, [pc, #32]	; (800bb4c <tcpip_input+0x3c>)
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff ffab 	bl	800ba88 <tcpip_inpkt>
 800bb32:	4603      	mov	r3, r0
 800bb34:	e005      	b.n	800bb42 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800bb36:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <tcpip_input+0x40>)
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7ff ffa4 	bl	800ba88 <tcpip_inpkt>
 800bb40:	4603      	mov	r3, r0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	08013a6d 	.word	0x08013a6d
 800bb50:	08012a31 	.word	0x08012a31

0800bb54 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af02      	add	r7, sp, #8
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bb5e:	f000 f86a 	bl	800bc36 <lwip_init>

  tcpip_init_done = initfunc;
 800bb62:	4a17      	ldr	r2, [pc, #92]	; (800bbc0 <tcpip_init+0x6c>)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bb68:	4a16      	ldr	r2, [pc, #88]	; (800bbc4 <tcpip_init+0x70>)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bb6e:	2106      	movs	r1, #6
 800bb70:	4815      	ldr	r0, [pc, #84]	; (800bbc8 <tcpip_init+0x74>)
 800bb72:	f008 f857 	bl	8013c24 <sys_mbox_new>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d006      	beq.n	800bb8a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bb7c:	4b13      	ldr	r3, [pc, #76]	; (800bbcc <tcpip_init+0x78>)
 800bb7e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800bb82:	4913      	ldr	r1, [pc, #76]	; (800bbd0 <tcpip_init+0x7c>)
 800bb84:	4813      	ldr	r0, [pc, #76]	; (800bbd4 <tcpip_init+0x80>)
 800bb86:	f009 fd63 	bl	8015650 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bb8a:	4813      	ldr	r0, [pc, #76]	; (800bbd8 <tcpip_init+0x84>)
 800bb8c:	f008 f8cc 	bl	8013d28 <sys_mutex_new>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d006      	beq.n	800bba4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bb96:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <tcpip_init+0x78>)
 800bb98:	f240 12d9 	movw	r2, #473	; 0x1d9
 800bb9c:	490f      	ldr	r1, [pc, #60]	; (800bbdc <tcpip_init+0x88>)
 800bb9e:	480d      	ldr	r0, [pc, #52]	; (800bbd4 <tcpip_init+0x80>)
 800bba0:	f009 fd56 	bl	8015650 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bba4:	2303      	movs	r3, #3
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbac:	2200      	movs	r2, #0
 800bbae:	490c      	ldr	r1, [pc, #48]	; (800bbe0 <tcpip_init+0x8c>)
 800bbb0:	480c      	ldr	r0, [pc, #48]	; (800bbe4 <tcpip_init+0x90>)
 800bbb2:	f008 f8eb 	bl	8013d8c <sys_thread_new>
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20005f2c 	.word	0x20005f2c
 800bbc4:	20005f30 	.word	0x20005f30
 800bbc8:	20005f34 	.word	0x20005f34
 800bbcc:	08016aec 	.word	0x08016aec
 800bbd0:	08016b74 	.word	0x08016b74
 800bbd4:	08016b3c 	.word	0x08016b3c
 800bbd8:	2000a2c0 	.word	0x2000a2c0
 800bbdc:	08016b98 	.word	0x08016b98
 800bbe0:	0800b9bd 	.word	0x0800b9bd
 800bbe4:	08016bbc 	.word	0x08016bbc

0800bbe8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800bbf2:	88fb      	ldrh	r3, [r7, #6]
 800bbf4:	ba5b      	rev16	r3, r3
 800bbf6:	b29b      	uxth	r3, r3
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	061a      	lsls	r2, r3, #24
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	021b      	lsls	r3, r3, #8
 800bc14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc18:	431a      	orrs	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	0a1b      	lsrs	r3, r3, #8
 800bc1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc22:	431a      	orrs	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	0e1b      	lsrs	r3, r3, #24
 800bc28:	4313      	orrs	r3, r2
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b082      	sub	sp, #8
 800bc3a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bc40:	f008 f866 	bl	8013d10 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bc44:	f000 f8a6 	bl	800bd94 <mem_init>
  memp_init();
 800bc48:	f000 fb70 	bl	800c32c <memp_init>
  pbuf_init();
  netif_init();
 800bc4c:	f000 fc36 	bl	800c4bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bc50:	f005 fc86 	bl	8011560 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bc54:	f001 fb74 	bl	800d340 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800bc58:	f005 fb18 	bl	801128c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bc5c:	bf00      	nop
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bc6c:	4b40      	ldr	r3, [pc, #256]	; (800bd70 <plug_holes+0x10c>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d206      	bcs.n	800bc84 <plug_holes+0x20>
 800bc76:	4b3f      	ldr	r3, [pc, #252]	; (800bd74 <plug_holes+0x110>)
 800bc78:	f240 125d 	movw	r2, #349	; 0x15d
 800bc7c:	493e      	ldr	r1, [pc, #248]	; (800bd78 <plug_holes+0x114>)
 800bc7e:	483f      	ldr	r0, [pc, #252]	; (800bd7c <plug_holes+0x118>)
 800bc80:	f009 fce6 	bl	8015650 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bc84:	4b3e      	ldr	r3, [pc, #248]	; (800bd80 <plug_holes+0x11c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d306      	bcc.n	800bc9c <plug_holes+0x38>
 800bc8e:	4b39      	ldr	r3, [pc, #228]	; (800bd74 <plug_holes+0x110>)
 800bc90:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc94:	493b      	ldr	r1, [pc, #236]	; (800bd84 <plug_holes+0x120>)
 800bc96:	4839      	ldr	r0, [pc, #228]	; (800bd7c <plug_holes+0x118>)
 800bc98:	f009 fcda 	bl	8015650 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	791b      	ldrb	r3, [r3, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d006      	beq.n	800bcb2 <plug_holes+0x4e>
 800bca4:	4b33      	ldr	r3, [pc, #204]	; (800bd74 <plug_holes+0x110>)
 800bca6:	f240 125f 	movw	r2, #351	; 0x15f
 800bcaa:	4937      	ldr	r1, [pc, #220]	; (800bd88 <plug_holes+0x124>)
 800bcac:	4833      	ldr	r0, [pc, #204]	; (800bd7c <plug_holes+0x118>)
 800bcae:	f009 fccf 	bl	8015650 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800bcba:	d906      	bls.n	800bcca <plug_holes+0x66>
 800bcbc:	4b2d      	ldr	r3, [pc, #180]	; (800bd74 <plug_holes+0x110>)
 800bcbe:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800bcc2:	4932      	ldr	r1, [pc, #200]	; (800bd8c <plug_holes+0x128>)
 800bcc4:	482d      	ldr	r0, [pc, #180]	; (800bd7c <plug_holes+0x118>)
 800bcc6:	f009 fcc3 	bl	8015650 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800bcca:	4b29      	ldr	r3, [pc, #164]	; (800bd70 <plug_holes+0x10c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	8812      	ldrh	r2, [r2, #0]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d01f      	beq.n	800bd1e <plug_holes+0xba>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	791b      	ldrb	r3, [r3, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d11b      	bne.n	800bd1e <plug_holes+0xba>
 800bce6:	4b26      	ldr	r3, [pc, #152]	; (800bd80 <plug_holes+0x11c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d016      	beq.n	800bd1e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bcf0:	4b27      	ldr	r3, [pc, #156]	; (800bd90 <plug_holes+0x12c>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d102      	bne.n	800bd00 <plug_holes+0x9c>
      lfree = mem;
 800bcfa:	4a25      	ldr	r2, [pc, #148]	; (800bd90 <plug_holes+0x12c>)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	881a      	ldrh	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a19      	ldr	r2, [pc, #100]	; (800bd70 <plug_holes+0x10c>)
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	1a99      	subs	r1, r3, r2
 800bd10:	4b17      	ldr	r3, [pc, #92]	; (800bd70 <plug_holes+0x10c>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	8812      	ldrh	r2, [r2, #0]
 800bd18:	4413      	add	r3, r2
 800bd1a:	b28a      	uxth	r2, r1
 800bd1c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800bd1e:	4b14      	ldr	r3, [pc, #80]	; (800bd70 <plug_holes+0x10c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	8852      	ldrh	r2, [r2, #2]
 800bd26:	4413      	add	r3, r2
 800bd28:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d01a      	beq.n	800bd68 <plug_holes+0x104>
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	791b      	ldrb	r3, [r3, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d116      	bne.n	800bd68 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bd3a:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <plug_holes+0x12c>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d102      	bne.n	800bd4a <plug_holes+0xe6>
      lfree = pmem;
 800bd44:	4a12      	ldr	r2, [pc, #72]	; (800bd90 <plug_holes+0x12c>)
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	881a      	ldrh	r2, [r3, #0]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	4a06      	ldr	r2, [pc, #24]	; (800bd70 <plug_holes+0x10c>)
 800bd56:	6812      	ldr	r2, [r2, #0]
 800bd58:	1a99      	subs	r1, r3, r2
 800bd5a:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <plug_holes+0x10c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	8812      	ldrh	r2, [r2, #0]
 800bd62:	4413      	add	r3, r2
 800bd64:	b28a      	uxth	r2, r1
 800bd66:	805a      	strh	r2, [r3, #2]
  }
}
 800bd68:	bf00      	nop
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	20005f38 	.word	0x20005f38
 800bd74:	08016bcc 	.word	0x08016bcc
 800bd78:	08016bfc 	.word	0x08016bfc
 800bd7c:	08016c14 	.word	0x08016c14
 800bd80:	20005f3c 	.word	0x20005f3c
 800bd84:	08016c3c 	.word	0x08016c3c
 800bd88:	08016c58 	.word	0x08016c58
 800bd8c:	08016c74 	.word	0x08016c74
 800bd90:	20005f40 	.word	0x20005f40

0800bd94 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bd9a:	4b1e      	ldr	r3, [pc, #120]	; (800be14 <mem_init+0x80>)
 800bd9c:	3303      	adds	r3, #3
 800bd9e:	f023 0303 	bic.w	r3, r3, #3
 800bda2:	461a      	mov	r2, r3
 800bda4:	4b1c      	ldr	r3, [pc, #112]	; (800be18 <mem_init+0x84>)
 800bda6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bda8:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <mem_init+0x84>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800bdb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800bdc2:	4b15      	ldr	r3, [pc, #84]	; (800be18 <mem_init+0x84>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800bdca:	4a14      	ldr	r2, [pc, #80]	; (800be1c <mem_init+0x88>)
 800bdcc:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bdce:	4b13      	ldr	r3, [pc, #76]	; (800be1c <mem_init+0x88>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bdd6:	4b11      	ldr	r3, [pc, #68]	; (800be1c <mem_init+0x88>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800bdde:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bde0:	4b0e      	ldr	r3, [pc, #56]	; (800be1c <mem_init+0x88>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800bde8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bdea:	4b0b      	ldr	r3, [pc, #44]	; (800be18 <mem_init+0x84>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a0c      	ldr	r2, [pc, #48]	; (800be20 <mem_init+0x8c>)
 800bdf0:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bdf2:	480c      	ldr	r0, [pc, #48]	; (800be24 <mem_init+0x90>)
 800bdf4:	f007 ff98 	bl	8013d28 <sys_mutex_new>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bdfe:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <mem_init+0x94>)
 800be00:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800be04:	4909      	ldr	r1, [pc, #36]	; (800be2c <mem_init+0x98>)
 800be06:	480a      	ldr	r0, [pc, #40]	; (800be30 <mem_init+0x9c>)
 800be08:	f009 fc22 	bl	8015650 <iprintf>
  }
}
 800be0c:	bf00      	nop
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	2000a2dc 	.word	0x2000a2dc
 800be18:	20005f38 	.word	0x20005f38
 800be1c:	20005f3c 	.word	0x20005f3c
 800be20:	20005f40 	.word	0x20005f40
 800be24:	20005f44 	.word	0x20005f44
 800be28:	08016bcc 	.word	0x08016bcc
 800be2c:	08016ca0 	.word	0x08016ca0
 800be30:	08016c14 	.word	0x08016c14

0800be34 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d050      	beq.n	800bee4 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f003 0303 	and.w	r3, r3, #3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d006      	beq.n	800be5a <mem_free+0x26>
 800be4c:	4b27      	ldr	r3, [pc, #156]	; (800beec <mem_free+0xb8>)
 800be4e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800be52:	4927      	ldr	r1, [pc, #156]	; (800bef0 <mem_free+0xbc>)
 800be54:	4827      	ldr	r0, [pc, #156]	; (800bef4 <mem_free+0xc0>)
 800be56:	f009 fbfb 	bl	8015650 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800be5a:	4b27      	ldr	r3, [pc, #156]	; (800bef8 <mem_free+0xc4>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	429a      	cmp	r2, r3
 800be62:	d304      	bcc.n	800be6e <mem_free+0x3a>
 800be64:	4b25      	ldr	r3, [pc, #148]	; (800befc <mem_free+0xc8>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d306      	bcc.n	800be7c <mem_free+0x48>
 800be6e:	4b1f      	ldr	r3, [pc, #124]	; (800beec <mem_free+0xb8>)
 800be70:	f240 12af 	movw	r2, #431	; 0x1af
 800be74:	4922      	ldr	r1, [pc, #136]	; (800bf00 <mem_free+0xcc>)
 800be76:	481f      	ldr	r0, [pc, #124]	; (800bef4 <mem_free+0xc0>)
 800be78:	f009 fbea 	bl	8015650 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800be7c:	4b1e      	ldr	r3, [pc, #120]	; (800bef8 <mem_free+0xc4>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	429a      	cmp	r2, r3
 800be84:	d304      	bcc.n	800be90 <mem_free+0x5c>
 800be86:	4b1d      	ldr	r3, [pc, #116]	; (800befc <mem_free+0xc8>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d306      	bcc.n	800be9e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800be90:	f007 ff9c 	bl	8013dcc <sys_arch_protect>
 800be94:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800be96:	68b8      	ldr	r0, [r7, #8]
 800be98:	f007 ffa6 	bl	8013de8 <sys_arch_unprotect>
    return;
 800be9c:	e023      	b.n	800bee6 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800be9e:	4819      	ldr	r0, [pc, #100]	; (800bf04 <mem_free+0xd0>)
 800bea0:	f007 ff58 	bl	8013d54 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	3b08      	subs	r3, #8
 800bea8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	791b      	ldrb	r3, [r3, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d106      	bne.n	800bec0 <mem_free+0x8c>
 800beb2:	4b0e      	ldr	r3, [pc, #56]	; (800beec <mem_free+0xb8>)
 800beb4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800beb8:	4913      	ldr	r1, [pc, #76]	; (800bf08 <mem_free+0xd4>)
 800beba:	480e      	ldr	r0, [pc, #56]	; (800bef4 <mem_free+0xc0>)
 800bebc:	f009 fbc8 	bl	8015650 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bec6:	4b11      	ldr	r3, [pc, #68]	; (800bf0c <mem_free+0xd8>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	429a      	cmp	r2, r3
 800bece:	d202      	bcs.n	800bed6 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bed0:	4a0e      	ldr	r2, [pc, #56]	; (800bf0c <mem_free+0xd8>)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f7ff fec4 	bl	800bc64 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bedc:	4809      	ldr	r0, [pc, #36]	; (800bf04 <mem_free+0xd0>)
 800bede:	f007 ff48 	bl	8013d72 <sys_mutex_unlock>
 800bee2:	e000      	b.n	800bee6 <mem_free+0xb2>
    return;
 800bee4:	bf00      	nop
}
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	08016bcc 	.word	0x08016bcc
 800bef0:	08016cbc 	.word	0x08016cbc
 800bef4:	08016c14 	.word	0x08016c14
 800bef8:	20005f38 	.word	0x20005f38
 800befc:	20005f3c 	.word	0x20005f3c
 800bf00:	08016ce0 	.word	0x08016ce0
 800bf04:	20005f44 	.word	0x20005f44
 800bf08:	08016cf8 	.word	0x08016cf8
 800bf0c:	20005f40 	.word	0x20005f40

0800bf10 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b088      	sub	sp, #32
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800bf1c:	887b      	ldrh	r3, [r7, #2]
 800bf1e:	3303      	adds	r3, #3
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	f023 0303 	bic.w	r3, r3, #3
 800bf26:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800bf28:	887b      	ldrh	r3, [r7, #2]
 800bf2a:	2b0b      	cmp	r3, #11
 800bf2c:	d801      	bhi.n	800bf32 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bf2e:	230c      	movs	r3, #12
 800bf30:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800bf32:	887b      	ldrh	r3, [r7, #2]
 800bf34:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800bf38:	d901      	bls.n	800bf3e <mem_trim+0x2e>
    return NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	e0bd      	b.n	800c0ba <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bf3e:	4b61      	ldr	r3, [pc, #388]	; (800c0c4 <mem_trim+0x1b4>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d304      	bcc.n	800bf52 <mem_trim+0x42>
 800bf48:	4b5f      	ldr	r3, [pc, #380]	; (800c0c8 <mem_trim+0x1b8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d306      	bcc.n	800bf60 <mem_trim+0x50>
 800bf52:	4b5e      	ldr	r3, [pc, #376]	; (800c0cc <mem_trim+0x1bc>)
 800bf54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bf58:	495d      	ldr	r1, [pc, #372]	; (800c0d0 <mem_trim+0x1c0>)
 800bf5a:	485e      	ldr	r0, [pc, #376]	; (800c0d4 <mem_trim+0x1c4>)
 800bf5c:	f009 fb78 	bl	8015650 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bf60:	4b58      	ldr	r3, [pc, #352]	; (800c0c4 <mem_trim+0x1b4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d304      	bcc.n	800bf74 <mem_trim+0x64>
 800bf6a:	4b57      	ldr	r3, [pc, #348]	; (800c0c8 <mem_trim+0x1b8>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d307      	bcc.n	800bf84 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800bf74:	f007 ff2a 	bl	8013dcc <sys_arch_protect>
 800bf78:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f007 ff34 	bl	8013de8 <sys_arch_unprotect>
    return rmem;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	e09a      	b.n	800c0ba <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	3b08      	subs	r3, #8
 800bf88:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	4a4d      	ldr	r2, [pc, #308]	; (800c0c4 <mem_trim+0x1b4>)
 800bf8e:	6812      	ldr	r2, [r2, #0]
 800bf90:	1a9b      	subs	r3, r3, r2
 800bf92:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	881a      	ldrh	r2, [r3, #0]
 800bf98:	8b7b      	ldrh	r3, [r7, #26]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	3b08      	subs	r3, #8
 800bfa0:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bfa2:	887a      	ldrh	r2, [r7, #2]
 800bfa4:	8b3b      	ldrh	r3, [r7, #24]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d906      	bls.n	800bfb8 <mem_trim+0xa8>
 800bfaa:	4b48      	ldr	r3, [pc, #288]	; (800c0cc <mem_trim+0x1bc>)
 800bfac:	f240 2206 	movw	r2, #518	; 0x206
 800bfb0:	4949      	ldr	r1, [pc, #292]	; (800c0d8 <mem_trim+0x1c8>)
 800bfb2:	4848      	ldr	r0, [pc, #288]	; (800c0d4 <mem_trim+0x1c4>)
 800bfb4:	f009 fb4c 	bl	8015650 <iprintf>
  if (newsize > size) {
 800bfb8:	887a      	ldrh	r2, [r7, #2]
 800bfba:	8b3b      	ldrh	r3, [r7, #24]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d901      	bls.n	800bfc4 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e07a      	b.n	800c0ba <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800bfc4:	887a      	ldrh	r2, [r7, #2]
 800bfc6:	8b3b      	ldrh	r3, [r7, #24]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d101      	bne.n	800bfd0 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	e074      	b.n	800c0ba <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bfd0:	4842      	ldr	r0, [pc, #264]	; (800c0dc <mem_trim+0x1cc>)
 800bfd2:	f007 febf 	bl	8013d54 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800bfd6:	4b3b      	ldr	r3, [pc, #236]	; (800c0c4 <mem_trim+0x1b4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	69fa      	ldr	r2, [r7, #28]
 800bfdc:	8812      	ldrh	r2, [r2, #0]
 800bfde:	4413      	add	r3, r2
 800bfe0:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	791b      	ldrb	r3, [r3, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d131      	bne.n	800c04e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	881b      	ldrh	r3, [r3, #0]
 800bfee:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800bff0:	8b7a      	ldrh	r2, [r7, #26]
 800bff2:	887b      	ldrh	r3, [r7, #2]
 800bff4:	4413      	add	r3, r2
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	3308      	adds	r3, #8
 800bffa:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800bffc:	4b38      	ldr	r3, [pc, #224]	; (800c0e0 <mem_trim+0x1d0>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	697a      	ldr	r2, [r7, #20]
 800c002:	429a      	cmp	r2, r3
 800c004:	d105      	bne.n	800c012 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800c006:	4b2f      	ldr	r3, [pc, #188]	; (800c0c4 <mem_trim+0x1b4>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	8a7b      	ldrh	r3, [r7, #18]
 800c00c:	4413      	add	r3, r2
 800c00e:	4a34      	ldr	r2, [pc, #208]	; (800c0e0 <mem_trim+0x1d0>)
 800c010:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c012:	4b2c      	ldr	r3, [pc, #176]	; (800c0c4 <mem_trim+0x1b4>)
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	8a7b      	ldrh	r3, [r7, #18]
 800c018:	4413      	add	r3, r2
 800c01a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	2200      	movs	r2, #0
 800c020:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	8a3a      	ldrh	r2, [r7, #16]
 800c026:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	8b7a      	ldrh	r2, [r7, #26]
 800c02c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	8a7a      	ldrh	r2, [r7, #18]
 800c032:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800c03c:	d039      	beq.n	800c0b2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c03e:	4b21      	ldr	r3, [pc, #132]	; (800c0c4 <mem_trim+0x1b4>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	8812      	ldrh	r2, [r2, #0]
 800c046:	4413      	add	r3, r2
 800c048:	8a7a      	ldrh	r2, [r7, #18]
 800c04a:	805a      	strh	r2, [r3, #2]
 800c04c:	e031      	b.n	800c0b2 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	f103 0214 	add.w	r2, r3, #20
 800c054:	8b3b      	ldrh	r3, [r7, #24]
 800c056:	429a      	cmp	r2, r3
 800c058:	d82b      	bhi.n	800c0b2 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c05a:	8b7a      	ldrh	r2, [r7, #26]
 800c05c:	887b      	ldrh	r3, [r7, #2]
 800c05e:	4413      	add	r3, r2
 800c060:	b29b      	uxth	r3, r3
 800c062:	3308      	adds	r3, #8
 800c064:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c066:	4b17      	ldr	r3, [pc, #92]	; (800c0c4 <mem_trim+0x1b4>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	8a7b      	ldrh	r3, [r7, #18]
 800c06c:	4413      	add	r3, r2
 800c06e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800c070:	4b1b      	ldr	r3, [pc, #108]	; (800c0e0 <mem_trim+0x1d0>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	429a      	cmp	r2, r3
 800c078:	d202      	bcs.n	800c080 <mem_trim+0x170>
      lfree = mem2;
 800c07a:	4a19      	ldr	r2, [pc, #100]	; (800c0e0 <mem_trim+0x1d0>)
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	2200      	movs	r2, #0
 800c084:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	881a      	ldrh	r2, [r3, #0]
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	8b7a      	ldrh	r2, [r7, #26]
 800c092:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	8a7a      	ldrh	r2, [r7, #18]
 800c098:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800c0a2:	d006      	beq.n	800c0b2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c0a4:	4b07      	ldr	r3, [pc, #28]	; (800c0c4 <mem_trim+0x1b4>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	8812      	ldrh	r2, [r2, #0]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	8a7a      	ldrh	r2, [r7, #18]
 800c0b0:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c0b2:	480a      	ldr	r0, [pc, #40]	; (800c0dc <mem_trim+0x1cc>)
 800c0b4:	f007 fe5d 	bl	8013d72 <sys_mutex_unlock>
  return rmem;
 800c0b8:	687b      	ldr	r3, [r7, #4]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3720      	adds	r7, #32
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	20005f38 	.word	0x20005f38
 800c0c8:	20005f3c 	.word	0x20005f3c
 800c0cc:	08016bcc 	.word	0x08016bcc
 800c0d0:	08016d0c 	.word	0x08016d0c
 800c0d4:	08016c14 	.word	0x08016c14
 800c0d8:	08016d24 	.word	0x08016d24
 800c0dc:	20005f44 	.word	0x20005f44
 800c0e0:	20005f40 	.word	0x20005f40

0800c0e4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800c0ee:	88fb      	ldrh	r3, [r7, #6]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <mem_malloc+0x14>
    return NULL;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e0d1      	b.n	800c29c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800c0f8:	88fb      	ldrh	r3, [r7, #6]
 800c0fa:	3303      	adds	r3, #3
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800c104:	88fb      	ldrh	r3, [r7, #6]
 800c106:	2b0b      	cmp	r3, #11
 800c108:	d801      	bhi.n	800c10e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c10a:	230c      	movs	r3, #12
 800c10c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800c10e:	88fb      	ldrh	r3, [r7, #6]
 800c110:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800c114:	d901      	bls.n	800c11a <mem_malloc+0x36>
    return NULL;
 800c116:	2300      	movs	r3, #0
 800c118:	e0c0      	b.n	800c29c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c11a:	4862      	ldr	r0, [pc, #392]	; (800c2a4 <mem_malloc+0x1c0>)
 800c11c:	f007 fe1a 	bl	8013d54 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c120:	4b61      	ldr	r3, [pc, #388]	; (800c2a8 <mem_malloc+0x1c4>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	461a      	mov	r2, r3
 800c126:	4b61      	ldr	r3, [pc, #388]	; (800c2ac <mem_malloc+0x1c8>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	83fb      	strh	r3, [r7, #30]
 800c12e:	e0aa      	b.n	800c286 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800c130:	4b5e      	ldr	r3, [pc, #376]	; (800c2ac <mem_malloc+0x1c8>)
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	8bfb      	ldrh	r3, [r7, #30]
 800c136:	4413      	add	r3, r2
 800c138:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	791b      	ldrb	r3, [r3, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f040 809b 	bne.w	800c27a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	461a      	mov	r2, r3
 800c14a:	8bfb      	ldrh	r3, [r7, #30]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	f1a3 0208 	sub.w	r2, r3, #8
 800c152:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800c154:	429a      	cmp	r2, r3
 800c156:	f0c0 8090 	bcc.w	800c27a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	8bfb      	ldrh	r3, [r7, #30]
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	f1a3 0208 	sub.w	r2, r3, #8
 800c168:	88fb      	ldrh	r3, [r7, #6]
 800c16a:	3314      	adds	r3, #20
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d327      	bcc.n	800c1c0 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800c170:	8bfa      	ldrh	r2, [r7, #30]
 800c172:	88fb      	ldrh	r3, [r7, #6]
 800c174:	4413      	add	r3, r2
 800c176:	b29b      	uxth	r3, r3
 800c178:	3308      	adds	r3, #8
 800c17a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800c17c:	4b4b      	ldr	r3, [pc, #300]	; (800c2ac <mem_malloc+0x1c8>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	8a7b      	ldrh	r3, [r7, #18]
 800c182:	4413      	add	r3, r2
 800c184:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	881a      	ldrh	r2, [r3, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	8bfa      	ldrh	r2, [r7, #30]
 800c198:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	8a7a      	ldrh	r2, [r7, #18]
 800c19e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800c1ae:	d00a      	beq.n	800c1c6 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c1b0:	4b3e      	ldr	r3, [pc, #248]	; (800c2ac <mem_malloc+0x1c8>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	8812      	ldrh	r2, [r2, #0]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	8a7a      	ldrh	r2, [r7, #18]
 800c1bc:	805a      	strh	r2, [r3, #2]
 800c1be:	e002      	b.n	800c1c6 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c1c6:	4b38      	ldr	r3, [pc, #224]	; (800c2a8 <mem_malloc+0x1c4>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d127      	bne.n	800c220 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800c1d0:	4b35      	ldr	r3, [pc, #212]	; (800c2a8 <mem_malloc+0x1c4>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c1d6:	e005      	b.n	800c1e4 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800c1d8:	4b34      	ldr	r3, [pc, #208]	; (800c2ac <mem_malloc+0x1c8>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	69ba      	ldr	r2, [r7, #24]
 800c1de:	8812      	ldrh	r2, [r2, #0]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	791b      	ldrb	r3, [r3, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <mem_malloc+0x112>
 800c1ec:	4b30      	ldr	r3, [pc, #192]	; (800c2b0 <mem_malloc+0x1cc>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	69ba      	ldr	r2, [r7, #24]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d1f0      	bne.n	800c1d8 <mem_malloc+0xf4>
          }
          lfree = cur;
 800c1f6:	4a2c      	ldr	r2, [pc, #176]	; (800c2a8 <mem_malloc+0x1c4>)
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c1fc:	4b2a      	ldr	r3, [pc, #168]	; (800c2a8 <mem_malloc+0x1c4>)
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	4b2b      	ldr	r3, [pc, #172]	; (800c2b0 <mem_malloc+0x1cc>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	429a      	cmp	r2, r3
 800c206:	d00b      	beq.n	800c220 <mem_malloc+0x13c>
 800c208:	4b27      	ldr	r3, [pc, #156]	; (800c2a8 <mem_malloc+0x1c4>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	791b      	ldrb	r3, [r3, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d006      	beq.n	800c220 <mem_malloc+0x13c>
 800c212:	4b28      	ldr	r3, [pc, #160]	; (800c2b4 <mem_malloc+0x1d0>)
 800c214:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c218:	4927      	ldr	r1, [pc, #156]	; (800c2b8 <mem_malloc+0x1d4>)
 800c21a:	4828      	ldr	r0, [pc, #160]	; (800c2bc <mem_malloc+0x1d8>)
 800c21c:	f009 fa18 	bl	8015650 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c220:	4820      	ldr	r0, [pc, #128]	; (800c2a4 <mem_malloc+0x1c0>)
 800c222:	f007 fda6 	bl	8013d72 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c226:	88fa      	ldrh	r2, [r7, #6]
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	4413      	add	r3, r2
 800c22c:	3308      	adds	r3, #8
 800c22e:	4a20      	ldr	r2, [pc, #128]	; (800c2b0 <mem_malloc+0x1cc>)
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	4293      	cmp	r3, r2
 800c234:	d906      	bls.n	800c244 <mem_malloc+0x160>
 800c236:	4b1f      	ldr	r3, [pc, #124]	; (800c2b4 <mem_malloc+0x1d0>)
 800c238:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c23c:	4920      	ldr	r1, [pc, #128]	; (800c2c0 <mem_malloc+0x1dc>)
 800c23e:	481f      	ldr	r0, [pc, #124]	; (800c2bc <mem_malloc+0x1d8>)
 800c240:	f009 fa06 	bl	8015650 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	f003 0303 	and.w	r3, r3, #3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d006      	beq.n	800c25c <mem_malloc+0x178>
 800c24e:	4b19      	ldr	r3, [pc, #100]	; (800c2b4 <mem_malloc+0x1d0>)
 800c250:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c254:	491b      	ldr	r1, [pc, #108]	; (800c2c4 <mem_malloc+0x1e0>)
 800c256:	4819      	ldr	r0, [pc, #100]	; (800c2bc <mem_malloc+0x1d8>)
 800c258:	f009 f9fa 	bl	8015650 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d006      	beq.n	800c274 <mem_malloc+0x190>
 800c266:	4b13      	ldr	r3, [pc, #76]	; (800c2b4 <mem_malloc+0x1d0>)
 800c268:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800c26c:	4916      	ldr	r1, [pc, #88]	; (800c2c8 <mem_malloc+0x1e4>)
 800c26e:	4813      	ldr	r0, [pc, #76]	; (800c2bc <mem_malloc+0x1d8>)
 800c270:	f009 f9ee 	bl	8015650 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	3308      	adds	r3, #8
 800c278:	e010      	b.n	800c29c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800c27a:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <mem_malloc+0x1c8>)
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	8bfb      	ldrh	r3, [r7, #30]
 800c280:	4413      	add	r3, r2
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c286:	8bfa      	ldrh	r2, [r7, #30]
 800c288:	88fb      	ldrh	r3, [r7, #6]
 800c28a:	f5c3 5370 	rsb	r3, r3, #15360	; 0x3c00
 800c28e:	429a      	cmp	r2, r3
 800c290:	f4ff af4e 	bcc.w	800c130 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c294:	4803      	ldr	r0, [pc, #12]	; (800c2a4 <mem_malloc+0x1c0>)
 800c296:	f007 fd6c 	bl	8013d72 <sys_mutex_unlock>
  return NULL;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3720      	adds	r7, #32
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	20005f44 	.word	0x20005f44
 800c2a8:	20005f40 	.word	0x20005f40
 800c2ac:	20005f38 	.word	0x20005f38
 800c2b0:	20005f3c 	.word	0x20005f3c
 800c2b4:	08016bcc 	.word	0x08016bcc
 800c2b8:	08016d44 	.word	0x08016d44
 800c2bc:	08016c14 	.word	0x08016c14
 800c2c0:	08016d60 	.word	0x08016d60
 800c2c4:	08016d90 	.word	0x08016d90
 800c2c8:	08016dc0 	.word	0x08016dc0

0800c2cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	3303      	adds	r3, #3
 800c2e2:	f023 0303 	bic.w	r3, r3, #3
 800c2e6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	e011      	b.n	800c312 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	461a      	mov	r2, r3
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	4413      	add	r3, r2
 800c30a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	3301      	adds	r3, #1
 800c310:	60fb      	str	r3, [r7, #12]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	885b      	ldrh	r3, [r3, #2]
 800c316:	461a      	mov	r2, r3
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4293      	cmp	r3, r2
 800c31c:	dbe7      	blt.n	800c2ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c31e:	bf00      	nop
 800c320:	3714      	adds	r7, #20
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
	...

0800c32c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c332:	2300      	movs	r3, #0
 800c334:	80fb      	strh	r3, [r7, #6]
 800c336:	e009      	b.n	800c34c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c338:	88fb      	ldrh	r3, [r7, #6]
 800c33a:	4a08      	ldr	r2, [pc, #32]	; (800c35c <memp_init+0x30>)
 800c33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff ffc3 	bl	800c2cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c346:	88fb      	ldrh	r3, [r7, #6]
 800c348:	3301      	adds	r3, #1
 800c34a:	80fb      	strh	r3, [r7, #6]
 800c34c:	88fb      	ldrh	r3, [r7, #6]
 800c34e:	2b0c      	cmp	r3, #12
 800c350:	d9f2      	bls.n	800c338 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c352:	bf00      	nop
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	0801896c 	.word	0x0801896c

0800c360 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c368:	f007 fd30 	bl	8013dcc <sys_arch_protect>
 800c36c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d015      	beq.n	800c3a8 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	6812      	ldr	r2, [r2, #0]
 800c384:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	f003 0303 	and.w	r3, r3, #3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d006      	beq.n	800c39e <do_memp_malloc_pool+0x3e>
 800c390:	4b09      	ldr	r3, [pc, #36]	; (800c3b8 <do_memp_malloc_pool+0x58>)
 800c392:	f240 1249 	movw	r2, #329	; 0x149
 800c396:	4909      	ldr	r1, [pc, #36]	; (800c3bc <do_memp_malloc_pool+0x5c>)
 800c398:	4809      	ldr	r0, [pc, #36]	; (800c3c0 <do_memp_malloc_pool+0x60>)
 800c39a:	f009 f959 	bl	8015650 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f007 fd22 	bl	8013de8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	e003      	b.n	800c3b0 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f007 fd1d 	bl	8013de8 <sys_arch_unprotect>
  return NULL;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	08016de4 	.word	0x08016de4
 800c3bc:	08016e14 	.word	0x08016e14
 800c3c0:	08016e38 	.word	0x08016e38

0800c3c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c3ce:	79fb      	ldrb	r3, [r7, #7]
 800c3d0:	2b0c      	cmp	r3, #12
 800c3d2:	d908      	bls.n	800c3e6 <memp_malloc+0x22>
 800c3d4:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <memp_malloc+0x3c>)
 800c3d6:	f240 1287 	movw	r2, #391	; 0x187
 800c3da:	490a      	ldr	r1, [pc, #40]	; (800c404 <memp_malloc+0x40>)
 800c3dc:	480a      	ldr	r0, [pc, #40]	; (800c408 <memp_malloc+0x44>)
 800c3de:	f009 f937 	bl	8015650 <iprintf>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e008      	b.n	800c3f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	4a08      	ldr	r2, [pc, #32]	; (800c40c <memp_malloc+0x48>)
 800c3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff ffb6 	bl	800c360 <do_memp_malloc_pool>
 800c3f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	08016de4 	.word	0x08016de4
 800c404:	08016e74 	.word	0x08016e74
 800c408:	08016e38 	.word	0x08016e38
 800c40c:	0801896c 	.word	0x0801896c

0800c410 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	f003 0303 	and.w	r3, r3, #3
 800c420:	2b00      	cmp	r3, #0
 800c422:	d006      	beq.n	800c432 <do_memp_free_pool+0x22>
 800c424:	4b0d      	ldr	r3, [pc, #52]	; (800c45c <do_memp_free_pool+0x4c>)
 800c426:	f240 129d 	movw	r2, #413	; 0x19d
 800c42a:	490d      	ldr	r1, [pc, #52]	; (800c460 <do_memp_free_pool+0x50>)
 800c42c:	480d      	ldr	r0, [pc, #52]	; (800c464 <do_memp_free_pool+0x54>)
 800c42e:	f009 f90f 	bl	8015650 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c436:	f007 fcc9 	bl	8013dcc <sys_arch_protect>
 800c43a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c44e:	68b8      	ldr	r0, [r7, #8]
 800c450:	f007 fcca 	bl	8013de8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c454:	bf00      	nop
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	08016de4 	.word	0x08016de4
 800c460:	08016e94 	.word	0x08016e94
 800c464:	08016e38 	.word	0x08016e38

0800c468 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	4603      	mov	r3, r0
 800c470:	6039      	str	r1, [r7, #0]
 800c472:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c474:	79fb      	ldrb	r3, [r7, #7]
 800c476:	2b0c      	cmp	r3, #12
 800c478:	d907      	bls.n	800c48a <memp_free+0x22>
 800c47a:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <memp_free+0x44>)
 800c47c:	f240 12db 	movw	r2, #475	; 0x1db
 800c480:	490b      	ldr	r1, [pc, #44]	; (800c4b0 <memp_free+0x48>)
 800c482:	480c      	ldr	r0, [pc, #48]	; (800c4b4 <memp_free+0x4c>)
 800c484:	f009 f8e4 	bl	8015650 <iprintf>
 800c488:	e00c      	b.n	800c4a4 <memp_free+0x3c>

  if (mem == NULL) {
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d008      	beq.n	800c4a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c490:	79fb      	ldrb	r3, [r7, #7]
 800c492:	4a09      	ldr	r2, [pc, #36]	; (800c4b8 <memp_free+0x50>)
 800c494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7ff ffb8 	bl	800c410 <do_memp_free_pool>
 800c4a0:	e000      	b.n	800c4a4 <memp_free+0x3c>
    return;
 800c4a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	08016de4 	.word	0x08016de4
 800c4b0:	08016eb4 	.word	0x08016eb4
 800c4b4:	08016e38 	.word	0x08016e38
 800c4b8:	0801896c 	.word	0x0801896c

0800c4bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c4c0:	bf00      	nop
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
	...

0800c4cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d105      	bne.n	800c4ec <netif_add+0x20>
 800c4e0:	4b1f      	ldr	r3, [pc, #124]	; (800c560 <netif_add+0x94>)
 800c4e2:	22fb      	movs	r2, #251	; 0xfb
 800c4e4:	491f      	ldr	r1, [pc, #124]	; (800c564 <netif_add+0x98>)
 800c4e6:	4820      	ldr	r0, [pc, #128]	; (800c568 <netif_add+0x9c>)
 800c4e8:	f009 f8b2 	bl	8015650 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2203      	movs	r2, #3
 800c50a:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	69ba      	ldr	r2, [r7, #24]
 800c512:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800c514:	4b15      	ldr	r3, [pc, #84]	; (800c56c <netif_add+0xa0>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	b2d1      	uxtb	r1, r2
 800c51c:	4a13      	ldr	r2, [pc, #76]	; (800c56c <netif_add+0xa0>)
 800c51e:	7011      	strb	r1, [r2, #0]
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6a3a      	ldr	r2, [r7, #32]
 800c52a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	68b9      	ldr	r1, [r7, #8]
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 f81e 	bl	800c574 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	4798      	blx	r3
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <netif_add+0x7c>
    return NULL;
 800c544:	2300      	movs	r3, #0
 800c546:	e007      	b.n	800c558 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c548:	4b09      	ldr	r3, [pc, #36]	; (800c570 <netif_add+0xa4>)
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c550:	4a07      	ldr	r2, [pc, #28]	; (800c570 <netif_add+0xa4>)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800c556:	68fb      	ldr	r3, [r7, #12]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	08016ed0 	.word	0x08016ed0
 800c564:	08016f04 	.word	0x08016f04
 800c568:	08016f1c 	.word	0x08016f1c
 800c56c:	20005f7c 	.word	0x20005f7c
 800c570:	20017690 	.word	0x20017690

0800c574 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d003      	beq.n	800c590 <netif_set_addr+0x1c>
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10c      	bne.n	800c5aa <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800c590:	68b9      	ldr	r1, [r7, #8]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 f81a 	bl	800c5cc <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800c598:	6879      	ldr	r1, [r7, #4]
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f000 f862 	bl	800c664 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f000 f84a 	bl	800c63c <netif_set_gw>
 800c5a8:	e00b      	b.n	800c5c2 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800c5aa:	6879      	ldr	r1, [r7, #4]
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f000 f859 	bl	800c664 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f000 f841 	bl	800c63c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800c5ba:	68b9      	ldr	r1, [r7, #8]
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f000 f805 	bl	800c5cc <netif_set_ipaddr>
  }
}
 800c5c2:	bf00      	nop
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
	...

0800c5cc <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d003      	beq.n	800c5e4 <netif_set_ipaddr+0x18>
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	e002      	b.n	800c5ea <netif_set_ipaddr+0x1e>
 800c5e4:	4b14      	ldr	r3, [pc, #80]	; (800c638 <netif_set_ipaddr+0x6c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d01c      	beq.n	800c630 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	f107 020c 	add.w	r2, r7, #12
 800c5fe:	4611      	mov	r1, r2
 800c600:	4618      	mov	r0, r3
 800c602:	f001 ffc7 	bl	800e594 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	3304      	adds	r3, #4
 800c60a:	f107 020c 	add.w	r2, r7, #12
 800c60e:	4611      	mov	r1, r2
 800c610:	4618      	mov	r0, r3
 800c612:	f005 f8cf 	bl	80117b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <netif_set_ipaddr+0x56>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	e000      	b.n	800c624 <netif_set_ipaddr+0x58>
 800c622:	2300      	movs	r3, #0
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c628:	2101      	movs	r1, #1
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f861 	bl	800c6f2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800c630:	bf00      	nop
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	080189e0 	.word	0x080189e0

0800c63c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <netif_set_gw+0x16>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	e000      	b.n	800c654 <netif_set_gw+0x18>
 800c652:	2300      	movs	r3, #0
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <netif_set_netmask+0x16>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	e000      	b.n	800c67c <netif_set_netmask+0x18>
 800c67a:	2300      	movs	r3, #0
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c694:	4a04      	ldr	r2, [pc, #16]	; (800c6a8 <netif_set_default+0x1c>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c69a:	bf00      	nop
 800c69c:	370c      	adds	r7, #12
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	20017694 	.word	0x20017694

0800c6ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d113      	bne.n	800c6ea <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c6c8:	f043 0301 	orr.w	r3, r3, #1
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c6da:	f003 0304 	and.w	r3, r3, #4
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800c6e2:	2103      	movs	r1, #3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f804 	bl	800c6f2 <netif_issue_reports>
    }
  }
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b082      	sub	sp, #8
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c6fe:	78fb      	ldrb	r3, [r7, #3]
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	2b00      	cmp	r3, #0
 800c706:	d011      	beq.n	800c72c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	3304      	adds	r3, #4
 800c70c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00c      	beq.n	800c72c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c718:	f003 0308 	and.w	r3, r3, #8
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3304      	adds	r3, #4
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f005 ff78 	bl	801261c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800c72c:	bf00      	nop
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d012      	beq.n	800c770 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c750:	f023 0301 	bic.w	r3, r3, #1
 800c754:	b2da      	uxtb	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c762:	f003 0308 	and.w	r3, r3, #8
 800c766:	2b00      	cmp	r3, #0
 800c768:	d002      	beq.n	800c770 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f005 fb1c 	bl	8011da8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b088      	sub	sp, #32
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	71fb      	strb	r3, [r7, #7]
 800c782:	460b      	mov	r3, r1
 800c784:	80bb      	strh	r3, [r7, #4]
 800c786:	4613      	mov	r3, r2
 800c788:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800c78a:	79fb      	ldrb	r3, [r7, #7]
 800c78c:	2b04      	cmp	r3, #4
 800c78e:	d81c      	bhi.n	800c7ca <pbuf_alloc+0x52>
 800c790:	a201      	add	r2, pc, #4	; (adr r2, 800c798 <pbuf_alloc+0x20>)
 800c792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c796:	bf00      	nop
 800c798:	0800c7ad 	.word	0x0800c7ad
 800c79c:	0800c7b3 	.word	0x0800c7b3
 800c7a0:	0800c7b9 	.word	0x0800c7b9
 800c7a4:	0800c7bf 	.word	0x0800c7bf
 800c7a8:	0800c7c5 	.word	0x0800c7c5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c7ac:	2336      	movs	r3, #54	; 0x36
 800c7ae:	82fb      	strh	r3, [r7, #22]
    break;
 800c7b0:	e014      	b.n	800c7dc <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c7b2:	2322      	movs	r3, #34	; 0x22
 800c7b4:	82fb      	strh	r3, [r7, #22]
    break;
 800c7b6:	e011      	b.n	800c7dc <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c7b8:	230e      	movs	r3, #14
 800c7ba:	82fb      	strh	r3, [r7, #22]
    break;
 800c7bc:	e00e      	b.n	800c7dc <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	82fb      	strh	r3, [r7, #22]
    break;
 800c7c2:	e00b      	b.n	800c7dc <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	82fb      	strh	r3, [r7, #22]
    break;
 800c7c8:	e008      	b.n	800c7dc <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800c7ca:	4ba3      	ldr	r3, [pc, #652]	; (800ca58 <pbuf_alloc+0x2e0>)
 800c7cc:	f44f 728b 	mov.w	r2, #278	; 0x116
 800c7d0:	49a2      	ldr	r1, [pc, #648]	; (800ca5c <pbuf_alloc+0x2e4>)
 800c7d2:	48a3      	ldr	r0, [pc, #652]	; (800ca60 <pbuf_alloc+0x2e8>)
 800c7d4:	f008 ff3c 	bl	8015650 <iprintf>
    return NULL;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e159      	b.n	800ca90 <pbuf_alloc+0x318>
  }

  switch (type) {
 800c7dc:	79bb      	ldrb	r3, [r7, #6]
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	f200 8130 	bhi.w	800ca44 <pbuf_alloc+0x2cc>
 800c7e4:	a201      	add	r2, pc, #4	; (adr r2, 800c7ec <pbuf_alloc+0x74>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c985 	.word	0x0800c985
 800c7f0:	0800ca11 	.word	0x0800ca11
 800c7f4:	0800ca11 	.word	0x0800ca11
 800c7f8:	0800c7fd 	.word	0x0800c7fd
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c7fc:	200c      	movs	r0, #12
 800c7fe:	f7ff fde1 	bl	800c3c4 <memp_malloc>
 800c802:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d101      	bne.n	800c80e <pbuf_alloc+0x96>
      PBUF_POOL_IS_EMPTY();
      return NULL;
 800c80a:	2300      	movs	r3, #0
 800c80c:	e140      	b.n	800ca90 <pbuf_alloc+0x318>
    }
    p->type = type;
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	79ba      	ldrb	r2, [r7, #6]
 800c812:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	2200      	movs	r2, #0
 800c818:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800c81a:	8afb      	ldrh	r3, [r7, #22]
 800c81c:	3310      	adds	r3, #16
 800c81e:	69fa      	ldr	r2, [r7, #28]
 800c820:	4413      	add	r3, r2
 800c822:	3303      	adds	r3, #3
 800c824:	f023 0303 	bic.w	r3, r3, #3
 800c828:	461a      	mov	r2, r3
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	f003 0303 	and.w	r3, r3, #3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d006      	beq.n	800c848 <pbuf_alloc+0xd0>
 800c83a:	4b87      	ldr	r3, [pc, #540]	; (800ca58 <pbuf_alloc+0x2e0>)
 800c83c:	f240 1229 	movw	r2, #297	; 0x129
 800c840:	4988      	ldr	r1, [pc, #544]	; (800ca64 <pbuf_alloc+0x2ec>)
 800c842:	4887      	ldr	r0, [pc, #540]	; (800ca60 <pbuf_alloc+0x2e8>)
 800c844:	f008 ff04 	bl	8015650 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	88ba      	ldrh	r2, [r7, #4]
 800c84c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800c84e:	8afb      	ldrh	r3, [r7, #22]
 800c850:	3303      	adds	r3, #3
 800c852:	f023 0303 	bic.w	r3, r3, #3
 800c856:	f5c3 720d 	rsb	r2, r3, #564	; 0x234
 800c85a:	88bb      	ldrh	r3, [r7, #4]
 800c85c:	4293      	cmp	r3, r2
 800c85e:	bf28      	it	cs
 800c860:	4613      	movcs	r3, r2
 800c862:	b29a      	uxth	r2, r3
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	69fa      	ldr	r2, [r7, #28]
 800c86e:	8952      	ldrh	r2, [r2, #10]
 800c870:	441a      	add	r2, r3
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800c878:	429a      	cmp	r2, r3
 800c87a:	d906      	bls.n	800c88a <pbuf_alloc+0x112>
 800c87c:	4b76      	ldr	r3, [pc, #472]	; (800ca58 <pbuf_alloc+0x2e0>)
 800c87e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800c882:	4979      	ldr	r1, [pc, #484]	; (800ca68 <pbuf_alloc+0x2f0>)
 800c884:	4876      	ldr	r0, [pc, #472]	; (800ca60 <pbuf_alloc+0x2e8>)
 800c886:	f008 fee3 	bl	8015650 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c88a:	8afb      	ldrh	r3, [r7, #22]
 800c88c:	3303      	adds	r3, #3
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 800c896:	d106      	bne.n	800c8a6 <pbuf_alloc+0x12e>
 800c898:	4b6f      	ldr	r3, [pc, #444]	; (800ca58 <pbuf_alloc+0x2e0>)
 800c89a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c89e:	4973      	ldr	r1, [pc, #460]	; (800ca6c <pbuf_alloc+0x2f4>)
 800c8a0:	486f      	ldr	r0, [pc, #444]	; (800ca60 <pbuf_alloc+0x2e8>)
 800c8a2:	f008 fed5 	bl	8015650 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800c8b0:	88bb      	ldrh	r3, [r7, #4]
 800c8b2:	69fa      	ldr	r2, [r7, #28]
 800c8b4:	8952      	ldrh	r2, [r2, #10]
 800c8b6:	1a9b      	subs	r3, r3, r2
 800c8b8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800c8ba:	e05f      	b.n	800c97c <pbuf_alloc+0x204>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c8bc:	200c      	movs	r0, #12
 800c8be:	f7ff fd81 	bl	800c3c4 <memp_malloc>
 800c8c2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d104      	bne.n	800c8d4 <pbuf_alloc+0x15c>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 800c8ca:	69f8      	ldr	r0, [r7, #28]
 800c8cc:	f000 fac2 	bl	800ce54 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e0dd      	b.n	800ca90 <pbuf_alloc+0x318>
      }
      q->type = type;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	79ba      	ldrb	r2, [r7, #6]
 800c8d8:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	dd06      	ble.n	800c904 <pbuf_alloc+0x18c>
 800c8f6:	4b58      	ldr	r3, [pc, #352]	; (800ca58 <pbuf_alloc+0x2e0>)
 800c8f8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800c8fc:	495c      	ldr	r1, [pc, #368]	; (800ca70 <pbuf_alloc+0x2f8>)
 800c8fe:	4858      	ldr	r0, [pc, #352]	; (800ca60 <pbuf_alloc+0x2e8>)
 800c900:	f008 fea6 	bl	8015650 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	b29a      	uxth	r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	b29b      	uxth	r3, r3
 800c910:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 800c914:	bf28      	it	cs
 800c916:	f44f 730d 	movcs.w	r3, #564	; 0x234
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f103 0210 	add.w	r2, r3, #16
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	f003 0303 	and.w	r3, r3, #3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d006      	beq.n	800c944 <pbuf_alloc+0x1cc>
 800c936:	4b48      	ldr	r3, [pc, #288]	; (800ca58 <pbuf_alloc+0x2e0>)
 800c938:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800c93c:	494d      	ldr	r1, [pc, #308]	; (800ca74 <pbuf_alloc+0x2fc>)
 800c93e:	4848      	ldr	r0, [pc, #288]	; (800ca60 <pbuf_alloc+0x2e8>)
 800c940:	f008 fe86 	bl	8015650 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	69fa      	ldr	r2, [r7, #28]
 800c94a:	8952      	ldrh	r2, [r2, #10]
 800c94c:	441a      	add	r2, r3
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800c954:	429a      	cmp	r2, r3
 800c956:	d906      	bls.n	800c966 <pbuf_alloc+0x1ee>
 800c958:	4b3f      	ldr	r3, [pc, #252]	; (800ca58 <pbuf_alloc+0x2e0>)
 800c95a:	f240 1255 	movw	r2, #341	; 0x155
 800c95e:	4942      	ldr	r1, [pc, #264]	; (800ca68 <pbuf_alloc+0x2f0>)
 800c960:	483f      	ldr	r0, [pc, #252]	; (800ca60 <pbuf_alloc+0x2e8>)
 800c962:	f008 fe75 	bl	8015650 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2201      	movs	r2, #1
 800c96a:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	895b      	ldrh	r3, [r3, #10]
 800c970:	461a      	mov	r2, r3
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	1a9b      	subs	r3, r3, r2
 800c976:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	dc9c      	bgt.n	800c8bc <pbuf_alloc+0x144>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800c982:	e07e      	b.n	800ca82 <pbuf_alloc+0x30a>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800c984:	8afb      	ldrh	r3, [r7, #22]
 800c986:	3313      	adds	r3, #19
 800c988:	b29b      	uxth	r3, r3
 800c98a:	f023 0303 	bic.w	r3, r3, #3
 800c98e:	b29a      	uxth	r2, r3
 800c990:	88bb      	ldrh	r3, [r7, #4]
 800c992:	3303      	adds	r3, #3
 800c994:	b29b      	uxth	r3, r3
 800c996:	f023 0303 	bic.w	r3, r3, #3
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	4413      	add	r3, r2
 800c99e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800c9a0:	897a      	ldrh	r2, [r7, #10]
 800c9a2:	88bb      	ldrh	r3, [r7, #4]
 800c9a4:	3303      	adds	r3, #3
 800c9a6:	f023 0303 	bic.w	r3, r3, #3
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d201      	bcs.n	800c9b2 <pbuf_alloc+0x23a>
        return NULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e06e      	b.n	800ca90 <pbuf_alloc+0x318>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800c9b2:	897b      	ldrh	r3, [r7, #10]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff fb95 	bl	800c0e4 <mem_malloc>
 800c9ba:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d101      	bne.n	800c9c6 <pbuf_alloc+0x24e>
      return NULL;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e064      	b.n	800ca90 <pbuf_alloc+0x318>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800c9c6:	8afb      	ldrh	r3, [r7, #22]
 800c9c8:	3310      	adds	r3, #16
 800c9ca:	69fa      	ldr	r2, [r7, #28]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	3303      	adds	r3, #3
 800c9d0:	f023 0303 	bic.w	r3, r3, #3
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	88ba      	ldrh	r2, [r7, #4]
 800c9de:	811a      	strh	r2, [r3, #8]
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	891a      	ldrh	r2, [r3, #8]
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	79ba      	ldrb	r2, [r7, #6]
 800c9f2:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	f003 0303 	and.w	r3, r3, #3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d03f      	beq.n	800ca80 <pbuf_alloc+0x308>
 800ca00:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <pbuf_alloc+0x2e0>)
 800ca02:	f240 1277 	movw	r2, #375	; 0x177
 800ca06:	491c      	ldr	r1, [pc, #112]	; (800ca78 <pbuf_alloc+0x300>)
 800ca08:	4815      	ldr	r0, [pc, #84]	; (800ca60 <pbuf_alloc+0x2e8>)
 800ca0a:	f008 fe21 	bl	8015650 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800ca0e:	e037      	b.n	800ca80 <pbuf_alloc+0x308>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ca10:	200b      	movs	r0, #11
 800ca12:	f7ff fcd7 	bl	800c3c4 <memp_malloc>
 800ca16:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <pbuf_alloc+0x2aa>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e036      	b.n	800ca90 <pbuf_alloc+0x318>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800ca22:	69fb      	ldr	r3, [r7, #28]
 800ca24:	2200      	movs	r2, #0
 800ca26:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	88ba      	ldrh	r2, [r7, #4]
 800ca2c:	811a      	strh	r2, [r3, #8]
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	891a      	ldrh	r2, [r3, #8]
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	79ba      	ldrb	r2, [r7, #6]
 800ca40:	731a      	strb	r2, [r3, #12]
    break;
 800ca42:	e01e      	b.n	800ca82 <pbuf_alloc+0x30a>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ca44:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <pbuf_alloc+0x2e0>)
 800ca46:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800ca4a:	490c      	ldr	r1, [pc, #48]	; (800ca7c <pbuf_alloc+0x304>)
 800ca4c:	4804      	ldr	r0, [pc, #16]	; (800ca60 <pbuf_alloc+0x2e8>)
 800ca4e:	f008 fdff 	bl	8015650 <iprintf>
    return NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	e01c      	b.n	800ca90 <pbuf_alloc+0x318>
 800ca56:	bf00      	nop
 800ca58:	08016f44 	.word	0x08016f44
 800ca5c:	08016f74 	.word	0x08016f74
 800ca60:	08016f90 	.word	0x08016f90
 800ca64:	08016fb8 	.word	0x08016fb8
 800ca68:	08016fe8 	.word	0x08016fe8
 800ca6c:	0801701c 	.word	0x0801701c
 800ca70:	08017050 	.word	0x08017050
 800ca74:	08017064 	.word	0x08017064
 800ca78:	08017094 	.word	0x08017094
 800ca7c:	080170c0 	.word	0x080170c0
    break;
 800ca80:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	2201      	movs	r2, #1
 800ca86:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ca8e:	69fb      	ldr	r3, [r7, #28]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3720      	adds	r7, #32
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	603b      	str	r3, [r7, #0]
 800caa0:	4603      	mov	r3, r0
 800caa2:	71fb      	strb	r3, [r7, #7]
 800caa4:	460b      	mov	r3, r1
 800caa6:	80bb      	strh	r3, [r7, #4]
 800caa8:	4613      	mov	r3, r2
 800caaa:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	2b04      	cmp	r3, #4
 800cab0:	d81b      	bhi.n	800caea <pbuf_alloced_custom+0x52>
 800cab2:	a201      	add	r2, pc, #4	; (adr r2, 800cab8 <pbuf_alloced_custom+0x20>)
 800cab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab8:	0800cacd 	.word	0x0800cacd
 800cabc:	0800cad3 	.word	0x0800cad3
 800cac0:	0800cad9 	.word	0x0800cad9
 800cac4:	0800cadf 	.word	0x0800cadf
 800cac8:	0800cae5 	.word	0x0800cae5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cacc:	2336      	movs	r3, #54	; 0x36
 800cace:	81fb      	strh	r3, [r7, #14]
    break;
 800cad0:	e014      	b.n	800cafc <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cad2:	2322      	movs	r3, #34	; 0x22
 800cad4:	81fb      	strh	r3, [r7, #14]
    break;
 800cad6:	e011      	b.n	800cafc <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800cad8:	230e      	movs	r3, #14
 800cada:	81fb      	strh	r3, [r7, #14]
    break;
 800cadc:	e00e      	b.n	800cafc <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800cade:	2300      	movs	r3, #0
 800cae0:	81fb      	strh	r3, [r7, #14]
    break;
 800cae2:	e00b      	b.n	800cafc <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	81fb      	strh	r3, [r7, #14]
    break;
 800cae8:	e008      	b.n	800cafc <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800caea:	4b1d      	ldr	r3, [pc, #116]	; (800cb60 <pbuf_alloced_custom+0xc8>)
 800caec:	f240 12c5 	movw	r2, #453	; 0x1c5
 800caf0:	491c      	ldr	r1, [pc, #112]	; (800cb64 <pbuf_alloced_custom+0xcc>)
 800caf2:	481d      	ldr	r0, [pc, #116]	; (800cb68 <pbuf_alloced_custom+0xd0>)
 800caf4:	f008 fdac 	bl	8015650 <iprintf>
    return NULL;
 800caf8:	2300      	movs	r3, #0
 800cafa:	e02d      	b.n	800cb58 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cafc:	89fb      	ldrh	r3, [r7, #14]
 800cafe:	3303      	adds	r3, #3
 800cb00:	f023 0203 	bic.w	r2, r3, #3
 800cb04:	88bb      	ldrh	r3, [r7, #4]
 800cb06:	441a      	add	r2, r3
 800cb08:	8bbb      	ldrh	r3, [r7, #28]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d901      	bls.n	800cb12 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e022      	b.n	800cb58 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2200      	movs	r2, #0
 800cb16:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d008      	beq.n	800cb30 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cb1e:	89fb      	ldrh	r3, [r7, #14]
 800cb20:	3303      	adds	r3, #3
 800cb22:	f023 0303 	bic.w	r3, r3, #3
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	441a      	add	r2, r3
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	605a      	str	r2, [r3, #4]
 800cb2e:	e002      	b.n	800cb36 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	2200      	movs	r2, #0
 800cb34:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2202      	movs	r2, #2
 800cb3a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	88ba      	ldrh	r2, [r7, #4]
 800cb40:	811a      	strh	r2, [r3, #8]
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	891a      	ldrh	r2, [r3, #8]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	79ba      	ldrb	r2, [r7, #6]
 800cb4e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	2201      	movs	r2, #1
 800cb54:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800cb56:	683b      	ldr	r3, [r7, #0]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	08016f44 	.word	0x08016f44
 800cb64:	080170dc 	.word	0x080170dc
 800cb68:	08016f90 	.word	0x08016f90

0800cb6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	460b      	mov	r3, r1
 800cb76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <pbuf_realloc+0x20>
 800cb7e:	4b4b      	ldr	r3, [pc, #300]	; (800ccac <pbuf_realloc+0x140>)
 800cb80:	f240 12f3 	movw	r2, #499	; 0x1f3
 800cb84:	494a      	ldr	r1, [pc, #296]	; (800ccb0 <pbuf_realloc+0x144>)
 800cb86:	484b      	ldr	r0, [pc, #300]	; (800ccb4 <pbuf_realloc+0x148>)
 800cb88:	f008 fd62 	bl	8015650 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	7b1b      	ldrb	r3, [r3, #12]
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d012      	beq.n	800cbba <pbuf_realloc+0x4e>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	7b1b      	ldrb	r3, [r3, #12]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d00e      	beq.n	800cbba <pbuf_realloc+0x4e>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	7b1b      	ldrb	r3, [r3, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00a      	beq.n	800cbba <pbuf_realloc+0x4e>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	7b1b      	ldrb	r3, [r3, #12]
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d006      	beq.n	800cbba <pbuf_realloc+0x4e>
 800cbac:	4b3f      	ldr	r3, [pc, #252]	; (800ccac <pbuf_realloc+0x140>)
 800cbae:	f240 12f7 	movw	r2, #503	; 0x1f7
 800cbb2:	4941      	ldr	r1, [pc, #260]	; (800ccb8 <pbuf_realloc+0x14c>)
 800cbb4:	483f      	ldr	r0, [pc, #252]	; (800ccb4 <pbuf_realloc+0x148>)
 800cbb6:	f008 fd4b 	bl	8015650 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	891b      	ldrh	r3, [r3, #8]
 800cbbe:	887a      	ldrh	r2, [r7, #2]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d26f      	bcs.n	800cca4 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800cbc4:	887b      	ldrh	r3, [r7, #2]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	8912      	ldrh	r2, [r2, #8]
 800cbca:	1a9b      	subs	r3, r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cbce:	887b      	ldrh	r3, [r7, #2]
 800cbd0:	827b      	strh	r3, [r7, #18]
  q = p;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cbd6:	e025      	b.n	800cc24 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	895b      	ldrh	r3, [r3, #10]
 800cbdc:	8a7a      	ldrh	r2, [r7, #18]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	dd06      	ble.n	800cbfa <pbuf_realloc+0x8e>
 800cbec:	4b2f      	ldr	r3, [pc, #188]	; (800ccac <pbuf_realloc+0x140>)
 800cbee:	f240 220b 	movw	r2, #523	; 0x20b
 800cbf2:	4932      	ldr	r1, [pc, #200]	; (800ccbc <pbuf_realloc+0x150>)
 800cbf4:	482f      	ldr	r0, [pc, #188]	; (800ccb4 <pbuf_realloc+0x148>)
 800cbf6:	f008 fd2b 	bl	8015650 <iprintf>
    q->tot_len += (u16_t)grow;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	891a      	ldrh	r2, [r3, #8]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	4413      	add	r3, r2
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d106      	bne.n	800cc24 <pbuf_realloc+0xb8>
 800cc16:	4b25      	ldr	r3, [pc, #148]	; (800ccac <pbuf_realloc+0x140>)
 800cc18:	f240 220f 	movw	r2, #527	; 0x20f
 800cc1c:	4928      	ldr	r1, [pc, #160]	; (800ccc0 <pbuf_realloc+0x154>)
 800cc1e:	4825      	ldr	r0, [pc, #148]	; (800ccb4 <pbuf_realloc+0x148>)
 800cc20:	f008 fd16 	bl	8015650 <iprintf>
  while (rem_len > q->len) {
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	895b      	ldrh	r3, [r3, #10]
 800cc28:	8a7a      	ldrh	r2, [r7, #18]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d8d4      	bhi.n	800cbd8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	7b1b      	ldrb	r3, [r3, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d122      	bne.n	800cc7c <pbuf_realloc+0x110>
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	895b      	ldrh	r3, [r3, #10]
 800cc3a:	8a7a      	ldrh	r2, [r7, #18]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d01d      	beq.n	800cc7c <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	7b5b      	ldrb	r3, [r3, #13]
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d117      	bne.n	800cc7c <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	461a      	mov	r2, r3
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	8a7b      	ldrh	r3, [r7, #18]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6978      	ldr	r0, [r7, #20]
 800cc62:	f7ff f955 	bl	800bf10 <mem_trim>
 800cc66:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d106      	bne.n	800cc7c <pbuf_realloc+0x110>
 800cc6e:	4b0f      	ldr	r3, [pc, #60]	; (800ccac <pbuf_realloc+0x140>)
 800cc70:	f240 221d 	movw	r2, #541	; 0x21d
 800cc74:	4913      	ldr	r1, [pc, #76]	; (800ccc4 <pbuf_realloc+0x158>)
 800cc76:	480f      	ldr	r0, [pc, #60]	; (800ccb4 <pbuf_realloc+0x148>)
 800cc78:	f008 fcea 	bl	8015650 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	8a7a      	ldrh	r2, [r7, #18]
 800cc80:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	895a      	ldrh	r2, [r3, #10]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d004      	beq.n	800cc9c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f000 f8dc 	bl	800ce54 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	601a      	str	r2, [r3, #0]
 800cca2:	e000      	b.n	800cca6 <pbuf_realloc+0x13a>
    return;
 800cca4:	bf00      	nop

}
 800cca6:	3718      	adds	r7, #24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	08016f44 	.word	0x08016f44
 800ccb0:	08017100 	.word	0x08017100
 800ccb4:	08016f90 	.word	0x08016f90
 800ccb8:	08017118 	.word	0x08017118
 800ccbc:	08017134 	.word	0x08017134
 800ccc0:	08017148 	.word	0x08017148
 800ccc4:	08017160 	.word	0x08017160

0800ccc8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	807b      	strh	r3, [r7, #2]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d106      	bne.n	800ccec <pbuf_header_impl+0x24>
 800ccde:	4b46      	ldr	r3, [pc, #280]	; (800cdf8 <pbuf_header_impl+0x130>)
 800cce0:	f240 223f 	movw	r2, #575	; 0x23f
 800cce4:	4945      	ldr	r1, [pc, #276]	; (800cdfc <pbuf_header_impl+0x134>)
 800cce6:	4846      	ldr	r0, [pc, #280]	; (800ce00 <pbuf_header_impl+0x138>)
 800cce8:	f008 fcb2 	bl	8015650 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800ccec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d002      	beq.n	800ccfa <pbuf_header_impl+0x32>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <pbuf_header_impl+0x36>
    return 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	e078      	b.n	800cdf0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800ccfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	da10      	bge.n	800cd28 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800cd06:	887b      	ldrh	r3, [r7, #2]
 800cd08:	425b      	negs	r3, r3
 800cd0a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	895b      	ldrh	r3, [r3, #10]
 800cd10:	89fa      	ldrh	r2, [r7, #14]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d90a      	bls.n	800cd2c <pbuf_header_impl+0x64>
 800cd16:	4b38      	ldr	r3, [pc, #224]	; (800cdf8 <pbuf_header_impl+0x130>)
 800cd18:	f240 2247 	movw	r2, #583	; 0x247
 800cd1c:	4939      	ldr	r1, [pc, #228]	; (800ce04 <pbuf_header_impl+0x13c>)
 800cd1e:	4838      	ldr	r0, [pc, #224]	; (800ce00 <pbuf_header_impl+0x138>)
 800cd20:	f008 fc96 	bl	8015650 <iprintf>
 800cd24:	2301      	movs	r3, #1
 800cd26:	e063      	b.n	800cdf0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800cd28:	887b      	ldrh	r3, [r7, #2]
 800cd2a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7b1b      	ldrb	r3, [r3, #12]
 800cd30:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800cd38:	89bb      	ldrh	r3, [r7, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d002      	beq.n	800cd44 <pbuf_header_impl+0x7c>
 800cd3e:	89bb      	ldrh	r3, [r7, #12]
 800cd40:	2b03      	cmp	r3, #3
 800cd42:	d112      	bne.n	800cd6a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685a      	ldr	r2, [r3, #4]
 800cd48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd4c:	425b      	negs	r3, r3
 800cd4e:	441a      	add	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3310      	adds	r3, #16
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d238      	bcs.n	800cdd2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	68ba      	ldr	r2, [r7, #8]
 800cd64:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e042      	b.n	800cdf0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800cd6a:	89bb      	ldrh	r3, [r7, #12]
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d002      	beq.n	800cd76 <pbuf_header_impl+0xae>
 800cd70:	89bb      	ldrh	r3, [r7, #12]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d124      	bne.n	800cdc0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800cd76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	da0d      	bge.n	800cd9a <pbuf_header_impl+0xd2>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	895b      	ldrh	r3, [r3, #10]
 800cd82:	89fa      	ldrh	r2, [r7, #14]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d808      	bhi.n	800cd9a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd90:	425b      	negs	r3, r3
 800cd92:	441a      	add	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	605a      	str	r2, [r3, #4]
 800cd98:	e011      	b.n	800cdbe <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800cd9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dd0b      	ble.n	800cdba <pbuf_header_impl+0xf2>
 800cda2:	787b      	ldrb	r3, [r7, #1]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d008      	beq.n	800cdba <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdb0:	425b      	negs	r3, r3
 800cdb2:	441a      	add	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	605a      	str	r2, [r3, #4]
 800cdb8:	e001      	b.n	800cdbe <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e018      	b.n	800cdf0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800cdbe:	e008      	b.n	800cdd2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800cdc0:	4b0d      	ldr	r3, [pc, #52]	; (800cdf8 <pbuf_header_impl+0x130>)
 800cdc2:	f240 2277 	movw	r2, #631	; 0x277
 800cdc6:	4910      	ldr	r1, [pc, #64]	; (800ce08 <pbuf_header_impl+0x140>)
 800cdc8:	480d      	ldr	r0, [pc, #52]	; (800ce00 <pbuf_header_impl+0x138>)
 800cdca:	f008 fc41 	bl	8015650 <iprintf>
    return 1;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e00e      	b.n	800cdf0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	895a      	ldrh	r2, [r3, #10]
 800cdd6:	887b      	ldrh	r3, [r7, #2]
 800cdd8:	4413      	add	r3, r2
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	891a      	ldrh	r2, [r3, #8]
 800cde4:	887b      	ldrh	r3, [r7, #2]
 800cde6:	4413      	add	r3, r2
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	08016f44 	.word	0x08016f44
 800cdfc:	0801717c 	.word	0x0801717c
 800ce00:	08016f90 	.word	0x08016f90
 800ce04:	08017188 	.word	0x08017188
 800ce08:	080171a8 	.word	0x080171a8

0800ce0c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	460b      	mov	r3, r1
 800ce16:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800ce18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4619      	mov	r1, r3
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff ff51 	bl	800ccc8 <pbuf_header_impl>
 800ce26:	4603      	mov	r3, r0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800ce3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce40:	2201      	movs	r2, #1
 800ce42:	4619      	mov	r1, r3
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7ff ff3f 	bl	800ccc8 <pbuf_header_impl>
 800ce4a:	4603      	mov	r3, r0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d10b      	bne.n	800ce7a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d106      	bne.n	800ce76 <pbuf_free+0x22>
 800ce68:	4b41      	ldr	r3, [pc, #260]	; (800cf70 <pbuf_free+0x11c>)
 800ce6a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ce6e:	4941      	ldr	r1, [pc, #260]	; (800cf74 <pbuf_free+0x120>)
 800ce70:	4841      	ldr	r0, [pc, #260]	; (800cf78 <pbuf_free+0x124>)
 800ce72:	f008 fbed 	bl	8015650 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	e076      	b.n	800cf68 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	7b1b      	ldrb	r3, [r3, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d012      	beq.n	800cea8 <pbuf_free+0x54>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	7b1b      	ldrb	r3, [r3, #12]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d00e      	beq.n	800cea8 <pbuf_free+0x54>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7b1b      	ldrb	r3, [r3, #12]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d00a      	beq.n	800cea8 <pbuf_free+0x54>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7b1b      	ldrb	r3, [r3, #12]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d006      	beq.n	800cea8 <pbuf_free+0x54>
 800ce9a:	4b35      	ldr	r3, [pc, #212]	; (800cf70 <pbuf_free+0x11c>)
 800ce9c:	f240 22de 	movw	r2, #734	; 0x2de
 800cea0:	4936      	ldr	r1, [pc, #216]	; (800cf7c <pbuf_free+0x128>)
 800cea2:	4835      	ldr	r0, [pc, #212]	; (800cf78 <pbuf_free+0x124>)
 800cea4:	f008 fbd4 	bl	8015650 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ceac:	e058      	b.n	800cf60 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ceae:	f006 ff8d 	bl	8013dcc <sys_arch_protect>
 800ceb2:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	89db      	ldrh	r3, [r3, #14]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <pbuf_free+0x76>
 800cebc:	4b2c      	ldr	r3, [pc, #176]	; (800cf70 <pbuf_free+0x11c>)
 800cebe:	f240 22eb 	movw	r2, #747	; 0x2eb
 800cec2:	492f      	ldr	r1, [pc, #188]	; (800cf80 <pbuf_free+0x12c>)
 800cec4:	482c      	ldr	r0, [pc, #176]	; (800cf78 <pbuf_free+0x124>)
 800cec6:	f008 fbc3 	bl	8015650 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	89db      	ldrh	r3, [r3, #14]
 800cece:	3b01      	subs	r3, #1
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	81da      	strh	r2, [r3, #14]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	89db      	ldrh	r3, [r3, #14]
 800ceda:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800cedc:	69b8      	ldr	r0, [r7, #24]
 800cede:	f006 ff83 	bl	8013de8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cee2:	8afb      	ldrh	r3, [r7, #22]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d139      	bne.n	800cf5c <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	7b1b      	ldrb	r3, [r3, #12]
 800cef2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7b5b      	ldrb	r3, [r3, #13]
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d011      	beq.n	800cf24 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d106      	bne.n	800cf1a <pbuf_free+0xc6>
 800cf0c:	4b18      	ldr	r3, [pc, #96]	; (800cf70 <pbuf_free+0x11c>)
 800cf0e:	f240 22f9 	movw	r2, #761	; 0x2f9
 800cf12:	491c      	ldr	r1, [pc, #112]	; (800cf84 <pbuf_free+0x130>)
 800cf14:	4818      	ldr	r0, [pc, #96]	; (800cf78 <pbuf_free+0x124>)
 800cf16:	f008 fb9b 	bl	8015650 <iprintf>
        pc->custom_free_function(p);
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	4798      	blx	r3
 800cf22:	e015      	b.n	800cf50 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800cf24:	89fb      	ldrh	r3, [r7, #14]
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d104      	bne.n	800cf34 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	200c      	movs	r0, #12
 800cf2e:	f7ff fa9b 	bl	800c468 <memp_free>
 800cf32:	e00d      	b.n	800cf50 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800cf34:	89fb      	ldrh	r3, [r7, #14]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d002      	beq.n	800cf40 <pbuf_free+0xec>
 800cf3a:	89fb      	ldrh	r3, [r7, #14]
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d104      	bne.n	800cf4a <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800cf40:	6879      	ldr	r1, [r7, #4]
 800cf42:	200b      	movs	r0, #11
 800cf44:	f7ff fa90 	bl	800c468 <memp_free>
 800cf48:	e002      	b.n	800cf50 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7fe ff72 	bl	800be34 <mem_free>
        }
      }
      count++;
 800cf50:	7ffb      	ldrb	r3, [r7, #31]
 800cf52:	3301      	adds	r3, #1
 800cf54:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	607b      	str	r3, [r7, #4]
 800cf5a:	e001      	b.n	800cf60 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1a3      	bne.n	800ceae <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cf66:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3720      	adds	r7, #32
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	08016f44 	.word	0x08016f44
 800cf74:	0801717c 	.word	0x0801717c
 800cf78:	08016f90 	.word	0x08016f90
 800cf7c:	080171b8 	.word	0x080171b8
 800cf80:	080171d0 	.word	0x080171d0
 800cf84:	080171e8 	.word	0x080171e8

0800cf88 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cf90:	2300      	movs	r3, #0
 800cf92:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cf94:	e005      	b.n	800cfa2 <pbuf_clen+0x1a>
    ++len;
 800cf96:	89fb      	ldrh	r3, [r7, #14]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1f6      	bne.n	800cf96 <pbuf_clen+0xe>
  }
  return len;
 800cfa8:	89fb      	ldrh	r3, [r7, #14]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d016      	beq.n	800cff4 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800cfc6:	f006 ff01 	bl	8013dcc <sys_arch_protect>
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	89db      	ldrh	r3, [r3, #14]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	81da      	strh	r2, [r3, #14]
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f006 ff05 	bl	8013de8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	89db      	ldrh	r3, [r3, #14]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <pbuf_ref+0x3c>
 800cfe6:	4b05      	ldr	r3, [pc, #20]	; (800cffc <pbuf_ref+0x44>)
 800cfe8:	f240 3239 	movw	r2, #825	; 0x339
 800cfec:	4904      	ldr	r1, [pc, #16]	; (800d000 <pbuf_ref+0x48>)
 800cfee:	4805      	ldr	r0, [pc, #20]	; (800d004 <pbuf_ref+0x4c>)
 800cff0:	f008 fb2e 	bl	8015650 <iprintf>
  }
}
 800cff4:	bf00      	nop
 800cff6:	3710      	adds	r7, #16
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	08016f44 	.word	0x08016f44
 800d000:	0801720c 	.word	0x0801720c
 800d004:	08016f90 	.word	0x08016f90

0800d008 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <pbuf_cat+0x16>
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d107      	bne.n	800d02e <pbuf_cat+0x26>
 800d01e:	4b20      	ldr	r3, [pc, #128]	; (800d0a0 <pbuf_cat+0x98>)
 800d020:	f240 324d 	movw	r2, #845	; 0x34d
 800d024:	491f      	ldr	r1, [pc, #124]	; (800d0a4 <pbuf_cat+0x9c>)
 800d026:	4820      	ldr	r0, [pc, #128]	; (800d0a8 <pbuf_cat+0xa0>)
 800d028:	f008 fb12 	bl	8015650 <iprintf>
 800d02c:	e034      	b.n	800d098 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	e00a      	b.n	800d04a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	891a      	ldrh	r2, [r3, #8]
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	891b      	ldrh	r3, [r3, #8]
 800d03c:	4413      	add	r3, r2
 800d03e:	b29a      	uxth	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	60fb      	str	r3, [r7, #12]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1f0      	bne.n	800d034 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	891a      	ldrh	r2, [r3, #8]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	895b      	ldrh	r3, [r3, #10]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d006      	beq.n	800d06c <pbuf_cat+0x64>
 800d05e:	4b10      	ldr	r3, [pc, #64]	; (800d0a0 <pbuf_cat+0x98>)
 800d060:	f240 3255 	movw	r2, #853	; 0x355
 800d064:	4911      	ldr	r1, [pc, #68]	; (800d0ac <pbuf_cat+0xa4>)
 800d066:	4810      	ldr	r0, [pc, #64]	; (800d0a8 <pbuf_cat+0xa0>)
 800d068:	f008 faf2 	bl	8015650 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d006      	beq.n	800d082 <pbuf_cat+0x7a>
 800d074:	4b0a      	ldr	r3, [pc, #40]	; (800d0a0 <pbuf_cat+0x98>)
 800d076:	f240 3256 	movw	r2, #854	; 0x356
 800d07a:	490d      	ldr	r1, [pc, #52]	; (800d0b0 <pbuf_cat+0xa8>)
 800d07c:	480a      	ldr	r0, [pc, #40]	; (800d0a8 <pbuf_cat+0xa0>)
 800d07e:	f008 fae7 	bl	8015650 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	891a      	ldrh	r2, [r3, #8]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	891b      	ldrh	r3, [r3, #8]
 800d08a:	4413      	add	r3, r2
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	08016f44 	.word	0x08016f44
 800d0a4:	08017220 	.word	0x08017220
 800d0a8:	08016f90 	.word	0x08016f90
 800d0ac:	08017258 	.word	0x08017258
 800d0b0:	08017288 	.word	0x08017288

0800d0b4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	81fb      	strh	r3, [r7, #14]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d008      	beq.n	800d0de <pbuf_copy+0x2a>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d005      	beq.n	800d0de <pbuf_copy+0x2a>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	891a      	ldrh	r2, [r3, #8]
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	891b      	ldrh	r3, [r3, #8]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d209      	bcs.n	800d0f2 <pbuf_copy+0x3e>
 800d0de:	4b54      	ldr	r3, [pc, #336]	; (800d230 <pbuf_copy+0x17c>)
 800d0e0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d0e4:	4953      	ldr	r1, [pc, #332]	; (800d234 <pbuf_copy+0x180>)
 800d0e6:	4854      	ldr	r0, [pc, #336]	; (800d238 <pbuf_copy+0x184>)
 800d0e8:	f008 fab2 	bl	8015650 <iprintf>
 800d0ec:	f06f 030f 	mvn.w	r3, #15
 800d0f0:	e099      	b.n	800d226 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	895b      	ldrh	r3, [r3, #10]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	89fb      	ldrh	r3, [r7, #14]
 800d0fa:	1ad2      	subs	r2, r2, r3
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	895b      	ldrh	r3, [r3, #10]
 800d100:	4619      	mov	r1, r3
 800d102:	89bb      	ldrh	r3, [r7, #12]
 800d104:	1acb      	subs	r3, r1, r3
 800d106:	429a      	cmp	r2, r3
 800d108:	db05      	blt.n	800d116 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	895a      	ldrh	r2, [r3, #10]
 800d10e:	89bb      	ldrh	r3, [r7, #12]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	817b      	strh	r3, [r7, #10]
 800d114:	e004      	b.n	800d120 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	895a      	ldrh	r2, [r3, #10]
 800d11a:	89fb      	ldrh	r3, [r7, #14]
 800d11c:	1ad3      	subs	r3, r2, r3
 800d11e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	89fb      	ldrh	r3, [r7, #14]
 800d126:	18d0      	adds	r0, r2, r3
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	685a      	ldr	r2, [r3, #4]
 800d12c:	89bb      	ldrh	r3, [r7, #12]
 800d12e:	4413      	add	r3, r2
 800d130:	897a      	ldrh	r2, [r7, #10]
 800d132:	4619      	mov	r1, r3
 800d134:	f008 fa79 	bl	801562a <memcpy>
    offset_to += len;
 800d138:	89fa      	ldrh	r2, [r7, #14]
 800d13a:	897b      	ldrh	r3, [r7, #10]
 800d13c:	4413      	add	r3, r2
 800d13e:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800d140:	89ba      	ldrh	r2, [r7, #12]
 800d142:	897b      	ldrh	r3, [r7, #10]
 800d144:	4413      	add	r3, r2
 800d146:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	895b      	ldrh	r3, [r3, #10]
 800d14c:	89fa      	ldrh	r2, [r7, #14]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d906      	bls.n	800d160 <pbuf_copy+0xac>
 800d152:	4b37      	ldr	r3, [pc, #220]	; (800d230 <pbuf_copy+0x17c>)
 800d154:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d158:	4938      	ldr	r1, [pc, #224]	; (800d23c <pbuf_copy+0x188>)
 800d15a:	4837      	ldr	r0, [pc, #220]	; (800d238 <pbuf_copy+0x184>)
 800d15c:	f008 fa78 	bl	8015650 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	895b      	ldrh	r3, [r3, #10]
 800d164:	89ba      	ldrh	r2, [r7, #12]
 800d166:	429a      	cmp	r2, r3
 800d168:	d906      	bls.n	800d178 <pbuf_copy+0xc4>
 800d16a:	4b31      	ldr	r3, [pc, #196]	; (800d230 <pbuf_copy+0x17c>)
 800d16c:	f240 32ce 	movw	r2, #974	; 0x3ce
 800d170:	4933      	ldr	r1, [pc, #204]	; (800d240 <pbuf_copy+0x18c>)
 800d172:	4831      	ldr	r0, [pc, #196]	; (800d238 <pbuf_copy+0x184>)
 800d174:	f008 fa6c 	bl	8015650 <iprintf>
    if (offset_from >= p_from->len) {
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	895b      	ldrh	r3, [r3, #10]
 800d17c:	89ba      	ldrh	r2, [r7, #12]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d304      	bcc.n	800d18c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	895b      	ldrh	r3, [r3, #10]
 800d190:	89fa      	ldrh	r2, [r7, #14]
 800d192:	429a      	cmp	r2, r3
 800d194:	d114      	bne.n	800d1c0 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10c      	bne.n	800d1c0 <pbuf_copy+0x10c>
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d009      	beq.n	800d1c0 <pbuf_copy+0x10c>
 800d1ac:	4b20      	ldr	r3, [pc, #128]	; (800d230 <pbuf_copy+0x17c>)
 800d1ae:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d1b2:	4924      	ldr	r1, [pc, #144]	; (800d244 <pbuf_copy+0x190>)
 800d1b4:	4820      	ldr	r0, [pc, #128]	; (800d238 <pbuf_copy+0x184>)
 800d1b6:	f008 fa4b 	bl	8015650 <iprintf>
 800d1ba:	f06f 030f 	mvn.w	r3, #15
 800d1be:	e032      	b.n	800d226 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d013      	beq.n	800d1ee <pbuf_copy+0x13a>
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	895a      	ldrh	r2, [r3, #10]
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	891b      	ldrh	r3, [r3, #8]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d10d      	bne.n	800d1ee <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d009      	beq.n	800d1ee <pbuf_copy+0x13a>
 800d1da:	4b15      	ldr	r3, [pc, #84]	; (800d230 <pbuf_copy+0x17c>)
 800d1dc:	f240 32de 	movw	r2, #990	; 0x3de
 800d1e0:	4919      	ldr	r1, [pc, #100]	; (800d248 <pbuf_copy+0x194>)
 800d1e2:	4815      	ldr	r0, [pc, #84]	; (800d238 <pbuf_copy+0x184>)
 800d1e4:	f008 fa34 	bl	8015650 <iprintf>
 800d1e8:	f06f 0305 	mvn.w	r3, #5
 800d1ec:	e01b      	b.n	800d226 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d013      	beq.n	800d21c <pbuf_copy+0x168>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	895a      	ldrh	r2, [r3, #10]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	891b      	ldrh	r3, [r3, #8]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d10d      	bne.n	800d21c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d009      	beq.n	800d21c <pbuf_copy+0x168>
 800d208:	4b09      	ldr	r3, [pc, #36]	; (800d230 <pbuf_copy+0x17c>)
 800d20a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800d20e:	490e      	ldr	r1, [pc, #56]	; (800d248 <pbuf_copy+0x194>)
 800d210:	4809      	ldr	r0, [pc, #36]	; (800d238 <pbuf_copy+0x184>)
 800d212:	f008 fa1d 	bl	8015650 <iprintf>
 800d216:	f06f 0305 	mvn.w	r3, #5
 800d21a:	e004      	b.n	800d226 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f47f af67 	bne.w	800d0f2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	08016f44 	.word	0x08016f44
 800d234:	080172d4 	.word	0x080172d4
 800d238:	08016f90 	.word	0x08016f90
 800d23c:	08017304 	.word	0x08017304
 800d240:	0801731c 	.word	0x0801731c
 800d244:	08017338 	.word	0x08017338
 800d248:	08017348 	.word	0x08017348

0800d24c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4611      	mov	r1, r2
 800d258:	461a      	mov	r2, r3
 800d25a:	460b      	mov	r3, r1
 800d25c:	80fb      	strh	r3, [r7, #6]
 800d25e:	4613      	mov	r3, r2
 800d260:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d108      	bne.n	800d27e <pbuf_copy_partial+0x32>
 800d26c:	4b30      	ldr	r3, [pc, #192]	; (800d330 <pbuf_copy_partial+0xe4>)
 800d26e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d272:	4930      	ldr	r1, [pc, #192]	; (800d334 <pbuf_copy_partial+0xe8>)
 800d274:	4830      	ldr	r0, [pc, #192]	; (800d338 <pbuf_copy_partial+0xec>)
 800d276:	f008 f9eb 	bl	8015650 <iprintf>
 800d27a:	2300      	movs	r3, #0
 800d27c:	e054      	b.n	800d328 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d108      	bne.n	800d296 <pbuf_copy_partial+0x4a>
 800d284:	4b2a      	ldr	r3, [pc, #168]	; (800d330 <pbuf_copy_partial+0xe4>)
 800d286:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d28a:	492c      	ldr	r1, [pc, #176]	; (800d33c <pbuf_copy_partial+0xf0>)
 800d28c:	482a      	ldr	r0, [pc, #168]	; (800d338 <pbuf_copy_partial+0xec>)
 800d28e:	f008 f9df 	bl	8015650 <iprintf>
 800d292:	2300      	movs	r3, #0
 800d294:	e048      	b.n	800d328 <pbuf_copy_partial+0xdc>

  left = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <pbuf_copy_partial+0x5a>
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d101      	bne.n	800d2aa <pbuf_copy_partial+0x5e>
    return 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e03e      	b.n	800d328 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	61fb      	str	r3, [r7, #28]
 800d2ae:	e034      	b.n	800d31a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800d2b0:	88bb      	ldrh	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00a      	beq.n	800d2cc <pbuf_copy_partial+0x80>
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	895b      	ldrh	r3, [r3, #10]
 800d2ba:	88ba      	ldrh	r2, [r7, #4]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d305      	bcc.n	800d2cc <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	895b      	ldrh	r3, [r3, #10]
 800d2c4:	88ba      	ldrh	r2, [r7, #4]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	80bb      	strh	r3, [r7, #4]
 800d2ca:	e023      	b.n	800d314 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	895a      	ldrh	r2, [r3, #10]
 800d2d0:	88bb      	ldrh	r3, [r7, #4]
 800d2d2:	1ad3      	subs	r3, r2, r3
 800d2d4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d2d6:	8b3a      	ldrh	r2, [r7, #24]
 800d2d8:	88fb      	ldrh	r3, [r7, #6]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d901      	bls.n	800d2e2 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800d2de:	88fb      	ldrh	r3, [r7, #6]
 800d2e0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800d2e2:	8b7b      	ldrh	r3, [r7, #26]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	18d0      	adds	r0, r2, r3
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	88bb      	ldrh	r3, [r7, #4]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	8b3a      	ldrh	r2, [r7, #24]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	f008 f999 	bl	801562a <memcpy>
      copied_total += buf_copy_len;
 800d2f8:	8afa      	ldrh	r2, [r7, #22]
 800d2fa:	8b3b      	ldrh	r3, [r7, #24]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800d300:	8b7a      	ldrh	r2, [r7, #26]
 800d302:	8b3b      	ldrh	r3, [r7, #24]
 800d304:	4413      	add	r3, r2
 800d306:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800d308:	88fa      	ldrh	r2, [r7, #6]
 800d30a:	8b3b      	ldrh	r3, [r7, #24]
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d310:	2300      	movs	r3, #0
 800d312:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	61fb      	str	r3, [r7, #28]
 800d31a:	88fb      	ldrh	r3, [r7, #6]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d002      	beq.n	800d326 <pbuf_copy_partial+0xda>
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1c4      	bne.n	800d2b0 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800d326:	8afb      	ldrh	r3, [r7, #22]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	08016f44 	.word	0x08016f44
 800d334:	08017374 	.word	0x08017374
 800d338:	08016f90 	.word	0x08016f90
 800d33c:	08017394 	.word	0x08017394

0800d340 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d340:	b480      	push	{r7}
 800d342:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d344:	bf00      	nop
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
	...

0800d350 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d354:	f000 fdc4 	bl	800dee0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d358:	4b07      	ldr	r3, [pc, #28]	; (800d378 <tcp_tmr+0x28>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	3301      	adds	r3, #1
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	4b05      	ldr	r3, [pc, #20]	; (800d378 <tcp_tmr+0x28>)
 800d362:	701a      	strb	r2, [r3, #0]
 800d364:	4b04      	ldr	r3, [pc, #16]	; (800d378 <tcp_tmr+0x28>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	f003 0301 	and.w	r3, r3, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d370:	f000 fb18 	bl	800d9a4 <tcp_slowtmr>
  }
}
 800d374:	bf00      	nop
 800d376:	bd80      	pop	{r7, pc}
 800d378:	20005f7d 	.word	0x20005f7d

0800d37c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	60fb      	str	r3, [r7, #12]
 800d38a:	e00a      	b.n	800d3a2 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d390:	683a      	ldr	r2, [r7, #0]
 800d392:	429a      	cmp	r2, r3
 800d394:	d102      	bne.n	800d39c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2200      	movs	r2, #0
 800d39a:	675a      	str	r2, [r3, #116]	; 0x74
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	60fb      	str	r3, [r7, #12]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1f1      	bne.n	800d38c <tcp_remove_listener+0x10>
      }
   }
}
 800d3a8:	bf00      	nop
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d105      	bne.n	800d3ce <tcp_listen_closed+0x1a>
 800d3c2:	4b13      	ldr	r3, [pc, #76]	; (800d410 <tcp_listen_closed+0x5c>)
 800d3c4:	22c0      	movs	r2, #192	; 0xc0
 800d3c6:	4913      	ldr	r1, [pc, #76]	; (800d414 <tcp_listen_closed+0x60>)
 800d3c8:	4813      	ldr	r0, [pc, #76]	; (800d418 <tcp_listen_closed+0x64>)
 800d3ca:	f008 f941 	bl	8015650 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	7d1b      	ldrb	r3, [r3, #20]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d005      	beq.n	800d3e2 <tcp_listen_closed+0x2e>
 800d3d6:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <tcp_listen_closed+0x5c>)
 800d3d8:	22c1      	movs	r2, #193	; 0xc1
 800d3da:	4910      	ldr	r1, [pc, #64]	; (800d41c <tcp_listen_closed+0x68>)
 800d3dc:	480e      	ldr	r0, [pc, #56]	; (800d418 <tcp_listen_closed+0x64>)
 800d3de:	f008 f937 	bl	8015650 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	e00b      	b.n	800d400 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800d3e8:	4a0d      	ldr	r2, [pc, #52]	; (800d420 <tcp_listen_closed+0x6c>)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6879      	ldr	r1, [r7, #4]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff ffc1 	bl	800d37c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b03      	cmp	r3, #3
 800d404:	d9f0      	bls.n	800d3e8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d406:	bf00      	nop
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	080174c8 	.word	0x080174c8
 800d414:	080174f8 	.word	0x080174f8
 800d418:	08017504 	.word	0x08017504
 800d41c:	0801752c 	.word	0x0801752c
 800d420:	080189b8 	.word	0x080189b8

0800d424 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d424:	b5b0      	push	{r4, r5, r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af02      	add	r7, sp, #8
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	460b      	mov	r3, r1
 800d42e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d430:	78fb      	ldrb	r3, [r7, #3]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d075      	beq.n	800d522 <tcp_close_shutdown+0xfe>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	7d1b      	ldrb	r3, [r3, #20]
 800d43a:	2b04      	cmp	r3, #4
 800d43c:	d003      	beq.n	800d446 <tcp_close_shutdown+0x22>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7d1b      	ldrb	r3, [r3, #20]
 800d442:	2b07      	cmp	r3, #7
 800d444:	d16d      	bne.n	800d522 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d104      	bne.n	800d458 <tcp_close_shutdown+0x34>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d456:	d064      	beq.n	800d522 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7e9b      	ldrb	r3, [r3, #26]
 800d45c:	f003 0310 	and.w	r3, r3, #16
 800d460:	2b00      	cmp	r3, #0
 800d462:	d106      	bne.n	800d472 <tcp_close_shutdown+0x4e>
 800d464:	4b59      	ldr	r3, [pc, #356]	; (800d5cc <tcp_close_shutdown+0x1a8>)
 800d466:	f240 120f 	movw	r2, #271	; 0x10f
 800d46a:	4959      	ldr	r1, [pc, #356]	; (800d5d0 <tcp_close_shutdown+0x1ac>)
 800d46c:	4859      	ldr	r0, [pc, #356]	; (800d5d4 <tcp_close_shutdown+0x1b0>)
 800d46e:	f008 f8ef 	bl	8015650 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d47a:	687c      	ldr	r4, [r7, #4]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	1d1d      	adds	r5, r3, #4
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	8adb      	ldrh	r3, [r3, #22]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	8b12      	ldrh	r2, [r2, #24]
 800d488:	9201      	str	r2, [sp, #4]
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	462b      	mov	r3, r5
 800d48e:	4622      	mov	r2, r4
 800d490:	f003 fc78 	bl	8010d84 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 ff77 	bl	800e388 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d49a:	4b4f      	ldr	r3, [pc, #316]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d105      	bne.n	800d4b0 <tcp_close_shutdown+0x8c>
 800d4a4:	4b4c      	ldr	r3, [pc, #304]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	4a4b      	ldr	r2, [pc, #300]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d4ac:	6013      	str	r3, [r2, #0]
 800d4ae:	e013      	b.n	800d4d8 <tcp_close_shutdown+0xb4>
 800d4b0:	4b49      	ldr	r3, [pc, #292]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60fb      	str	r3, [r7, #12]
 800d4b6:	e00c      	b.n	800d4d2 <tcp_close_shutdown+0xae>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d104      	bne.n	800d4cc <tcp_close_shutdown+0xa8>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68da      	ldr	r2, [r3, #12]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	60da      	str	r2, [r3, #12]
 800d4ca:	e005      	b.n	800d4d8 <tcp_close_shutdown+0xb4>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	60fb      	str	r3, [r7, #12]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1ef      	bne.n	800d4b8 <tcp_close_shutdown+0x94>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	60da      	str	r2, [r3, #12]
 800d4de:	4b3f      	ldr	r3, [pc, #252]	; (800d5dc <tcp_close_shutdown+0x1b8>)
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	7d1b      	ldrb	r3, [r3, #20]
 800d4e8:	2b04      	cmp	r3, #4
 800d4ea:	d10c      	bne.n	800d506 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	220a      	movs	r2, #10
 800d4f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d4f2:	4b3b      	ldr	r3, [pc, #236]	; (800d5e0 <tcp_close_shutdown+0x1bc>)
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	60da      	str	r2, [r3, #12]
 800d4fa:	4a39      	ldr	r2, [pc, #228]	; (800d5e0 <tcp_close_shutdown+0x1bc>)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	f003 fe8e 	bl	8011220 <tcp_timer_needed>
 800d504:	e00b      	b.n	800d51e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800d506:	4b37      	ldr	r3, [pc, #220]	; (800d5e4 <tcp_close_shutdown+0x1c0>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d102      	bne.n	800d516 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800d510:	f002 ff00 	bl	8010314 <tcp_trigger_input_pcb_close>
 800d514:	e003      	b.n	800d51e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800d516:	6879      	ldr	r1, [r7, #4]
 800d518:	2001      	movs	r0, #1
 800d51a:	f7fe ffa5 	bl	800c468 <memp_free>
        }
      }
      return ERR_OK;
 800d51e:	2300      	movs	r3, #0
 800d520:	e050      	b.n	800d5c4 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	7d1b      	ldrb	r3, [r3, #20]
 800d526:	2b01      	cmp	r3, #1
 800d528:	d02e      	beq.n	800d588 <tcp_close_shutdown+0x164>
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d038      	beq.n	800d5a0 <tcp_close_shutdown+0x17c>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d142      	bne.n	800d5b8 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	8adb      	ldrh	r3, [r3, #22]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d021      	beq.n	800d57e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d53a:	4b2b      	ldr	r3, [pc, #172]	; (800d5e8 <tcp_close_shutdown+0x1c4>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	429a      	cmp	r2, r3
 800d542:	d105      	bne.n	800d550 <tcp_close_shutdown+0x12c>
 800d544:	4b28      	ldr	r3, [pc, #160]	; (800d5e8 <tcp_close_shutdown+0x1c4>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	4a27      	ldr	r2, [pc, #156]	; (800d5e8 <tcp_close_shutdown+0x1c4>)
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	e013      	b.n	800d578 <tcp_close_shutdown+0x154>
 800d550:	4b25      	ldr	r3, [pc, #148]	; (800d5e8 <tcp_close_shutdown+0x1c4>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	60bb      	str	r3, [r7, #8]
 800d556:	e00c      	b.n	800d572 <tcp_close_shutdown+0x14e>
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d104      	bne.n	800d56c <tcp_close_shutdown+0x148>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68da      	ldr	r2, [r3, #12]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	60da      	str	r2, [r3, #12]
 800d56a:	e005      	b.n	800d578 <tcp_close_shutdown+0x154>
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	60bb      	str	r3, [r7, #8]
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1ef      	bne.n	800d558 <tcp_close_shutdown+0x134>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800d57e:	6879      	ldr	r1, [r7, #4]
 800d580:	2001      	movs	r0, #1
 800d582:	f7fe ff71 	bl	800c468 <memp_free>
    break;
 800d586:	e01c      	b.n	800d5c2 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff ff13 	bl	800d3b4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d58e:	6879      	ldr	r1, [r7, #4]
 800d590:	4816      	ldr	r0, [pc, #88]	; (800d5ec <tcp_close_shutdown+0x1c8>)
 800d592:	f000 ff33 	bl	800e3fc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d596:	6879      	ldr	r1, [r7, #4]
 800d598:	2002      	movs	r0, #2
 800d59a:	f7fe ff65 	bl	800c468 <memp_free>
    break;
 800d59e:	e010      	b.n	800d5c2 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800d5a0:	6879      	ldr	r1, [r7, #4]
 800d5a2:	480d      	ldr	r0, [pc, #52]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d5a4:	f000 ff2a 	bl	800e3fc <tcp_pcb_remove>
 800d5a8:	4b0c      	ldr	r3, [pc, #48]	; (800d5dc <tcp_close_shutdown+0x1b8>)
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	2001      	movs	r0, #1
 800d5b2:	f7fe ff59 	bl	800c468 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800d5b6:	e004      	b.n	800d5c2 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f819 	bl	800d5f0 <tcp_close_shutdown_fin>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	e000      	b.n	800d5c4 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bdb0      	pop	{r4, r5, r7, pc}
 800d5cc:	080174c8 	.word	0x080174c8
 800d5d0:	08017544 	.word	0x08017544
 800d5d4:	08017504 	.word	0x08017504
 800d5d8:	2001769c 	.word	0x2001769c
 800d5dc:	20017698 	.word	0x20017698
 800d5e0:	200176ac 	.word	0x200176ac
 800d5e4:	200176b0 	.word	0x200176b0
 800d5e8:	200176a8 	.word	0x200176a8
 800d5ec:	200176a4 	.word	0x200176a4

0800d5f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d106      	bne.n	800d60c <tcp_close_shutdown_fin+0x1c>
 800d5fe:	4b2c      	ldr	r3, [pc, #176]	; (800d6b0 <tcp_close_shutdown_fin+0xc0>)
 800d600:	f240 124d 	movw	r2, #333	; 0x14d
 800d604:	492b      	ldr	r1, [pc, #172]	; (800d6b4 <tcp_close_shutdown_fin+0xc4>)
 800d606:	482c      	ldr	r0, [pc, #176]	; (800d6b8 <tcp_close_shutdown_fin+0xc8>)
 800d608:	f008 f822 	bl	8015650 <iprintf>

  switch (pcb->state) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	7d1b      	ldrb	r3, [r3, #20]
 800d610:	2b04      	cmp	r3, #4
 800d612:	d010      	beq.n	800d636 <tcp_close_shutdown_fin+0x46>
 800d614:	2b07      	cmp	r3, #7
 800d616:	d01b      	beq.n	800d650 <tcp_close_shutdown_fin+0x60>
 800d618:	2b03      	cmp	r3, #3
 800d61a:	d126      	bne.n	800d66a <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f002 ff05 	bl	801042c <tcp_send_fin>
 800d622:	4603      	mov	r3, r0
 800d624:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d11f      	bne.n	800d66e <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2205      	movs	r2, #5
 800d632:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d634:	e01b      	b.n	800d66e <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f002 fef8 	bl	801042c <tcp_send_fin>
 800d63c:	4603      	mov	r3, r0
 800d63e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d114      	bne.n	800d672 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2205      	movs	r2, #5
 800d64c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d64e:	e010      	b.n	800d672 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f002 feeb 	bl	801042c <tcp_send_fin>
 800d656:	4603      	mov	r3, r0
 800d658:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d109      	bne.n	800d676 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2209      	movs	r2, #9
 800d666:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d668:	e005      	b.n	800d676 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	e01c      	b.n	800d6a8 <tcp_close_shutdown_fin+0xb8>
    break;
 800d66e:	bf00      	nop
 800d670:	e002      	b.n	800d678 <tcp_close_shutdown_fin+0x88>
    break;
 800d672:	bf00      	nop
 800d674:	e000      	b.n	800d678 <tcp_close_shutdown_fin+0x88>
    break;
 800d676:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d103      	bne.n	800d688 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f003 f8f3 	bl	801086c <tcp_output>
 800d686:	e00d      	b.n	800d6a4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d690:	d108      	bne.n	800d6a4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	7e9b      	ldrb	r3, [r3, #26]
 800d696:	f043 0308 	orr.w	r3, r3, #8
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	e001      	b.n	800d6a8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	080174c8 	.word	0x080174c8
 800d6b4:	080174f8 	.word	0x080174f8
 800d6b8:	08017504 	.word	0x08017504

0800d6bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	7d1b      	ldrb	r3, [r3, #20]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d006      	beq.n	800d6da <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	7e9b      	ldrb	r3, [r3, #26]
 800d6d0:	f043 0310 	orr.w	r3, r3, #16
 800d6d4:	b2da      	uxtb	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d6da:	2101      	movs	r1, #1
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7ff fea1 	bl	800d424 <tcp_close_shutdown>
 800d6e2:	4603      	mov	r3, r0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08c      	sub	sp, #48	; 0x30
 800d6f0:	af02      	add	r7, sp, #8
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7d1b      	ldrb	r3, [r3, #20]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d106      	bne.n	800d70c <tcp_abandon+0x20>
 800d6fe:	4b48      	ldr	r3, [pc, #288]	; (800d820 <tcp_abandon+0x134>)
 800d700:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d704:	4947      	ldr	r1, [pc, #284]	; (800d824 <tcp_abandon+0x138>)
 800d706:	4848      	ldr	r0, [pc, #288]	; (800d828 <tcp_abandon+0x13c>)
 800d708:	f007 ffa2 	bl	8015650 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	7d1b      	ldrb	r3, [r3, #20]
 800d710:	2b0a      	cmp	r3, #10
 800d712:	d108      	bne.n	800d726 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d714:	6879      	ldr	r1, [r7, #4]
 800d716:	4845      	ldr	r0, [pc, #276]	; (800d82c <tcp_abandon+0x140>)
 800d718:	f000 fe70 	bl	800e3fc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800d71c:	6879      	ldr	r1, [r7, #4]
 800d71e:	2001      	movs	r0, #1
 800d720:	f7fe fea2 	bl	800c468 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800d724:	e078      	b.n	800d818 <tcp_abandon+0x12c>
    int send_rst = 0;
 800d726:	2300      	movs	r3, #0
 800d728:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d72a:	2300      	movs	r3, #0
 800d72c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d732:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d738:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d740:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	7d1b      	ldrb	r3, [r3, #20]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d126      	bne.n	800d79e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	8adb      	ldrh	r3, [r3, #22]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d02e      	beq.n	800d7b6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d758:	4b35      	ldr	r3, [pc, #212]	; (800d830 <tcp_abandon+0x144>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d105      	bne.n	800d76e <tcp_abandon+0x82>
 800d762:	4b33      	ldr	r3, [pc, #204]	; (800d830 <tcp_abandon+0x144>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	4a31      	ldr	r2, [pc, #196]	; (800d830 <tcp_abandon+0x144>)
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	e013      	b.n	800d796 <tcp_abandon+0xaa>
 800d76e:	4b30      	ldr	r3, [pc, #192]	; (800d830 <tcp_abandon+0x144>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	61fb      	str	r3, [r7, #28]
 800d774:	e00c      	b.n	800d790 <tcp_abandon+0xa4>
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d104      	bne.n	800d78a <tcp_abandon+0x9e>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	68da      	ldr	r2, [r3, #12]
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	60da      	str	r2, [r3, #12]
 800d788:	e005      	b.n	800d796 <tcp_abandon+0xaa>
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	61fb      	str	r3, [r7, #28]
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1ef      	bne.n	800d776 <tcp_abandon+0x8a>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	60da      	str	r2, [r3, #12]
 800d79c:	e00b      	b.n	800d7b6 <tcp_abandon+0xca>
      send_rst = reset;
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	8adb      	ldrh	r3, [r3, #22]
 800d7a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d7a8:	6879      	ldr	r1, [r7, #4]
 800d7aa:	4822      	ldr	r0, [pc, #136]	; (800d834 <tcp_abandon+0x148>)
 800d7ac:	f000 fe26 	bl	800e3fc <tcp_pcb_remove>
 800d7b0:	4b21      	ldr	r3, [pc, #132]	; (800d838 <tcp_abandon+0x14c>)
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d004      	beq.n	800d7c8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fc55 	bl	800e072 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d004      	beq.n	800d7da <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f000 fc4c 	bl	800e072 <tcp_segs_free>
    if (send_rst) {
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00c      	beq.n	800d7fa <tcp_abandon+0x10e>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	1d19      	adds	r1, r3, #4
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	8b1b      	ldrh	r3, [r3, #24]
 800d7ea:	9301      	str	r3, [sp, #4]
 800d7ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	6979      	ldr	r1, [r7, #20]
 800d7f4:	69b8      	ldr	r0, [r7, #24]
 800d7f6:	f003 fac5 	bl	8010d84 <tcp_rst>
    last_state = pcb->state;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	7d1b      	ldrb	r3, [r3, #20]
 800d7fe:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800d800:	6879      	ldr	r1, [r7, #4]
 800d802:	2001      	movs	r0, #1
 800d804:	f7fe fe30 	bl	800c468 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d004      	beq.n	800d818 <tcp_abandon+0x12c>
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	f06f 010c 	mvn.w	r1, #12
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	4798      	blx	r3
}
 800d818:	bf00      	nop
 800d81a:	3728      	adds	r7, #40	; 0x28
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	080174c8 	.word	0x080174c8
 800d824:	08017560 	.word	0x08017560
 800d828:	08017504 	.word	0x08017504
 800d82c:	200176ac 	.word	0x200176ac
 800d830:	200176a8 	.word	0x200176a8
 800d834:	2001769c 	.word	0x2001769c
 800d838:	20017698 	.word	0x20017698

0800d83c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d844:	2101      	movs	r1, #1
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff ff50 	bl	800d6ec <tcp_abandon>
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d864:	4413      	add	r3, r2
 800d866:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d870:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800d874:	bf28      	it	cs
 800d876:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 800d87a:	b292      	uxth	r2, r2
 800d87c:	4413      	add	r3, r2
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	db08      	blt.n	800d898 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	e020      	b.n	800d8da <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a0:	1ad3      	subs	r3, r2, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	dd03      	ble.n	800d8ae <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d8ac:	e014      	b.n	800d8d8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8c0:	d306      	bcc.n	800d8d0 <tcp_update_rcv_ann_wnd+0x7c>
 800d8c2:	4b08      	ldr	r3, [pc, #32]	; (800d8e4 <tcp_update_rcv_ann_wnd+0x90>)
 800d8c4:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d8c8:	4907      	ldr	r1, [pc, #28]	; (800d8e8 <tcp_update_rcv_ann_wnd+0x94>)
 800d8ca:	4808      	ldr	r0, [pc, #32]	; (800d8ec <tcp_update_rcv_ann_wnd+0x98>)
 800d8cc:	f007 fec0 	bl	8015650 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d8d8:	2300      	movs	r3, #0
  }
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	080174c8 	.word	0x080174c8
 800d8e8:	080175e0 	.word	0x080175e0
 800d8ec:	08017504 	.word	0x08017504

0800d8f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	7d1b      	ldrb	r3, [r3, #20]
 800d900:	2b01      	cmp	r3, #1
 800d902:	d106      	bne.n	800d912 <tcp_recved+0x22>
 800d904:	4b23      	ldr	r3, [pc, #140]	; (800d994 <tcp_recved+0xa4>)
 800d906:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d90a:	4923      	ldr	r1, [pc, #140]	; (800d998 <tcp_recved+0xa8>)
 800d90c:	4823      	ldr	r0, [pc, #140]	; (800d99c <tcp_recved+0xac>)
 800d90e:	f007 fe9f 	bl	8015650 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d916:	887b      	ldrh	r3, [r7, #2]
 800d918:	4413      	add	r3, r2
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d928:	d904      	bls.n	800d934 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d930:	851a      	strh	r2, [r3, #40]	; 0x28
 800d932:	e017      	b.n	800d964 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d113      	bne.n	800d964 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
 800d940:	2b07      	cmp	r3, #7
 800d942:	d003      	beq.n	800d94c <tcp_recved+0x5c>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	7d1b      	ldrb	r3, [r3, #20]
 800d948:	2b09      	cmp	r3, #9
 800d94a:	d104      	bne.n	800d956 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d952:	851a      	strh	r2, [r3, #40]	; 0x28
 800d954:	e006      	b.n	800d964 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800d956:	4b0f      	ldr	r3, [pc, #60]	; (800d994 <tcp_recved+0xa4>)
 800d958:	f240 322d 	movw	r2, #813	; 0x32d
 800d95c:	4910      	ldr	r1, [pc, #64]	; (800d9a0 <tcp_recved+0xb0>)
 800d95e:	480f      	ldr	r0, [pc, #60]	; (800d99c <tcp_recved+0xac>)
 800d960:	f007 fe76 	bl	8015650 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7ff ff75 	bl	800d854 <tcp_update_rcv_ann_wnd>
 800d96a:	4603      	mov	r3, r0
 800d96c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d974:	db09      	blt.n	800d98a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	7e9b      	ldrb	r3, [r3, #26]
 800d97a:	f043 0302 	orr.w	r3, r3, #2
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f002 ff71 	bl	801086c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d98a:	bf00      	nop
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	080174c8 	.word	0x080174c8
 800d998:	080175fc 	.word	0x080175fc
 800d99c:	08017504 	.word	0x08017504
 800d9a0:	08017624 	.word	0x08017624

0800d9a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d9a4:	b5b0      	push	{r4, r5, r7, lr}
 800d9a6:	b08c      	sub	sp, #48	; 0x30
 800d9a8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d9ae:	4b97      	ldr	r3, [pc, #604]	; (800dc0c <tcp_slowtmr+0x268>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	4a95      	ldr	r2, [pc, #596]	; (800dc0c <tcp_slowtmr+0x268>)
 800d9b6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d9b8:	4b95      	ldr	r3, [pc, #596]	; (800dc10 <tcp_slowtmr+0x26c>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	4b93      	ldr	r3, [pc, #588]	; (800dc10 <tcp_slowtmr+0x26c>)
 800d9c2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d9c8:	4b92      	ldr	r3, [pc, #584]	; (800dc14 <tcp_slowtmr+0x270>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d9ce:	e20c      	b.n	800ddea <tcp_slowtmr+0x446>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	7d1b      	ldrb	r3, [r3, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d106      	bne.n	800d9e6 <tcp_slowtmr+0x42>
 800d9d8:	4b8f      	ldr	r3, [pc, #572]	; (800dc18 <tcp_slowtmr+0x274>)
 800d9da:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d9de:	498f      	ldr	r1, [pc, #572]	; (800dc1c <tcp_slowtmr+0x278>)
 800d9e0:	488f      	ldr	r0, [pc, #572]	; (800dc20 <tcp_slowtmr+0x27c>)
 800d9e2:	f007 fe35 	bl	8015650 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d106      	bne.n	800d9fc <tcp_slowtmr+0x58>
 800d9ee:	4b8a      	ldr	r3, [pc, #552]	; (800dc18 <tcp_slowtmr+0x274>)
 800d9f0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d9f4:	498b      	ldr	r1, [pc, #556]	; (800dc24 <tcp_slowtmr+0x280>)
 800d9f6:	488a      	ldr	r0, [pc, #552]	; (800dc20 <tcp_slowtmr+0x27c>)
 800d9f8:	f007 fe2a 	bl	8015650 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	7d1b      	ldrb	r3, [r3, #20]
 800da00:	2b0a      	cmp	r3, #10
 800da02:	d106      	bne.n	800da12 <tcp_slowtmr+0x6e>
 800da04:	4b84      	ldr	r3, [pc, #528]	; (800dc18 <tcp_slowtmr+0x274>)
 800da06:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800da0a:	4987      	ldr	r1, [pc, #540]	; (800dc28 <tcp_slowtmr+0x284>)
 800da0c:	4884      	ldr	r0, [pc, #528]	; (800dc20 <tcp_slowtmr+0x27c>)
 800da0e:	f007 fe1f 	bl	8015650 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800da12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da14:	7f5a      	ldrb	r2, [r3, #29]
 800da16:	4b7e      	ldr	r3, [pc, #504]	; (800dc10 <tcp_slowtmr+0x26c>)
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d103      	bne.n	800da26 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800da1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da20:	68db      	ldr	r3, [r3, #12]
 800da22:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800da24:	e1e1      	b.n	800ddea <tcp_slowtmr+0x446>
    }
    pcb->last_timer = tcp_timer_ctr;
 800da26:	4b7a      	ldr	r3, [pc, #488]	; (800dc10 <tcp_slowtmr+0x26c>)
 800da28:	781a      	ldrb	r2, [r3, #0]
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800da32:	2300      	movs	r3, #0
 800da34:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da38:	7d1b      	ldrb	r3, [r3, #20]
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d108      	bne.n	800da50 <tcp_slowtmr+0xac>
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da44:	2b05      	cmp	r3, #5
 800da46:	d903      	bls.n	800da50 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800da48:	7ffb      	ldrb	r3, [r7, #31]
 800da4a:	3301      	adds	r3, #1
 800da4c:	77fb      	strb	r3, [r7, #31]
 800da4e:	e0a2      	b.n	800db96 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da56:	2b0b      	cmp	r3, #11
 800da58:	d903      	bls.n	800da62 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800da5a:	7ffb      	ldrb	r3, [r7, #31]
 800da5c:	3301      	adds	r3, #1
 800da5e:	77fb      	strb	r3, [r7, #31]
 800da60:	e099      	b.n	800db96 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800da62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da64:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d032      	beq.n	800dad2 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800da72:	3b01      	subs	r3, #1
 800da74:	4a6d      	ldr	r2, [pc, #436]	; (800dc2c <tcp_slowtmr+0x288>)
 800da76:	5cd3      	ldrb	r3, [r2, r3]
 800da78:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800da7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800da80:	7cfa      	ldrb	r2, [r7, #19]
 800da82:	429a      	cmp	r2, r3
 800da84:	d907      	bls.n	800da96 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da88:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800da8c:	3301      	adds	r3, #1
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da92:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800da9c:	7cfa      	ldrb	r2, [r7, #19]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d879      	bhi.n	800db96 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800daa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daa4:	f003 fafc 	bl	80110a0 <tcp_zero_window_probe>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d173      	bne.n	800db96 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dabc:	2b06      	cmp	r3, #6
 800dabe:	d86a      	bhi.n	800db96 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800dac6:	3301      	adds	r3, #1
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800dad0:	e061      	b.n	800db96 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dad8:	2b00      	cmp	r3, #0
 800dada:	db08      	blt.n	800daee <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	3301      	adds	r3, #1
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	b21a      	sxth	r2, r3
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800daee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d04f      	beq.n	800db96 <tcp_slowtmr+0x1f2>
 800daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800db02:	429a      	cmp	r2, r3
 800db04:	db47      	blt.n	800db96 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800db06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db08:	7d1b      	ldrb	r3, [r3, #20]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d018      	beq.n	800db40 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800db0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db14:	2b0c      	cmp	r3, #12
 800db16:	bf28      	it	cs
 800db18:	230c      	movcs	r3, #12
 800db1a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800db22:	10db      	asrs	r3, r3, #3
 800db24:	b21b      	sxth	r3, r3
 800db26:	461a      	mov	r2, r3
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800db2e:	4413      	add	r3, r2
 800db30:	7dfa      	ldrb	r2, [r7, #23]
 800db32:	493f      	ldr	r1, [pc, #252]	; (800dc30 <tcp_slowtmr+0x28c>)
 800db34:	5c8a      	ldrb	r2, [r1, r2]
 800db36:	4093      	lsls	r3, r2
 800db38:	b21a      	sxth	r2, r3
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	2200      	movs	r2, #0
 800db44:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800db46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db52:	4293      	cmp	r3, r2
 800db54:	bf28      	it	cs
 800db56:	4613      	movcs	r3, r2
 800db58:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800db5a:	8abb      	ldrh	r3, [r7, #20]
 800db5c:	085b      	lsrs	r3, r3, #1
 800db5e:	b29a      	uxth	r2, r3
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db70:	005b      	lsls	r3, r3, #1
 800db72:	b29b      	uxth	r3, r3
 800db74:	429a      	cmp	r2, r3
 800db76:	d206      	bcs.n	800db86 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db7c:	005b      	lsls	r3, r3, #1
 800db7e:	b29a      	uxth	r2, r3
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db88:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800db90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db92:	f003 f96b 	bl	8010e6c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800db96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db98:	7d1b      	ldrb	r3, [r3, #20]
 800db9a:	2b06      	cmp	r3, #6
 800db9c:	d10f      	bne.n	800dbbe <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	7e9b      	ldrb	r3, [r3, #26]
 800dba2:	f003 0310 	and.w	r3, r3, #16
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d009      	beq.n	800dbbe <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbaa:	4b18      	ldr	r3, [pc, #96]	; (800dc0c <tcp_slowtmr+0x268>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	6a1b      	ldr	r3, [r3, #32]
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	2b28      	cmp	r3, #40	; 0x28
 800dbb6:	d902      	bls.n	800dbbe <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dbb8:	7ffb      	ldrb	r3, [r7, #31]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc0:	7a1b      	ldrb	r3, [r3, #8]
 800dbc2:	f003 0308 	and.w	r3, r3, #8
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d05d      	beq.n	800dc86 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dbce:	2b04      	cmp	r3, #4
 800dbd0:	d003      	beq.n	800dbda <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800dbd6:	2b07      	cmp	r3, #7
 800dbd8:	d155      	bne.n	800dc86 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbda:	4b0c      	ldr	r3, [pc, #48]	; (800dc0c <tcp_slowtmr+0x268>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	6a1b      	ldr	r3, [r3, #32]
 800dbe2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbea:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800dbee:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800dbf2:	4910      	ldr	r1, [pc, #64]	; (800dc34 <tcp_slowtmr+0x290>)
 800dbf4:	fba1 1303 	umull	r1, r3, r1, r3
 800dbf8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d91c      	bls.n	800dc38 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800dbfe:	7ffb      	ldrb	r3, [r7, #31]
 800dc00:	3301      	adds	r3, #1
 800dc02:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800dc04:	7fbb      	ldrb	r3, [r7, #30]
 800dc06:	3301      	adds	r3, #1
 800dc08:	77bb      	strb	r3, [r7, #30]
 800dc0a:	e03c      	b.n	800dc86 <tcp_slowtmr+0x2e2>
 800dc0c:	200176a0 	.word	0x200176a0
 800dc10:	20005f7e 	.word	0x20005f7e
 800dc14:	2001769c 	.word	0x2001769c
 800dc18:	080174c8 	.word	0x080174c8
 800dc1c:	08017678 	.word	0x08017678
 800dc20:	08017504 	.word	0x08017504
 800dc24:	080176a4 	.word	0x080176a4
 800dc28:	080176d0 	.word	0x080176d0
 800dc2c:	080189b0 	.word	0x080189b0
 800dc30:	080189a0 	.word	0x080189a0
 800dc34:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc38:	4b9c      	ldr	r3, [pc, #624]	; (800deac <tcp_slowtmr+0x508>)
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	6a1b      	ldr	r3, [r3, #32]
 800dc40:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800dc4e:	4618      	mov	r0, r3
 800dc50:	4b97      	ldr	r3, [pc, #604]	; (800deb0 <tcp_slowtmr+0x50c>)
 800dc52:	fb03 f300 	mul.w	r3, r3, r0
 800dc56:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800dc58:	4996      	ldr	r1, [pc, #600]	; (800deb4 <tcp_slowtmr+0x510>)
 800dc5a:	fba1 1303 	umull	r1, r3, r1, r3
 800dc5e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d910      	bls.n	800dc86 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800dc64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc66:	f003 f9de 	bl	8011026 <tcp_keepalive>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800dc6e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d107      	bne.n	800dc86 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc78:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	b2da      	uxtb	r2, r3
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800dc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc88:	7d1b      	ldrb	r3, [r3, #20]
 800dc8a:	2b03      	cmp	r3, #3
 800dc8c:	d109      	bne.n	800dca2 <tcp_slowtmr+0x2fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc8e:	4b87      	ldr	r3, [pc, #540]	; (800deac <tcp_slowtmr+0x508>)
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc94:	6a1b      	ldr	r3, [r3, #32]
 800dc96:	1ad3      	subs	r3, r2, r3
 800dc98:	2b28      	cmp	r3, #40	; 0x28
 800dc9a:	d902      	bls.n	800dca2 <tcp_slowtmr+0x2fe>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dc9c:	7ffb      	ldrb	r3, [r7, #31]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca4:	7d1b      	ldrb	r3, [r3, #20]
 800dca6:	2b09      	cmp	r3, #9
 800dca8:	d109      	bne.n	800dcbe <tcp_slowtmr+0x31a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dcaa:	4b80      	ldr	r3, [pc, #512]	; (800deac <tcp_slowtmr+0x508>)
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	6a1b      	ldr	r3, [r3, #32]
 800dcb2:	1ad3      	subs	r3, r2, r3
 800dcb4:	2bf0      	cmp	r3, #240	; 0xf0
 800dcb6:	d902      	bls.n	800dcbe <tcp_slowtmr+0x31a>
        ++pcb_remove;
 800dcb8:	7ffb      	ldrb	r3, [r7, #31]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dcbe:	7ffb      	ldrb	r3, [r7, #31]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d05d      	beq.n	800dd80 <tcp_slowtmr+0x3dc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcca:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcce:	f000 fb5b 	bl	800e388 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dcd2:	6a3b      	ldr	r3, [r7, #32]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d010      	beq.n	800dcfa <tcp_slowtmr+0x356>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dcd8:	4b77      	ldr	r3, [pc, #476]	; (800deb8 <tcp_slowtmr+0x514>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d106      	bne.n	800dcf0 <tcp_slowtmr+0x34c>
 800dce2:	4b76      	ldr	r3, [pc, #472]	; (800debc <tcp_slowtmr+0x518>)
 800dce4:	f240 4289 	movw	r2, #1161	; 0x489
 800dce8:	4975      	ldr	r1, [pc, #468]	; (800dec0 <tcp_slowtmr+0x51c>)
 800dcea:	4876      	ldr	r0, [pc, #472]	; (800dec4 <tcp_slowtmr+0x520>)
 800dcec:	f007 fcb0 	bl	8015650 <iprintf>
        prev->next = pcb->next;
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	68da      	ldr	r2, [r3, #12]
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	60da      	str	r2, [r3, #12]
 800dcf8:	e00f      	b.n	800dd1a <tcp_slowtmr+0x376>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dcfa:	4b6f      	ldr	r3, [pc, #444]	; (800deb8 <tcp_slowtmr+0x514>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d006      	beq.n	800dd12 <tcp_slowtmr+0x36e>
 800dd04:	4b6d      	ldr	r3, [pc, #436]	; (800debc <tcp_slowtmr+0x518>)
 800dd06:	f240 428d 	movw	r2, #1165	; 0x48d
 800dd0a:	496f      	ldr	r1, [pc, #444]	; (800dec8 <tcp_slowtmr+0x524>)
 800dd0c:	486d      	ldr	r0, [pc, #436]	; (800dec4 <tcp_slowtmr+0x520>)
 800dd0e:	f007 fc9f 	bl	8015650 <iprintf>
        tcp_active_pcbs = pcb->next;
 800dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	4a68      	ldr	r2, [pc, #416]	; (800deb8 <tcp_slowtmr+0x514>)
 800dd18:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800dd1a:	7fbb      	ldrb	r3, [r7, #30]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d010      	beq.n	800dd42 <tcp_slowtmr+0x39e>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dd28:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	1d1d      	adds	r5, r3, #4
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd30:	8adb      	ldrh	r3, [r3, #22]
 800dd32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd34:	8b12      	ldrh	r2, [r2, #24]
 800dd36:	9201      	str	r2, [sp, #4]
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	462b      	mov	r3, r5
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	f003 f821 	bl	8010d84 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4a:	7d1b      	ldrb	r3, [r3, #20]
 800dd4c:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd50:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	2001      	movs	r0, #1
 800dd5c:	f7fe fb84 	bl	800c468 <memp_free>

      tcp_active_pcbs_changed = 0;
 800dd60:	4b5a      	ldr	r3, [pc, #360]	; (800decc <tcp_slowtmr+0x528>)
 800dd62:	2200      	movs	r2, #0
 800dd64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d004      	beq.n	800dd76 <tcp_slowtmr+0x3d2>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f06f 010c 	mvn.w	r1, #12
 800dd72:	68b8      	ldr	r0, [r7, #8]
 800dd74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dd76:	4b55      	ldr	r3, [pc, #340]	; (800decc <tcp_slowtmr+0x528>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d035      	beq.n	800ddea <tcp_slowtmr+0x446>
        goto tcp_slowtmr_start;
 800dd7e:	e621      	b.n	800d9c4 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd82:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	7edb      	ldrb	r3, [r3, #27]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800dd96:	6a3b      	ldr	r3, [r7, #32]
 800dd98:	7eda      	ldrb	r2, [r3, #27]
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	7f1b      	ldrb	r3, [r3, #28]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d323      	bcc.n	800ddea <tcp_slowtmr+0x446>
        prev->polltmr = 0;
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	2200      	movs	r2, #0
 800dda6:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800dda8:	4b48      	ldr	r3, [pc, #288]	; (800decc <tcp_slowtmr+0x528>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ddae:	6a3b      	ldr	r3, [r7, #32]
 800ddb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00a      	beq.n	800ddce <tcp_slowtmr+0x42a>
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddbe:	6a3a      	ldr	r2, [r7, #32]
 800ddc0:	6912      	ldr	r2, [r2, #16]
 800ddc2:	6a39      	ldr	r1, [r7, #32]
 800ddc4:	4610      	mov	r0, r2
 800ddc6:	4798      	blx	r3
 800ddc8:	4603      	mov	r3, r0
 800ddca:	777b      	strb	r3, [r7, #29]
 800ddcc:	e001      	b.n	800ddd2 <tcp_slowtmr+0x42e>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800ddd2:	4b3e      	ldr	r3, [pc, #248]	; (800decc <tcp_slowtmr+0x528>)
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d000      	beq.n	800dddc <tcp_slowtmr+0x438>
          goto tcp_slowtmr_start;
 800ddda:	e5f3      	b.n	800d9c4 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800dddc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d102      	bne.n	800ddea <tcp_slowtmr+0x446>
          tcp_output(prev);
 800dde4:	6a38      	ldr	r0, [r7, #32]
 800dde6:	f002 fd41 	bl	801086c <tcp_output>
  while (pcb != NULL) {
 800ddea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f47f adef 	bne.w	800d9d0 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800ddf6:	4b36      	ldr	r3, [pc, #216]	; (800ded0 <tcp_slowtmr+0x52c>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ddfc:	e04f      	b.n	800de9e <tcp_slowtmr+0x4fa>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	7d1b      	ldrb	r3, [r3, #20]
 800de02:	2b0a      	cmp	r3, #10
 800de04:	d006      	beq.n	800de14 <tcp_slowtmr+0x470>
 800de06:	4b2d      	ldr	r3, [pc, #180]	; (800debc <tcp_slowtmr+0x518>)
 800de08:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800de0c:	4931      	ldr	r1, [pc, #196]	; (800ded4 <tcp_slowtmr+0x530>)
 800de0e:	482d      	ldr	r0, [pc, #180]	; (800dec4 <tcp_slowtmr+0x520>)
 800de10:	f007 fc1e 	bl	8015650 <iprintf>
    pcb_remove = 0;
 800de14:	2300      	movs	r3, #0
 800de16:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800de18:	4b24      	ldr	r3, [pc, #144]	; (800deac <tcp_slowtmr+0x508>)
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	2bf0      	cmp	r3, #240	; 0xf0
 800de24:	d902      	bls.n	800de2c <tcp_slowtmr+0x488>
      ++pcb_remove;
 800de26:	7ffb      	ldrb	r3, [r7, #31]
 800de28:	3301      	adds	r3, #1
 800de2a:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800de2c:	7ffb      	ldrb	r3, [r7, #31]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d030      	beq.n	800de94 <tcp_slowtmr+0x4f0>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800de32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de34:	f000 faa8 	bl	800e388 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d010      	beq.n	800de60 <tcp_slowtmr+0x4bc>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800de3e:	4b24      	ldr	r3, [pc, #144]	; (800ded0 <tcp_slowtmr+0x52c>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de44:	429a      	cmp	r2, r3
 800de46:	d106      	bne.n	800de56 <tcp_slowtmr+0x4b2>
 800de48:	4b1c      	ldr	r3, [pc, #112]	; (800debc <tcp_slowtmr+0x518>)
 800de4a:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800de4e:	4922      	ldr	r1, [pc, #136]	; (800ded8 <tcp_slowtmr+0x534>)
 800de50:	481c      	ldr	r0, [pc, #112]	; (800dec4 <tcp_slowtmr+0x520>)
 800de52:	f007 fbfd 	bl	8015650 <iprintf>
        prev->next = pcb->next;
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de58:	68da      	ldr	r2, [r3, #12]
 800de5a:	6a3b      	ldr	r3, [r7, #32]
 800de5c:	60da      	str	r2, [r3, #12]
 800de5e:	e00f      	b.n	800de80 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800de60:	4b1b      	ldr	r3, [pc, #108]	; (800ded0 <tcp_slowtmr+0x52c>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de66:	429a      	cmp	r2, r3
 800de68:	d006      	beq.n	800de78 <tcp_slowtmr+0x4d4>
 800de6a:	4b14      	ldr	r3, [pc, #80]	; (800debc <tcp_slowtmr+0x518>)
 800de6c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800de70:	491a      	ldr	r1, [pc, #104]	; (800dedc <tcp_slowtmr+0x538>)
 800de72:	4814      	ldr	r0, [pc, #80]	; (800dec4 <tcp_slowtmr+0x520>)
 800de74:	f007 fbec 	bl	8015650 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	4a14      	ldr	r2, [pc, #80]	; (800ded0 <tcp_slowtmr+0x52c>)
 800de7e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800de8a:	69b9      	ldr	r1, [r7, #24]
 800de8c:	2001      	movs	r0, #1
 800de8e:	f7fe faeb 	bl	800c468 <memp_free>
 800de92:	e004      	b.n	800de9e <tcp_slowtmr+0x4fa>
    } else {
      prev = pcb;
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1ac      	bne.n	800ddfe <tcp_slowtmr+0x45a>
    }
  }
}
 800dea4:	bf00      	nop
 800dea6:	3728      	adds	r7, #40	; 0x28
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bdb0      	pop	{r4, r5, r7, pc}
 800deac:	200176a0 	.word	0x200176a0
 800deb0:	000124f8 	.word	0x000124f8
 800deb4:	10624dd3 	.word	0x10624dd3
 800deb8:	2001769c 	.word	0x2001769c
 800debc:	080174c8 	.word	0x080174c8
 800dec0:	08017700 	.word	0x08017700
 800dec4:	08017504 	.word	0x08017504
 800dec8:	0801772c 	.word	0x0801772c
 800decc:	20017698 	.word	0x20017698
 800ded0:	200176ac 	.word	0x200176ac
 800ded4:	08017758 	.word	0x08017758
 800ded8:	08017788 	.word	0x08017788
 800dedc:	080177b0 	.word	0x080177b0

0800dee0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dee6:	4b2d      	ldr	r3, [pc, #180]	; (800df9c <tcp_fasttmr+0xbc>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	3301      	adds	r3, #1
 800deec:	b2da      	uxtb	r2, r3
 800deee:	4b2b      	ldr	r3, [pc, #172]	; (800df9c <tcp_fasttmr+0xbc>)
 800def0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800def2:	4b2b      	ldr	r3, [pc, #172]	; (800dfa0 <tcp_fasttmr+0xc0>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800def8:	e048      	b.n	800df8c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7f5a      	ldrb	r2, [r3, #29]
 800defe:	4b27      	ldr	r3, [pc, #156]	; (800df9c <tcp_fasttmr+0xbc>)
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	429a      	cmp	r2, r3
 800df04:	d03f      	beq.n	800df86 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800df06:	4b25      	ldr	r3, [pc, #148]	; (800df9c <tcp_fasttmr+0xbc>)
 800df08:	781a      	ldrb	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	7e9b      	ldrb	r3, [r3, #26]
 800df12:	f003 0301 	and.w	r3, r3, #1
 800df16:	2b00      	cmp	r3, #0
 800df18:	d010      	beq.n	800df3c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	7e9b      	ldrb	r3, [r3, #26]
 800df1e:	f043 0302 	orr.w	r3, r3, #2
 800df22:	b2da      	uxtb	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f002 fc9f 	bl	801086c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	7e9b      	ldrb	r3, [r3, #26]
 800df32:	f023 0303 	bic.w	r3, r3, #3
 800df36:	b2da      	uxtb	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	7e9b      	ldrb	r3, [r3, #26]
 800df40:	f003 0308 	and.w	r3, r3, #8
 800df44:	2b00      	cmp	r3, #0
 800df46:	d009      	beq.n	800df5c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7e9b      	ldrb	r3, [r3, #26]
 800df4c:	f023 0308 	bic.w	r3, r3, #8
 800df50:	b2da      	uxtb	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7ff fb4a 	bl	800d5f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00a      	beq.n	800df80 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800df6a:	4b0e      	ldr	r3, [pc, #56]	; (800dfa4 <tcp_fasttmr+0xc4>)
 800df6c:	2200      	movs	r2, #0
 800df6e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 f819 	bl	800dfa8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800df76:	4b0b      	ldr	r3, [pc, #44]	; (800dfa4 <tcp_fasttmr+0xc4>)
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d000      	beq.n	800df80 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800df7e:	e7b8      	b.n	800def2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	607b      	str	r3, [r7, #4]
 800df84:	e002      	b.n	800df8c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1b3      	bne.n	800defa <tcp_fasttmr+0x1a>
    }
  }
}
 800df92:	bf00      	nop
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	20005f7e 	.word	0x20005f7e
 800dfa0:	2001769c 	.word	0x2001769c
 800dfa4:	20017698 	.word	0x20017698

0800dfa8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dfa8:	b590      	push	{r4, r7, lr}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfb4:	7b5b      	ldrb	r3, [r3, #13]
 800dfb6:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfbc:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00a      	beq.n	800dfe2 <tcp_process_refused_data+0x3a>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6918      	ldr	r0, [r3, #16]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	6879      	ldr	r1, [r7, #4]
 800dfda:	47a0      	blx	r4
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]
 800dfe0:	e007      	b.n	800dff2 <tcp_process_refused_data+0x4a>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	6879      	ldr	r1, [r7, #4]
 800dfe8:	2000      	movs	r0, #0
 800dfea:	f000 f86e 	bl	800e0ca <tcp_recv_null>
 800dfee:	4603      	mov	r3, r0
 800dff0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d128      	bne.n	800e04c <tcp_process_refused_data+0xa4>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800dffa:	7bbb      	ldrb	r3, [r7, #14]
 800dffc:	f003 0320 	and.w	r3, r3, #32
 800e000:	2b00      	cmp	r3, #0
 800e002:	d031      	beq.n	800e068 <tcp_process_refused_data+0xc0>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e00c:	d005      	beq.n	800e01a <tcp_process_refused_data+0x72>
          pcb->rcv_wnd++;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e012:	3301      	adds	r3, #1
 800e014:	b29a      	uxth	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00a      	beq.n	800e038 <tcp_process_refused_data+0x90>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6918      	ldr	r0, [r3, #16]
 800e02a:	2300      	movs	r3, #0
 800e02c:	2200      	movs	r2, #0
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	47a0      	blx	r4
 800e032:	4603      	mov	r3, r0
 800e034:	73fb      	strb	r3, [r7, #15]
 800e036:	e001      	b.n	800e03c <tcp_process_refused_data+0x94>
 800e038:	2300      	movs	r3, #0
 800e03a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e040:	f113 0f0d 	cmn.w	r3, #13
 800e044:	d110      	bne.n	800e068 <tcp_process_refused_data+0xc0>
          return ERR_ABRT;
 800e046:	f06f 030c 	mvn.w	r3, #12
 800e04a:	e00e      	b.n	800e06a <tcp_process_refused_data+0xc2>
        }
      }
    } else if (err == ERR_ABRT) {
 800e04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e050:	f113 0f0d 	cmn.w	r3, #13
 800e054:	d102      	bne.n	800e05c <tcp_process_refused_data+0xb4>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e056:	f06f 030c 	mvn.w	r3, #12
 800e05a:	e006      	b.n	800e06a <tcp_process_refused_data+0xc2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	671a      	str	r2, [r3, #112]	; 0x70
      return ERR_INPROGRESS;
 800e062:	f06f 0304 	mvn.w	r3, #4
 800e066:	e000      	b.n	800e06a <tcp_process_refused_data+0xc2>
    }
  }
  return ERR_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3714      	adds	r7, #20
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd90      	pop	{r4, r7, pc}

0800e072 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e07a:	e007      	b.n	800e08c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 f809 	bl	800e09a <tcp_seg_free>
    seg = next;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1f4      	bne.n	800e07c <tcp_segs_free+0xa>
  }
}
 800e092:	bf00      	nop
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00c      	beq.n	800e0c2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d004      	beq.n	800e0ba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fe fecd 	bl	800ce54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e0ba:	6879      	ldr	r1, [r7, #4]
 800e0bc:	2003      	movs	r0, #3
 800e0be:	f7fe f9d3 	bl	800c468 <memp_free>
  }
}
 800e0c2:	bf00      	nop
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b084      	sub	sp, #16
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	60f8      	str	r0, [r7, #12]
 800e0d2:	60b9      	str	r1, [r7, #8]
 800e0d4:	607a      	str	r2, [r7, #4]
 800e0d6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d009      	beq.n	800e0f2 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	891b      	ldrh	r3, [r3, #8]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	68b8      	ldr	r0, [r7, #8]
 800e0e6:	f7ff fc03 	bl	800d8f0 <tcp_recved>
    pbuf_free(p);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7fe feb2 	bl	800ce54 <pbuf_free>
 800e0f0:	e008      	b.n	800e104 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800e0f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d104      	bne.n	800e104 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800e0fa:	68b8      	ldr	r0, [r7, #8]
 800e0fc:	f7ff fade 	bl	800d6bc <tcp_close>
 800e100:	4603      	mov	r3, r0
 800e102:	e000      	b.n	800e106 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
	...

0800e110 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e11a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	db01      	blt.n	800e126 <tcp_kill_prio+0x16>
 800e122:	79fb      	ldrb	r3, [r7, #7]
 800e124:	e000      	b.n	800e128 <tcp_kill_prio+0x18>
 800e126:	237f      	movs	r3, #127	; 0x7f
 800e128:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800e12a:	2300      	movs	r3, #0
 800e12c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e12e:	2300      	movs	r3, #0
 800e130:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e132:	4b16      	ldr	r3, [pc, #88]	; (800e18c <tcp_kill_prio+0x7c>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	617b      	str	r3, [r7, #20]
 800e138:	e01a      	b.n	800e170 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	7d5b      	ldrb	r3, [r3, #21]
 800e13e:	7afa      	ldrb	r2, [r7, #11]
 800e140:	429a      	cmp	r2, r3
 800e142:	d312      	bcc.n	800e16a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e144:	4b12      	ldr	r3, [pc, #72]	; (800e190 <tcp_kill_prio+0x80>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	6a1b      	ldr	r3, [r3, #32]
 800e14c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	429a      	cmp	r2, r3
 800e152:	d80a      	bhi.n	800e16a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800e154:	4b0e      	ldr	r3, [pc, #56]	; (800e190 <tcp_kill_prio+0x80>)
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	6a1b      	ldr	r3, [r3, #32]
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	7d5b      	ldrb	r3, [r3, #21]
 800e168:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	617b      	str	r3, [r7, #20]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1e1      	bne.n	800e13a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e17c:	6938      	ldr	r0, [r7, #16]
 800e17e:	f7ff fb5d 	bl	800d83c <tcp_abort>
  }
}
 800e182:	bf00      	nop
 800e184:	3718      	adds	r7, #24
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	2001769c 	.word	0x2001769c
 800e190:	200176a0 	.word	0x200176a0

0800e194 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	4603      	mov	r3, r0
 800e19c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e19e:	79fb      	ldrb	r3, [r7, #7]
 800e1a0:	2b08      	cmp	r3, #8
 800e1a2:	d009      	beq.n	800e1b8 <tcp_kill_state+0x24>
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
 800e1a6:	2b09      	cmp	r3, #9
 800e1a8:	d006      	beq.n	800e1b8 <tcp_kill_state+0x24>
 800e1aa:	4b1a      	ldr	r3, [pc, #104]	; (800e214 <tcp_kill_state+0x80>)
 800e1ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e1b0:	4919      	ldr	r1, [pc, #100]	; (800e218 <tcp_kill_state+0x84>)
 800e1b2:	481a      	ldr	r0, [pc, #104]	; (800e21c <tcp_kill_state+0x88>)
 800e1b4:	f007 fa4c 	bl	8015650 <iprintf>

  inactivity = 0;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1c0:	4b17      	ldr	r3, [pc, #92]	; (800e220 <tcp_kill_state+0x8c>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	617b      	str	r3, [r7, #20]
 800e1c6:	e017      	b.n	800e1f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	7d1b      	ldrb	r3, [r3, #20]
 800e1cc:	79fa      	ldrb	r2, [r7, #7]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d10f      	bne.n	800e1f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e1d2:	4b14      	ldr	r3, [pc, #80]	; (800e224 <tcp_kill_state+0x90>)
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	6a1b      	ldr	r3, [r3, #32]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	68fa      	ldr	r2, [r7, #12]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d807      	bhi.n	800e1f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e1e2:	4b10      	ldr	r3, [pc, #64]	; (800e224 <tcp_kill_state+0x90>)
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	6a1b      	ldr	r3, [r3, #32]
 800e1ea:	1ad3      	subs	r3, r2, r3
 800e1ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	617b      	str	r3, [r7, #20]
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1e4      	bne.n	800e1c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d003      	beq.n	800e20c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e204:	2100      	movs	r1, #0
 800e206:	6938      	ldr	r0, [r7, #16]
 800e208:	f7ff fa70 	bl	800d6ec <tcp_abandon>
  }
}
 800e20c:	bf00      	nop
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	080174c8 	.word	0x080174c8
 800e218:	080177d8 	.word	0x080177d8
 800e21c:	08017504 	.word	0x08017504
 800e220:	2001769c 	.word	0x2001769c
 800e224:	200176a0 	.word	0x200176a0

0800e228 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e22e:	2300      	movs	r3, #0
 800e230:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e232:	2300      	movs	r3, #0
 800e234:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e236:	4b12      	ldr	r3, [pc, #72]	; (800e280 <tcp_kill_timewait+0x58>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	60fb      	str	r3, [r7, #12]
 800e23c:	e012      	b.n	800e264 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e23e:	4b11      	ldr	r3, [pc, #68]	; (800e284 <tcp_kill_timewait+0x5c>)
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6a1b      	ldr	r3, [r3, #32]
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d807      	bhi.n	800e25e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e24e:	4b0d      	ldr	r3, [pc, #52]	; (800e284 <tcp_kill_timewait+0x5c>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	60fb      	str	r3, [r7, #12]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1e9      	bne.n	800e23e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e270:	68b8      	ldr	r0, [r7, #8]
 800e272:	f7ff fae3 	bl	800d83c <tcp_abort>
  }
}
 800e276:	bf00      	nop
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	200176ac 	.word	0x200176ac
 800e284:	200176a0 	.word	0x200176a0

0800e288 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e292:	2001      	movs	r0, #1
 800e294:	f7fe f896 	bl	800c3c4 <memp_malloc>
 800e298:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d124      	bne.n	800e2ea <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e2a0:	f7ff ffc2 	bl	800e228 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	f7fe f88d 	bl	800c3c4 <memp_malloc>
 800e2aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d11b      	bne.n	800e2ea <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e2b2:	2009      	movs	r0, #9
 800e2b4:	f7ff ff6e 	bl	800e194 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e2b8:	2001      	movs	r0, #1
 800e2ba:	f7fe f883 	bl	800c3c4 <memp_malloc>
 800e2be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d111      	bne.n	800e2ea <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e2c6:	2008      	movs	r0, #8
 800e2c8:	f7ff ff64 	bl	800e194 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e2cc:	2001      	movs	r0, #1
 800e2ce:	f7fe f879 	bl	800c3c4 <memp_malloc>
 800e2d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d107      	bne.n	800e2ea <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e2da:	79fb      	ldrb	r3, [r7, #7]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7ff ff17 	bl	800e110 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e2e2:	2001      	movs	r0, #1
 800e2e4:	f7fe f86e 	bl	800c3c4 <memp_malloc>
 800e2e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d03e      	beq.n	800e36e <tcp_alloc+0xe6>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e2f0:	2294      	movs	r2, #148	; 0x94
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f007 f9a3 	bl	8015640 <memset>
    pcb->prio = prio;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	79fa      	ldrb	r2, [r7, #7]
 800e2fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800e306:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e310:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	22ff      	movs	r2, #255	; 0xff
 800e31e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e326:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2206      	movs	r2, #6
 800e32c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2206      	movs	r2, #6
 800e334:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e33c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2201      	movs	r2, #1
 800e342:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e346:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <tcp_alloc+0xf0>)
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e34e:	4b0b      	ldr	r3, [pc, #44]	; (800e37c <tcp_alloc+0xf4>)
 800e350:	781a      	ldrb	r2, [r3, #0]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800e35c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	4a07      	ldr	r2, [pc, #28]	; (800e380 <tcp_alloc+0xf8>)
 800e364:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	4a06      	ldr	r2, [pc, #24]	; (800e384 <tcp_alloc+0xfc>)
 800e36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e36e:	68fb      	ldr	r3, [r7, #12]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	200176a0 	.word	0x200176a0
 800e37c:	20005f7e 	.word	0x20005f7e
 800e380:	0800e0cb 	.word	0x0800e0cb
 800e384:	006ddd00 	.word	0x006ddd00

0800e388 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7d1b      	ldrb	r3, [r3, #20]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d02c      	beq.n	800e3f2 <tcp_pcb_purge+0x6a>
     pcb->state != TIME_WAIT &&
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e39c:	2b0a      	cmp	r3, #10
 800e39e:	d028      	beq.n	800e3f2 <tcp_pcb_purge+0x6a>
     pcb->state != LISTEN) {
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d024      	beq.n	800e3f2 <tcp_pcb_purge+0x6a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d007      	beq.n	800e3c0 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fe fd4d 	bl	800ce54 <pbuf_free>
      pcb->refused_data = NULL;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	671a      	str	r2, [r3, #112]	; 0x70
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3c6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7ff fe50 	bl	800e072 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fe4b 	bl	800e072 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	669a      	str	r2, [r3, #104]	; 0x68
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800e3f2:	bf00      	nop
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	683a      	ldr	r2, [r7, #0]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d105      	bne.n	800e41c <tcp_pcb_remove+0x20>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68da      	ldr	r2, [r3, #12]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	601a      	str	r2, [r3, #0]
 800e41a:	e013      	b.n	800e444 <tcp_pcb_remove+0x48>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	e00c      	b.n	800e43e <tcp_pcb_remove+0x42>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	683a      	ldr	r2, [r7, #0]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d104      	bne.n	800e438 <tcp_pcb_remove+0x3c>
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	68da      	ldr	r2, [r3, #12]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	60da      	str	r2, [r3, #12]
 800e436:	e005      	b.n	800e444 <tcp_pcb_remove+0x48>
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1ef      	bne.n	800e424 <tcp_pcb_remove+0x28>
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2200      	movs	r2, #0
 800e448:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e44a:	6838      	ldr	r0, [r7, #0]
 800e44c:	f7ff ff9c 	bl	800e388 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	7d1b      	ldrb	r3, [r3, #20]
 800e454:	2b0a      	cmp	r3, #10
 800e456:	d013      	beq.n	800e480 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d00f      	beq.n	800e480 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	7e9b      	ldrb	r3, [r3, #26]
 800e464:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d009      	beq.n	800e480 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	7e9b      	ldrb	r3, [r3, #26]
 800e470:	f043 0302 	orr.w	r3, r3, #2
 800e474:	b2da      	uxtb	r2, r3
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e47a:	6838      	ldr	r0, [r7, #0]
 800e47c:	f002 f9f6 	bl	801086c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	7d1b      	ldrb	r3, [r3, #20]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d015      	beq.n	800e4b4 <tcp_pcb_remove+0xb8>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d006      	beq.n	800e49e <tcp_pcb_remove+0xa2>
 800e490:	4b0d      	ldr	r3, [pc, #52]	; (800e4c8 <tcp_pcb_remove+0xcc>)
 800e492:	f240 7253 	movw	r2, #1875	; 0x753
 800e496:	490d      	ldr	r1, [pc, #52]	; (800e4cc <tcp_pcb_remove+0xd0>)
 800e498:	480d      	ldr	r0, [pc, #52]	; (800e4d0 <tcp_pcb_remove+0xd4>)
 800e49a:	f007 f8d9 	bl	8015650 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d006      	beq.n	800e4b4 <tcp_pcb_remove+0xb8>
 800e4a6:	4b08      	ldr	r3, [pc, #32]	; (800e4c8 <tcp_pcb_remove+0xcc>)
 800e4a8:	f240 7254 	movw	r2, #1876	; 0x754
 800e4ac:	4909      	ldr	r1, [pc, #36]	; (800e4d4 <tcp_pcb_remove+0xd8>)
 800e4ae:	4808      	ldr	r0, [pc, #32]	; (800e4d0 <tcp_pcb_remove+0xd4>)
 800e4b0:	f007 f8ce 	bl	8015650 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e4c0:	bf00      	nop
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	080174c8 	.word	0x080174c8
 800e4cc:	08017880 	.word	0x08017880
 800e4d0:	08017504 	.word	0x08017504
 800e4d4:	08017898 	.word	0x08017898

0800e4d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e4e0:	4b07      	ldr	r3, [pc, #28]	; (800e500 <tcp_next_iss+0x28>)
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	4b07      	ldr	r3, [pc, #28]	; (800e504 <tcp_next_iss+0x2c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	4a05      	ldr	r2, [pc, #20]	; (800e500 <tcp_next_iss+0x28>)
 800e4ec:	6013      	str	r3, [r2, #0]
  return iss;
 800e4ee:	4b04      	ldr	r3, [pc, #16]	; (800e500 <tcp_next_iss+0x28>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	370c      	adds	r7, #12
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	20000010 	.word	0x20000010
 800e504:	200176a0 	.word	0x200176a0

0800e508 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	4603      	mov	r3, r0
 800e510:	6039      	str	r1, [r7, #0]
 800e512:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800e514:	6838      	ldr	r0, [r7, #0]
 800e516:	f004 fa21 	bl	801295c <ip4_route>
 800e51a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800e522:	88fb      	ldrh	r3, [r7, #6]
 800e524:	e010      	b.n	800e548 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e52a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e52c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d008      	beq.n	800e546 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e534:	897b      	ldrh	r3, [r7, #10]
 800e536:	3b28      	subs	r3, #40	; 0x28
 800e538:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e53a:	893a      	ldrh	r2, [r7, #8]
 800e53c:	88fb      	ldrh	r3, [r7, #6]
 800e53e:	4293      	cmp	r3, r2
 800e540:	bf28      	it	cs
 800e542:	4613      	movcs	r3, r2
 800e544:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e546:	88fb      	ldrh	r3, [r7, #6]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e55e:	e011      	b.n	800e584 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	429a      	cmp	r2, r3
 800e56a:	d108      	bne.n	800e57e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f7ff f962 	bl	800d83c <tcp_abort>
      pcb = next;
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	e002      	b.n	800e584 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1ea      	bne.n	800e560 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e58a:	bf00      	nop
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
	...

0800e594 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d02c      	beq.n	800e5fe <tcp_netif_ip_addr_changed+0x6a>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d028      	beq.n	800e5fe <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e5ac:	4b16      	ldr	r3, [pc, #88]	; (800e608 <tcp_netif_ip_addr_changed+0x74>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff ffcc 	bl	800e550 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e5b8:	4b14      	ldr	r3, [pc, #80]	; (800e60c <tcp_netif_ip_addr_changed+0x78>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7ff ffc6 	bl	800e550 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d019      	beq.n	800e5fe <tcp_netif_ip_addr_changed+0x6a>
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d015      	beq.n	800e5fe <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e5d2:	4b0f      	ldr	r3, [pc, #60]	; (800e610 <tcp_netif_ip_addr_changed+0x7c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60fb      	str	r3, [r7, #12]
 800e5d8:	e00e      	b.n	800e5f8 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d103      	bne.n	800e5f4 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	60fb      	str	r3, [r7, #12]
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d1ed      	bne.n	800e5da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e5fe:	bf00      	nop
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	2001769c 	.word	0x2001769c
 800e60c:	200176a8 	.word	0x200176a8
 800e610:	200176a4 	.word	0x200176a4

0800e614 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e614:	b590      	push	{r4, r7, lr}
 800e616:	b08b      	sub	sp, #44	; 0x2c
 800e618:	af02      	add	r7, sp, #8
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	4a82      	ldr	r2, [pc, #520]	; (800e82c <tcp_input+0x218>)
 800e624:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	895b      	ldrh	r3, [r3, #10]
 800e62a:	2b13      	cmp	r3, #19
 800e62c:	f240 8386 	bls.w	800ed3c <tcp_input+0x728>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e630:	4b7f      	ldr	r3, [pc, #508]	; (800e830 <tcp_input+0x21c>)
 800e632:	695a      	ldr	r2, [r3, #20]
 800e634:	4b7e      	ldr	r3, [pc, #504]	; (800e830 <tcp_input+0x21c>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4619      	mov	r1, r3
 800e63a:	4610      	mov	r0, r2
 800e63c:	f004 fc08 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	f040 837c 	bne.w	800ed40 <tcp_input+0x72c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e648:	4b79      	ldr	r3, [pc, #484]	; (800e830 <tcp_input+0x21c>)
 800e64a:	695b      	ldr	r3, [r3, #20]
 800e64c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e650:	2be0      	cmp	r3, #224	; 0xe0
 800e652:	f000 8375 	beq.w	800ed40 <tcp_input+0x72c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e656:	4b75      	ldr	r3, [pc, #468]	; (800e82c <tcp_input+0x218>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	899b      	ldrh	r3, [r3, #12]
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fd fac2 	bl	800bbe8 <lwip_htons>
 800e664:	4603      	mov	r3, r0
 800e666:	0b1b      	lsrs	r3, r3, #12
 800e668:	b29b      	uxth	r3, r3
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e670:	7cbb      	ldrb	r3, [r7, #18]
 800e672:	2b13      	cmp	r3, #19
 800e674:	f240 8364 	bls.w	800ed40 <tcp_input+0x72c>
 800e678:	7cbb      	ldrb	r3, [r7, #18]
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	891b      	ldrh	r3, [r3, #8]
 800e680:	429a      	cmp	r2, r3
 800e682:	f200 835d 	bhi.w	800ed40 <tcp_input+0x72c>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e686:	7cbb      	ldrb	r3, [r7, #18]
 800e688:	b29b      	uxth	r3, r3
 800e68a:	3b14      	subs	r3, #20
 800e68c:	b29a      	uxth	r2, r3
 800e68e:	4b69      	ldr	r3, [pc, #420]	; (800e834 <tcp_input+0x220>)
 800e690:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e692:	4b69      	ldr	r3, [pc, #420]	; (800e838 <tcp_input+0x224>)
 800e694:	2200      	movs	r2, #0
 800e696:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	895a      	ldrh	r2, [r3, #10]
 800e69c:	7cbb      	ldrb	r3, [r7, #18]
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d30d      	bcc.n	800e6c0 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e6a4:	4b63      	ldr	r3, [pc, #396]	; (800e834 <tcp_input+0x220>)
 800e6a6:	881a      	ldrh	r2, [r3, #0]
 800e6a8:	4b64      	ldr	r3, [pc, #400]	; (800e83c <tcp_input+0x228>)
 800e6aa:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800e6ac:	7cbb      	ldrb	r3, [r7, #18]
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	425b      	negs	r3, r3
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	b21b      	sxth	r3, r3
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7fe fba7 	bl	800ce0c <pbuf_header>
 800e6be:	e055      	b.n	800e76c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d105      	bne.n	800e6d4 <tcp_input+0xc0>
 800e6c8:	4b5d      	ldr	r3, [pc, #372]	; (800e840 <tcp_input+0x22c>)
 800e6ca:	22b2      	movs	r2, #178	; 0xb2
 800e6cc:	495d      	ldr	r1, [pc, #372]	; (800e844 <tcp_input+0x230>)
 800e6ce:	485e      	ldr	r0, [pc, #376]	; (800e848 <tcp_input+0x234>)
 800e6d0:	f006 ffbe 	bl	8015650 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e6d4:	f06f 0113 	mvn.w	r1, #19
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f7fe fb97 	bl	800ce0c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	895a      	ldrh	r2, [r3, #10]
 800e6e2:	4b56      	ldr	r3, [pc, #344]	; (800e83c <tcp_input+0x228>)
 800e6e4:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e6e6:	4b53      	ldr	r3, [pc, #332]	; (800e834 <tcp_input+0x220>)
 800e6e8:	881a      	ldrh	r2, [r3, #0]
 800e6ea:	4b54      	ldr	r3, [pc, #336]	; (800e83c <tcp_input+0x228>)
 800e6ec:	881b      	ldrh	r3, [r3, #0]
 800e6ee:	1ad3      	subs	r3, r2, r3
 800e6f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e6f2:	4b52      	ldr	r3, [pc, #328]	; (800e83c <tcp_input+0x228>)
 800e6f4:	881b      	ldrh	r3, [r3, #0]
 800e6f6:	425b      	negs	r3, r3
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	b21b      	sxth	r3, r3
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7fe fb84 	bl	800ce0c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	895b      	ldrh	r3, [r3, #10]
 800e70a:	8a3a      	ldrh	r2, [r7, #16]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	f200 8319 	bhi.w	800ed44 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	4a47      	ldr	r2, [pc, #284]	; (800e838 <tcp_input+0x224>)
 800e71a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	8a3b      	ldrh	r3, [r7, #16]
 800e722:	425b      	negs	r3, r3
 800e724:	b29b      	uxth	r3, r3
 800e726:	b21b      	sxth	r3, r3
 800e728:	4619      	mov	r1, r3
 800e72a:	4610      	mov	r0, r2
 800e72c:	f7fe fb6e 	bl	800ce0c <pbuf_header>
    p->tot_len -= opt2len;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	891a      	ldrh	r2, [r3, #8]
 800e734:	8a3b      	ldrh	r3, [r7, #16]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	b29a      	uxth	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	895b      	ldrh	r3, [r3, #10]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d005      	beq.n	800e752 <tcp_input+0x13e>
 800e746:	4b3e      	ldr	r3, [pc, #248]	; (800e840 <tcp_input+0x22c>)
 800e748:	22cf      	movs	r2, #207	; 0xcf
 800e74a:	4940      	ldr	r1, [pc, #256]	; (800e84c <tcp_input+0x238>)
 800e74c:	483e      	ldr	r0, [pc, #248]	; (800e848 <tcp_input+0x234>)
 800e74e:	f006 ff7f 	bl	8015650 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	891a      	ldrh	r2, [r3, #8]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	891b      	ldrh	r3, [r3, #8]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d005      	beq.n	800e76c <tcp_input+0x158>
 800e760:	4b37      	ldr	r3, [pc, #220]	; (800e840 <tcp_input+0x22c>)
 800e762:	22d0      	movs	r2, #208	; 0xd0
 800e764:	493a      	ldr	r1, [pc, #232]	; (800e850 <tcp_input+0x23c>)
 800e766:	4838      	ldr	r0, [pc, #224]	; (800e848 <tcp_input+0x234>)
 800e768:	f006 ff72 	bl	8015650 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e76c:	4b2f      	ldr	r3, [pc, #188]	; (800e82c <tcp_input+0x218>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	881b      	ldrh	r3, [r3, #0]
 800e772:	b29a      	uxth	r2, r3
 800e774:	4b2d      	ldr	r3, [pc, #180]	; (800e82c <tcp_input+0x218>)
 800e776:	681c      	ldr	r4, [r3, #0]
 800e778:	4610      	mov	r0, r2
 800e77a:	f7fd fa35 	bl	800bbe8 <lwip_htons>
 800e77e:	4603      	mov	r3, r0
 800e780:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e782:	4b2a      	ldr	r3, [pc, #168]	; (800e82c <tcp_input+0x218>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	885b      	ldrh	r3, [r3, #2]
 800e788:	b29a      	uxth	r2, r3
 800e78a:	4b28      	ldr	r3, [pc, #160]	; (800e82c <tcp_input+0x218>)
 800e78c:	681c      	ldr	r4, [r3, #0]
 800e78e:	4610      	mov	r0, r2
 800e790:	f7fd fa2a 	bl	800bbe8 <lwip_htons>
 800e794:	4603      	mov	r3, r0
 800e796:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e798:	4b24      	ldr	r3, [pc, #144]	; (800e82c <tcp_input+0x218>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	685a      	ldr	r2, [r3, #4]
 800e79e:	4b23      	ldr	r3, [pc, #140]	; (800e82c <tcp_input+0x218>)
 800e7a0:	681c      	ldr	r4, [r3, #0]
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f7fd fa2e 	bl	800bc04 <lwip_htonl>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	6063      	str	r3, [r4, #4]
 800e7ac:	6863      	ldr	r3, [r4, #4]
 800e7ae:	4a29      	ldr	r2, [pc, #164]	; (800e854 <tcp_input+0x240>)
 800e7b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e7b2:	4b1e      	ldr	r3, [pc, #120]	; (800e82c <tcp_input+0x218>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	4b1c      	ldr	r3, [pc, #112]	; (800e82c <tcp_input+0x218>)
 800e7ba:	681c      	ldr	r4, [r3, #0]
 800e7bc:	4610      	mov	r0, r2
 800e7be:	f7fd fa21 	bl	800bc04 <lwip_htonl>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	60a3      	str	r3, [r4, #8]
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	4a23      	ldr	r2, [pc, #140]	; (800e858 <tcp_input+0x244>)
 800e7ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e7cc:	4b17      	ldr	r3, [pc, #92]	; (800e82c <tcp_input+0x218>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	89db      	ldrh	r3, [r3, #14]
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	4b15      	ldr	r3, [pc, #84]	; (800e82c <tcp_input+0x218>)
 800e7d6:	681c      	ldr	r4, [r3, #0]
 800e7d8:	4610      	mov	r0, r2
 800e7da:	f7fd fa05 	bl	800bbe8 <lwip_htons>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e7e2:	4b12      	ldr	r3, [pc, #72]	; (800e82c <tcp_input+0x218>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	899b      	ldrh	r3, [r3, #12]
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fd f9fc 	bl	800bbe8 <lwip_htons>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	4b18      	ldr	r3, [pc, #96]	; (800e85c <tcp_input+0x248>)
 800e7fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	891a      	ldrh	r2, [r3, #8]
 800e802:	4b16      	ldr	r3, [pc, #88]	; (800e85c <tcp_input+0x248>)
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	f003 0303 	and.w	r3, r3, #3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	bf14      	ite	ne
 800e80e:	2301      	movne	r3, #1
 800e810:	2300      	moveq	r3, #0
 800e812:	b2db      	uxtb	r3, r3
 800e814:	b29b      	uxth	r3, r3
 800e816:	4413      	add	r3, r2
 800e818:	b29a      	uxth	r2, r3
 800e81a:	4b11      	ldr	r3, [pc, #68]	; (800e860 <tcp_input+0x24c>)
 800e81c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e81e:	2300      	movs	r3, #0
 800e820:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e822:	4b10      	ldr	r3, [pc, #64]	; (800e864 <tcp_input+0x250>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	61fb      	str	r3, [r7, #28]
 800e828:	e082      	b.n	800e930 <tcp_input+0x31c>
 800e82a:	bf00      	nop
 800e82c:	20005f90 	.word	0x20005f90
 800e830:	2000a2c4 	.word	0x2000a2c4
 800e834:	20005f94 	.word	0x20005f94
 800e838:	20005f98 	.word	0x20005f98
 800e83c:	20005f96 	.word	0x20005f96
 800e840:	080178b4 	.word	0x080178b4
 800e844:	080178e8 	.word	0x080178e8
 800e848:	080178f8 	.word	0x080178f8
 800e84c:	08017920 	.word	0x08017920
 800e850:	0801792c 	.word	0x0801792c
 800e854:	20005fa0 	.word	0x20005fa0
 800e858:	20005fa4 	.word	0x20005fa4
 800e85c:	20005fac 	.word	0x20005fac
 800e860:	20005faa 	.word	0x20005faa
 800e864:	2001769c 	.word	0x2001769c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	7d1b      	ldrb	r3, [r3, #20]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d105      	bne.n	800e87c <tcp_input+0x268>
 800e870:	4b8f      	ldr	r3, [pc, #572]	; (800eab0 <tcp_input+0x49c>)
 800e872:	22e2      	movs	r2, #226	; 0xe2
 800e874:	498f      	ldr	r1, [pc, #572]	; (800eab4 <tcp_input+0x4a0>)
 800e876:	4890      	ldr	r0, [pc, #576]	; (800eab8 <tcp_input+0x4a4>)
 800e878:	f006 feea 	bl	8015650 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	7d1b      	ldrb	r3, [r3, #20]
 800e880:	2b0a      	cmp	r3, #10
 800e882:	d105      	bne.n	800e890 <tcp_input+0x27c>
 800e884:	4b8a      	ldr	r3, [pc, #552]	; (800eab0 <tcp_input+0x49c>)
 800e886:	22e3      	movs	r2, #227	; 0xe3
 800e888:	498c      	ldr	r1, [pc, #560]	; (800eabc <tcp_input+0x4a8>)
 800e88a:	488b      	ldr	r0, [pc, #556]	; (800eab8 <tcp_input+0x4a4>)
 800e88c:	f006 fee0 	bl	8015650 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	7d1b      	ldrb	r3, [r3, #20]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d105      	bne.n	800e8a4 <tcp_input+0x290>
 800e898:	4b85      	ldr	r3, [pc, #532]	; (800eab0 <tcp_input+0x49c>)
 800e89a:	22e4      	movs	r2, #228	; 0xe4
 800e89c:	4988      	ldr	r1, [pc, #544]	; (800eac0 <tcp_input+0x4ac>)
 800e89e:	4886      	ldr	r0, [pc, #536]	; (800eab8 <tcp_input+0x4a4>)
 800e8a0:	f006 fed6 	bl	8015650 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	8b1a      	ldrh	r2, [r3, #24]
 800e8a8:	4b86      	ldr	r3, [pc, #536]	; (800eac4 <tcp_input+0x4b0>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	881b      	ldrh	r3, [r3, #0]
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d138      	bne.n	800e926 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	8ada      	ldrh	r2, [r3, #22]
 800e8b8:	4b82      	ldr	r3, [pc, #520]	; (800eac4 <tcp_input+0x4b0>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	885b      	ldrh	r3, [r3, #2]
 800e8be:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d130      	bne.n	800e926 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	685a      	ldr	r2, [r3, #4]
 800e8c8:	4b7f      	ldr	r3, [pc, #508]	; (800eac8 <tcp_input+0x4b4>)
 800e8ca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d12a      	bne.n	800e926 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	4b7c      	ldr	r3, [pc, #496]	; (800eac8 <tcp_input+0x4b4>)
 800e8d6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d124      	bne.n	800e926 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	69fa      	ldr	r2, [r7, #28]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d105      	bne.n	800e8f2 <tcp_input+0x2de>
 800e8e6:	4b72      	ldr	r3, [pc, #456]	; (800eab0 <tcp_input+0x49c>)
 800e8e8:	22ec      	movs	r2, #236	; 0xec
 800e8ea:	4978      	ldr	r1, [pc, #480]	; (800eacc <tcp_input+0x4b8>)
 800e8ec:	4872      	ldr	r0, [pc, #456]	; (800eab8 <tcp_input+0x4a4>)
 800e8ee:	f006 feaf 	bl	8015650 <iprintf>
      if (prev != NULL) {
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00a      	beq.n	800e90e <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	68da      	ldr	r2, [r3, #12]
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e900:	4b73      	ldr	r3, [pc, #460]	; (800ead0 <tcp_input+0x4bc>)
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e908:	4a71      	ldr	r2, [pc, #452]	; (800ead0 <tcp_input+0x4bc>)
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	69fa      	ldr	r2, [r7, #28]
 800e914:	429a      	cmp	r2, r3
 800e916:	d10f      	bne.n	800e938 <tcp_input+0x324>
 800e918:	4b65      	ldr	r3, [pc, #404]	; (800eab0 <tcp_input+0x49c>)
 800e91a:	22f4      	movs	r2, #244	; 0xf4
 800e91c:	496d      	ldr	r1, [pc, #436]	; (800ead4 <tcp_input+0x4c0>)
 800e91e:	4866      	ldr	r0, [pc, #408]	; (800eab8 <tcp_input+0x4a4>)
 800e920:	f006 fe96 	bl	8015650 <iprintf>
      break;
 800e924:	e008      	b.n	800e938 <tcp_input+0x324>
    }
    prev = pcb;
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	61fb      	str	r3, [r7, #28]
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d198      	bne.n	800e868 <tcp_input+0x254>
 800e936:	e000      	b.n	800e93a <tcp_input+0x326>
      break;
 800e938:	bf00      	nop
  }

  if (pcb == NULL) {
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d173      	bne.n	800ea28 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e940:	4b65      	ldr	r3, [pc, #404]	; (800ead8 <tcp_input+0x4c4>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	61fb      	str	r3, [r7, #28]
 800e946:	e02f      	b.n	800e9a8 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	7d1b      	ldrb	r3, [r3, #20]
 800e94c:	2b0a      	cmp	r3, #10
 800e94e:	d005      	beq.n	800e95c <tcp_input+0x348>
 800e950:	4b57      	ldr	r3, [pc, #348]	; (800eab0 <tcp_input+0x49c>)
 800e952:	22fe      	movs	r2, #254	; 0xfe
 800e954:	4961      	ldr	r1, [pc, #388]	; (800eadc <tcp_input+0x4c8>)
 800e956:	4858      	ldr	r0, [pc, #352]	; (800eab8 <tcp_input+0x4a4>)
 800e958:	f006 fe7a 	bl	8015650 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	8b1a      	ldrh	r2, [r3, #24]
 800e960:	4b58      	ldr	r3, [pc, #352]	; (800eac4 <tcp_input+0x4b0>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	b29b      	uxth	r3, r3
 800e968:	429a      	cmp	r2, r3
 800e96a:	d11a      	bne.n	800e9a2 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	8ada      	ldrh	r2, [r3, #22]
 800e970:	4b54      	ldr	r3, [pc, #336]	; (800eac4 <tcp_input+0x4b0>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	885b      	ldrh	r3, [r3, #2]
 800e976:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e978:	429a      	cmp	r2, r3
 800e97a:	d112      	bne.n	800e9a2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	685a      	ldr	r2, [r3, #4]
 800e980:	4b51      	ldr	r3, [pc, #324]	; (800eac8 <tcp_input+0x4b4>)
 800e982:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e984:	429a      	cmp	r2, r3
 800e986:	d10c      	bne.n	800e9a2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	4b4e      	ldr	r3, [pc, #312]	; (800eac8 <tcp_input+0x4b4>)
 800e98e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e990:	429a      	cmp	r2, r3
 800e992:	d106      	bne.n	800e9a2 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e994:	69f8      	ldr	r0, [r7, #28]
 800e996:	f000 fb11 	bl	800efbc <tcp_timewait_input>
        pbuf_free(p);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7fe fa5a 	bl	800ce54 <pbuf_free>
        return;
 800e9a0:	e1d6      	b.n	800ed50 <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	61fb      	str	r3, [r7, #28]
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1cc      	bne.n	800e948 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e9b2:	4b4b      	ldr	r3, [pc, #300]	; (800eae0 <tcp_input+0x4cc>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	617b      	str	r3, [r7, #20]
 800e9b8:	e019      	b.n	800e9ee <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	8ada      	ldrh	r2, [r3, #22]
 800e9be:	4b41      	ldr	r3, [pc, #260]	; (800eac4 <tcp_input+0x4b0>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	885b      	ldrh	r3, [r3, #2]
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d10c      	bne.n	800e9e4 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	4b3e      	ldr	r3, [pc, #248]	; (800eac8 <tcp_input+0x4b4>)
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d00f      	beq.n	800e9f6 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00d      	beq.n	800e9f8 <tcp_input+0x3e4>
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d009      	beq.n	800e9f8 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	617b      	str	r3, [r7, #20]
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1e2      	bne.n	800e9ba <tcp_input+0x3a6>
 800e9f4:	e000      	b.n	800e9f8 <tcp_input+0x3e4>
            break;
 800e9f6:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d014      	beq.n	800ea28 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00a      	beq.n	800ea1a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	68da      	ldr	r2, [r3, #12]
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ea0c:	4b34      	ldr	r3, [pc, #208]	; (800eae0 <tcp_input+0x4cc>)
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ea14:	4a32      	ldr	r2, [pc, #200]	; (800eae0 <tcp_input+0x4cc>)
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800ea1a:	6978      	ldr	r0, [r7, #20]
 800ea1c:	f000 f9ec 	bl	800edf8 <tcp_listen_input>
      pbuf_free(p);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7fe fa17 	bl	800ce54 <pbuf_free>
      return;
 800ea26:	e193      	b.n	800ed50 <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 8160 	beq.w	800ecf0 <tcp_input+0x6dc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ea30:	4b2c      	ldr	r3, [pc, #176]	; (800eae4 <tcp_input+0x4d0>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	891a      	ldrh	r2, [r3, #8]
 800ea3a:	4b2a      	ldr	r3, [pc, #168]	; (800eae4 <tcp_input+0x4d0>)
 800ea3c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ea3e:	4a29      	ldr	r2, [pc, #164]	; (800eae4 <tcp_input+0x4d0>)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ea44:	4b1f      	ldr	r3, [pc, #124]	; (800eac4 <tcp_input+0x4b0>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4a26      	ldr	r2, [pc, #152]	; (800eae4 <tcp_input+0x4d0>)
 800ea4a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ea4c:	4b26      	ldr	r3, [pc, #152]	; (800eae8 <tcp_input+0x4d4>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ea52:	4b26      	ldr	r3, [pc, #152]	; (800eaec <tcp_input+0x4d8>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ea58:	4b25      	ldr	r3, [pc, #148]	; (800eaf0 <tcp_input+0x4dc>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ea5e:	4b25      	ldr	r3, [pc, #148]	; (800eaf4 <tcp_input+0x4e0>)
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	f003 0308 	and.w	r3, r3, #8
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d006      	beq.n	800ea78 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	7b5b      	ldrb	r3, [r3, #13]
 800ea6e:	f043 0301 	orr.w	r3, r3, #1
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d03d      	beq.n	800eafc <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea80:	69f8      	ldr	r0, [r7, #28]
 800ea82:	f7ff fa91 	bl	800dfa8 <tcp_process_refused_data>
 800ea86:	4603      	mov	r3, r0
 800ea88:	f113 0f0d 	cmn.w	r3, #13
 800ea8c:	d007      	beq.n	800ea9e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d032      	beq.n	800eafc <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea96:	4b18      	ldr	r3, [pc, #96]	; (800eaf8 <tcp_input+0x4e4>)
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d02e      	beq.n	800eafc <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f040 8104 	bne.w	800ecb0 <tcp_input+0x69c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eaa8:	69f8      	ldr	r0, [r7, #28]
 800eaaa:	f001 fe83 	bl	80107b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eaae:	e0ff      	b.n	800ecb0 <tcp_input+0x69c>
 800eab0:	080178b4 	.word	0x080178b4
 800eab4:	0801794c 	.word	0x0801794c
 800eab8:	080178f8 	.word	0x080178f8
 800eabc:	08017974 	.word	0x08017974
 800eac0:	080179a0 	.word	0x080179a0
 800eac4:	20005f90 	.word	0x20005f90
 800eac8:	2000a2c4 	.word	0x2000a2c4
 800eacc:	080179c8 	.word	0x080179c8
 800ead0:	2001769c 	.word	0x2001769c
 800ead4:	080179f4 	.word	0x080179f4
 800ead8:	200176ac 	.word	0x200176ac
 800eadc:	08017a20 	.word	0x08017a20
 800eae0:	200176a4 	.word	0x200176a4
 800eae4:	20005f80 	.word	0x20005f80
 800eae8:	20005fb0 	.word	0x20005fb0
 800eaec:	20005fad 	.word	0x20005fad
 800eaf0:	20005fa8 	.word	0x20005fa8
 800eaf4:	20005fac 	.word	0x20005fac
 800eaf8:	20005faa 	.word	0x20005faa
      }
    }
    tcp_input_pcb = pcb;
 800eafc:	4a96      	ldr	r2, [pc, #600]	; (800ed58 <tcp_input+0x744>)
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eb02:	69f8      	ldr	r0, [r7, #28]
 800eb04:	f000 fac2 	bl	800f08c <tcp_process>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eb0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb10:	f113 0f0d 	cmn.w	r3, #13
 800eb14:	f000 80ce 	beq.w	800ecb4 <tcp_input+0x6a0>
      if (recv_flags & TF_RESET) {
 800eb18:	4b90      	ldr	r3, [pc, #576]	; (800ed5c <tcp_input+0x748>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	f003 0308 	and.w	r3, r3, #8
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d016      	beq.n	800eb52 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d008      	beq.n	800eb40 <tcp_input+0x52c>
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb34:	69fa      	ldr	r2, [r7, #28]
 800eb36:	6912      	ldr	r2, [r2, #16]
 800eb38:	f06f 010d 	mvn.w	r1, #13
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb40:	69f9      	ldr	r1, [r7, #28]
 800eb42:	4887      	ldr	r0, [pc, #540]	; (800ed60 <tcp_input+0x74c>)
 800eb44:	f7ff fc5a 	bl	800e3fc <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800eb48:	69f9      	ldr	r1, [r7, #28]
 800eb4a:	2001      	movs	r0, #1
 800eb4c:	f7fd fc8c 	bl	800c468 <memp_free>
 800eb50:	e0bb      	b.n	800ecca <tcp_input+0x6b6>
      } else {
        err = ERR_OK;
 800eb52:	2300      	movs	r3, #0
 800eb54:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eb56:	4b83      	ldr	r3, [pc, #524]	; (800ed64 <tcp_input+0x750>)
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d01b      	beq.n	800eb96 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eb5e:	4b81      	ldr	r3, [pc, #516]	; (800ed64 <tcp_input+0x750>)
 800eb60:	881b      	ldrh	r3, [r3, #0]
 800eb62:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d009      	beq.n	800eb80 <tcp_input+0x56c>
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb70:	69fa      	ldr	r2, [r7, #28]
 800eb72:	6910      	ldr	r0, [r2, #16]
 800eb74:	89fa      	ldrh	r2, [r7, #14]
 800eb76:	69f9      	ldr	r1, [r7, #28]
 800eb78:	4798      	blx	r3
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	74fb      	strb	r3, [r7, #19]
 800eb7e:	e001      	b.n	800eb84 <tcp_input+0x570>
 800eb80:	2300      	movs	r3, #0
 800eb82:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eb84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb88:	f113 0f0d 	cmn.w	r3, #13
 800eb8c:	f000 8094 	beq.w	800ecb8 <tcp_input+0x6a4>
              goto aborted;
            }
          }
          recv_acked = 0;
 800eb90:	4b74      	ldr	r3, [pc, #464]	; (800ed64 <tcp_input+0x750>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800eb96:	69f8      	ldr	r0, [r7, #28]
 800eb98:	f000 f8fc 	bl	800ed94 <tcp_input_delayed_close>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f040 808c 	bne.w	800ecbc <tcp_input+0x6a8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800eba4:	4b70      	ldr	r3, [pc, #448]	; (800ed68 <tcp_input+0x754>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d03f      	beq.n	800ec2c <tcp_input+0x618>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d006      	beq.n	800ebc2 <tcp_input+0x5ae>
 800ebb4:	4b6d      	ldr	r3, [pc, #436]	; (800ed6c <tcp_input+0x758>)
 800ebb6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800ebba:	496d      	ldr	r1, [pc, #436]	; (800ed70 <tcp_input+0x75c>)
 800ebbc:	486d      	ldr	r0, [pc, #436]	; (800ed74 <tcp_input+0x760>)
 800ebbe:	f006 fd47 	bl	8015650 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	7e9b      	ldrb	r3, [r3, #26]
 800ebc6:	f003 0310 	and.w	r3, r3, #16
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d008      	beq.n	800ebe0 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ebce:	4b66      	ldr	r3, [pc, #408]	; (800ed68 <tcp_input+0x754>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe f93e 	bl	800ce54 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ebd8:	69f8      	ldr	r0, [r7, #28]
 800ebda:	f7fe fe2f 	bl	800d83c <tcp_abort>
            goto aborted;
 800ebde:	e074      	b.n	800ecca <tcp_input+0x6b6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00b      	beq.n	800ec00 <tcp_input+0x5ec>
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	6918      	ldr	r0, [r3, #16]
 800ebf0:	4b5d      	ldr	r3, [pc, #372]	; (800ed68 <tcp_input+0x754>)
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	69f9      	ldr	r1, [r7, #28]
 800ebf8:	47a0      	blx	r4
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	74fb      	strb	r3, [r7, #19]
 800ebfe:	e008      	b.n	800ec12 <tcp_input+0x5fe>
 800ec00:	4b59      	ldr	r3, [pc, #356]	; (800ed68 <tcp_input+0x754>)
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	2300      	movs	r3, #0
 800ec06:	69f9      	ldr	r1, [r7, #28]
 800ec08:	2000      	movs	r0, #0
 800ec0a:	f7ff fa5e 	bl	800e0ca <tcp_recv_null>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ec12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec16:	f113 0f0d 	cmn.w	r3, #13
 800ec1a:	d051      	beq.n	800ecc0 <tcp_input+0x6ac>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ec1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d003      	beq.n	800ec2c <tcp_input+0x618>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ec24:	4b50      	ldr	r3, [pc, #320]	; (800ed68 <tcp_input+0x754>)
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ec2c:	4b4b      	ldr	r3, [pc, #300]	; (800ed5c <tcp_input+0x748>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	f003 0320 	and.w	r3, r3, #32
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d02e      	beq.n	800ec96 <tcp_input+0x682>
          if (pcb->refused_data != NULL) {
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d009      	beq.n	800ec54 <tcp_input+0x640>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec44:	7b5a      	ldrb	r2, [r3, #13]
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec4a:	f042 0220 	orr.w	r2, r2, #32
 800ec4e:	b2d2      	uxtb	r2, r2
 800ec50:	735a      	strb	r2, [r3, #13]
 800ec52:	e020      	b.n	800ec96 <tcp_input+0x682>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec5c:	d005      	beq.n	800ec6a <tcp_input+0x656>
              pcb->rcv_wnd++;
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec62:	3301      	adds	r3, #1
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00a      	beq.n	800ec88 <tcp_input+0x674>
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	6918      	ldr	r0, [r3, #16]
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	69f9      	ldr	r1, [r7, #28]
 800ec80:	47a0      	blx	r4
 800ec82:	4603      	mov	r3, r0
 800ec84:	74fb      	strb	r3, [r7, #19]
 800ec86:	e001      	b.n	800ec8c <tcp_input+0x678>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ec8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec90:	f113 0f0d 	cmn.w	r3, #13
 800ec94:	d016      	beq.n	800ecc4 <tcp_input+0x6b0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ec96:	4b30      	ldr	r3, [pc, #192]	; (800ed58 <tcp_input+0x744>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ec9c:	69f8      	ldr	r0, [r7, #28]
 800ec9e:	f000 f879 	bl	800ed94 <tcp_input_delayed_close>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d10f      	bne.n	800ecc8 <tcp_input+0x6b4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eca8:	69f8      	ldr	r0, [r7, #28]
 800ecaa:	f001 fddf 	bl	801086c <tcp_output>
 800ecae:	e00c      	b.n	800ecca <tcp_input+0x6b6>
        goto aborted;
 800ecb0:	bf00      	nop
 800ecb2:	e00a      	b.n	800ecca <tcp_input+0x6b6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ecb4:	bf00      	nop
 800ecb6:	e008      	b.n	800ecca <tcp_input+0x6b6>
              goto aborted;
 800ecb8:	bf00      	nop
 800ecba:	e006      	b.n	800ecca <tcp_input+0x6b6>
          goto aborted;
 800ecbc:	bf00      	nop
 800ecbe:	e004      	b.n	800ecca <tcp_input+0x6b6>
            goto aborted;
 800ecc0:	bf00      	nop
 800ecc2:	e002      	b.n	800ecca <tcp_input+0x6b6>
              goto aborted;
 800ecc4:	bf00      	nop
 800ecc6:	e000      	b.n	800ecca <tcp_input+0x6b6>
          goto aborted;
 800ecc8:	bf00      	nop
    tcp_input_pcb = NULL;
 800ecca:	4b23      	ldr	r3, [pc, #140]	; (800ed58 <tcp_input+0x744>)
 800eccc:	2200      	movs	r2, #0
 800ecce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ecd0:	4b25      	ldr	r3, [pc, #148]	; (800ed68 <tcp_input+0x754>)
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ecd6:	4b28      	ldr	r3, [pc, #160]	; (800ed78 <tcp_input+0x764>)
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d037      	beq.n	800ed4e <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 800ecde:	4b26      	ldr	r3, [pc, #152]	; (800ed78 <tcp_input+0x764>)
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fe f8b6 	bl	800ce54 <pbuf_free>
      inseg.p = NULL;
 800ece8:	4b23      	ldr	r3, [pc, #140]	; (800ed78 <tcp_input+0x764>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ecee:	e02e      	b.n	800ed4e <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ecf0:	4b22      	ldr	r3, [pc, #136]	; (800ed7c <tcp_input+0x768>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	899b      	ldrh	r3, [r3, #12]
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7fc ff75 	bl	800bbe8 <lwip_htons>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	f003 0304 	and.w	r3, r3, #4
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d115      	bne.n	800ed34 <tcp_input+0x720>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed08:	4b1d      	ldr	r3, [pc, #116]	; (800ed80 <tcp_input+0x76c>)
 800ed0a:	6818      	ldr	r0, [r3, #0]
 800ed0c:	4b1d      	ldr	r3, [pc, #116]	; (800ed84 <tcp_input+0x770>)
 800ed0e:	881b      	ldrh	r3, [r3, #0]
 800ed10:	461a      	mov	r2, r3
 800ed12:	4b1d      	ldr	r3, [pc, #116]	; (800ed88 <tcp_input+0x774>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed18:	4b18      	ldr	r3, [pc, #96]	; (800ed7c <tcp_input+0x768>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed1c:	885b      	ldrh	r3, [r3, #2]
 800ed1e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed20:	4a16      	ldr	r2, [pc, #88]	; (800ed7c <tcp_input+0x768>)
 800ed22:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed24:	8812      	ldrh	r2, [r2, #0]
 800ed26:	b292      	uxth	r2, r2
 800ed28:	9201      	str	r2, [sp, #4]
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	4b17      	ldr	r3, [pc, #92]	; (800ed8c <tcp_input+0x778>)
 800ed2e:	4a18      	ldr	r2, [pc, #96]	; (800ed90 <tcp_input+0x77c>)
 800ed30:	f002 f828 	bl	8010d84 <tcp_rst>
    pbuf_free(p);
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f7fe f88d 	bl	800ce54 <pbuf_free>
  return;
 800ed3a:	e008      	b.n	800ed4e <tcp_input+0x73a>
    goto dropped;
 800ed3c:	bf00      	nop
 800ed3e:	e002      	b.n	800ed46 <tcp_input+0x732>
dropped:
 800ed40:	bf00      	nop
 800ed42:	e000      	b.n	800ed46 <tcp_input+0x732>
      goto dropped;
 800ed44:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7fe f884 	bl	800ce54 <pbuf_free>
 800ed4c:	e000      	b.n	800ed50 <tcp_input+0x73c>
  return;
 800ed4e:	bf00      	nop
}
 800ed50:	3724      	adds	r7, #36	; 0x24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd90      	pop	{r4, r7, pc}
 800ed56:	bf00      	nop
 800ed58:	200176b0 	.word	0x200176b0
 800ed5c:	20005fad 	.word	0x20005fad
 800ed60:	2001769c 	.word	0x2001769c
 800ed64:	20005fa8 	.word	0x20005fa8
 800ed68:	20005fb0 	.word	0x20005fb0
 800ed6c:	080178b4 	.word	0x080178b4
 800ed70:	08017a50 	.word	0x08017a50
 800ed74:	080178f8 	.word	0x080178f8
 800ed78:	20005f80 	.word	0x20005f80
 800ed7c:	20005f90 	.word	0x20005f90
 800ed80:	20005fa4 	.word	0x20005fa4
 800ed84:	20005faa 	.word	0x20005faa
 800ed88:	20005fa0 	.word	0x20005fa0
 800ed8c:	2000a2d4 	.word	0x2000a2d4
 800ed90:	2000a2d8 	.word	0x2000a2d8

0800ed94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800ed9c:	4b14      	ldr	r3, [pc, #80]	; (800edf0 <tcp_input_delayed_close+0x5c>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	f003 0310 	and.w	r3, r3, #16
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d01d      	beq.n	800ede4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7e9b      	ldrb	r3, [r3, #26]
 800edac:	f003 0310 	and.w	r3, r3, #16
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d10d      	bne.n	800edd0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d008      	beq.n	800edd0 <tcp_input_delayed_close+0x3c>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	6912      	ldr	r2, [r2, #16]
 800edc8:	f06f 010e 	mvn.w	r1, #14
 800edcc:	4610      	mov	r0, r2
 800edce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800edd0:	6879      	ldr	r1, [r7, #4]
 800edd2:	4808      	ldr	r0, [pc, #32]	; (800edf4 <tcp_input_delayed_close+0x60>)
 800edd4:	f7ff fb12 	bl	800e3fc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	2001      	movs	r0, #1
 800eddc:	f7fd fb44 	bl	800c468 <memp_free>
    return 1;
 800ede0:	2301      	movs	r3, #1
 800ede2:	e000      	b.n	800ede6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	20005fad 	.word	0x20005fad
 800edf4:	2001769c 	.word	0x2001769c

0800edf8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b088      	sub	sp, #32
 800edfc:	af02      	add	r7, sp, #8
 800edfe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ee00:	4b64      	ldr	r3, [pc, #400]	; (800ef94 <tcp_listen_input+0x19c>)
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	f003 0304 	and.w	r3, r3, #4
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	f040 80bc 	bne.w	800ef86 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ee0e:	4b61      	ldr	r3, [pc, #388]	; (800ef94 <tcp_listen_input+0x19c>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	f003 0310 	and.w	r3, r3, #16
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d016      	beq.n	800ee48 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee1a:	4b5f      	ldr	r3, [pc, #380]	; (800ef98 <tcp_listen_input+0x1a0>)
 800ee1c:	6818      	ldr	r0, [r3, #0]
 800ee1e:	4b5f      	ldr	r3, [pc, #380]	; (800ef9c <tcp_listen_input+0x1a4>)
 800ee20:	881b      	ldrh	r3, [r3, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	4b5e      	ldr	r3, [pc, #376]	; (800efa0 <tcp_listen_input+0x1a8>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee2a:	4b5e      	ldr	r3, [pc, #376]	; (800efa4 <tcp_listen_input+0x1ac>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee2e:	885b      	ldrh	r3, [r3, #2]
 800ee30:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee32:	4a5c      	ldr	r2, [pc, #368]	; (800efa4 <tcp_listen_input+0x1ac>)
 800ee34:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee36:	8812      	ldrh	r2, [r2, #0]
 800ee38:	b292      	uxth	r2, r2
 800ee3a:	9201      	str	r2, [sp, #4]
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	4b5a      	ldr	r3, [pc, #360]	; (800efa8 <tcp_listen_input+0x1b0>)
 800ee40:	4a5a      	ldr	r2, [pc, #360]	; (800efac <tcp_listen_input+0x1b4>)
 800ee42:	f001 ff9f 	bl	8010d84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ee46:	e0a0      	b.n	800ef8a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800ee48:	4b52      	ldr	r3, [pc, #328]	; (800ef94 <tcp_listen_input+0x19c>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	f003 0302 	and.w	r3, r3, #2
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f000 809a 	beq.w	800ef8a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	7d5b      	ldrb	r3, [r3, #21]
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff fa14 	bl	800e288 <tcp_alloc>
 800ee60:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d111      	bne.n	800ee8c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	699b      	ldr	r3, [r3, #24]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00a      	beq.n	800ee86 <tcp_listen_input+0x8e>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	699b      	ldr	r3, [r3, #24]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	6910      	ldr	r0, [r2, #16]
 800ee78:	f04f 32ff 	mov.w	r2, #4294967295
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	4798      	blx	r3
 800ee80:	4603      	mov	r3, r0
 800ee82:	73bb      	strb	r3, [r7, #14]
      return;
 800ee84:	e082      	b.n	800ef8c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee86:	23f0      	movs	r3, #240	; 0xf0
 800ee88:	73bb      	strb	r3, [r7, #14]
      return;
 800ee8a:	e07f      	b.n	800ef8c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ee8c:	4b48      	ldr	r3, [pc, #288]	; (800efb0 <tcp_listen_input+0x1b8>)
 800ee8e:	695a      	ldr	r2, [r3, #20]
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ee94:	4b46      	ldr	r3, [pc, #280]	; (800efb0 <tcp_listen_input+0x1b8>)
 800ee96:	691a      	ldr	r2, [r3, #16]
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	8ada      	ldrh	r2, [r3, #22]
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800eea4:	4b3f      	ldr	r3, [pc, #252]	; (800efa4 <tcp_listen_input+0x1ac>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	2203      	movs	r2, #3
 800eeb4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800eeb6:	4b3a      	ldr	r3, [pc, #232]	; (800efa0 <tcp_listen_input+0x1a8>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800eec8:	6978      	ldr	r0, [r7, #20]
 800eeca:	f7ff fb05 	bl	800e4d8 <tcp_next_iss>
 800eece:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	693a      	ldr	r2, [r7, #16]
 800eed4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	693a      	ldr	r2, [r7, #16]
 800eee0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	693a      	ldr	r2, [r7, #16]
 800eee6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800eee8:	4b2d      	ldr	r3, [pc, #180]	; (800efa0 <tcp_listen_input+0x1a8>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	1e5a      	subs	r2, r3, #1
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	691a      	ldr	r2, [r3, #16]
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	675a      	str	r2, [r3, #116]	; 0x74
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	7a1b      	ldrb	r3, [r3, #8]
 800ef04:	f003 030c 	and.w	r3, r3, #12
 800ef08:	b2da      	uxtb	r2, r3
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ef0e:	4b29      	ldr	r3, [pc, #164]	; (800efb4 <tcp_listen_input+0x1bc>)
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	60da      	str	r2, [r3, #12]
 800ef16:	4a27      	ldr	r2, [pc, #156]	; (800efb4 <tcp_listen_input+0x1bc>)
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	6013      	str	r3, [r2, #0]
 800ef1c:	f002 f980 	bl	8011220 <tcp_timer_needed>
 800ef20:	4b25      	ldr	r3, [pc, #148]	; (800efb8 <tcp_listen_input+0x1c0>)
 800ef22:	2201      	movs	r2, #1
 800ef24:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ef26:	6978      	ldr	r0, [r7, #20]
 800ef28:	f001 f990 	bl	801024c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ef2c:	4b1d      	ldr	r3, [pc, #116]	; (800efa4 <tcp_listen_input+0x1ac>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	89db      	ldrh	r3, [r3, #14]
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4610      	mov	r0, r2
 800ef52:	f7ff fad9 	bl	800e508 <tcp_eff_send_mss_impl>
 800ef56:	4603      	mov	r3, r0
 800ef58:	461a      	mov	r2, r3
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ef5e:	2112      	movs	r1, #18
 800ef60:	6978      	ldr	r0, [r7, #20]
 800ef62:	f001 fb2b 	bl	80105bc <tcp_enqueue_flags>
 800ef66:	4603      	mov	r3, r0
 800ef68:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ef6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d004      	beq.n	800ef7c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ef72:	2100      	movs	r1, #0
 800ef74:	6978      	ldr	r0, [r7, #20]
 800ef76:	f7fe fbb9 	bl	800d6ec <tcp_abandon>
      return;
 800ef7a:	e007      	b.n	800ef8c <tcp_listen_input+0x194>
    tcp_output(npcb);
 800ef7c:	6978      	ldr	r0, [r7, #20]
 800ef7e:	f001 fc75 	bl	801086c <tcp_output>
  return;
 800ef82:	bf00      	nop
 800ef84:	e001      	b.n	800ef8a <tcp_listen_input+0x192>
    return;
 800ef86:	bf00      	nop
 800ef88:	e000      	b.n	800ef8c <tcp_listen_input+0x194>
  return;
 800ef8a:	bf00      	nop
}
 800ef8c:	3718      	adds	r7, #24
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20005fac 	.word	0x20005fac
 800ef98:	20005fa4 	.word	0x20005fa4
 800ef9c:	20005faa 	.word	0x20005faa
 800efa0:	20005fa0 	.word	0x20005fa0
 800efa4:	20005f90 	.word	0x20005f90
 800efa8:	2000a2d4 	.word	0x2000a2d4
 800efac:	2000a2d8 	.word	0x2000a2d8
 800efb0:	2000a2c4 	.word	0x2000a2c4
 800efb4:	2001769c 	.word	0x2001769c
 800efb8:	20017698 	.word	0x20017698

0800efbc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af02      	add	r7, sp, #8
 800efc2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800efc4:	4b29      	ldr	r3, [pc, #164]	; (800f06c <tcp_timewait_input+0xb0>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	f003 0304 	and.w	r3, r3, #4
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d147      	bne.n	800f060 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800efd0:	4b26      	ldr	r3, [pc, #152]	; (800f06c <tcp_timewait_input+0xb0>)
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	f003 0302 	and.w	r3, r3, #2
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d027      	beq.n	800f02c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800efdc:	4b24      	ldr	r3, [pc, #144]	; (800f070 <tcp_timewait_input+0xb4>)
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe4:	1ad3      	subs	r3, r2, r3
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	db2a      	blt.n	800f040 <tcp_timewait_input+0x84>
 800efea:	4b21      	ldr	r3, [pc, #132]	; (800f070 <tcp_timewait_input+0xb4>)
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff2:	6879      	ldr	r1, [r7, #4]
 800eff4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eff6:	440b      	add	r3, r1
 800eff8:	1ad3      	subs	r3, r2, r3
 800effa:	2b00      	cmp	r3, #0
 800effc:	dc20      	bgt.n	800f040 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800effe:	4b1d      	ldr	r3, [pc, #116]	; (800f074 <tcp_timewait_input+0xb8>)
 800f000:	6818      	ldr	r0, [r3, #0]
 800f002:	4b1d      	ldr	r3, [pc, #116]	; (800f078 <tcp_timewait_input+0xbc>)
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	461a      	mov	r2, r3
 800f008:	4b19      	ldr	r3, [pc, #100]	; (800f070 <tcp_timewait_input+0xb4>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f00e:	4b1b      	ldr	r3, [pc, #108]	; (800f07c <tcp_timewait_input+0xc0>)
 800f010:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f012:	885b      	ldrh	r3, [r3, #2]
 800f014:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f016:	4a19      	ldr	r2, [pc, #100]	; (800f07c <tcp_timewait_input+0xc0>)
 800f018:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f01a:	8812      	ldrh	r2, [r2, #0]
 800f01c:	b292      	uxth	r2, r2
 800f01e:	9201      	str	r2, [sp, #4]
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	4b17      	ldr	r3, [pc, #92]	; (800f080 <tcp_timewait_input+0xc4>)
 800f024:	4a17      	ldr	r2, [pc, #92]	; (800f084 <tcp_timewait_input+0xc8>)
 800f026:	f001 fead 	bl	8010d84 <tcp_rst>
      return;
 800f02a:	e01c      	b.n	800f066 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800f02c:	4b0f      	ldr	r3, [pc, #60]	; (800f06c <tcp_timewait_input+0xb0>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	f003 0301 	and.w	r3, r3, #1
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f038:	4b13      	ldr	r3, [pc, #76]	; (800f088 <tcp_timewait_input+0xcc>)
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f040:	4b0d      	ldr	r3, [pc, #52]	; (800f078 <tcp_timewait_input+0xbc>)
 800f042:	881b      	ldrh	r3, [r3, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00d      	beq.n	800f064 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7e9b      	ldrb	r3, [r3, #26]
 800f04c:	f043 0302 	orr.w	r3, r3, #2
 800f050:	b2da      	uxtb	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f001 fc08 	bl	801086c <tcp_output>
  }
  return;
 800f05c:	bf00      	nop
 800f05e:	e001      	b.n	800f064 <tcp_timewait_input+0xa8>
    return;
 800f060:	bf00      	nop
 800f062:	e000      	b.n	800f066 <tcp_timewait_input+0xaa>
  return;
 800f064:	bf00      	nop
}
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20005fac 	.word	0x20005fac
 800f070:	20005fa0 	.word	0x20005fa0
 800f074:	20005fa4 	.word	0x20005fa4
 800f078:	20005faa 	.word	0x20005faa
 800f07c:	20005f90 	.word	0x20005f90
 800f080:	2000a2d4 	.word	0x2000a2d4
 800f084:	2000a2d8 	.word	0x2000a2d8
 800f088:	200176a0 	.word	0x200176a0

0800f08c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b08a      	sub	sp, #40	; 0x28
 800f090:	af02      	add	r7, sp, #8
 800f092:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f094:	2300      	movs	r3, #0
 800f096:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f098:	2300      	movs	r3, #0
 800f09a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f09c:	4ba4      	ldr	r3, [pc, #656]	; (800f330 <tcp_process+0x2a4>)
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	f003 0304 	and.w	r3, r3, #4
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d04e      	beq.n	800f146 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	7d1b      	ldrb	r3, [r3, #20]
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d108      	bne.n	800f0c2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0b4:	4b9f      	ldr	r3, [pc, #636]	; (800f334 <tcp_process+0x2a8>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d123      	bne.n	800f104 <tcp_process+0x78>
        acceptable = 1;
 800f0bc:	2301      	movs	r3, #1
 800f0be:	76fb      	strb	r3, [r7, #27]
 800f0c0:	e020      	b.n	800f104 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0c6:	4b9c      	ldr	r3, [pc, #624]	; (800f338 <tcp_process+0x2ac>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d102      	bne.n	800f0d4 <tcp_process+0x48>
        acceptable = 1;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	76fb      	strb	r3, [r7, #27]
 800f0d2:	e017      	b.n	800f104 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f0d4:	4b98      	ldr	r3, [pc, #608]	; (800f338 <tcp_process+0x2ac>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	db10      	blt.n	800f104 <tcp_process+0x78>
 800f0e2:	4b95      	ldr	r3, [pc, #596]	; (800f338 <tcp_process+0x2ac>)
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ea:	6879      	ldr	r1, [r7, #4]
 800f0ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f0ee:	440b      	add	r3, r1
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	dc06      	bgt.n	800f104 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	7e9b      	ldrb	r3, [r3, #26]
 800f0fa:	f043 0302 	orr.w	r3, r3, #2
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f104:	7efb      	ldrb	r3, [r7, #27]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d01b      	beq.n	800f142 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	7d1b      	ldrb	r3, [r3, #20]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d106      	bne.n	800f120 <tcp_process+0x94>
 800f112:	4b8a      	ldr	r3, [pc, #552]	; (800f33c <tcp_process+0x2b0>)
 800f114:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f118:	4989      	ldr	r1, [pc, #548]	; (800f340 <tcp_process+0x2b4>)
 800f11a:	488a      	ldr	r0, [pc, #552]	; (800f344 <tcp_process+0x2b8>)
 800f11c:	f006 fa98 	bl	8015650 <iprintf>
      recv_flags |= TF_RESET;
 800f120:	4b89      	ldr	r3, [pc, #548]	; (800f348 <tcp_process+0x2bc>)
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	f043 0308 	orr.w	r3, r3, #8
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	4b87      	ldr	r3, [pc, #540]	; (800f348 <tcp_process+0x2bc>)
 800f12c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7e9b      	ldrb	r3, [r3, #26]
 800f132:	f023 0301 	bic.w	r3, r3, #1
 800f136:	b2da      	uxtb	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800f13c:	f06f 030d 	mvn.w	r3, #13
 800f140:	e34d      	b.n	800f7de <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f142:	2300      	movs	r3, #0
 800f144:	e34b      	b.n	800f7de <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f146:	4b7a      	ldr	r3, [pc, #488]	; (800f330 <tcp_process+0x2a4>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	f003 0302 	and.w	r3, r3, #2
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d010      	beq.n	800f174 <tcp_process+0xe8>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	7d1b      	ldrb	r3, [r3, #20]
 800f156:	2b02      	cmp	r3, #2
 800f158:	d00c      	beq.n	800f174 <tcp_process+0xe8>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	7d1b      	ldrb	r3, [r3, #20]
 800f15e:	2b03      	cmp	r3, #3
 800f160:	d008      	beq.n	800f174 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	7e9b      	ldrb	r3, [r3, #26]
 800f166:	f043 0302 	orr.w	r3, r3, #2
 800f16a:	b2da      	uxtb	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800f170:	2300      	movs	r3, #0
 800f172:	e334      	b.n	800f7de <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	7e9b      	ldrb	r3, [r3, #26]
 800f178:	f003 0310 	and.w	r3, r3, #16
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d103      	bne.n	800f188 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f180:	4b72      	ldr	r3, [pc, #456]	; (800f34c <tcp_process+0x2c0>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

  tcp_parseopt(pcb);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f001 f85b 	bl	801024c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	7d1b      	ldrb	r3, [r3, #20]
 800f19a:	3b02      	subs	r3, #2
 800f19c:	2b07      	cmp	r3, #7
 800f19e:	f200 830e 	bhi.w	800f7be <tcp_process+0x732>
 800f1a2:	a201      	add	r2, pc, #4	; (adr r2, 800f1a8 <tcp_process+0x11c>)
 800f1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a8:	0800f1c9 	.word	0x0800f1c9
 800f1ac:	0800f3c1 	.word	0x0800f3c1
 800f1b0:	0800f519 	.word	0x0800f519
 800f1b4:	0800f543 	.word	0x0800f543
 800f1b8:	0800f66d 	.word	0x0800f66d
 800f1bc:	0800f519 	.word	0x0800f519
 800f1c0:	0800f6f9 	.word	0x0800f6f9
 800f1c4:	0800f789 	.word	0x0800f789
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f1c8:	4b59      	ldr	r3, [pc, #356]	; (800f330 <tcp_process+0x2a4>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	f003 0310 	and.w	r3, r3, #16
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f000 80cb 	beq.w	800f36c <tcp_process+0x2e0>
 800f1d6:	4b56      	ldr	r3, [pc, #344]	; (800f330 <tcp_process+0x2a4>)
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	f003 0302 	and.w	r3, r3, #2
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	f000 80c4 	beq.w	800f36c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1e8:	1c5a      	adds	r2, r3, #1
 800f1ea:	4b52      	ldr	r3, [pc, #328]	; (800f334 <tcp_process+0x2a8>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	f040 80bc 	bne.w	800f36c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800f1f4:	4b50      	ldr	r3, [pc, #320]	; (800f338 <tcp_process+0x2ac>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	1c5a      	adds	r2, r3, #1
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800f206:	4b4b      	ldr	r3, [pc, #300]	; (800f334 <tcp_process+0x2a8>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800f20e:	4b50      	ldr	r3, [pc, #320]	; (800f350 <tcp_process+0x2c4>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	89db      	ldrh	r3, [r3, #14]
 800f214:	b29a      	uxth	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f228:	4b43      	ldr	r3, [pc, #268]	; (800f338 <tcp_process+0x2ac>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	1e5a      	subs	r2, r3, #1
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2204      	movs	r2, #4
 800f236:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	3304      	adds	r3, #4
 800f240:	4619      	mov	r1, r3
 800f242:	4610      	mov	r0, r2
 800f244:	f7ff f960 	bl	800e508 <tcp_eff_send_mss_impl>
 800f248:	4603      	mov	r3, r0
 800f24a:	461a      	mov	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	f241 121c 	movw	r2, #4380	; 0x111c
 800f25a:	429a      	cmp	r2, r3
 800f25c:	bf38      	it	cc
 800f25e:	461a      	movcc	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	4293      	cmp	r3, r2
 800f268:	bf28      	it	cs
 800f26a:	4613      	movcs	r3, r2
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d106      	bne.n	800f28c <tcp_process+0x200>
 800f27e:	4b2f      	ldr	r3, [pc, #188]	; (800f33c <tcp_process+0x2b0>)
 800f280:	f240 321a 	movw	r2, #794	; 0x31a
 800f284:	4933      	ldr	r1, [pc, #204]	; (800f354 <tcp_process+0x2c8>)
 800f286:	482f      	ldr	r0, [pc, #188]	; (800f344 <tcp_process+0x2b8>)
 800f288:	f006 f9e2 	bl	8015650 <iprintf>
      --pcb->snd_queuelen;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f292:	3b01      	subs	r3, #1
 800f294:	b29a      	uxth	r2, r3
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2a0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d111      	bne.n	800f2cc <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2ac:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d106      	bne.n	800f2c2 <tcp_process+0x236>
 800f2b4:	4b21      	ldr	r3, [pc, #132]	; (800f33c <tcp_process+0x2b0>)
 800f2b6:	f240 3222 	movw	r2, #802	; 0x322
 800f2ba:	4927      	ldr	r1, [pc, #156]	; (800f358 <tcp_process+0x2cc>)
 800f2bc:	4821      	ldr	r0, [pc, #132]	; (800f344 <tcp_process+0x2b8>)
 800f2be:	f006 f9c7 	bl	8015650 <iprintf>
        pcb->unsent = rseg->next;
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	669a      	str	r2, [r3, #104]	; 0x68
 800f2ca:	e003      	b.n	800f2d4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800f2d4:	69f8      	ldr	r0, [r7, #28]
 800f2d6:	f7fe fee0 	bl	800e09a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d104      	bne.n	800f2ec <tcp_process+0x260>
        pcb->rtime = -1;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2e8:	861a      	strh	r2, [r3, #48]	; 0x30
 800f2ea:	e006      	b.n	800f2fa <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00a      	beq.n	800f31a <tcp_process+0x28e>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	6910      	ldr	r0, [r2, #16]
 800f30e:	2200      	movs	r2, #0
 800f310:	6879      	ldr	r1, [r7, #4]
 800f312:	4798      	blx	r3
 800f314:	4603      	mov	r3, r0
 800f316:	76bb      	strb	r3, [r7, #26]
 800f318:	e001      	b.n	800f31e <tcp_process+0x292>
 800f31a:	2300      	movs	r3, #0
 800f31c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800f31e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f322:	f113 0f0d 	cmn.w	r3, #13
 800f326:	d119      	bne.n	800f35c <tcp_process+0x2d0>
        return ERR_ABRT;
 800f328:	f06f 030c 	mvn.w	r3, #12
 800f32c:	e257      	b.n	800f7de <tcp_process+0x752>
 800f32e:	bf00      	nop
 800f330:	20005fac 	.word	0x20005fac
 800f334:	20005fa4 	.word	0x20005fa4
 800f338:	20005fa0 	.word	0x20005fa0
 800f33c:	080178b4 	.word	0x080178b4
 800f340:	08017a6c 	.word	0x08017a6c
 800f344:	080178f8 	.word	0x080178f8
 800f348:	20005fad 	.word	0x20005fad
 800f34c:	200176a0 	.word	0x200176a0
 800f350:	20005f90 	.word	0x20005f90
 800f354:	08017a8c 	.word	0x08017a8c
 800f358:	08017aa4 	.word	0x08017aa4
      }
      tcp_ack_now(pcb);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	7e9b      	ldrb	r3, [r3, #26]
 800f360:	f043 0302 	orr.w	r3, r3, #2
 800f364:	b2da      	uxtb	r2, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800f36a:	e22a      	b.n	800f7c2 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800f36c:	4b9f      	ldr	r3, [pc, #636]	; (800f5ec <tcp_process+0x560>)
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	f003 0310 	and.w	r3, r3, #16
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 8224 	beq.w	800f7c2 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f37a:	4b9d      	ldr	r3, [pc, #628]	; (800f5f0 <tcp_process+0x564>)
 800f37c:	6818      	ldr	r0, [r3, #0]
 800f37e:	4b9d      	ldr	r3, [pc, #628]	; (800f5f4 <tcp_process+0x568>)
 800f380:	881b      	ldrh	r3, [r3, #0]
 800f382:	461a      	mov	r2, r3
 800f384:	4b9c      	ldr	r3, [pc, #624]	; (800f5f8 <tcp_process+0x56c>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f38a:	4b9c      	ldr	r3, [pc, #624]	; (800f5fc <tcp_process+0x570>)
 800f38c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f38e:	885b      	ldrh	r3, [r3, #2]
 800f390:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f392:	4a9a      	ldr	r2, [pc, #616]	; (800f5fc <tcp_process+0x570>)
 800f394:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f396:	8812      	ldrh	r2, [r2, #0]
 800f398:	b292      	uxth	r2, r2
 800f39a:	9201      	str	r2, [sp, #4]
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	4b98      	ldr	r3, [pc, #608]	; (800f600 <tcp_process+0x574>)
 800f3a0:	4a98      	ldr	r2, [pc, #608]	; (800f604 <tcp_process+0x578>)
 800f3a2:	f001 fcef 	bl	8010d84 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3ac:	2b05      	cmp	r3, #5
 800f3ae:	f200 8208 	bhi.w	800f7c2 <tcp_process+0x736>
        pcb->rtime = 0;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f001 fd57 	bl	8010e6c <tcp_rexmit_rto>
    break;
 800f3be:	e200      	b.n	800f7c2 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800f3c0:	4b8a      	ldr	r3, [pc, #552]	; (800f5ec <tcp_process+0x560>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	f003 0310 	and.w	r3, r3, #16
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	f000 8091 	beq.w	800f4f0 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f3ce:	4b88      	ldr	r3, [pc, #544]	; (800f5f0 <tcp_process+0x564>)
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	db71      	blt.n	800f4c2 <tcp_process+0x436>
 800f3de:	4b84      	ldr	r3, [pc, #528]	; (800f5f0 <tcp_process+0x564>)
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3e6:	1ad3      	subs	r3, r2, r3
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	dc6a      	bgt.n	800f4c2 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2204      	movs	r2, #4
 800f3f0:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00b      	beq.n	800f412 <tcp_process+0x386>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d106      	bne.n	800f412 <tcp_process+0x386>
 800f404:	4b80      	ldr	r3, [pc, #512]	; (800f608 <tcp_process+0x57c>)
 800f406:	f240 3251 	movw	r2, #849	; 0x351
 800f40a:	4980      	ldr	r1, [pc, #512]	; (800f60c <tcp_process+0x580>)
 800f40c:	4880      	ldr	r0, [pc, #512]	; (800f610 <tcp_process+0x584>)
 800f40e:	f006 f91f 	bl	8015650 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f416:	2b00      	cmp	r3, #0
 800f418:	d102      	bne.n	800f420 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800f41a:	23fa      	movs	r3, #250	; 0xfa
 800f41c:	76bb      	strb	r3, [r7, #26]
 800f41e:	e011      	b.n	800f444 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00a      	beq.n	800f440 <tcp_process+0x3b4>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f42e:	699b      	ldr	r3, [r3, #24]
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	6910      	ldr	r0, [r2, #16]
 800f434:	2200      	movs	r2, #0
 800f436:	6879      	ldr	r1, [r7, #4]
 800f438:	4798      	blx	r3
 800f43a:	4603      	mov	r3, r0
 800f43c:	76bb      	strb	r3, [r7, #26]
 800f43e:	e001      	b.n	800f444 <tcp_process+0x3b8>
 800f440:	23f0      	movs	r3, #240	; 0xf0
 800f442:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800f444:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00a      	beq.n	800f462 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800f44c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f450:	f113 0f0d 	cmn.w	r3, #13
 800f454:	d002      	beq.n	800f45c <tcp_process+0x3d0>
            tcp_abort(pcb);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7fe f9f0 	bl	800d83c <tcp_abort>
          }
          return ERR_ABRT;
 800f45c:	f06f 030c 	mvn.w	r3, #12
 800f460:	e1bd      	b.n	800f7de <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 f9cc 	bl	800f800 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800f468:	4b6a      	ldr	r3, [pc, #424]	; (800f614 <tcp_process+0x588>)
 800f46a:	881b      	ldrh	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d005      	beq.n	800f47c <tcp_process+0x3f0>
          recv_acked--;
 800f470:	4b68      	ldr	r3, [pc, #416]	; (800f614 <tcp_process+0x588>)
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	3b01      	subs	r3, #1
 800f476:	b29a      	uxth	r2, r3
 800f478:	4b66      	ldr	r3, [pc, #408]	; (800f614 <tcp_process+0x588>)
 800f47a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f480:	005b      	lsls	r3, r3, #1
 800f482:	f241 121c 	movw	r2, #4380	; 0x111c
 800f486:	429a      	cmp	r2, r3
 800f488:	bf38      	it	cc
 800f48a:	461a      	movcc	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	4293      	cmp	r3, r2
 800f494:	bf28      	it	cs
 800f496:	4613      	movcs	r3, r2
 800f498:	b29a      	uxth	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800f4a0:	4b5d      	ldr	r3, [pc, #372]	; (800f618 <tcp_process+0x58c>)
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	f003 0320 	and.w	r3, r3, #32
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d034      	beq.n	800f516 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	7e9b      	ldrb	r3, [r3, #26]
 800f4b0:	f043 0302 	orr.w	r3, r3, #2
 800f4b4:	b2da      	uxtb	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2207      	movs	r2, #7
 800f4be:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800f4c0:	e029      	b.n	800f516 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4c2:	4b4b      	ldr	r3, [pc, #300]	; (800f5f0 <tcp_process+0x564>)
 800f4c4:	6818      	ldr	r0, [r3, #0]
 800f4c6:	4b4b      	ldr	r3, [pc, #300]	; (800f5f4 <tcp_process+0x568>)
 800f4c8:	881b      	ldrh	r3, [r3, #0]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	4b4a      	ldr	r3, [pc, #296]	; (800f5f8 <tcp_process+0x56c>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4d2:	4b4a      	ldr	r3, [pc, #296]	; (800f5fc <tcp_process+0x570>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4d6:	885b      	ldrh	r3, [r3, #2]
 800f4d8:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4da:	4a48      	ldr	r2, [pc, #288]	; (800f5fc <tcp_process+0x570>)
 800f4dc:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4de:	8812      	ldrh	r2, [r2, #0]
 800f4e0:	b292      	uxth	r2, r2
 800f4e2:	9201      	str	r2, [sp, #4]
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	4b46      	ldr	r3, [pc, #280]	; (800f600 <tcp_process+0x574>)
 800f4e8:	4a46      	ldr	r2, [pc, #280]	; (800f604 <tcp_process+0x578>)
 800f4ea:	f001 fc4b 	bl	8010d84 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800f4ee:	e16a      	b.n	800f7c6 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f4f0:	4b3e      	ldr	r3, [pc, #248]	; (800f5ec <tcp_process+0x560>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	f003 0302 	and.w	r3, r3, #2
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 8164 	beq.w	800f7c6 <tcp_process+0x73a>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f502:	1e5a      	subs	r2, r3, #1
 800f504:	4b3c      	ldr	r3, [pc, #240]	; (800f5f8 <tcp_process+0x56c>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	429a      	cmp	r2, r3
 800f50a:	f040 815c 	bne.w	800f7c6 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f001 fce2 	bl	8010ed8 <tcp_rexmit>
    break;
 800f514:	e157      	b.n	800f7c6 <tcp_process+0x73a>
 800f516:	e156      	b.n	800f7c6 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f000 f971 	bl	800f800 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f51e:	4b3e      	ldr	r3, [pc, #248]	; (800f618 <tcp_process+0x58c>)
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	f003 0320 	and.w	r3, r3, #32
 800f526:	2b00      	cmp	r3, #0
 800f528:	f000 814f 	beq.w	800f7ca <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	7e9b      	ldrb	r3, [r3, #26]
 800f530:	f043 0302 	orr.w	r3, r3, #2
 800f534:	b2da      	uxtb	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2207      	movs	r2, #7
 800f53e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f540:	e143      	b.n	800f7ca <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 f95c 	bl	800f800 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f548:	4b33      	ldr	r3, [pc, #204]	; (800f618 <tcp_process+0x58c>)
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	f003 0320 	and.w	r3, r3, #32
 800f550:	2b00      	cmp	r3, #0
 800f552:	d074      	beq.n	800f63e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f554:	4b25      	ldr	r3, [pc, #148]	; (800f5ec <tcp_process+0x560>)
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	f003 0310 	and.w	r3, r3, #16
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d063      	beq.n	800f628 <tcp_process+0x59c>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f564:	4b22      	ldr	r3, [pc, #136]	; (800f5f0 <tcp_process+0x564>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d15d      	bne.n	800f628 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f570:	2b00      	cmp	r3, #0
 800f572:	d159      	bne.n	800f628 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	7e9b      	ldrb	r3, [r3, #26]
 800f578:	f043 0302 	orr.w	r3, r3, #2
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7fe ff00 	bl	800e388 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f588:	4b24      	ldr	r3, [pc, #144]	; (800f61c <tcp_process+0x590>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d105      	bne.n	800f59e <tcp_process+0x512>
 800f592:	4b22      	ldr	r3, [pc, #136]	; (800f61c <tcp_process+0x590>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	4a20      	ldr	r2, [pc, #128]	; (800f61c <tcp_process+0x590>)
 800f59a:	6013      	str	r3, [r2, #0]
 800f59c:	e013      	b.n	800f5c6 <tcp_process+0x53a>
 800f59e:	4b1f      	ldr	r3, [pc, #124]	; (800f61c <tcp_process+0x590>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	617b      	str	r3, [r7, #20]
 800f5a4:	e00c      	b.n	800f5c0 <tcp_process+0x534>
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d104      	bne.n	800f5ba <tcp_process+0x52e>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	68da      	ldr	r2, [r3, #12]
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	60da      	str	r2, [r3, #12]
 800f5b8:	e005      	b.n	800f5c6 <tcp_process+0x53a>
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	617b      	str	r3, [r7, #20]
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1ef      	bne.n	800f5a6 <tcp_process+0x51a>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	60da      	str	r2, [r3, #12]
 800f5cc:	4b14      	ldr	r3, [pc, #80]	; (800f620 <tcp_process+0x594>)
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	220a      	movs	r2, #10
 800f5d6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f5d8:	4b12      	ldr	r3, [pc, #72]	; (800f624 <tcp_process+0x598>)
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	60da      	str	r2, [r3, #12]
 800f5e0:	4a10      	ldr	r2, [pc, #64]	; (800f624 <tcp_process+0x598>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6013      	str	r3, [r2, #0]
 800f5e6:	f001 fe1b 	bl	8011220 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f5ea:	e0f0      	b.n	800f7ce <tcp_process+0x742>
 800f5ec:	20005fac 	.word	0x20005fac
 800f5f0:	20005fa4 	.word	0x20005fa4
 800f5f4:	20005faa 	.word	0x20005faa
 800f5f8:	20005fa0 	.word	0x20005fa0
 800f5fc:	20005f90 	.word	0x20005f90
 800f600:	2000a2d4 	.word	0x2000a2d4
 800f604:	2000a2d8 	.word	0x2000a2d8
 800f608:	080178b4 	.word	0x080178b4
 800f60c:	08017ab8 	.word	0x08017ab8
 800f610:	080178f8 	.word	0x080178f8
 800f614:	20005fa8 	.word	0x20005fa8
 800f618:	20005fad 	.word	0x20005fad
 800f61c:	2001769c 	.word	0x2001769c
 800f620:	20017698 	.word	0x20017698
 800f624:	200176ac 	.word	0x200176ac
        tcp_ack_now(pcb);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	7e9b      	ldrb	r3, [r3, #26]
 800f62c:	f043 0302 	orr.w	r3, r3, #2
 800f630:	b2da      	uxtb	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2208      	movs	r2, #8
 800f63a:	751a      	strb	r2, [r3, #20]
    break;
 800f63c:	e0c7      	b.n	800f7ce <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f63e:	4b6a      	ldr	r3, [pc, #424]	; (800f7e8 <tcp_process+0x75c>)
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	f003 0310 	and.w	r3, r3, #16
 800f646:	2b00      	cmp	r3, #0
 800f648:	f000 80c1 	beq.w	800f7ce <tcp_process+0x742>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f650:	4b66      	ldr	r3, [pc, #408]	; (800f7ec <tcp_process+0x760>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	429a      	cmp	r2, r3
 800f656:	f040 80ba 	bne.w	800f7ce <tcp_process+0x742>
               pcb->unsent == NULL) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f65e:	2b00      	cmp	r3, #0
 800f660:	f040 80b5 	bne.w	800f7ce <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2206      	movs	r2, #6
 800f668:	751a      	strb	r2, [r3, #20]
    break;
 800f66a:	e0b0      	b.n	800f7ce <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f8c7 	bl	800f800 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f672:	4b5f      	ldr	r3, [pc, #380]	; (800f7f0 <tcp_process+0x764>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	f003 0320 	and.w	r3, r3, #32
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f000 80a9 	beq.w	800f7d2 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	7e9b      	ldrb	r3, [r3, #26]
 800f684:	f043 0302 	orr.w	r3, r3, #2
 800f688:	b2da      	uxtb	r2, r3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7fe fe7a 	bl	800e388 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f694:	4b57      	ldr	r3, [pc, #348]	; (800f7f4 <tcp_process+0x768>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d105      	bne.n	800f6aa <tcp_process+0x61e>
 800f69e:	4b55      	ldr	r3, [pc, #340]	; (800f7f4 <tcp_process+0x768>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	4a53      	ldr	r2, [pc, #332]	; (800f7f4 <tcp_process+0x768>)
 800f6a6:	6013      	str	r3, [r2, #0]
 800f6a8:	e013      	b.n	800f6d2 <tcp_process+0x646>
 800f6aa:	4b52      	ldr	r3, [pc, #328]	; (800f7f4 <tcp_process+0x768>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	613b      	str	r3, [r7, #16]
 800f6b0:	e00c      	b.n	800f6cc <tcp_process+0x640>
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d104      	bne.n	800f6c6 <tcp_process+0x63a>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	68da      	ldr	r2, [r3, #12]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	60da      	str	r2, [r3, #12]
 800f6c4:	e005      	b.n	800f6d2 <tcp_process+0x646>
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	613b      	str	r3, [r7, #16]
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1ef      	bne.n	800f6b2 <tcp_process+0x626>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	60da      	str	r2, [r3, #12]
 800f6d8:	4b47      	ldr	r3, [pc, #284]	; (800f7f8 <tcp_process+0x76c>)
 800f6da:	2201      	movs	r2, #1
 800f6dc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	220a      	movs	r2, #10
 800f6e2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f6e4:	4b45      	ldr	r3, [pc, #276]	; (800f7fc <tcp_process+0x770>)
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	60da      	str	r2, [r3, #12]
 800f6ec:	4a43      	ldr	r2, [pc, #268]	; (800f7fc <tcp_process+0x770>)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6013      	str	r3, [r2, #0]
 800f6f2:	f001 fd95 	bl	8011220 <tcp_timer_needed>
    }
    break;
 800f6f6:	e06c      	b.n	800f7d2 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 f881 	bl	800f800 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6fe:	4b3a      	ldr	r3, [pc, #232]	; (800f7e8 <tcp_process+0x75c>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	f003 0310 	and.w	r3, r3, #16
 800f706:	2b00      	cmp	r3, #0
 800f708:	d065      	beq.n	800f7d6 <tcp_process+0x74a>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f70e:	4b37      	ldr	r3, [pc, #220]	; (800f7ec <tcp_process+0x760>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	429a      	cmp	r2, r3
 800f714:	d15f      	bne.n	800f7d6 <tcp_process+0x74a>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d15b      	bne.n	800f7d6 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7fe fe32 	bl	800e388 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f724:	4b33      	ldr	r3, [pc, #204]	; (800f7f4 <tcp_process+0x768>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d105      	bne.n	800f73a <tcp_process+0x6ae>
 800f72e:	4b31      	ldr	r3, [pc, #196]	; (800f7f4 <tcp_process+0x768>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	4a2f      	ldr	r2, [pc, #188]	; (800f7f4 <tcp_process+0x768>)
 800f736:	6013      	str	r3, [r2, #0]
 800f738:	e013      	b.n	800f762 <tcp_process+0x6d6>
 800f73a:	4b2e      	ldr	r3, [pc, #184]	; (800f7f4 <tcp_process+0x768>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	60fb      	str	r3, [r7, #12]
 800f740:	e00c      	b.n	800f75c <tcp_process+0x6d0>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d104      	bne.n	800f756 <tcp_process+0x6ca>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	68da      	ldr	r2, [r3, #12]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	60da      	str	r2, [r3, #12]
 800f754:	e005      	b.n	800f762 <tcp_process+0x6d6>
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1ef      	bne.n	800f742 <tcp_process+0x6b6>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	60da      	str	r2, [r3, #12]
 800f768:	4b23      	ldr	r3, [pc, #140]	; (800f7f8 <tcp_process+0x76c>)
 800f76a:	2201      	movs	r2, #1
 800f76c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	220a      	movs	r2, #10
 800f772:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f774:	4b21      	ldr	r3, [pc, #132]	; (800f7fc <tcp_process+0x770>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	60da      	str	r2, [r3, #12]
 800f77c:	4a1f      	ldr	r2, [pc, #124]	; (800f7fc <tcp_process+0x770>)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6013      	str	r3, [r2, #0]
 800f782:	f001 fd4d 	bl	8011220 <tcp_timer_needed>
    }
    break;
 800f786:	e026      	b.n	800f7d6 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 f839 	bl	800f800 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f78e:	4b16      	ldr	r3, [pc, #88]	; (800f7e8 <tcp_process+0x75c>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	f003 0310 	and.w	r3, r3, #16
 800f796:	2b00      	cmp	r3, #0
 800f798:	d01f      	beq.n	800f7da <tcp_process+0x74e>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f79e:	4b13      	ldr	r3, [pc, #76]	; (800f7ec <tcp_process+0x760>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d119      	bne.n	800f7da <tcp_process+0x74e>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d115      	bne.n	800f7da <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f7ae:	4b10      	ldr	r3, [pc, #64]	; (800f7f0 <tcp_process+0x764>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	f043 0310 	orr.w	r3, r3, #16
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	4b0d      	ldr	r3, [pc, #52]	; (800f7f0 <tcp_process+0x764>)
 800f7ba:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f7bc:	e00d      	b.n	800f7da <tcp_process+0x74e>
  default:
    break;
 800f7be:	bf00      	nop
 800f7c0:	e00c      	b.n	800f7dc <tcp_process+0x750>
    break;
 800f7c2:	bf00      	nop
 800f7c4:	e00a      	b.n	800f7dc <tcp_process+0x750>
    break;
 800f7c6:	bf00      	nop
 800f7c8:	e008      	b.n	800f7dc <tcp_process+0x750>
    break;
 800f7ca:	bf00      	nop
 800f7cc:	e006      	b.n	800f7dc <tcp_process+0x750>
    break;
 800f7ce:	bf00      	nop
 800f7d0:	e004      	b.n	800f7dc <tcp_process+0x750>
    break;
 800f7d2:	bf00      	nop
 800f7d4:	e002      	b.n	800f7dc <tcp_process+0x750>
    break;
 800f7d6:	bf00      	nop
 800f7d8:	e000      	b.n	800f7dc <tcp_process+0x750>
    break;
 800f7da:	bf00      	nop
  }
  return ERR_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3720      	adds	r7, #32
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20005fac 	.word	0x20005fac
 800f7ec:	20005fa4 	.word	0x20005fa4
 800f7f0:	20005fad 	.word	0x20005fad
 800f7f4:	2001769c 	.word	0x2001769c
 800f7f8:	20017698 	.word	0x20017698
 800f7fc:	200176ac 	.word	0x200176ac

0800f800 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f802:	b08b      	sub	sp, #44	; 0x2c
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f808:	2300      	movs	r3, #0
 800f80a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	7d1b      	ldrb	r3, [r3, #20]
 800f810:	2b03      	cmp	r3, #3
 800f812:	d806      	bhi.n	800f822 <tcp_receive+0x22>
 800f814:	4ba6      	ldr	r3, [pc, #664]	; (800fab0 <tcp_receive+0x2b0>)
 800f816:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f81a:	49a6      	ldr	r1, [pc, #664]	; (800fab4 <tcp_receive+0x2b4>)
 800f81c:	48a6      	ldr	r0, [pc, #664]	; (800fab8 <tcp_receive+0x2b8>)
 800f81e:	f005 ff17 	bl	8015650 <iprintf>

  if (flags & TCP_ACK) {
 800f822:	4ba6      	ldr	r3, [pc, #664]	; (800fabc <tcp_receive+0x2bc>)
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	f003 0310 	and.w	r3, r3, #16
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 82bf 	beq.w	800fdae <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f836:	461a      	mov	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f83c:	4413      	add	r3, r2
 800f83e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f844:	4b9e      	ldr	r3, [pc, #632]	; (800fac0 <tcp_receive+0x2c0>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	db1b      	blt.n	800f886 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f852:	4b9b      	ldr	r3, [pc, #620]	; (800fac0 <tcp_receive+0x2c0>)
 800f854:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f856:	429a      	cmp	r2, r3
 800f858:	d106      	bne.n	800f868 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f85e:	4b99      	ldr	r3, [pc, #612]	; (800fac4 <tcp_receive+0x2c4>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	2b00      	cmp	r3, #0
 800f866:	db0e      	blt.n	800f886 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f86c:	4b95      	ldr	r3, [pc, #596]	; (800fac4 <tcp_receive+0x2c4>)
 800f86e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f870:	429a      	cmp	r2, r3
 800f872:	d141      	bne.n	800f8f8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f874:	4b94      	ldr	r3, [pc, #592]	; (800fac8 <tcp_receive+0x2c8>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	89db      	ldrh	r3, [r3, #14]
 800f87a:	b29a      	uxth	r2, r3
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f882:	429a      	cmp	r2, r3
 800f884:	d938      	bls.n	800f8f8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f886:	4b90      	ldr	r3, [pc, #576]	; (800fac8 <tcp_receive+0x2c8>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	89db      	ldrh	r3, [r3, #14]
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d205      	bcs.n	800f8b0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f8b0:	4b83      	ldr	r3, [pc, #524]	; (800fac0 <tcp_receive+0x2c0>)
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f8b8:	4b82      	ldr	r3, [pc, #520]	; (800fac4 <tcp_receive+0x2c4>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10d      	bne.n	800f8e6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d111      	bne.n	800f8f8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          pcb->persist_backoff = 1;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2201      	movs	r2, #1
 800f8e0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800f8e4:	e008      	b.n	800f8f8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d003      	beq.n	800f8f8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f8f8:	4b72      	ldr	r3, [pc, #456]	; (800fac4 <tcp_receive+0x2c4>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f900:	1ad3      	subs	r3, r2, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	dc53      	bgt.n	800f9ae <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f906:	4b71      	ldr	r3, [pc, #452]	; (800facc <tcp_receive+0x2cc>)
 800f908:	881b      	ldrh	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d146      	bne.n	800f99c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f918:	4413      	add	r3, r2
 800f91a:	697a      	ldr	r2, [r7, #20]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d13d      	bne.n	800f99c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f926:	2b00      	cmp	r3, #0
 800f928:	db38      	blt.n	800f99c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f92e:	4b65      	ldr	r3, [pc, #404]	; (800fac4 <tcp_receive+0x2c4>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	429a      	cmp	r2, r3
 800f934:	d132      	bne.n	800f99c <tcp_receive+0x19c>
              found_dupack = 1;
 800f936:	2301      	movs	r3, #1
 800f938:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f940:	2bff      	cmp	r3, #255	; 0xff
 800f942:	d007      	beq.n	800f954 <tcp_receive+0x154>
                ++pcb->dupacks;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f94a:	3301      	adds	r3, #1
 800f94c:	b2da      	uxtb	r2, r3
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f95a:	2b03      	cmp	r3, #3
 800f95c:	d916      	bls.n	800f98c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f968:	4413      	add	r3, r2
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f972:	429a      	cmp	r2, r3
 800f974:	d912      	bls.n	800f99c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f980:	4413      	add	r3, r2
 800f982:	b29a      	uxth	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f98a:	e007      	b.n	800f99c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f992:	2b03      	cmp	r3, #3
 800f994:	d102      	bne.n	800f99c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f001 faee 	bl	8010f78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f040 8169 	bne.w	800fc76 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f9ac:	e163      	b.n	800fc76 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f9ae:	4b45      	ldr	r3, [pc, #276]	; (800fac4 <tcp_receive+0x2c4>)
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	3b01      	subs	r3, #1
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f2c0 8107 	blt.w	800fbce <tcp_receive+0x3ce>
 800f9c0:	4b40      	ldr	r3, [pc, #256]	; (800fac4 <tcp_receive+0x2c4>)
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	f300 80ff 	bgt.w	800fbce <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	7e9b      	ldrb	r3, [r3, #26]
 800f9d4:	f003 0304 	and.w	r3, r3, #4
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00c      	beq.n	800f9f6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	7e9b      	ldrb	r3, [r3, #26]
 800f9e0:	f023 0304 	bic.w	r3, r3, #4
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa04:	10db      	asrs	r3, r3, #3
 800fa06:	b21b      	sxth	r3, r3
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	4413      	add	r3, r2
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	b21a      	sxth	r2, r3
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fa26:	4b27      	ldr	r3, [pc, #156]	; (800fac4 <tcp_receive+0x2c4>)
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	7d1b      	ldrb	r3, [r3, #20]
 800fa32:	2b03      	cmp	r3, #3
 800fa34:	f240 8094 	bls.w	800fb60 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d216      	bcs.n	800fa76 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa52:	4413      	add	r3, r2
 800fa54:	b29a      	uxth	r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d97f      	bls.n	800fb60 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa6a:	4413      	add	r3, r2
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa74:	e074      	b.n	800fb60 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa80:	4619      	mov	r1, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa86:	fb03 f301 	mul.w	r3, r3, r1
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800fa90:	fb93 f3f1 	sdiv	r3, r3, r1
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	4413      	add	r3, r2
 800fa98:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800faa0:	8a7a      	ldrh	r2, [r7, #18]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d95c      	bls.n	800fb60 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	8a7a      	ldrh	r2, [r7, #18]
 800faaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800faae:	e057      	b.n	800fb60 <tcp_receive+0x360>
 800fab0:	080178b4 	.word	0x080178b4
 800fab4:	08017ad8 	.word	0x08017ad8
 800fab8:	080178f8 	.word	0x080178f8
 800fabc:	20005fac 	.word	0x20005fac
 800fac0:	20005fa0 	.word	0x20005fa0
 800fac4:	20005fa4 	.word	0x20005fa4
 800fac8:	20005f90 	.word	0x20005f90
 800facc:	20005faa 	.word	0x20005faa
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fad4:	60fb      	str	r3, [r7, #12]
        pcb->unacked = pcb->unacked->next;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	4618      	mov	r0, r3
 800faec:	f7fd fa4c 	bl	800cf88 <pbuf_clen>
 800faf0:	4603      	mov	r3, r0
 800faf2:	429c      	cmp	r4, r3
 800faf4:	d206      	bcs.n	800fb04 <tcp_receive+0x304>
 800faf6:	4b70      	ldr	r3, [pc, #448]	; (800fcb8 <tcp_receive+0x4b8>)
 800faf8:	f240 429e 	movw	r2, #1182	; 0x49e
 800fafc:	496f      	ldr	r1, [pc, #444]	; (800fcbc <tcp_receive+0x4bc>)
 800fafe:	4870      	ldr	r0, [pc, #448]	; (800fcc0 <tcp_receive+0x4c0>)
 800fb00:	f005 fda6 	bl	8015650 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fd fa3d 	bl	800cf88 <pbuf_clen>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	461a      	mov	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb18:	1a9b      	subs	r3, r3, r2
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	891a      	ldrh	r2, [r3, #8]
 800fb26:	4b67      	ldr	r3, [pc, #412]	; (800fcc4 <tcp_receive+0x4c4>)
 800fb28:	881b      	ldrh	r3, [r3, #0]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	b29a      	uxth	r2, r3
 800fb2e:	4b65      	ldr	r3, [pc, #404]	; (800fcc4 <tcp_receive+0x4c4>)
 800fb30:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f7fe fab1 	bl	800e09a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d00e      	beq.n	800fb60 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d10a      	bne.n	800fb60 <tcp_receive+0x360>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d106      	bne.n	800fb60 <tcp_receive+0x360>
 800fb52:	4b59      	ldr	r3, [pc, #356]	; (800fcb8 <tcp_receive+0x4b8>)
 800fb54:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800fb58:	495b      	ldr	r1, [pc, #364]	; (800fcc8 <tcp_receive+0x4c8>)
 800fb5a:	4859      	ldr	r0, [pc, #356]	; (800fcc0 <tcp_receive+0x4c0>)
 800fb5c:	f005 fd78 	bl	8015650 <iprintf>
      while (pcb->unacked != NULL &&
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d022      	beq.n	800fbae <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fc f847 	bl	800bc04 <lwip_htonl>
 800fb76:	4604      	mov	r4, r0
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb7c:	891b      	ldrh	r3, [r3, #8]
 800fb7e:	461d      	mov	r5, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	899b      	ldrh	r3, [r3, #12]
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fc f82c 	bl	800bbe8 <lwip_htons>
 800fb90:	4603      	mov	r3, r0
 800fb92:	f003 0303 	and.w	r3, r3, #3
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <tcp_receive+0x39e>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e000      	b.n	800fba0 <tcp_receive+0x3a0>
 800fb9e:	2300      	movs	r3, #0
 800fba0:	442b      	add	r3, r5
 800fba2:	18e2      	adds	r2, r4, r3
 800fba4:	4b49      	ldr	r3, [pc, #292]	; (800fccc <tcp_receive+0x4cc>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	dd90      	ble.n	800fad0 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d104      	bne.n	800fbc0 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbbc:	861a      	strh	r2, [r3, #48]	; 0x30
 800fbbe:	e002      	b.n	800fbc6 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	76da      	strb	r2, [r3, #27]
 800fbcc:	e002      	b.n	800fbd4 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f000 fdf0 	bl	80107b4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800fbd4:	e04f      	b.n	800fc76 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fbda:	60fb      	str	r3, [r7, #12]
      pcb->unsent = pcb->unsent->next;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d103      	bne.n	800fbf6 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fd f9c1 	bl	800cf88 <pbuf_clen>
 800fc06:	4603      	mov	r3, r0
 800fc08:	429c      	cmp	r4, r3
 800fc0a:	d206      	bcs.n	800fc1a <tcp_receive+0x41a>
 800fc0c:	4b2a      	ldr	r3, [pc, #168]	; (800fcb8 <tcp_receive+0x4b8>)
 800fc0e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fc12:	492a      	ldr	r1, [pc, #168]	; (800fcbc <tcp_receive+0x4bc>)
 800fc14:	482a      	ldr	r0, [pc, #168]	; (800fcc0 <tcp_receive+0x4c0>)
 800fc16:	f005 fd1b 	bl	8015650 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fd f9b2 	bl	800cf88 <pbuf_clen>
 800fc24:	4603      	mov	r3, r0
 800fc26:	461a      	mov	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc2e:	1a9b      	subs	r3, r3, r2
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	891a      	ldrh	r2, [r3, #8]
 800fc3c:	4b21      	ldr	r3, [pc, #132]	; (800fcc4 <tcp_receive+0x4c4>)
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	4413      	add	r3, r2
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	4b1f      	ldr	r3, [pc, #124]	; (800fcc4 <tcp_receive+0x4c4>)
 800fc46:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800fc48:	68f8      	ldr	r0, [r7, #12]
 800fc4a:	f7fe fa26 	bl	800e09a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00e      	beq.n	800fc76 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d10a      	bne.n	800fc76 <tcp_receive+0x476>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d106      	bne.n	800fc76 <tcp_receive+0x476>
 800fc68:	4b13      	ldr	r3, [pc, #76]	; (800fcb8 <tcp_receive+0x4b8>)
 800fc6a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800fc6e:	4916      	ldr	r1, [pc, #88]	; (800fcc8 <tcp_receive+0x4c8>)
 800fc70:	4813      	ldr	r0, [pc, #76]	; (800fcc0 <tcp_receive+0x4c0>)
 800fc72:	f005 fced 	bl	8015650 <iprintf>
    while (pcb->unsent != NULL &&
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d036      	beq.n	800fcec <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fc7e:	4b13      	ldr	r3, [pc, #76]	; (800fccc <tcp_receive+0x4cc>)
 800fc80:	681c      	ldr	r4, [r3, #0]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fb ffba 	bl	800bc04 <lwip_htonl>
 800fc90:	4605      	mov	r5, r0
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc96:	891b      	ldrh	r3, [r3, #8]
 800fc98:	461e      	mov	r6, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	899b      	ldrh	r3, [r3, #12]
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7fb ff9f 	bl	800bbe8 <lwip_htons>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	f003 0303 	and.w	r3, r3, #3
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d00d      	beq.n	800fcd0 <tcp_receive+0x4d0>
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e00c      	b.n	800fcd2 <tcp_receive+0x4d2>
 800fcb8:	080178b4 	.word	0x080178b4
 800fcbc:	08017af4 	.word	0x08017af4
 800fcc0:	080178f8 	.word	0x080178f8
 800fcc4:	20005fa8 	.word	0x20005fa8
 800fcc8:	08017b1c 	.word	0x08017b1c
 800fccc:	20005fa4 	.word	0x20005fa4
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4433      	add	r3, r6
 800fcd4:	442b      	add	r3, r5
 800fcd6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	db07      	blt.n	800fcec <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fcdc:	4b8d      	ldr	r3, [pc, #564]	; (800ff14 <tcp_receive+0x714>)
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f77f af75 	ble.w	800fbd6 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fcf2:	4b89      	ldr	r3, [pc, #548]	; (800ff18 <tcp_receive+0x718>)
 800fcf4:	881b      	ldrh	r3, [r3, #0]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	b29a      	uxth	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d052      	beq.n	800fdae <tcp_receive+0x5ae>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd0c:	4b81      	ldr	r3, [pc, #516]	; (800ff14 <tcp_receive+0x714>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	da4b      	bge.n	800fdae <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fd16:	4b81      	ldr	r3, [pc, #516]	; (800ff1c <tcp_receive+0x71c>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800fd28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd30:	10db      	asrs	r3, r3, #3
 800fd32:	b21b      	sxth	r3, r3
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd46:	4413      	add	r3, r2
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	b21a      	sxth	r2, r3
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fd50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	da03      	bge.n	800fd60 <tcp_receive+0x560>
        m = -m;
 800fd58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd5a:	425b      	negs	r3, r3
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800fd60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd68:	109b      	asrs	r3, r3, #2
 800fd6a:	b21b      	sxth	r3, r3
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd7e:	4413      	add	r3, r2
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	b21a      	sxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd8e:	10db      	asrs	r3, r3, #3
 800fd90:	b21b      	sxth	r3, r3
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	4413      	add	r3, r2
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	b21a      	sxth	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fdae:	4b5c      	ldr	r3, [pc, #368]	; (800ff20 <tcp_receive+0x720>)
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	f000 81de 	beq.w	8010174 <tcp_receive+0x974>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	7d1b      	ldrb	r3, [r3, #20]
 800fdbc:	2b06      	cmp	r3, #6
 800fdbe:	f200 81d9 	bhi.w	8010174 <tcp_receive+0x974>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdc6:	4b57      	ldr	r3, [pc, #348]	; (800ff24 <tcp_receive+0x724>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	1ad3      	subs	r3, r2, r3
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	f2c0 80b8 	blt.w	800ff44 <tcp_receive+0x744>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdd8:	4b51      	ldr	r3, [pc, #324]	; (800ff20 <tcp_receive+0x720>)
 800fdda:	881b      	ldrh	r3, [r3, #0]
 800fddc:	4619      	mov	r1, r3
 800fdde:	4b51      	ldr	r3, [pc, #324]	; (800ff24 <tcp_receive+0x724>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	440b      	add	r3, r1
 800fde4:	1ad3      	subs	r3, r2, r3
 800fde6:	3301      	adds	r3, #1
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f300 80ab 	bgt.w	800ff44 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fdee:	4b4e      	ldr	r3, [pc, #312]	; (800ff28 <tcp_receive+0x728>)
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdf8:	4b4a      	ldr	r3, [pc, #296]	; (800ff24 <tcp_receive+0x724>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fe00:	4b49      	ldr	r3, [pc, #292]	; (800ff28 <tcp_receive+0x728>)
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d106      	bne.n	800fe16 <tcp_receive+0x616>
 800fe08:	4b48      	ldr	r3, [pc, #288]	; (800ff2c <tcp_receive+0x72c>)
 800fe0a:	f240 523c 	movw	r2, #1340	; 0x53c
 800fe0e:	4948      	ldr	r1, [pc, #288]	; (800ff30 <tcp_receive+0x730>)
 800fe10:	4848      	ldr	r0, [pc, #288]	; (800ff34 <tcp_receive+0x734>)
 800fe12:	f005 fc1d 	bl	8015650 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800fe16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe18:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	dd06      	ble.n	800fe2e <tcp_receive+0x62e>
 800fe20:	4b42      	ldr	r3, [pc, #264]	; (800ff2c <tcp_receive+0x72c>)
 800fe22:	f240 523d 	movw	r2, #1341	; 0x53d
 800fe26:	4944      	ldr	r1, [pc, #272]	; (800ff38 <tcp_receive+0x738>)
 800fe28:	4842      	ldr	r0, [pc, #264]	; (800ff34 <tcp_receive+0x734>)
 800fe2a:	f005 fc11 	bl	8015650 <iprintf>
      if (inseg.p->len < off) {
 800fe2e:	4b3e      	ldr	r3, [pc, #248]	; (800ff28 <tcp_receive+0x728>)
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	895b      	ldrh	r3, [r3, #10]
 800fe34:	461a      	mov	r2, r3
 800fe36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	dd3e      	ble.n	800feba <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fe3c:	4b3a      	ldr	r3, [pc, #232]	; (800ff28 <tcp_receive+0x728>)
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	891b      	ldrh	r3, [r3, #8]
 800fe42:	461a      	mov	r2, r3
 800fe44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe46:	4293      	cmp	r3, r2
 800fe48:	dd06      	ble.n	800fe58 <tcp_receive+0x658>
 800fe4a:	4b38      	ldr	r3, [pc, #224]	; (800ff2c <tcp_receive+0x72c>)
 800fe4c:	f240 523f 	movw	r2, #1343	; 0x53f
 800fe50:	493a      	ldr	r1, [pc, #232]	; (800ff3c <tcp_receive+0x73c>)
 800fe52:	4838      	ldr	r0, [pc, #224]	; (800ff34 <tcp_receive+0x734>)
 800fe54:	f005 fbfc 	bl	8015650 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fe58:	4b33      	ldr	r3, [pc, #204]	; (800ff28 <tcp_receive+0x728>)
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	891a      	ldrh	r2, [r3, #8]
 800fe5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	817b      	strh	r3, [r7, #10]
        while (p->len < off) {
 800fe66:	e00e      	b.n	800fe86 <tcp_receive+0x686>
          off -= p->len;
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	895b      	ldrh	r3, [r3, #10]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe70:	1a9b      	subs	r3, r3, r2
 800fe72:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	897a      	ldrh	r2, [r7, #10]
 800fe78:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	895b      	ldrh	r3, [r3, #10]
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	dcea      	bgt.n	800fe68 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800fe92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	425b      	negs	r3, r3
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	b21b      	sxth	r3, r3
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	69b8      	ldr	r0, [r7, #24]
 800fea0:	f7fc ffb4 	bl	800ce0c <pbuf_header>
 800fea4:	4603      	mov	r3, r0
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d01c      	beq.n	800fee4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800feaa:	4b20      	ldr	r3, [pc, #128]	; (800ff2c <tcp_receive+0x72c>)
 800feac:	f240 524c 	movw	r2, #1356	; 0x54c
 800feb0:	4923      	ldr	r1, [pc, #140]	; (800ff40 <tcp_receive+0x740>)
 800feb2:	4820      	ldr	r0, [pc, #128]	; (800ff34 <tcp_receive+0x734>)
 800feb4:	f005 fbcc 	bl	8015650 <iprintf>
 800feb8:	e014      	b.n	800fee4 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800feba:	4b1b      	ldr	r3, [pc, #108]	; (800ff28 <tcp_receive+0x728>)
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fec0:	b292      	uxth	r2, r2
 800fec2:	4252      	negs	r2, r2
 800fec4:	b292      	uxth	r2, r2
 800fec6:	b212      	sxth	r2, r2
 800fec8:	4611      	mov	r1, r2
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fc ff9e 	bl	800ce0c <pbuf_header>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d006      	beq.n	800fee4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fed6:	4b15      	ldr	r3, [pc, #84]	; (800ff2c <tcp_receive+0x72c>)
 800fed8:	f240 5251 	movw	r2, #1361	; 0x551
 800fedc:	4918      	ldr	r1, [pc, #96]	; (800ff40 <tcp_receive+0x740>)
 800fede:	4815      	ldr	r0, [pc, #84]	; (800ff34 <tcp_receive+0x734>)
 800fee0:	f005 fbb6 	bl	8015650 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800fee4:	4b10      	ldr	r3, [pc, #64]	; (800ff28 <tcp_receive+0x728>)
 800fee6:	891a      	ldrh	r2, [r3, #8]
 800fee8:	4b0e      	ldr	r3, [pc, #56]	; (800ff24 <tcp_receive+0x724>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	b299      	uxth	r1, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	1acb      	subs	r3, r1, r3
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	4413      	add	r3, r2
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	4b0a      	ldr	r3, [pc, #40]	; (800ff28 <tcp_receive+0x728>)
 800fefe:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff04:	4a07      	ldr	r2, [pc, #28]	; (800ff24 <tcp_receive+0x724>)
 800ff06:	6013      	str	r3, [r2, #0]
 800ff08:	4b07      	ldr	r3, [pc, #28]	; (800ff28 <tcp_receive+0x728>)
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	4a05      	ldr	r2, [pc, #20]	; (800ff24 <tcp_receive+0x724>)
 800ff0e:	6812      	ldr	r2, [r2, #0]
 800ff10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff12:	e025      	b.n	800ff60 <tcp_receive+0x760>
 800ff14:	20005fa4 	.word	0x20005fa4
 800ff18:	20005fa8 	.word	0x20005fa8
 800ff1c:	200176a0 	.word	0x200176a0
 800ff20:	20005faa 	.word	0x20005faa
 800ff24:	20005fa0 	.word	0x20005fa0
 800ff28:	20005f80 	.word	0x20005f80
 800ff2c:	080178b4 	.word	0x080178b4
 800ff30:	08017b3c 	.word	0x08017b3c
 800ff34:	080178f8 	.word	0x080178f8
 800ff38:	08017b4c 	.word	0x08017b4c
 800ff3c:	08017b5c 	.word	0x08017b5c
 800ff40:	08017b6c 	.word	0x08017b6c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ff44:	4b9a      	ldr	r3, [pc, #616]	; (80101b0 <tcp_receive+0x9b0>)
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4c:	1ad3      	subs	r3, r2, r3
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	da06      	bge.n	800ff60 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	7e9b      	ldrb	r3, [r3, #26]
 800ff56:	f043 0302 	orr.w	r3, r3, #2
 800ff5a:	b2da      	uxtb	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff60:	4b93      	ldr	r3, [pc, #588]	; (80101b0 <tcp_receive+0x9b0>)
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	f2c0 80fd 	blt.w	801016a <tcp_receive+0x96a>
 800ff70:	4b8f      	ldr	r3, [pc, #572]	; (80101b0 <tcp_receive+0x9b0>)
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff78:	6879      	ldr	r1, [r7, #4]
 800ff7a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff7c:	440b      	add	r3, r1
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	3301      	adds	r3, #1
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	f300 80f1 	bgt.w	801016a <tcp_receive+0x96a>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff8c:	4b88      	ldr	r3, [pc, #544]	; (80101b0 <tcp_receive+0x9b0>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	f040 80e6 	bne.w	8010162 <tcp_receive+0x962>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ff96:	4b87      	ldr	r3, [pc, #540]	; (80101b4 <tcp_receive+0x9b4>)
 800ff98:	891c      	ldrh	r4, [r3, #8]
 800ff9a:	4b86      	ldr	r3, [pc, #536]	; (80101b4 <tcp_receive+0x9b4>)
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	899b      	ldrh	r3, [r3, #12]
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fb fe20 	bl	800bbe8 <lwip_htons>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	f003 0303 	and.w	r3, r3, #3
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <tcp_receive+0x7b6>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e000      	b.n	800ffb8 <tcp_receive+0x7b8>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	4423      	add	r3, r4
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	4b7e      	ldr	r3, [pc, #504]	; (80101b8 <tcp_receive+0x9b8>)
 800ffbe:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ffc4:	4b7c      	ldr	r3, [pc, #496]	; (80101b8 <tcp_receive+0x9b8>)
 800ffc6:	881b      	ldrh	r3, [r3, #0]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d26e      	bcs.n	80100aa <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffcc:	4b79      	ldr	r3, [pc, #484]	; (80101b4 <tcp_receive+0x9b4>)
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	899b      	ldrh	r3, [r3, #12]
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fb fe07 	bl	800bbe8 <lwip_htons>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	f003 0301 	and.w	r3, r3, #1
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d01b      	beq.n	801001c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ffe4:	4b73      	ldr	r3, [pc, #460]	; (80101b4 <tcp_receive+0x9b4>)
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	899b      	ldrh	r3, [r3, #12]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fff0:	b29c      	uxth	r4, r3
 800fff2:	4b70      	ldr	r3, [pc, #448]	; (80101b4 <tcp_receive+0x9b4>)
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	899b      	ldrh	r3, [r3, #12]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fb fdf4 	bl	800bbe8 <lwip_htons>
 8010000:	4603      	mov	r3, r0
 8010002:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010006:	b29b      	uxth	r3, r3
 8010008:	4618      	mov	r0, r3
 801000a:	f7fb fded 	bl	800bbe8 <lwip_htons>
 801000e:	4603      	mov	r3, r0
 8010010:	461a      	mov	r2, r3
 8010012:	4b68      	ldr	r3, [pc, #416]	; (80101b4 <tcp_receive+0x9b4>)
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	4322      	orrs	r2, r4
 8010018:	b292      	uxth	r2, r2
 801001a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010020:	4b64      	ldr	r3, [pc, #400]	; (80101b4 <tcp_receive+0x9b4>)
 8010022:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010024:	4b63      	ldr	r3, [pc, #396]	; (80101b4 <tcp_receive+0x9b4>)
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	899b      	ldrh	r3, [r3, #12]
 801002a:	b29b      	uxth	r3, r3
 801002c:	4618      	mov	r0, r3
 801002e:	f7fb fddb 	bl	800bbe8 <lwip_htons>
 8010032:	4603      	mov	r3, r0
 8010034:	f003 0302 	and.w	r3, r3, #2
 8010038:	2b00      	cmp	r3, #0
 801003a:	d005      	beq.n	8010048 <tcp_receive+0x848>
            inseg.len -= 1;
 801003c:	4b5d      	ldr	r3, [pc, #372]	; (80101b4 <tcp_receive+0x9b4>)
 801003e:	891b      	ldrh	r3, [r3, #8]
 8010040:	3b01      	subs	r3, #1
 8010042:	b29a      	uxth	r2, r3
 8010044:	4b5b      	ldr	r3, [pc, #364]	; (80101b4 <tcp_receive+0x9b4>)
 8010046:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010048:	4b5a      	ldr	r3, [pc, #360]	; (80101b4 <tcp_receive+0x9b4>)
 801004a:	685a      	ldr	r2, [r3, #4]
 801004c:	4b59      	ldr	r3, [pc, #356]	; (80101b4 <tcp_receive+0x9b4>)
 801004e:	891b      	ldrh	r3, [r3, #8]
 8010050:	4619      	mov	r1, r3
 8010052:	4610      	mov	r0, r2
 8010054:	f7fc fd8a 	bl	800cb6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010058:	4b56      	ldr	r3, [pc, #344]	; (80101b4 <tcp_receive+0x9b4>)
 801005a:	891c      	ldrh	r4, [r3, #8]
 801005c:	4b55      	ldr	r3, [pc, #340]	; (80101b4 <tcp_receive+0x9b4>)
 801005e:	68db      	ldr	r3, [r3, #12]
 8010060:	899b      	ldrh	r3, [r3, #12]
 8010062:	b29b      	uxth	r3, r3
 8010064:	4618      	mov	r0, r3
 8010066:	f7fb fdbf 	bl	800bbe8 <lwip_htons>
 801006a:	4603      	mov	r3, r0
 801006c:	f003 0303 	and.w	r3, r3, #3
 8010070:	2b00      	cmp	r3, #0
 8010072:	d001      	beq.n	8010078 <tcp_receive+0x878>
 8010074:	2301      	movs	r3, #1
 8010076:	e000      	b.n	801007a <tcp_receive+0x87a>
 8010078:	2300      	movs	r3, #0
 801007a:	4423      	add	r3, r4
 801007c:	b29a      	uxth	r2, r3
 801007e:	4b4e      	ldr	r3, [pc, #312]	; (80101b8 <tcp_receive+0x9b8>)
 8010080:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010082:	4b4d      	ldr	r3, [pc, #308]	; (80101b8 <tcp_receive+0x9b8>)
 8010084:	881b      	ldrh	r3, [r3, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	4b49      	ldr	r3, [pc, #292]	; (80101b0 <tcp_receive+0x9b0>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	441a      	add	r2, r3
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010092:	6879      	ldr	r1, [r7, #4]
 8010094:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010096:	440b      	add	r3, r1
 8010098:	429a      	cmp	r2, r3
 801009a:	d006      	beq.n	80100aa <tcp_receive+0x8aa>
 801009c:	4b47      	ldr	r3, [pc, #284]	; (80101bc <tcp_receive+0x9bc>)
 801009e:	f240 527f 	movw	r2, #1407	; 0x57f
 80100a2:	4947      	ldr	r1, [pc, #284]	; (80101c0 <tcp_receive+0x9c0>)
 80100a4:	4847      	ldr	r0, [pc, #284]	; (80101c4 <tcp_receive+0x9c4>)
 80100a6:	f005 fad3 	bl	8015650 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80100aa:	4b43      	ldr	r3, [pc, #268]	; (80101b8 <tcp_receive+0x9b8>)
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	461a      	mov	r2, r3
 80100b0:	4b3f      	ldr	r3, [pc, #252]	; (80101b0 <tcp_receive+0x9b0>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	441a      	add	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100be:	4b3e      	ldr	r3, [pc, #248]	; (80101b8 <tcp_receive+0x9b8>)
 80100c0:	881b      	ldrh	r3, [r3, #0]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d206      	bcs.n	80100d4 <tcp_receive+0x8d4>
 80100c6:	4b3d      	ldr	r3, [pc, #244]	; (80101bc <tcp_receive+0x9bc>)
 80100c8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80100cc:	493e      	ldr	r1, [pc, #248]	; (80101c8 <tcp_receive+0x9c8>)
 80100ce:	483d      	ldr	r0, [pc, #244]	; (80101c4 <tcp_receive+0x9c4>)
 80100d0:	f005 fabe 	bl	8015650 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100d8:	4b37      	ldr	r3, [pc, #220]	; (80101b8 <tcp_receive+0x9b8>)
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	b29a      	uxth	r2, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7fd fbb5 	bl	800d854 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80100ea:	4b32      	ldr	r3, [pc, #200]	; (80101b4 <tcp_receive+0x9b4>)
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	891b      	ldrh	r3, [r3, #8]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d006      	beq.n	8010102 <tcp_receive+0x902>
          recv_data = inseg.p;
 80100f4:	4b2f      	ldr	r3, [pc, #188]	; (80101b4 <tcp_receive+0x9b4>)
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	4a34      	ldr	r2, [pc, #208]	; (80101cc <tcp_receive+0x9cc>)
 80100fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80100fc:	4b2d      	ldr	r3, [pc, #180]	; (80101b4 <tcp_receive+0x9b4>)
 80100fe:	2200      	movs	r2, #0
 8010100:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010102:	4b2c      	ldr	r3, [pc, #176]	; (80101b4 <tcp_receive+0x9b4>)
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	899b      	ldrh	r3, [r3, #12]
 8010108:	b29b      	uxth	r3, r3
 801010a:	4618      	mov	r0, r3
 801010c:	f7fb fd6c 	bl	800bbe8 <lwip_htons>
 8010110:	4603      	mov	r3, r0
 8010112:	f003 0301 	and.w	r3, r3, #1
 8010116:	2b00      	cmp	r3, #0
 8010118:	d006      	beq.n	8010128 <tcp_receive+0x928>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801011a:	4b2d      	ldr	r3, [pc, #180]	; (80101d0 <tcp_receive+0x9d0>)
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	f043 0320 	orr.w	r3, r3, #32
 8010122:	b2da      	uxtb	r2, r3
 8010124:	4b2a      	ldr	r3, [pc, #168]	; (80101d0 <tcp_receive+0x9d0>)
 8010126:	701a      	strb	r2, [r3, #0]
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	7e9b      	ldrb	r3, [r3, #26]
 801012c:	f003 0301 	and.w	r3, r3, #1
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00e      	beq.n	8010152 <tcp_receive+0x952>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	7e9b      	ldrb	r3, [r3, #26]
 8010138:	f023 0301 	bic.w	r3, r3, #1
 801013c:	b2da      	uxtb	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	769a      	strb	r2, [r3, #26]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	7e9b      	ldrb	r3, [r3, #26]
 8010146:	f043 0302 	orr.w	r3, r3, #2
 801014a:	b2da      	uxtb	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010150:	e00f      	b.n	8010172 <tcp_receive+0x972>
        tcp_ack(pcb);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	7e9b      	ldrb	r3, [r3, #26]
 8010156:	f043 0301 	orr.w	r3, r3, #1
 801015a:	b2da      	uxtb	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010160:	e007      	b.n	8010172 <tcp_receive+0x972>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 fb26 	bl	80107b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010168:	e003      	b.n	8010172 <tcp_receive+0x972>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fb22 	bl	80107b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010170:	e01a      	b.n	80101a8 <tcp_receive+0x9a8>
 8010172:	e019      	b.n	80101a8 <tcp_receive+0x9a8>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010174:	4b0e      	ldr	r3, [pc, #56]	; (80101b0 <tcp_receive+0x9b0>)
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	2b00      	cmp	r3, #0
 8010180:	db0a      	blt.n	8010198 <tcp_receive+0x998>
 8010182:	4b0b      	ldr	r3, [pc, #44]	; (80101b0 <tcp_receive+0x9b0>)
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801018a:	6879      	ldr	r1, [r7, #4]
 801018c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801018e:	440b      	add	r3, r1
 8010190:	1ad3      	subs	r3, r2, r3
 8010192:	3301      	adds	r3, #1
 8010194:	2b00      	cmp	r3, #0
 8010196:	dd07      	ble.n	80101a8 <tcp_receive+0x9a8>
      tcp_ack_now(pcb);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	7e9b      	ldrb	r3, [r3, #26]
 801019c:	f043 0302 	orr.w	r3, r3, #2
 80101a0:	b2da      	uxtb	r2, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80101a6:	e7ff      	b.n	80101a8 <tcp_receive+0x9a8>
 80101a8:	bf00      	nop
 80101aa:	372c      	adds	r7, #44	; 0x2c
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101b0:	20005fa0 	.word	0x20005fa0
 80101b4:	20005f80 	.word	0x20005f80
 80101b8:	20005faa 	.word	0x20005faa
 80101bc:	080178b4 	.word	0x080178b4
 80101c0:	08017b80 	.word	0x08017b80
 80101c4:	080178f8 	.word	0x080178f8
 80101c8:	08017bb8 	.word	0x08017bb8
 80101cc:	20005fb0 	.word	0x20005fb0
 80101d0:	20005fad 	.word	0x20005fad

080101d4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80101da:	4b18      	ldr	r3, [pc, #96]	; (801023c <tcp_getoptbyte+0x68>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d005      	beq.n	80101ee <tcp_getoptbyte+0x1a>
 80101e2:	4b17      	ldr	r3, [pc, #92]	; (8010240 <tcp_getoptbyte+0x6c>)
 80101e4:	881a      	ldrh	r2, [r3, #0]
 80101e6:	4b17      	ldr	r3, [pc, #92]	; (8010244 <tcp_getoptbyte+0x70>)
 80101e8:	881b      	ldrh	r3, [r3, #0]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d20e      	bcs.n	801020c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80101ee:	4b16      	ldr	r3, [pc, #88]	; (8010248 <tcp_getoptbyte+0x74>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3314      	adds	r3, #20
 80101f4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80101f6:	4b12      	ldr	r3, [pc, #72]	; (8010240 <tcp_getoptbyte+0x6c>)
 80101f8:	881b      	ldrh	r3, [r3, #0]
 80101fa:	1c5a      	adds	r2, r3, #1
 80101fc:	b291      	uxth	r1, r2
 80101fe:	4a10      	ldr	r2, [pc, #64]	; (8010240 <tcp_getoptbyte+0x6c>)
 8010200:	8011      	strh	r1, [r2, #0]
 8010202:	461a      	mov	r2, r3
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	4413      	add	r3, r2
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	e010      	b.n	801022e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 801020c:	4b0c      	ldr	r3, [pc, #48]	; (8010240 <tcp_getoptbyte+0x6c>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	1c5a      	adds	r2, r3, #1
 8010212:	b291      	uxth	r1, r2
 8010214:	4a0a      	ldr	r2, [pc, #40]	; (8010240 <tcp_getoptbyte+0x6c>)
 8010216:	8011      	strh	r1, [r2, #0]
 8010218:	b2da      	uxtb	r2, r3
 801021a:	4b0a      	ldr	r3, [pc, #40]	; (8010244 <tcp_getoptbyte+0x70>)
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	b2db      	uxtb	r3, r3
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8010224:	4b05      	ldr	r3, [pc, #20]	; (801023c <tcp_getoptbyte+0x68>)
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	4413      	add	r3, r2
 801022c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801022e:	4618      	mov	r0, r3
 8010230:	370c      	adds	r7, #12
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	20005f98 	.word	0x20005f98
 8010240:	20005f9c 	.word	0x20005f9c
 8010244:	20005f96 	.word	0x20005f96
 8010248:	20005f90 	.word	0x20005f90

0801024c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010254:	4b2d      	ldr	r3, [pc, #180]	; (801030c <tcp_parseopt+0xc0>)
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d053      	beq.n	8010304 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801025c:	4b2c      	ldr	r3, [pc, #176]	; (8010310 <tcp_parseopt+0xc4>)
 801025e:	2200      	movs	r2, #0
 8010260:	801a      	strh	r2, [r3, #0]
 8010262:	e043      	b.n	80102ec <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8010264:	f7ff ffb6 	bl	80101d4 <tcp_getoptbyte>
 8010268:	4603      	mov	r3, r0
 801026a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801026c:	7bfb      	ldrb	r3, [r7, #15]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d03c      	beq.n	80102ec <tcp_parseopt+0xa0>
 8010272:	2b02      	cmp	r3, #2
 8010274:	d002      	beq.n	801027c <tcp_parseopt+0x30>
 8010276:	2b00      	cmp	r3, #0
 8010278:	d03f      	beq.n	80102fa <tcp_parseopt+0xae>
 801027a:	e026      	b.n	80102ca <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801027c:	f7ff ffaa 	bl	80101d4 <tcp_getoptbyte>
 8010280:	4603      	mov	r3, r0
 8010282:	2b04      	cmp	r3, #4
 8010284:	d13b      	bne.n	80102fe <tcp_parseopt+0xb2>
 8010286:	4b22      	ldr	r3, [pc, #136]	; (8010310 <tcp_parseopt+0xc4>)
 8010288:	881b      	ldrh	r3, [r3, #0]
 801028a:	3302      	adds	r3, #2
 801028c:	4a1f      	ldr	r2, [pc, #124]	; (801030c <tcp_parseopt+0xc0>)
 801028e:	8812      	ldrh	r2, [r2, #0]
 8010290:	4293      	cmp	r3, r2
 8010292:	dc34      	bgt.n	80102fe <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8010294:	f7ff ff9e 	bl	80101d4 <tcp_getoptbyte>
 8010298:	4603      	mov	r3, r0
 801029a:	b29b      	uxth	r3, r3
 801029c:	021b      	lsls	r3, r3, #8
 801029e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80102a0:	f7ff ff98 	bl	80101d4 <tcp_getoptbyte>
 80102a4:	4603      	mov	r3, r0
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	89bb      	ldrh	r3, [r7, #12]
 80102aa:	4313      	orrs	r3, r2
 80102ac:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80102ae:	89bb      	ldrh	r3, [r7, #12]
 80102b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102b4:	d804      	bhi.n	80102c0 <tcp_parseopt+0x74>
 80102b6:	89bb      	ldrh	r3, [r7, #12]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d001      	beq.n	80102c0 <tcp_parseopt+0x74>
 80102bc:	89ba      	ldrh	r2, [r7, #12]
 80102be:	e001      	b.n	80102c4 <tcp_parseopt+0x78>
 80102c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80102c8:	e010      	b.n	80102ec <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80102ca:	f7ff ff83 	bl	80101d4 <tcp_getoptbyte>
 80102ce:	4603      	mov	r3, r0
 80102d0:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80102d2:	7afb      	ldrb	r3, [r7, #11]
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	d914      	bls.n	8010302 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80102d8:	7afb      	ldrb	r3, [r7, #11]
 80102da:	b29a      	uxth	r2, r3
 80102dc:	4b0c      	ldr	r3, [pc, #48]	; (8010310 <tcp_parseopt+0xc4>)
 80102de:	881b      	ldrh	r3, [r3, #0]
 80102e0:	4413      	add	r3, r2
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	3b02      	subs	r3, #2
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	4b09      	ldr	r3, [pc, #36]	; (8010310 <tcp_parseopt+0xc4>)
 80102ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102ec:	4b08      	ldr	r3, [pc, #32]	; (8010310 <tcp_parseopt+0xc4>)
 80102ee:	881a      	ldrh	r2, [r3, #0]
 80102f0:	4b06      	ldr	r3, [pc, #24]	; (801030c <tcp_parseopt+0xc0>)
 80102f2:	881b      	ldrh	r3, [r3, #0]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d3b5      	bcc.n	8010264 <tcp_parseopt+0x18>
 80102f8:	e004      	b.n	8010304 <tcp_parseopt+0xb8>
        return;
 80102fa:	bf00      	nop
 80102fc:	e002      	b.n	8010304 <tcp_parseopt+0xb8>
          return;
 80102fe:	bf00      	nop
 8010300:	e000      	b.n	8010304 <tcp_parseopt+0xb8>
          return;
 8010302:	bf00      	nop
      }
    }
  }
}
 8010304:	3710      	adds	r7, #16
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	20005f94 	.word	0x20005f94
 8010310:	20005f9c 	.word	0x20005f9c

08010314 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010314:	b480      	push	{r7}
 8010316:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010318:	4b05      	ldr	r3, [pc, #20]	; (8010330 <tcp_trigger_input_pcb_close+0x1c>)
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	f043 0310 	orr.w	r3, r3, #16
 8010320:	b2da      	uxtb	r2, r3
 8010322:	4b03      	ldr	r3, [pc, #12]	; (8010330 <tcp_trigger_input_pcb_close+0x1c>)
 8010324:	701a      	strb	r2, [r3, #0]
}
 8010326:	bf00      	nop
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr
 8010330:	20005fad 	.word	0x20005fad

08010334 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	607b      	str	r3, [r7, #4]
 801033e:	460b      	mov	r3, r1
 8010340:	817b      	strh	r3, [r7, #10]
 8010342:	4613      	mov	r3, r2
 8010344:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010346:	897a      	ldrh	r2, [r7, #10]
 8010348:	893b      	ldrh	r3, [r7, #8]
 801034a:	4413      	add	r3, r2
 801034c:	b29b      	uxth	r3, r3
 801034e:	3314      	adds	r3, #20
 8010350:	b29b      	uxth	r3, r3
 8010352:	2200      	movs	r2, #0
 8010354:	4619      	mov	r1, r3
 8010356:	2001      	movs	r0, #1
 8010358:	f7fc fa0e 	bl	800c778 <pbuf_alloc>
 801035c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d057      	beq.n	8010414 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	895b      	ldrh	r3, [r3, #10]
 8010368:	461a      	mov	r2, r3
 801036a:	897b      	ldrh	r3, [r7, #10]
 801036c:	3314      	adds	r3, #20
 801036e:	429a      	cmp	r2, r3
 8010370:	da05      	bge.n	801037e <tcp_output_alloc_header+0x4a>
 8010372:	4b2b      	ldr	r3, [pc, #172]	; (8010420 <tcp_output_alloc_header+0xec>)
 8010374:	2273      	movs	r2, #115	; 0x73
 8010376:	492b      	ldr	r1, [pc, #172]	; (8010424 <tcp_output_alloc_header+0xf0>)
 8010378:	482b      	ldr	r0, [pc, #172]	; (8010428 <tcp_output_alloc_header+0xf4>)
 801037a:	f005 f969 	bl	8015650 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	8adb      	ldrh	r3, [r3, #22]
 8010388:	4618      	mov	r0, r3
 801038a:	f7fb fc2d 	bl	800bbe8 <lwip_htons>
 801038e:	4603      	mov	r3, r0
 8010390:	461a      	mov	r2, r3
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	8b1b      	ldrh	r3, [r3, #24]
 801039a:	4618      	mov	r0, r3
 801039c:	f7fb fc24 	bl	800bbe8 <lwip_htons>
 80103a0:	4603      	mov	r3, r0
 80103a2:	461a      	mov	r2, r3
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fb fc26 	bl	800bc04 <lwip_htonl>
 80103b8:	4602      	mov	r2, r0
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80103be:	897b      	ldrh	r3, [r7, #10]
 80103c0:	089b      	lsrs	r3, r3, #2
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	3305      	adds	r3, #5
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	031b      	lsls	r3, r3, #12
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	f043 0310 	orr.w	r3, r3, #16
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fb fc08 	bl	800bbe8 <lwip_htons>
 80103d8:	4603      	mov	r3, r0
 80103da:	461a      	mov	r2, r3
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7fb fbff 	bl	800bbe8 <lwip_htons>
 80103ea:	4603      	mov	r3, r0
 80103ec:	461a      	mov	r2, r3
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	2200      	movs	r2, #0
 80103f6:	741a      	strb	r2, [r3, #16]
 80103f8:	2200      	movs	r2, #0
 80103fa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	2200      	movs	r2, #0
 8010400:	749a      	strb	r2, [r3, #18]
 8010402:	2200      	movs	r2, #0
 8010404:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040a:	68fa      	ldr	r2, [r7, #12]
 801040c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801040e:	441a      	add	r2, r3
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010414:	697b      	ldr	r3, [r7, #20]
}
 8010416:	4618      	mov	r0, r3
 8010418:	3718      	adds	r7, #24
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	08017bd8 	.word	0x08017bd8
 8010424:	08017c0c 	.word	0x08017c0c
 8010428:	08017c3c 	.word	0x08017c3c

0801042c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801042c:	b590      	push	{r4, r7, lr}
 801042e:	b085      	sub	sp, #20
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010438:	2b00      	cmp	r3, #0
 801043a:	d02d      	beq.n	8010498 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	e002      	b.n	801044a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1f8      	bne.n	8010444 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	899b      	ldrh	r3, [r3, #12]
 8010458:	b29b      	uxth	r3, r3
 801045a:	4618      	mov	r0, r3
 801045c:	f7fb fbc4 	bl	800bbe8 <lwip_htons>
 8010460:	4603      	mov	r3, r0
 8010462:	f003 0307 	and.w	r3, r3, #7
 8010466:	2b00      	cmp	r3, #0
 8010468:	d116      	bne.n	8010498 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	899b      	ldrh	r3, [r3, #12]
 8010470:	b29c      	uxth	r4, r3
 8010472:	2001      	movs	r0, #1
 8010474:	f7fb fbb8 	bl	800bbe8 <lwip_htons>
 8010478:	4603      	mov	r3, r0
 801047a:	461a      	mov	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	4322      	orrs	r2, r4
 8010482:	b292      	uxth	r2, r2
 8010484:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	7e9b      	ldrb	r3, [r3, #26]
 801048a:	f043 0320 	orr.w	r3, r3, #32
 801048e:	b2da      	uxtb	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8010494:	2300      	movs	r3, #0
 8010496:	e004      	b.n	80104a2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010498:	2101      	movs	r1, #1
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f000 f88e 	bl	80105bc <tcp_enqueue_flags>
 80104a0:	4603      	mov	r3, r0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3714      	adds	r7, #20
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd90      	pop	{r4, r7, pc}
	...

080104ac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80104ac:	b590      	push	{r4, r7, lr}
 80104ae:	b087      	sub	sp, #28
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	603b      	str	r3, [r7, #0]
 80104b8:	4613      	mov	r3, r2
 80104ba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80104bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	f003 0304 	and.w	r3, r3, #4
 80104c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80104ca:	2003      	movs	r0, #3
 80104cc:	f7fb ff7a 	bl	800c3c4 <memp_malloc>
 80104d0:	6138      	str	r0, [r7, #16]
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d104      	bne.n	80104e2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80104d8:	68b8      	ldr	r0, [r7, #8]
 80104da:	f7fc fcbb 	bl	800ce54 <pbuf_free>
    return NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	e061      	b.n	80105a6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80104e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	2200      	movs	r2, #0
 80104ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	68ba      	ldr	r2, [r7, #8]
 80104f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	891a      	ldrh	r2, [r3, #8]
 80104fa:	7dfb      	ldrb	r3, [r7, #23]
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	429a      	cmp	r2, r3
 8010500:	d205      	bcs.n	801050e <tcp_create_segment+0x62>
 8010502:	4b2b      	ldr	r3, [pc, #172]	; (80105b0 <tcp_create_segment+0x104>)
 8010504:	22ba      	movs	r2, #186	; 0xba
 8010506:	492b      	ldr	r1, [pc, #172]	; (80105b4 <tcp_create_segment+0x108>)
 8010508:	482b      	ldr	r0, [pc, #172]	; (80105b8 <tcp_create_segment+0x10c>)
 801050a:	f005 f8a1 	bl	8015650 <iprintf>
  seg->len = p->tot_len - optlen;
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	891a      	ldrh	r2, [r3, #8]
 8010512:	7dfb      	ldrb	r3, [r7, #23]
 8010514:	b29b      	uxth	r3, r3
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	b29a      	uxth	r2, r3
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 801051e:	2114      	movs	r1, #20
 8010520:	68b8      	ldr	r0, [r7, #8]
 8010522:	f7fc fc73 	bl	800ce0c <pbuf_header>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d004      	beq.n	8010536 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801052c:	6938      	ldr	r0, [r7, #16]
 801052e:	f7fd fdb4 	bl	800e09a <tcp_seg_free>
    return NULL;
 8010532:	2300      	movs	r3, #0
 8010534:	e037      	b.n	80105a6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	685a      	ldr	r2, [r3, #4]
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	8ada      	ldrh	r2, [r3, #22]
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	68dc      	ldr	r4, [r3, #12]
 8010548:	4610      	mov	r0, r2
 801054a:	f7fb fb4d 	bl	800bbe8 <lwip_htons>
 801054e:	4603      	mov	r3, r0
 8010550:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	8b1a      	ldrh	r2, [r3, #24]
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	68dc      	ldr	r4, [r3, #12]
 801055a:	4610      	mov	r0, r2
 801055c:	f7fb fb44 	bl	800bbe8 <lwip_htons>
 8010560:	4603      	mov	r3, r0
 8010562:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	68dc      	ldr	r4, [r3, #12]
 8010568:	6838      	ldr	r0, [r7, #0]
 801056a:	f7fb fb4b 	bl	800bc04 <lwip_htonl>
 801056e:	4603      	mov	r3, r0
 8010570:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8010572:	7dfb      	ldrb	r3, [r7, #23]
 8010574:	089b      	lsrs	r3, r3, #2
 8010576:	b2db      	uxtb	r3, r3
 8010578:	b29b      	uxth	r3, r3
 801057a:	3305      	adds	r3, #5
 801057c:	b29b      	uxth	r3, r3
 801057e:	031b      	lsls	r3, r3, #12
 8010580:	b29a      	uxth	r2, r3
 8010582:	79fb      	ldrb	r3, [r7, #7]
 8010584:	b29b      	uxth	r3, r3
 8010586:	4313      	orrs	r3, r2
 8010588:	b29a      	uxth	r2, r3
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	68dc      	ldr	r4, [r3, #12]
 801058e:	4610      	mov	r0, r2
 8010590:	f7fb fb2a 	bl	800bbe8 <lwip_htons>
 8010594:	4603      	mov	r3, r0
 8010596:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	2200      	movs	r2, #0
 801059e:	749a      	strb	r2, [r3, #18]
 80105a0:	2200      	movs	r2, #0
 80105a2:	74da      	strb	r2, [r3, #19]
  return seg;
 80105a4:	693b      	ldr	r3, [r7, #16]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	371c      	adds	r7, #28
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd90      	pop	{r4, r7, pc}
 80105ae:	bf00      	nop
 80105b0:	08017bd8 	.word	0x08017bd8
 80105b4:	08017c64 	.word	0x08017c64
 80105b8:	08017c3c 	.word	0x08017c3c

080105bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b08a      	sub	sp, #40	; 0x28
 80105c0:	af02      	add	r7, sp, #8
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	460b      	mov	r3, r1
 80105c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80105cc:	2300      	movs	r3, #0
 80105ce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80105d0:	78fb      	ldrb	r3, [r7, #3]
 80105d2:	f003 0303 	and.w	r3, r3, #3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d106      	bne.n	80105e8 <tcp_enqueue_flags+0x2c>
 80105da:	4b6f      	ldr	r3, [pc, #444]	; (8010798 <tcp_enqueue_flags+0x1dc>)
 80105dc:	f240 321b 	movw	r2, #795	; 0x31b
 80105e0:	496e      	ldr	r1, [pc, #440]	; (801079c <tcp_enqueue_flags+0x1e0>)
 80105e2:	486f      	ldr	r0, [pc, #444]	; (80107a0 <tcp_enqueue_flags+0x1e4>)
 80105e4:	f005 f834 	bl	8015650 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80105f2:	d206      	bcs.n	8010602 <tcp_enqueue_flags+0x46>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105fa:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80105fe:	4293      	cmp	r3, r2
 8010600:	d90e      	bls.n	8010620 <tcp_enqueue_flags+0x64>
      ((flags & TCP_FIN) == 0)) {
 8010602:	78fb      	ldrb	r3, [r7, #3]
 8010604:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010608:	2b00      	cmp	r3, #0
 801060a:	d109      	bne.n	8010620 <tcp_enqueue_flags+0x64>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	7e9b      	ldrb	r3, [r3, #26]
 8010610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010614:	b2da      	uxtb	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801061a:	f04f 33ff 	mov.w	r3, #4294967295
 801061e:	e0b7      	b.n	8010790 <tcp_enqueue_flags+0x1d4>
  }

  if (flags & TCP_SYN) {
 8010620:	78fb      	ldrb	r3, [r7, #3]
 8010622:	f003 0302 	and.w	r3, r3, #2
 8010626:	2b00      	cmp	r3, #0
 8010628:	d001      	beq.n	801062e <tcp_enqueue_flags+0x72>
    optflags = TF_SEG_OPTS_MSS;
 801062a:	2301      	movs	r3, #1
 801062c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801062e:	7ffb      	ldrb	r3, [r7, #31]
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	b2db      	uxtb	r3, r3
 8010634:	f003 0304 	and.w	r3, r3, #4
 8010638:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801063a:	7dfb      	ldrb	r3, [r7, #23]
 801063c:	b29b      	uxth	r3, r3
 801063e:	2200      	movs	r2, #0
 8010640:	4619      	mov	r1, r3
 8010642:	2000      	movs	r0, #0
 8010644:	f7fc f898 	bl	800c778 <pbuf_alloc>
 8010648:	6138      	str	r0, [r7, #16]
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d109      	bne.n	8010664 <tcp_enqueue_flags+0xa8>
    pcb->flags |= TF_NAGLEMEMERR;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	7e9b      	ldrb	r3, [r3, #26]
 8010654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010658:	b2da      	uxtb	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801065e:	f04f 33ff 	mov.w	r3, #4294967295
 8010662:	e095      	b.n	8010790 <tcp_enqueue_flags+0x1d4>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	895a      	ldrh	r2, [r3, #10]
 8010668:	7dfb      	ldrb	r3, [r7, #23]
 801066a:	b29b      	uxth	r3, r3
 801066c:	429a      	cmp	r2, r3
 801066e:	d206      	bcs.n	801067e <tcp_enqueue_flags+0xc2>
 8010670:	4b49      	ldr	r3, [pc, #292]	; (8010798 <tcp_enqueue_flags+0x1dc>)
 8010672:	f240 3241 	movw	r2, #833	; 0x341
 8010676:	494b      	ldr	r1, [pc, #300]	; (80107a4 <tcp_enqueue_flags+0x1e8>)
 8010678:	4849      	ldr	r0, [pc, #292]	; (80107a0 <tcp_enqueue_flags+0x1e4>)
 801067a:	f004 ffe9 	bl	8015650 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010682:	78fa      	ldrb	r2, [r7, #3]
 8010684:	7ffb      	ldrb	r3, [r7, #31]
 8010686:	9300      	str	r3, [sp, #0]
 8010688:	460b      	mov	r3, r1
 801068a:	6939      	ldr	r1, [r7, #16]
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7ff ff0d 	bl	80104ac <tcp_create_segment>
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d109      	bne.n	80106ae <tcp_enqueue_flags+0xf2>
    pcb->flags |= TF_NAGLEMEMERR;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	7e9b      	ldrb	r3, [r3, #26]
 801069e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80106a8:	f04f 33ff 	mov.w	r3, #4294967295
 80106ac:	e070      	b.n	8010790 <tcp_enqueue_flags+0x1d4>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	f003 0303 	and.w	r3, r3, #3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d006      	beq.n	80106c8 <tcp_enqueue_flags+0x10c>
 80106ba:	4b37      	ldr	r3, [pc, #220]	; (8010798 <tcp_enqueue_flags+0x1dc>)
 80106bc:	f240 3249 	movw	r2, #841	; 0x349
 80106c0:	4939      	ldr	r1, [pc, #228]	; (80107a8 <tcp_enqueue_flags+0x1ec>)
 80106c2:	4837      	ldr	r0, [pc, #220]	; (80107a0 <tcp_enqueue_flags+0x1e4>)
 80106c4:	f004 ffc4 	bl	8015650 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	891b      	ldrh	r3, [r3, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d006      	beq.n	80106de <tcp_enqueue_flags+0x122>
 80106d0:	4b31      	ldr	r3, [pc, #196]	; (8010798 <tcp_enqueue_flags+0x1dc>)
 80106d2:	f240 324a 	movw	r2, #842	; 0x34a
 80106d6:	4935      	ldr	r1, [pc, #212]	; (80107ac <tcp_enqueue_flags+0x1f0>)
 80106d8:	4831      	ldr	r0, [pc, #196]	; (80107a0 <tcp_enqueue_flags+0x1e4>)
 80106da:	f004 ffb9 	bl	8015650 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d103      	bne.n	80106ee <tcp_enqueue_flags+0x132>
    pcb->unsent = seg;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	669a      	str	r2, [r3, #104]	; 0x68
 80106ec:	e00d      	b.n	801070a <tcp_enqueue_flags+0x14e>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106f2:	61bb      	str	r3, [r7, #24]
 80106f4:	e002      	b.n	80106fc <tcp_enqueue_flags+0x140>
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	61bb      	str	r3, [r7, #24]
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d1f8      	bne.n	80106f6 <tcp_enqueue_flags+0x13a>
    useg->next = seg;
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2200      	movs	r2, #0
 801070e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010712:	78fb      	ldrb	r3, [r7, #3]
 8010714:	f003 0302 	and.w	r3, r3, #2
 8010718:	2b00      	cmp	r3, #0
 801071a:	d104      	bne.n	8010726 <tcp_enqueue_flags+0x16a>
 801071c:	78fb      	ldrb	r3, [r7, #3]
 801071e:	f003 0301 	and.w	r3, r3, #1
 8010722:	2b00      	cmp	r3, #0
 8010724:	d004      	beq.n	8010730 <tcp_enqueue_flags+0x174>
    pcb->snd_lbb++;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010730:	78fb      	ldrb	r3, [r7, #3]
 8010732:	f003 0301 	and.w	r3, r3, #1
 8010736:	2b00      	cmp	r3, #0
 8010738:	d006      	beq.n	8010748 <tcp_enqueue_flags+0x18c>
    pcb->flags |= TF_FIN;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7e9b      	ldrb	r3, [r3, #26]
 801073e:	f043 0320 	orr.w	r3, r3, #32
 8010742:	b2da      	uxtb	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	4618      	mov	r0, r3
 801074e:	f7fc fc1b 	bl	800cf88 <pbuf_clen>
 8010752:	4603      	mov	r3, r0
 8010754:	461a      	mov	r2, r3
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801075c:	4413      	add	r3, r2
 801075e:	b29a      	uxth	r2, r3
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00e      	beq.n	801078e <tcp_enqueue_flags+0x1d2>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010774:	2b00      	cmp	r3, #0
 8010776:	d10a      	bne.n	801078e <tcp_enqueue_flags+0x1d2>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801077c:	2b00      	cmp	r3, #0
 801077e:	d106      	bne.n	801078e <tcp_enqueue_flags+0x1d2>
 8010780:	4b05      	ldr	r3, [pc, #20]	; (8010798 <tcp_enqueue_flags+0x1dc>)
 8010782:	f240 326d 	movw	r2, #877	; 0x36d
 8010786:	490a      	ldr	r1, [pc, #40]	; (80107b0 <tcp_enqueue_flags+0x1f4>)
 8010788:	4805      	ldr	r0, [pc, #20]	; (80107a0 <tcp_enqueue_flags+0x1e4>)
 801078a:	f004 ff61 	bl	8015650 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3720      	adds	r7, #32
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	08017bd8 	.word	0x08017bd8
 801079c:	08017edc 	.word	0x08017edc
 80107a0:	08017c3c 	.word	0x08017c3c
 80107a4:	08017f34 	.word	0x08017f34
 80107a8:	08017f70 	.word	0x08017f70
 80107ac:	08017f88 	.word	0x08017f88
 80107b0:	08017fb4 	.word	0x08017fb4

080107b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80107b4:	b590      	push	{r4, r7, lr}
 80107b6:	b08b      	sub	sp, #44	; 0x2c
 80107b8:	af04      	add	r7, sp, #16
 80107ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80107bc:	2300      	movs	r3, #0
 80107be:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80107c0:	7dbb      	ldrb	r3, [r7, #22]
 80107c2:	b29c      	uxth	r4, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fb fa1b 	bl	800bc04 <lwip_htonl>
 80107ce:	4603      	mov	r3, r0
 80107d0:	2200      	movs	r2, #0
 80107d2:	4621      	mov	r1, r4
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f7ff fdad 	bl	8010334 <tcp_output_alloc_header>
 80107da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d109      	bne.n	80107f6 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7e9b      	ldrb	r3, [r3, #26]
 80107e6:	f043 0303 	orr.w	r3, r3, #3
 80107ea:	b2da      	uxtb	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80107f0:	f06f 0301 	mvn.w	r3, #1
 80107f4:	e036      	b.n	8010864 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	3304      	adds	r3, #4
 80107fa:	4618      	mov	r0, r3
 80107fc:	f002 f8ae 	bl	801295c <ip4_route>
 8010800:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d102      	bne.n	801080e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8010808:	23fc      	movs	r3, #252	; 0xfc
 801080a:	75fb      	strb	r3, [r7, #23]
 801080c:	e012      	b.n	8010834 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801080e:	6879      	ldr	r1, [r7, #4]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	1d18      	adds	r0, r3, #4
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	7a9c      	ldrb	r4, [r3, #10]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	7a5b      	ldrb	r3, [r3, #9]
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	9202      	str	r2, [sp, #8]
 8010820:	2206      	movs	r2, #6
 8010822:	9201      	str	r2, [sp, #4]
 8010824:	9300      	str	r3, [sp, #0]
 8010826:	4623      	mov	r3, r4
 8010828:	4602      	mov	r2, r0
 801082a:	6938      	ldr	r0, [r7, #16]
 801082c:	f002 fa3e 	bl	8012cac <ip4_output_if>
 8010830:	4603      	mov	r3, r0
 8010832:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8010834:	6938      	ldr	r0, [r7, #16]
 8010836:	f7fc fb0d 	bl	800ce54 <pbuf_free>

  if (err != ERR_OK) {
 801083a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d007      	beq.n	8010852 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	7e9b      	ldrb	r3, [r3, #26]
 8010846:	f043 0303 	orr.w	r3, r3, #3
 801084a:	b2da      	uxtb	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	769a      	strb	r2, [r3, #26]
 8010850:	e006      	b.n	8010860 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	7e9b      	ldrb	r3, [r3, #26]
 8010856:	f023 0303 	bic.w	r3, r3, #3
 801085a:	b2da      	uxtb	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8010860:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010864:	4618      	mov	r0, r3
 8010866:	371c      	adds	r7, #28
 8010868:	46bd      	mov	sp, r7
 801086a:	bd90      	pop	{r4, r7, pc}

0801086c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801086c:	b5b0      	push	{r4, r5, r7, lr}
 801086e:	b08a      	sub	sp, #40	; 0x28
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	7d1b      	ldrb	r3, [r3, #20]
 8010878:	2b01      	cmp	r3, #1
 801087a:	d106      	bne.n	801088a <tcp_output+0x1e>
 801087c:	4b9c      	ldr	r3, [pc, #624]	; (8010af0 <tcp_output+0x284>)
 801087e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8010882:	499c      	ldr	r1, [pc, #624]	; (8010af4 <tcp_output+0x288>)
 8010884:	489c      	ldr	r0, [pc, #624]	; (8010af8 <tcp_output+0x28c>)
 8010886:	f004 fee3 	bl	8015650 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801088a:	4b9c      	ldr	r3, [pc, #624]	; (8010afc <tcp_output+0x290>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	429a      	cmp	r2, r3
 8010892:	d101      	bne.n	8010898 <tcp_output+0x2c>
    return ERR_OK;
 8010894:	2300      	movs	r3, #0
 8010896:	e1d1      	b.n	8010c3c <tcp_output+0x3d0>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d203      	bcs.n	80108b0 <tcp_output+0x44>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108ae:	e002      	b.n	80108b6 <tcp_output+0x4a>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108b6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108bc:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	7e9b      	ldrb	r3, [r3, #26]
 80108c2:	f003 0302 	and.w	r3, r3, #2
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d017      	beq.n	80108fa <tcp_output+0x8e>
 80108ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00f      	beq.n	80108f0 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80108d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fb f994 	bl	800bc04 <lwip_htonl>
 80108dc:	4602      	mov	r2, r0
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108e2:	1ad3      	subs	r3, r2, r3
 80108e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108e6:	8912      	ldrh	r2, [r2, #8]
 80108e8:	4413      	add	r3, r2
     (seg == NULL ||
 80108ea:	69ba      	ldr	r2, [r7, #24]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d204      	bcs.n	80108fa <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f7ff ff5f 	bl	80107b4 <tcp_send_empty_ack>
 80108f6:	4603      	mov	r3, r0
 80108f8:	e1a0      	b.n	8010c3c <tcp_output+0x3d0>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108fe:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010900:	6a3b      	ldr	r3, [r7, #32]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d007      	beq.n	8010916 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8010906:	e002      	b.n	801090e <tcp_output+0xa2>
 8010908:	6a3b      	ldr	r3, [r7, #32]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	623b      	str	r3, [r7, #32]
 801090e:	6a3b      	ldr	r3, [r7, #32]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d1f8      	bne.n	8010908 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	3304      	adds	r3, #4
 801091a:	4618      	mov	r0, r3
 801091c:	f002 f81e 	bl	801295c <ip4_route>
 8010920:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d102      	bne.n	801092e <tcp_output+0xc2>
    return ERR_RTE;
 8010928:	f06f 0303 	mvn.w	r3, #3
 801092c:	e186      	b.n	8010c3c <tcp_output+0x3d0>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d003      	beq.n	801093c <tcp_output+0xd0>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d111      	bne.n	8010960 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d002      	beq.n	8010948 <tcp_output+0xdc>
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	3304      	adds	r3, #4
 8010946:	e000      	b.n	801094a <tcp_output+0xde>
 8010948:	2300      	movs	r3, #0
 801094a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d102      	bne.n	8010958 <tcp_output+0xec>
      return ERR_RTE;
 8010952:	f06f 0303 	mvn.w	r3, #3
 8010956:	e171      	b.n	8010c3c <tcp_output+0x3d0>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	2b00      	cmp	r3, #0
 8010964:	f000 8140 	beq.w	8010be8 <tcp_output+0x37c>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8010968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	4618      	mov	r0, r3
 8010970:	f7fb f948 	bl	800bc04 <lwip_htonl>
 8010974:	4602      	mov	r2, r0
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801097a:	1ad3      	subs	r3, r2, r3
 801097c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801097e:	8912      	ldrh	r2, [r2, #8]
 8010980:	4413      	add	r3, r2
  if (seg != NULL &&
 8010982:	69ba      	ldr	r2, [r7, #24]
 8010984:	429a      	cmp	r2, r3
 8010986:	f080 812f 	bcs.w	8010be8 <tcp_output+0x37c>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 812b 	beq.w	8010be8 <tcp_output+0x37c>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010998:	461a      	mov	r2, r3
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	4293      	cmp	r3, r2
 801099e:	f040 8123 	bne.w	8010be8 <tcp_output+0x37c>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f040 811e 	bne.w	8010be8 <tcp_output+0x37c>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f040 812d 	bne.w	8010c12 <tcp_output+0x3a6>
      pcb->persist_cnt = 0;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      pcb->persist_backoff = 1;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2201      	movs	r2, #1
 80109c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    }
    goto output_done;
 80109c8:	e123      	b.n	8010c12 <tcp_output+0x3a6>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	899b      	ldrh	r3, [r3, #12]
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fb f908 	bl	800bbe8 <lwip_htons>
 80109d8:	4603      	mov	r3, r0
 80109da:	f003 0304 	and.w	r3, r3, #4
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d006      	beq.n	80109f0 <tcp_output+0x184>
 80109e2:	4b43      	ldr	r3, [pc, #268]	; (8010af0 <tcp_output+0x284>)
 80109e4:	f240 4246 	movw	r2, #1094	; 0x446
 80109e8:	4945      	ldr	r1, [pc, #276]	; (8010b00 <tcp_output+0x294>)
 80109ea:	4843      	ldr	r0, [pc, #268]	; (8010af8 <tcp_output+0x28c>)
 80109ec:	f004 fe30 	bl	8015650 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d020      	beq.n	8010a3a <tcp_output+0x1ce>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	7e9b      	ldrb	r3, [r3, #26]
 80109fc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d11a      	bne.n	8010a3a <tcp_output+0x1ce>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00b      	beq.n	8010a24 <tcp_output+0x1b8>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d111      	bne.n	8010a3a <tcp_output+0x1ce>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a1a:	891a      	ldrh	r2, [r3, #8]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d20a      	bcs.n	8010a3a <tcp_output+0x1ce>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d005      	beq.n	8010a3a <tcp_output+0x1ce>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a34:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8010a38:	d301      	bcc.n	8010a3e <tcp_output+0x1d2>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	e000      	b.n	8010a40 <tcp_output+0x1d4>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d106      	bne.n	8010a52 <tcp_output+0x1e6>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	7e9b      	ldrb	r3, [r3, #26]
 8010a48:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f000 80e2 	beq.w	8010c16 <tcp_output+0x3aa>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	7d1b      	ldrb	r3, [r3, #20]
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d00d      	beq.n	8010a76 <tcp_output+0x20a>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	899b      	ldrh	r3, [r3, #12]
 8010a60:	b29c      	uxth	r4, r3
 8010a62:	2010      	movs	r0, #16
 8010a64:	f7fb f8c0 	bl	800bbe8 <lwip_htons>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	4322      	orrs	r2, r4
 8010a72:	b292      	uxth	r2, r2
 8010a74:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8010a76:	697a      	ldr	r2, [r7, #20]
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a7c:	f000 f8e2 	bl	8010c44 <tcp_output_segment>
 8010a80:	4603      	mov	r3, r0
 8010a82:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d009      	beq.n	8010aa0 <tcp_output+0x234>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	7e9b      	ldrb	r3, [r3, #26]
 8010a90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010a94:	b2da      	uxtb	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	769a      	strb	r2, [r3, #26]
      return err;
 8010a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a9e:	e0cd      	b.n	8010c3c <tcp_output+0x3d0>
    }
    pcb->unsent = seg->next;
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	7d1b      	ldrb	r3, [r3, #20]
 8010aac:	2b02      	cmp	r3, #2
 8010aae:	d006      	beq.n	8010abe <tcp_output+0x252>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	7e9b      	ldrb	r3, [r3, #26]
 8010ab4:	f023 0303 	bic.w	r3, r3, #3
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fb f89d 	bl	800bc04 <lwip_htonl>
 8010aca:	4604      	mov	r4, r0
 8010acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ace:	891b      	ldrh	r3, [r3, #8]
 8010ad0:	461d      	mov	r5, r3
 8010ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad4:	68db      	ldr	r3, [r3, #12]
 8010ad6:	899b      	ldrh	r3, [r3, #12]
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fb f884 	bl	800bbe8 <lwip_htons>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	f003 0303 	and.w	r3, r3, #3
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d00c      	beq.n	8010b04 <tcp_output+0x298>
 8010aea:	2301      	movs	r3, #1
 8010aec:	e00b      	b.n	8010b06 <tcp_output+0x29a>
 8010aee:	bf00      	nop
 8010af0:	08017bd8 	.word	0x08017bd8
 8010af4:	08017fdc 	.word	0x08017fdc
 8010af8:	08017c3c 	.word	0x08017c3c
 8010afc:	200176b0 	.word	0x200176b0
 8010b00:	08018004 	.word	0x08018004
 8010b04:	2300      	movs	r3, #0
 8010b06:	442b      	add	r3, r5
 8010b08:	4423      	add	r3, r4
 8010b0a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	da02      	bge.n	8010b1e <tcp_output+0x2b2>
      pcb->snd_nxt = snd_nxt;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	891b      	ldrh	r3, [r3, #8]
 8010b22:	461c      	mov	r4, r3
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	899b      	ldrh	r3, [r3, #12]
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7fb f85b 	bl	800bbe8 <lwip_htons>
 8010b32:	4603      	mov	r3, r0
 8010b34:	f003 0303 	and.w	r3, r3, #3
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d001      	beq.n	8010b40 <tcp_output+0x2d4>
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	e000      	b.n	8010b42 <tcp_output+0x2d6>
 8010b40:	2300      	movs	r3, #0
 8010b42:	4423      	add	r3, r4
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d049      	beq.n	8010bdc <tcp_output+0x370>
      seg->next = NULL;
 8010b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d105      	bne.n	8010b62 <tcp_output+0x2f6>
        pcb->unacked = seg;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b5a:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5e:	623b      	str	r3, [r7, #32]
 8010b60:	e03f      	b.n	8010be2 <tcp_output+0x376>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fb f84b 	bl	800bc04 <lwip_htonl>
 8010b6e:	4604      	mov	r4, r0
 8010b70:	6a3b      	ldr	r3, [r7, #32]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7fb f844 	bl	800bc04 <lwip_htonl>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	1ae3      	subs	r3, r4, r3
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	da24      	bge.n	8010bce <tcp_output+0x362>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	336c      	adds	r3, #108	; 0x6c
 8010b88:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010b8a:	e002      	b.n	8010b92 <tcp_output+0x326>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d011      	beq.n	8010bbe <tcp_output+0x352>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010b9a:	69fb      	ldr	r3, [r7, #28]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7fb f82e 	bl	800bc04 <lwip_htonl>
 8010ba8:	4604      	mov	r4, r0
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7fb f827 	bl	800bc04 <lwip_htonl>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dbe6      	blt.n	8010b8c <tcp_output+0x320>
          }
          seg->next = (*cur_seg);
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bca:	601a      	str	r2, [r3, #0]
 8010bcc:	e009      	b.n	8010be2 <tcp_output+0x376>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010bce:	6a3b      	ldr	r3, [r7, #32]
 8010bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bd2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010bd4:	6a3b      	ldr	r3, [r7, #32]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	623b      	str	r3, [r7, #32]
 8010bda:	e002      	b.n	8010be2 <tcp_output+0x376>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bde:	f7fd fa5c 	bl	800e09a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d015      	beq.n	8010c1a <tcp_output+0x3ae>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7fb f805 	bl	800bc04 <lwip_htonl>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c00:	1ad3      	subs	r3, r2, r3
 8010c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c04:	8912      	ldrh	r2, [r2, #8]
 8010c06:	4413      	add	r3, r2
  while (seg != NULL &&
 8010c08:	69ba      	ldr	r2, [r7, #24]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	f4bf aedd 	bcs.w	80109ca <tcp_output+0x15e>
  }
output_done:
 8010c10:	e003      	b.n	8010c1a <tcp_output+0x3ae>
    goto output_done;
 8010c12:	bf00      	nop
 8010c14:	e002      	b.n	8010c1c <tcp_output+0x3b0>
      break;
 8010c16:	bf00      	nop
 8010c18:	e000      	b.n	8010c1c <tcp_output+0x3b0>
output_done:
 8010c1a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d103      	bne.n	8010c2c <tcp_output+0x3c0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	7e9b      	ldrb	r3, [r3, #26]
 8010c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c34:	b2da      	uxtb	r2, r3
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3728      	adds	r7, #40	; 0x28
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bdb0      	pop	{r4, r5, r7, pc}

08010c44 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010c44:	b5b0      	push	{r4, r5, r7, lr}
 8010c46:	b08c      	sub	sp, #48	; 0x30
 8010c48:	af04      	add	r7, sp, #16
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	89db      	ldrh	r3, [r3, #14]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d001      	beq.n	8010c5e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e08b      	b.n	8010d76 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	68dc      	ldr	r4, [r3, #12]
 8010c66:	4610      	mov	r0, r2
 8010c68:	f7fa ffcc 	bl	800bc04 <lwip_htonl>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	68dc      	ldr	r4, [r3, #12]
 8010c78:	4610      	mov	r0, r2
 8010c7a:	f7fa ffb5 	bl	800bbe8 <lwip_htons>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010c8a:	441a      	add	r2, r3
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	3314      	adds	r3, #20
 8010c96:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	7a9b      	ldrb	r3, [r3, #10]
 8010c9c:	f003 0301 	and.w	r3, r3, #1
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d014      	beq.n	8010cce <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	3304      	adds	r3, #4
 8010ca8:	4619      	mov	r1, r3
 8010caa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010cae:	f7fd fc2b 	bl	800e508 <tcp_eff_send_mss_impl>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010cb6:	8b7b      	ldrh	r3, [r7, #26]
 8010cb8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fa ffa1 	bl	800bc04 <lwip_htonl>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010cc8:	69fb      	ldr	r3, [r7, #28]
 8010cca:	3304      	adds	r3, #4
 8010ccc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	da02      	bge.n	8010cde <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d10c      	bne.n	8010d00 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8010ce6:	4b26      	ldr	r3, [pc, #152]	; (8010d80 <tcp_output_segment+0x13c>)
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fa ff85 	bl	800bc04 <lwip_htonl>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	461a      	mov	r2, r3
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	1ad3      	subs	r3, r2, r3
 8010d0e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	8959      	ldrh	r1, [r3, #10]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	8b3a      	ldrh	r2, [r7, #24]
 8010d1c:	1a8a      	subs	r2, r1, r2
 8010d1e:	b292      	uxth	r2, r2
 8010d20:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	8919      	ldrh	r1, [r3, #8]
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	8b3a      	ldrh	r2, [r7, #24]
 8010d2e:	1a8a      	subs	r2, r1, r2
 8010d30:	b292      	uxth	r2, r2
 8010d32:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	68fa      	ldr	r2, [r7, #12]
 8010d3a:	68d2      	ldr	r2, [r2, #12]
 8010d3c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	68db      	ldr	r3, [r3, #12]
 8010d42:	2200      	movs	r2, #0
 8010d44:	741a      	strb	r2, [r3, #16]
 8010d46:	2200      	movs	r2, #0
 8010d48:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	6858      	ldr	r0, [r3, #4]
 8010d4e:	68b9      	ldr	r1, [r7, #8]
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	1d1c      	adds	r4, r3, #4
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	7a9d      	ldrb	r5, [r3, #10]
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	7a5b      	ldrb	r3, [r3, #9]
 8010d5c:	687a      	ldr	r2, [r7, #4]
 8010d5e:	9202      	str	r2, [sp, #8]
 8010d60:	2206      	movs	r2, #6
 8010d62:	9201      	str	r2, [sp, #4]
 8010d64:	9300      	str	r3, [sp, #0]
 8010d66:	462b      	mov	r3, r5
 8010d68:	4622      	mov	r2, r4
 8010d6a:	f001 ff9f 	bl	8012cac <ip4_output_if>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8010d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3720      	adds	r7, #32
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	200176a0 	.word	0x200176a0

08010d84 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b08c      	sub	sp, #48	; 0x30
 8010d88:	af04      	add	r7, sp, #16
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
 8010d90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8010d92:	2200      	movs	r2, #0
 8010d94:	2114      	movs	r1, #20
 8010d96:	2001      	movs	r0, #1
 8010d98:	f7fb fcee 	bl	800c778 <pbuf_alloc>
 8010d9c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d059      	beq.n	8010e58 <tcp_rst+0xd4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	895b      	ldrh	r3, [r3, #10]
 8010da8:	2b13      	cmp	r3, #19
 8010daa:	d806      	bhi.n	8010dba <tcp_rst+0x36>
 8010dac:	4b2c      	ldr	r3, [pc, #176]	; (8010e60 <tcp_rst+0xdc>)
 8010dae:	f240 524d 	movw	r2, #1357	; 0x54d
 8010db2:	492c      	ldr	r1, [pc, #176]	; (8010e64 <tcp_rst+0xe0>)
 8010db4:	482c      	ldr	r0, [pc, #176]	; (8010e68 <tcp_rst+0xe4>)
 8010db6:	f004 fc4b 	bl	8015650 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8010dc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fa ff10 	bl	800bbe8 <lwip_htons>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	461a      	mov	r2, r3
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8010dd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fa ff08 	bl	800bbe8 <lwip_htons>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	461a      	mov	r2, r3
 8010ddc:	69bb      	ldr	r3, [r7, #24]
 8010dde:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f7fa ff0f 	bl	800bc04 <lwip_htonl>
 8010de6:	4602      	mov	r2, r0
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8010dec:	68b8      	ldr	r0, [r7, #8]
 8010dee:	f7fa ff09 	bl	800bc04 <lwip_htonl>
 8010df2:	4602      	mov	r2, r0
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8010df8:	f245 0014 	movw	r0, #20500	; 0x5014
 8010dfc:	f7fa fef4 	bl	800bbe8 <lwip_htons>
 8010e00:	4603      	mov	r3, r0
 8010e02:	461a      	mov	r2, r3
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8010e08:	69bb      	ldr	r3, [r7, #24]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f042 0210 	orr.w	r2, r2, #16
 8010e10:	739a      	strb	r2, [r3, #14]
 8010e12:	2200      	movs	r2, #0
 8010e14:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	741a      	strb	r2, [r3, #16]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	2200      	movs	r2, #0
 8010e24:	749a      	strb	r2, [r3, #18]
 8010e26:	2200      	movs	r2, #0
 8010e28:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8010e2a:	6838      	ldr	r0, [r7, #0]
 8010e2c:	f001 fd96 	bl	801295c <ip4_route>
 8010e30:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00b      	beq.n	8010e50 <tcp_rst+0xcc>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	9302      	str	r3, [sp, #8]
 8010e3c:	2306      	movs	r3, #6
 8010e3e:	9301      	str	r3, [sp, #4]
 8010e40:	2300      	movs	r3, #0
 8010e42:	9300      	str	r3, [sp, #0]
 8010e44:	23ff      	movs	r3, #255	; 0xff
 8010e46:	683a      	ldr	r2, [r7, #0]
 8010e48:	6879      	ldr	r1, [r7, #4]
 8010e4a:	69f8      	ldr	r0, [r7, #28]
 8010e4c:	f001 ff2e 	bl	8012cac <ip4_output_if>
  }
  pbuf_free(p);
 8010e50:	69f8      	ldr	r0, [r7, #28]
 8010e52:	f7fb ffff 	bl	800ce54 <pbuf_free>
 8010e56:	e000      	b.n	8010e5a <tcp_rst+0xd6>
    return;
 8010e58:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010e5a:	3720      	adds	r7, #32
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	08017bd8 	.word	0x08017bd8
 8010e64:	08017c0c 	.word	0x08017c0c
 8010e68:	08017c3c 	.word	0x08017c3c

08010e6c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d029      	beq.n	8010ed0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e80:	60fb      	str	r3, [r7, #12]
 8010e82:	e002      	b.n	8010e8a <tcp_rexmit_rto+0x1e>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	60fb      	str	r3, [r7, #12]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1f8      	bne.n	8010e84 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010eae:	2bff      	cmp	r3, #255	; 0xff
 8010eb0:	d007      	beq.n	8010ec2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010eb8:	3301      	adds	r3, #1
 8010eba:	b2da      	uxtb	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7ff fccf 	bl	801086c <tcp_output>
 8010ece:	e000      	b.n	8010ed2 <tcp_rexmit_rto+0x66>
    return;
 8010ed0:	bf00      	nop
}
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010ed8:	b590      	push	{r4, r7, lr}
 8010eda:	b085      	sub	sp, #20
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d043      	beq.n	8010f70 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eec:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	3368      	adds	r3, #104	; 0x68
 8010efa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010efc:	e002      	b.n	8010f04 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d011      	beq.n	8010f30 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fa fe75 	bl	800bc04 <lwip_htonl>
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fa fe6e 	bl	800bc04 <lwip_htonl>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	dbe6      	blt.n	8010efe <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681a      	ldr	r2, [r3, #0]
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	68ba      	ldr	r2, [r7, #8]
 8010f3c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d103      	bne.n	8010f4e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f54:	2bff      	cmp	r3, #255	; 0xff
 8010f56:	d007      	beq.n	8010f68 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f5e:	3301      	adds	r3, #1
 8010f60:	b2da      	uxtb	r2, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8010f6e:	e000      	b.n	8010f72 <tcp_rexmit+0x9a>
    return;
 8010f70:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8010f72:	3714      	adds	r7, #20
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd90      	pop	{r4, r7, pc}

08010f78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d04a      	beq.n	801101e <tcp_rexmit_fast+0xa6>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	7e9b      	ldrb	r3, [r3, #26]
 8010f8c:	f003 0304 	and.w	r3, r3, #4
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d144      	bne.n	801101e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7ff ff9f 	bl	8010ed8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d207      	bcs.n	8010fba <tcp_rexmit_fast+0x42>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fb0:	0fda      	lsrs	r2, r3, #31
 8010fb2:	4413      	add	r3, r2
 8010fb4:	105b      	asrs	r3, r3, #1
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	e006      	b.n	8010fc8 <tcp_rexmit_fast+0x50>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010fc0:	0fda      	lsrs	r2, r3, #31
 8010fc2:	4413      	add	r3, r2
 8010fc4:	105b      	asrs	r3, r3, #1
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d206      	bcs.n	8010fee <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	0049      	lsls	r1, r1, #1
 8010ffc:	440b      	add	r3, r1
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	4413      	add	r3, r2
 8011002:	b29a      	uxth	r2, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	7e9b      	ldrb	r3, [r3, #26]
 801100e:	f043 0304 	orr.w	r3, r3, #4
 8011012:	b2da      	uxtb	r2, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2200      	movs	r2, #0
 801101c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801101e:	bf00      	nop
 8011020:	3708      	adds	r7, #8
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011026:	b580      	push	{r7, lr}
 8011028:	b08a      	sub	sp, #40	; 0x28
 801102a:	af04      	add	r7, sp, #16
 801102c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011032:	3b01      	subs	r3, #1
 8011034:	4618      	mov	r0, r3
 8011036:	f7fa fde5 	bl	800bc04 <lwip_htonl>
 801103a:	4603      	mov	r3, r0
 801103c:	2200      	movs	r2, #0
 801103e:	2100      	movs	r1, #0
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7ff f977 	bl	8010334 <tcp_output_alloc_header>
 8011046:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d102      	bne.n	8011054 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801104e:	f04f 33ff 	mov.w	r3, #4294967295
 8011052:	e021      	b.n	8011098 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	3304      	adds	r3, #4
 8011058:	4618      	mov	r0, r3
 801105a:	f001 fc7f 	bl	801295c <ip4_route>
 801105e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d102      	bne.n	801106c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011066:	23fc      	movs	r3, #252	; 0xfc
 8011068:	75fb      	strb	r3, [r7, #23]
 801106a:	e010      	b.n	801108e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801106c:	6879      	ldr	r1, [r7, #4]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	1d1a      	adds	r2, r3, #4
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	7a98      	ldrb	r0, [r3, #10]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	9302      	str	r3, [sp, #8]
 801107a:	2306      	movs	r3, #6
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	2300      	movs	r3, #0
 8011080:	9300      	str	r3, [sp, #0]
 8011082:	4603      	mov	r3, r0
 8011084:	6938      	ldr	r0, [r7, #16]
 8011086:	f001 fe11 	bl	8012cac <ip4_output_if>
 801108a:	4603      	mov	r3, r0
 801108c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801108e:	6938      	ldr	r0, [r7, #16]
 8011090:	f7fb fee0 	bl	800ce54 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011094:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011098:	4618      	mov	r0, r3
 801109a:	3718      	adds	r7, #24
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80110a0:	b590      	push	{r4, r7, lr}
 80110a2:	b08f      	sub	sp, #60	; 0x3c
 80110a4:	af04      	add	r7, sp, #16
 80110a6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ac:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80110ae:	6a3b      	ldr	r3, [r7, #32]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d102      	bne.n	80110ba <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110b8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80110ba:	6a3b      	ldr	r3, [r7, #32]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d101      	bne.n	80110c4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80110c0:	2300      	movs	r3, #0
 80110c2:	e085      	b.n	80111d0 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80110c4:	6a3b      	ldr	r3, [r7, #32]
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	899b      	ldrh	r3, [r3, #12]
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7fa fd8b 	bl	800bbe8 <lwip_htons>
 80110d2:	4603      	mov	r3, r0
 80110d4:	f003 0301 	and.w	r3, r3, #1
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d005      	beq.n	80110e8 <tcp_zero_window_probe+0x48>
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	891b      	ldrh	r3, [r3, #8]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d101      	bne.n	80110e8 <tcp_zero_window_probe+0x48>
 80110e4:	2301      	movs	r3, #1
 80110e6:	e000      	b.n	80110ea <tcp_zero_window_probe+0x4a>
 80110e8:	2300      	movs	r3, #0
 80110ea:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80110ec:	7ffb      	ldrb	r3, [r7, #31]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	bf0c      	ite	eq
 80110f2:	2301      	moveq	r3, #1
 80110f4:	2300      	movne	r3, #0
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80110fa:	6a3b      	ldr	r3, [r7, #32]
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	8bba      	ldrh	r2, [r7, #28]
 8011102:	2100      	movs	r1, #0
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff f915 	bl	8010334 <tcp_output_alloc_header>
 801110a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d102      	bne.n	8011118 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011112:	f04f 33ff 	mov.w	r3, #4294967295
 8011116:	e05b      	b.n	80111d0 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011118:	69bb      	ldr	r3, [r7, #24]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801111e:	7ffb      	ldrb	r3, [r7, #31]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00e      	beq.n	8011142 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	899b      	ldrh	r3, [r3, #12]
 8011128:	b29b      	uxth	r3, r3
 801112a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801112e:	b29c      	uxth	r4, r3
 8011130:	2011      	movs	r0, #17
 8011132:	f7fa fd59 	bl	800bbe8 <lwip_htons>
 8011136:	4603      	mov	r3, r0
 8011138:	4323      	orrs	r3, r4
 801113a:	b29a      	uxth	r2, r3
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	819a      	strh	r2, [r3, #12]
 8011140:	e010      	b.n	8011164 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	3314      	adds	r3, #20
 8011148:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	6858      	ldr	r0, [r3, #4]
 801114e:	6a3b      	ldr	r3, [r7, #32]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	891a      	ldrh	r2, [r3, #8]
 8011154:	6a3b      	ldr	r3, [r7, #32]
 8011156:	891b      	ldrh	r3, [r3, #8]
 8011158:	1ad3      	subs	r3, r2, r3
 801115a:	b29b      	uxth	r3, r3
 801115c:	2201      	movs	r2, #1
 801115e:	6939      	ldr	r1, [r7, #16]
 8011160:	f7fc f874 	bl	800d24c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	4618      	mov	r0, r3
 801116c:	f7fa fd4a 	bl	800bc04 <lwip_htonl>
 8011170:	4603      	mov	r3, r0
 8011172:	3301      	adds	r3, #1
 8011174:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	1ad3      	subs	r3, r2, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	da02      	bge.n	8011188 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	3304      	adds	r3, #4
 801118c:	4618      	mov	r0, r3
 801118e:	f001 fbe5 	bl	801295c <ip4_route>
 8011192:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d103      	bne.n	80111a2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801119a:	23fc      	movs	r3, #252	; 0xfc
 801119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111a0:	e011      	b.n	80111c6 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80111a2:	6879      	ldr	r1, [r7, #4]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	1d1a      	adds	r2, r3, #4
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	7a98      	ldrb	r0, [r3, #10]
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	9302      	str	r3, [sp, #8]
 80111b0:	2306      	movs	r3, #6
 80111b2:	9301      	str	r3, [sp, #4]
 80111b4:	2300      	movs	r3, #0
 80111b6:	9300      	str	r3, [sp, #0]
 80111b8:	4603      	mov	r3, r0
 80111ba:	69b8      	ldr	r0, [r7, #24]
 80111bc:	f001 fd76 	bl	8012cac <ip4_output_if>
 80111c0:	4603      	mov	r3, r0
 80111c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80111c6:	69b8      	ldr	r0, [r7, #24]
 80111c8:	f7fb fe44 	bl	800ce54 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80111cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	372c      	adds	r7, #44	; 0x2c
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd90      	pop	{r4, r7, pc}

080111d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80111e0:	f7fc f8b6 	bl	800d350 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80111e4:	4b0a      	ldr	r3, [pc, #40]	; (8011210 <tcpip_tcp_timer+0x38>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d103      	bne.n	80111f4 <tcpip_tcp_timer+0x1c>
 80111ec:	4b09      	ldr	r3, [pc, #36]	; (8011214 <tcpip_tcp_timer+0x3c>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d005      	beq.n	8011200 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111f4:	2200      	movs	r2, #0
 80111f6:	4908      	ldr	r1, [pc, #32]	; (8011218 <tcpip_tcp_timer+0x40>)
 80111f8:	20fa      	movs	r0, #250	; 0xfa
 80111fa:	f000 f86f 	bl	80112dc <sys_timeout>
 80111fe:	e002      	b.n	8011206 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011200:	4b06      	ldr	r3, [pc, #24]	; (801121c <tcpip_tcp_timer+0x44>)
 8011202:	2200      	movs	r2, #0
 8011204:	601a      	str	r2, [r3, #0]
  }
}
 8011206:	bf00      	nop
 8011208:	3708      	adds	r7, #8
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	2001769c 	.word	0x2001769c
 8011214:	200176ac 	.word	0x200176ac
 8011218:	080111d9 	.word	0x080111d9
 801121c:	20005fbc 	.word	0x20005fbc

08011220 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011224:	4b0a      	ldr	r3, [pc, #40]	; (8011250 <tcp_timer_needed+0x30>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d10f      	bne.n	801124c <tcp_timer_needed+0x2c>
 801122c:	4b09      	ldr	r3, [pc, #36]	; (8011254 <tcp_timer_needed+0x34>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d103      	bne.n	801123c <tcp_timer_needed+0x1c>
 8011234:	4b08      	ldr	r3, [pc, #32]	; (8011258 <tcp_timer_needed+0x38>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d007      	beq.n	801124c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801123c:	4b04      	ldr	r3, [pc, #16]	; (8011250 <tcp_timer_needed+0x30>)
 801123e:	2201      	movs	r2, #1
 8011240:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011242:	2200      	movs	r2, #0
 8011244:	4905      	ldr	r1, [pc, #20]	; (801125c <tcp_timer_needed+0x3c>)
 8011246:	20fa      	movs	r0, #250	; 0xfa
 8011248:	f000 f848 	bl	80112dc <sys_timeout>
  }
}
 801124c:	bf00      	nop
 801124e:	bd80      	pop	{r7, pc}
 8011250:	20005fbc 	.word	0x20005fbc
 8011254:	2001769c 	.word	0x2001769c
 8011258:	200176ac 	.word	0x200176ac
 801125c:	080111d9 	.word	0x080111d9

08011260 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	4903      	ldr	r1, [pc, #12]	; (8011288 <cyclic_timer+0x28>)
 801127a:	4618      	mov	r0, r3
 801127c:	f000 f82e 	bl	80112dc <sys_timeout>
}
 8011280:	bf00      	nop
 8011282:	3710      	adds	r7, #16
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	08011261 	.word	0x08011261

0801128c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011292:	2301      	movs	r3, #1
 8011294:	607b      	str	r3, [r7, #4]
 8011296:	e00e      	b.n	80112b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011298:	4a0d      	ldr	r2, [pc, #52]	; (80112d0 <sys_timeouts_init+0x44>)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	00db      	lsls	r3, r3, #3
 80112a4:	4a0a      	ldr	r2, [pc, #40]	; (80112d0 <sys_timeouts_init+0x44>)
 80112a6:	4413      	add	r3, r2
 80112a8:	461a      	mov	r2, r3
 80112aa:	490a      	ldr	r1, [pc, #40]	; (80112d4 <sys_timeouts_init+0x48>)
 80112ac:	f000 f816 	bl	80112dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	3301      	adds	r3, #1
 80112b4:	607b      	str	r3, [r7, #4]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2b02      	cmp	r3, #2
 80112ba:	d9ed      	bls.n	8011298 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80112bc:	f7f6 fa8e 	bl	80077dc <sys_now>
 80112c0:	4602      	mov	r2, r0
 80112c2:	4b05      	ldr	r3, [pc, #20]	; (80112d8 <sys_timeouts_init+0x4c>)
 80112c4:	601a      	str	r2, [r3, #0]
}
 80112c6:	bf00      	nop
 80112c8:	3708      	adds	r7, #8
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	080189c8 	.word	0x080189c8
 80112d4:	08011261 	.word	0x08011261
 80112d8:	20005fb8 	.word	0x20005fb8

080112dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b088      	sub	sp, #32
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80112e8:	200a      	movs	r0, #10
 80112ea:	f7fb f86b 	bl	800c3c4 <memp_malloc>
 80112ee:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d10a      	bne.n	801130c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f040 8084 	bne.w	8011406 <sys_timeout+0x12a>
 80112fe:	4b44      	ldr	r3, [pc, #272]	; (8011410 <sys_timeout+0x134>)
 8011300:	22d4      	movs	r2, #212	; 0xd4
 8011302:	4944      	ldr	r1, [pc, #272]	; (8011414 <sys_timeout+0x138>)
 8011304:	4844      	ldr	r0, [pc, #272]	; (8011418 <sys_timeout+0x13c>)
 8011306:	f004 f9a3 	bl	8015650 <iprintf>
    return;
 801130a:	e07c      	b.n	8011406 <sys_timeout+0x12a>
  }

  now = sys_now();
 801130c:	f7f6 fa66 	bl	80077dc <sys_now>
 8011310:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011312:	4b42      	ldr	r3, [pc, #264]	; (801141c <sys_timeout+0x140>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d105      	bne.n	8011326 <sys_timeout+0x4a>
    diff = 0;
 801131a:	2300      	movs	r3, #0
 801131c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801131e:	4a40      	ldr	r2, [pc, #256]	; (8011420 <sys_timeout+0x144>)
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	6013      	str	r3, [r2, #0]
 8011324:	e004      	b.n	8011330 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011326:	4b3e      	ldr	r3, [pc, #248]	; (8011420 <sys_timeout+0x144>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	693a      	ldr	r2, [r7, #16]
 801132c:	1ad3      	subs	r3, r2, r3
 801132e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	2200      	movs	r2, #0
 8011334:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	68ba      	ldr	r2, [r7, #8]
 801133a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	441a      	add	r2, r3
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801134c:	4b33      	ldr	r3, [pc, #204]	; (801141c <sys_timeout+0x140>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d103      	bne.n	801135c <sys_timeout+0x80>
    next_timeout = timeout;
 8011354:	4a31      	ldr	r2, [pc, #196]	; (801141c <sys_timeout+0x140>)
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	6013      	str	r3, [r2, #0]
    return;
 801135a:	e055      	b.n	8011408 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801135c:	4b2f      	ldr	r3, [pc, #188]	; (801141c <sys_timeout+0x140>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	429a      	cmp	r2, r3
 8011366:	d20f      	bcs.n	8011388 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011368:	4b2c      	ldr	r3, [pc, #176]	; (801141c <sys_timeout+0x140>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	6859      	ldr	r1, [r3, #4]
 801136e:	4b2b      	ldr	r3, [pc, #172]	; (801141c <sys_timeout+0x140>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	68fa      	ldr	r2, [r7, #12]
 8011374:	1a8a      	subs	r2, r1, r2
 8011376:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011378:	4b28      	ldr	r3, [pc, #160]	; (801141c <sys_timeout+0x140>)
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011380:	4a26      	ldr	r2, [pc, #152]	; (801141c <sys_timeout+0x140>)
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	6013      	str	r3, [r2, #0]
 8011386:	e03f      	b.n	8011408 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011388:	4b24      	ldr	r3, [pc, #144]	; (801141c <sys_timeout+0x140>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	61fb      	str	r3, [r7, #28]
 801138e:	e036      	b.n	80113fe <sys_timeout+0x122>
      timeout->time -= t->time;
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	685a      	ldr	r2, [r3, #4]
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	1ad2      	subs	r2, r2, r3
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801139e:	69fb      	ldr	r3, [r7, #28]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d006      	beq.n	80113b4 <sys_timeout+0xd8>
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	685a      	ldr	r2, [r3, #4]
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d921      	bls.n	80113f8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d009      	beq.n	80113d0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	6859      	ldr	r1, [r3, #4]
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	685a      	ldr	r2, [r3, #4]
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	1a8a      	subs	r2, r1, r2
 80113cc:	605a      	str	r2, [r3, #4]
 80113ce:	e00b      	b.n	80113e8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	68fa      	ldr	r2, [r7, #12]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d206      	bcs.n	80113e8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80113da:	4b10      	ldr	r3, [pc, #64]	; (801141c <sys_timeout+0x140>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	685a      	ldr	r2, [r3, #4]
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	441a      	add	r2, r3
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	697a      	ldr	r2, [r7, #20]
 80113f4:	601a      	str	r2, [r3, #0]
        break;
 80113f6:	e007      	b.n	8011408 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	61fb      	str	r3, [r7, #28]
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d1c5      	bne.n	8011390 <sys_timeout+0xb4>
 8011404:	e000      	b.n	8011408 <sys_timeout+0x12c>
    return;
 8011406:	bf00      	nop
      }
    }
  }
}
 8011408:	3720      	adds	r7, #32
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	0801801c 	.word	0x0801801c
 8011414:	08018050 	.word	0x08018050
 8011418:	08018090 	.word	0x08018090
 801141c:	20005fb4 	.word	0x20005fb4
 8011420:	20005fb8 	.word	0x20005fb8

08011424 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801142a:	4b24      	ldr	r3, [pc, #144]	; (80114bc <sys_check_timeouts+0x98>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d03f      	beq.n	80114b2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011432:	f7f6 f9d3 	bl	80077dc <sys_now>
 8011436:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011438:	4b21      	ldr	r3, [pc, #132]	; (80114c0 <sys_check_timeouts+0x9c>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	1ad3      	subs	r3, r2, r3
 8011440:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011442:	2300      	movs	r3, #0
 8011444:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011446:	4b1d      	ldr	r3, [pc, #116]	; (80114bc <sys_check_timeouts+0x98>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d02c      	beq.n	80114ac <sys_check_timeouts+0x88>
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	697a      	ldr	r2, [r7, #20]
 8011458:	429a      	cmp	r2, r3
 801145a:	d327      	bcc.n	80114ac <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 801145c:	2301      	movs	r3, #1
 801145e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	685a      	ldr	r2, [r3, #4]
 8011464:	4b16      	ldr	r3, [pc, #88]	; (80114c0 <sys_check_timeouts+0x9c>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4413      	add	r3, r2
 801146a:	4a15      	ldr	r2, [pc, #84]	; (80114c0 <sys_check_timeouts+0x9c>)
 801146c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	697a      	ldr	r2, [r7, #20]
 8011474:	1ad3      	subs	r3, r2, r3
 8011476:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	4a0f      	ldr	r2, [pc, #60]	; (80114bc <sys_check_timeouts+0x98>)
 801147e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	689b      	ldr	r3, [r3, #8]
 8011484:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801148c:	68b9      	ldr	r1, [r7, #8]
 801148e:	200a      	movs	r0, #10
 8011490:	f7fa ffea 	bl	800c468 <memp_free>
        if (handler != NULL) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d008      	beq.n	80114ac <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 801149a:	480a      	ldr	r0, [pc, #40]	; (80114c4 <sys_check_timeouts+0xa0>)
 801149c:	f002 fc5a 	bl	8013d54 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6838      	ldr	r0, [r7, #0]
 80114a4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80114a6:	4807      	ldr	r0, [pc, #28]	; (80114c4 <sys_check_timeouts+0xa0>)
 80114a8:	f002 fc63 	bl	8013d72 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80114ac:	7cfb      	ldrb	r3, [r7, #19]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1c7      	bne.n	8011442 <sys_check_timeouts+0x1e>
  }
}
 80114b2:	bf00      	nop
 80114b4:	3718      	adds	r7, #24
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	20005fb4 	.word	0x20005fb4
 80114c0:	20005fb8 	.word	0x20005fb8
 80114c4:	2000a2c0 	.word	0x2000a2c0

080114c8 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80114ce:	4b0f      	ldr	r3, [pc, #60]	; (801150c <sys_timeouts_sleeptime+0x44>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d102      	bne.n	80114dc <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80114d6:	f04f 33ff 	mov.w	r3, #4294967295
 80114da:	e013      	b.n	8011504 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80114dc:	f7f6 f97e 	bl	80077dc <sys_now>
 80114e0:	4602      	mov	r2, r0
 80114e2:	4b0b      	ldr	r3, [pc, #44]	; (8011510 <sys_timeouts_sleeptime+0x48>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80114ea:	4b08      	ldr	r3, [pc, #32]	; (801150c <sys_timeouts_sleeptime+0x44>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d901      	bls.n	80114fa <sys_timeouts_sleeptime+0x32>
    return 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	e004      	b.n	8011504 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 80114fa:	4b04      	ldr	r3, [pc, #16]	; (801150c <sys_timeouts_sleeptime+0x44>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	685a      	ldr	r2, [r3, #4]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	1ad3      	subs	r3, r2, r3
  }
}
 8011504:	4618      	mov	r0, r3
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	20005fb4 	.word	0x20005fb4
 8011510:	20005fb8 	.word	0x20005fb8

08011514 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801151e:	4b0f      	ldr	r3, [pc, #60]	; (801155c <sys_timeouts_mbox_fetch+0x48>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d105      	bne.n	8011532 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011526:	2200      	movs	r2, #0
 8011528:	6839      	ldr	r1, [r7, #0]
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f002 fbae 	bl	8013c8c <sys_arch_mbox_fetch>
    return;
 8011530:	e011      	b.n	8011556 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011532:	f7ff ffc9 	bl	80114c8 <sys_timeouts_sleeptime>
 8011536:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d008      	beq.n	8011550 <sys_timeouts_mbox_fetch+0x3c>
 801153e:	68fa      	ldr	r2, [r7, #12]
 8011540:	6839      	ldr	r1, [r7, #0]
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f002 fba2 	bl	8013c8c <sys_arch_mbox_fetch>
 8011548:	4603      	mov	r3, r0
 801154a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801154e:	d102      	bne.n	8011556 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011550:	f7ff ff68 	bl	8011424 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011554:	e7e3      	b.n	801151e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	20005fb4 	.word	0x20005fb4

08011560 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011560:	b480      	push	{r7}
 8011562:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011564:	bf00      	nop
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr
	...

08011570 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011570:	b480      	push	{r7}
 8011572:	b085      	sub	sp, #20
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	4613      	mov	r3, r2
 801157c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801157e:	79fb      	ldrb	r3, [r7, #7]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d018      	beq.n	80115b6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d013      	beq.n	80115b2 <udp_input_local_match+0x42>
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d00f      	beq.n	80115b2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011592:	4b14      	ldr	r3, [pc, #80]	; (80115e4 <udp_input_local_match+0x74>)
 8011594:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801159a:	d00a      	beq.n	80115b2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	4b10      	ldr	r3, [pc, #64]	; (80115e4 <udp_input_local_match+0x74>)
 80115a2:	695b      	ldr	r3, [r3, #20]
 80115a4:	405a      	eors	r2, r3
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	3308      	adds	r3, #8
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d110      	bne.n	80115d4 <udp_input_local_match+0x64>
          return 1;
 80115b2:	2301      	movs	r3, #1
 80115b4:	e00f      	b.n	80115d6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d009      	beq.n	80115d0 <udp_input_local_match+0x60>
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d005      	beq.n	80115d0 <udp_input_local_match+0x60>
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	4b06      	ldr	r3, [pc, #24]	; (80115e4 <udp_input_local_match+0x74>)
 80115ca:	695b      	ldr	r3, [r3, #20]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d101      	bne.n	80115d4 <udp_input_local_match+0x64>
      return 1;
 80115d0:	2301      	movs	r3, #1
 80115d2:	e000      	b.n	80115d6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3714      	adds	r7, #20
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr
 80115e2:	bf00      	nop
 80115e4:	2000a2c4 	.word	0x2000a2c4

080115e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80115e8:	b590      	push	{r4, r7, lr}
 80115ea:	b08d      	sub	sp, #52	; 0x34
 80115ec:	af02      	add	r7, sp, #8
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80115f2:	2300      	movs	r3, #0
 80115f4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	895b      	ldrh	r3, [r3, #10]
 80115fa:	2b07      	cmp	r3, #7
 80115fc:	d803      	bhi.n	8011606 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f7fb fc28 	bl	800ce54 <pbuf_free>
    goto end;
 8011604:	e0c6      	b.n	8011794 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801160c:	4b63      	ldr	r3, [pc, #396]	; (801179c <udp_input+0x1b4>)
 801160e:	695a      	ldr	r2, [r3, #20]
 8011610:	4b62      	ldr	r3, [pc, #392]	; (801179c <udp_input+0x1b4>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4619      	mov	r1, r3
 8011616:	4610      	mov	r0, r2
 8011618:	f001 fc1a 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 801161c:	4603      	mov	r3, r0
 801161e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	881b      	ldrh	r3, [r3, #0]
 8011624:	b29b      	uxth	r3, r3
 8011626:	4618      	mov	r0, r3
 8011628:	f7fa fade 	bl	800bbe8 <lwip_htons>
 801162c:	4603      	mov	r3, r0
 801162e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	885b      	ldrh	r3, [r3, #2]
 8011634:	b29b      	uxth	r3, r3
 8011636:	4618      	mov	r0, r3
 8011638:	f7fa fad6 	bl	800bbe8 <lwip_htons>
 801163c:	4603      	mov	r3, r0
 801163e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011640:	2300      	movs	r3, #0
 8011642:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011644:	2300      	movs	r3, #0
 8011646:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011648:	2300      	movs	r3, #0
 801164a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801164c:	4b54      	ldr	r3, [pc, #336]	; (80117a0 <udp_input+0x1b8>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	627b      	str	r3, [r7, #36]	; 0x24
 8011652:	e03b      	b.n	80116cc <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011656:	8a5b      	ldrh	r3, [r3, #18]
 8011658:	89fa      	ldrh	r2, [r7, #14]
 801165a:	429a      	cmp	r2, r3
 801165c:	d131      	bne.n	80116c2 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801165e:	7cfb      	ldrb	r3, [r7, #19]
 8011660:	461a      	mov	r2, r3
 8011662:	6839      	ldr	r1, [r7, #0]
 8011664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011666:	f7ff ff83 	bl	8011570 <udp_input_local_match>
 801166a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801166c:	2b00      	cmp	r3, #0
 801166e:	d028      	beq.n	80116c2 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8011670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011672:	7c1b      	ldrb	r3, [r3, #16]
 8011674:	f003 0304 	and.w	r3, r3, #4
 8011678:	2b00      	cmp	r3, #0
 801167a:	d104      	bne.n	8011686 <udp_input+0x9e>
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d101      	bne.n	8011686 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8011682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011684:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011688:	8a9b      	ldrh	r3, [r3, #20]
 801168a:	8a3a      	ldrh	r2, [r7, #16]
 801168c:	429a      	cmp	r2, r3
 801168e:	d118      	bne.n	80116c2 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011692:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011694:	2b00      	cmp	r3, #0
 8011696:	d005      	beq.n	80116a4 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169a:	685a      	ldr	r2, [r3, #4]
 801169c:	4b3f      	ldr	r3, [pc, #252]	; (801179c <udp_input+0x1b4>)
 801169e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d10e      	bne.n	80116c2 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d014      	beq.n	80116d4 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80116aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ac:	68da      	ldr	r2, [r3, #12]
 80116ae:	6a3b      	ldr	r3, [r7, #32]
 80116b0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80116b2:	4b3b      	ldr	r3, [pc, #236]	; (80117a0 <udp_input+0x1b8>)
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80116ba:	4a39      	ldr	r2, [pc, #228]	; (80117a0 <udp_input+0x1b8>)
 80116bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116be:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80116c0:	e008      	b.n	80116d4 <udp_input+0xec>
      }
    }

    prev = pcb;
 80116c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80116c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	627b      	str	r3, [r7, #36]	; 0x24
 80116cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d1c0      	bne.n	8011654 <udp_input+0x6c>
 80116d2:	e000      	b.n	80116d6 <udp_input+0xee>
        break;
 80116d4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80116d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d101      	bne.n	80116e0 <udp_input+0xf8>
    pcb = uncon_pcb;
 80116dc:	69fb      	ldr	r3, [r7, #28]
 80116de:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d002      	beq.n	80116ec <udp_input+0x104>
    for_us = 1;
 80116e6:	2301      	movs	r3, #1
 80116e8:	76fb      	strb	r3, [r7, #27]
 80116ea:	e00a      	b.n	8011702 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	3304      	adds	r3, #4
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	4b2a      	ldr	r3, [pc, #168]	; (801179c <udp_input+0x1b4>)
 80116f4:	695b      	ldr	r3, [r3, #20]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	bf0c      	ite	eq
 80116fa:	2301      	moveq	r3, #1
 80116fc:	2300      	movne	r3, #0
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011702:	7efb      	ldrb	r3, [r7, #27]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d042      	beq.n	801178e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8011708:	f06f 0107 	mvn.w	r1, #7
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f7fb fb7d 	bl	800ce0c <pbuf_header>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00a      	beq.n	801172e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8011718:	4b22      	ldr	r3, [pc, #136]	; (80117a4 <udp_input+0x1bc>)
 801171a:	f240 1255 	movw	r2, #341	; 0x155
 801171e:	4922      	ldr	r1, [pc, #136]	; (80117a8 <udp_input+0x1c0>)
 8011720:	4822      	ldr	r0, [pc, #136]	; (80117ac <udp_input+0x1c4>)
 8011722:	f003 ff95 	bl	8015650 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7fb fb94 	bl	800ce54 <pbuf_free>
      goto end;
 801172c:	e032      	b.n	8011794 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011730:	2b00      	cmp	r3, #0
 8011732:	d012      	beq.n	801175a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00a      	beq.n	8011752 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801173e:	699c      	ldr	r4, [r3, #24]
 8011740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011742:	69d8      	ldr	r0, [r3, #28]
 8011744:	8a3b      	ldrh	r3, [r7, #16]
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	4b19      	ldr	r3, [pc, #100]	; (80117b0 <udp_input+0x1c8>)
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801174e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011750:	e021      	b.n	8011796 <udp_input+0x1ae>
        pbuf_free(p);
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f7fb fb7e 	bl	800ce54 <pbuf_free>
        goto end;
 8011758:	e01c      	b.n	8011794 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801175a:	7cfb      	ldrb	r3, [r7, #19]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d112      	bne.n	8011786 <udp_input+0x19e>
 8011760:	4b0e      	ldr	r3, [pc, #56]	; (801179c <udp_input+0x1b4>)
 8011762:	695b      	ldr	r3, [r3, #20]
 8011764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011768:	2be0      	cmp	r3, #224	; 0xe0
 801176a:	d00c      	beq.n	8011786 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801176c:	4b0b      	ldr	r3, [pc, #44]	; (801179c <udp_input+0x1b4>)
 801176e:	899b      	ldrh	r3, [r3, #12]
 8011770:	3308      	adds	r3, #8
 8011772:	b29b      	uxth	r3, r3
 8011774:	b21b      	sxth	r3, r3
 8011776:	4619      	mov	r1, r3
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7fb fb59 	bl	800ce30 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801177e:	2103      	movs	r1, #3
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f001 f863 	bl	801284c <icmp_dest_unreach>
      pbuf_free(p);
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7fb fb64 	bl	800ce54 <pbuf_free>
  return;
 801178c:	e003      	b.n	8011796 <udp_input+0x1ae>
    pbuf_free(p);
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f7fb fb60 	bl	800ce54 <pbuf_free>
  return;
 8011794:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011796:	372c      	adds	r7, #44	; 0x2c
 8011798:	46bd      	mov	sp, r7
 801179a:	bd90      	pop	{r4, r7, pc}
 801179c:	2000a2c4 	.word	0x2000a2c4
 80117a0:	200176b4 	.word	0x200176b4
 80117a4:	080180b8 	.word	0x080180b8
 80117a8:	080180e8 	.word	0x080180e8
 80117ac:	080180fc 	.word	0x080180fc
 80117b0:	2000a2d4 	.word	0x2000a2d4

080117b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b085      	sub	sp, #20
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d01e      	beq.n	8011802 <udp_netif_ip_addr_changed+0x4e>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d01a      	beq.n	8011802 <udp_netif_ip_addr_changed+0x4e>
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d017      	beq.n	8011802 <udp_netif_ip_addr_changed+0x4e>
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d013      	beq.n	8011802 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80117da:	4b0d      	ldr	r3, [pc, #52]	; (8011810 <udp_netif_ip_addr_changed+0x5c>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	e00c      	b.n	80117fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d103      	bne.n	80117f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	68db      	ldr	r3, [r3, #12]
 80117fa:	60fb      	str	r3, [r7, #12]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1ef      	bne.n	80117e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011802:	bf00      	nop
 8011804:	3714      	adds	r7, #20
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop
 8011810:	200176b4 	.word	0x200176b4

08011814 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801181c:	4915      	ldr	r1, [pc, #84]	; (8011874 <etharp_free_entry+0x60>)
 801181e:	687a      	ldr	r2, [r7, #4]
 8011820:	4613      	mov	r3, r2
 8011822:	005b      	lsls	r3, r3, #1
 8011824:	4413      	add	r3, r2
 8011826:	00db      	lsls	r3, r3, #3
 8011828:	440b      	add	r3, r1
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d013      	beq.n	8011858 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011830:	4910      	ldr	r1, [pc, #64]	; (8011874 <etharp_free_entry+0x60>)
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	4613      	mov	r3, r2
 8011836:	005b      	lsls	r3, r3, #1
 8011838:	4413      	add	r3, r2
 801183a:	00db      	lsls	r3, r3, #3
 801183c:	440b      	add	r3, r1
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4618      	mov	r0, r3
 8011842:	f7fb fb07 	bl	800ce54 <pbuf_free>
    arp_table[i].q = NULL;
 8011846:	490b      	ldr	r1, [pc, #44]	; (8011874 <etharp_free_entry+0x60>)
 8011848:	687a      	ldr	r2, [r7, #4]
 801184a:	4613      	mov	r3, r2
 801184c:	005b      	lsls	r3, r3, #1
 801184e:	4413      	add	r3, r2
 8011850:	00db      	lsls	r3, r3, #3
 8011852:	440b      	add	r3, r1
 8011854:	2200      	movs	r2, #0
 8011856:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011858:	4906      	ldr	r1, [pc, #24]	; (8011874 <etharp_free_entry+0x60>)
 801185a:	687a      	ldr	r2, [r7, #4]
 801185c:	4613      	mov	r3, r2
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	4413      	add	r3, r2
 8011862:	00db      	lsls	r3, r3, #3
 8011864:	440b      	add	r3, r1
 8011866:	3314      	adds	r3, #20
 8011868:	2200      	movs	r2, #0
 801186a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801186c:	bf00      	nop
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}
 8011874:	20005fc0 	.word	0x20005fc0

08011878 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801187e:	2300      	movs	r3, #0
 8011880:	71fb      	strb	r3, [r7, #7]
 8011882:	e096      	b.n	80119b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011884:	79fa      	ldrb	r2, [r7, #7]
 8011886:	494f      	ldr	r1, [pc, #316]	; (80119c4 <etharp_tmr+0x14c>)
 8011888:	4613      	mov	r3, r2
 801188a:	005b      	lsls	r3, r3, #1
 801188c:	4413      	add	r3, r2
 801188e:	00db      	lsls	r3, r3, #3
 8011890:	440b      	add	r3, r1
 8011892:	3314      	adds	r3, #20
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8011898:	79bb      	ldrb	r3, [r7, #6]
 801189a:	2b00      	cmp	r3, #0
 801189c:	f000 8086 	beq.w	80119ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80118a0:	79fa      	ldrb	r2, [r7, #7]
 80118a2:	4948      	ldr	r1, [pc, #288]	; (80119c4 <etharp_tmr+0x14c>)
 80118a4:	4613      	mov	r3, r2
 80118a6:	005b      	lsls	r3, r3, #1
 80118a8:	4413      	add	r3, r2
 80118aa:	00db      	lsls	r3, r3, #3
 80118ac:	440b      	add	r3, r1
 80118ae:	3312      	adds	r3, #18
 80118b0:	881b      	ldrh	r3, [r3, #0]
 80118b2:	3301      	adds	r3, #1
 80118b4:	b298      	uxth	r0, r3
 80118b6:	4943      	ldr	r1, [pc, #268]	; (80119c4 <etharp_tmr+0x14c>)
 80118b8:	4613      	mov	r3, r2
 80118ba:	005b      	lsls	r3, r3, #1
 80118bc:	4413      	add	r3, r2
 80118be:	00db      	lsls	r3, r3, #3
 80118c0:	440b      	add	r3, r1
 80118c2:	3312      	adds	r3, #18
 80118c4:	4602      	mov	r2, r0
 80118c6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80118c8:	79fa      	ldrb	r2, [r7, #7]
 80118ca:	493e      	ldr	r1, [pc, #248]	; (80119c4 <etharp_tmr+0x14c>)
 80118cc:	4613      	mov	r3, r2
 80118ce:	005b      	lsls	r3, r3, #1
 80118d0:	4413      	add	r3, r2
 80118d2:	00db      	lsls	r3, r3, #3
 80118d4:	440b      	add	r3, r1
 80118d6:	3312      	adds	r3, #18
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80118de:	d215      	bcs.n	801190c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80118e0:	79fa      	ldrb	r2, [r7, #7]
 80118e2:	4938      	ldr	r1, [pc, #224]	; (80119c4 <etharp_tmr+0x14c>)
 80118e4:	4613      	mov	r3, r2
 80118e6:	005b      	lsls	r3, r3, #1
 80118e8:	4413      	add	r3, r2
 80118ea:	00db      	lsls	r3, r3, #3
 80118ec:	440b      	add	r3, r1
 80118ee:	3314      	adds	r3, #20
 80118f0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d10f      	bne.n	8011916 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80118f6:	79fa      	ldrb	r2, [r7, #7]
 80118f8:	4932      	ldr	r1, [pc, #200]	; (80119c4 <etharp_tmr+0x14c>)
 80118fa:	4613      	mov	r3, r2
 80118fc:	005b      	lsls	r3, r3, #1
 80118fe:	4413      	add	r3, r2
 8011900:	00db      	lsls	r3, r3, #3
 8011902:	440b      	add	r3, r1
 8011904:	3312      	adds	r3, #18
 8011906:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011908:	2b04      	cmp	r3, #4
 801190a:	d904      	bls.n	8011916 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801190c:	79fb      	ldrb	r3, [r7, #7]
 801190e:	4618      	mov	r0, r3
 8011910:	f7ff ff80 	bl	8011814 <etharp_free_entry>
 8011914:	e04a      	b.n	80119ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011916:	79fa      	ldrb	r2, [r7, #7]
 8011918:	492a      	ldr	r1, [pc, #168]	; (80119c4 <etharp_tmr+0x14c>)
 801191a:	4613      	mov	r3, r2
 801191c:	005b      	lsls	r3, r3, #1
 801191e:	4413      	add	r3, r2
 8011920:	00db      	lsls	r3, r3, #3
 8011922:	440b      	add	r3, r1
 8011924:	3314      	adds	r3, #20
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	2b03      	cmp	r3, #3
 801192a:	d10a      	bne.n	8011942 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801192c:	79fa      	ldrb	r2, [r7, #7]
 801192e:	4925      	ldr	r1, [pc, #148]	; (80119c4 <etharp_tmr+0x14c>)
 8011930:	4613      	mov	r3, r2
 8011932:	005b      	lsls	r3, r3, #1
 8011934:	4413      	add	r3, r2
 8011936:	00db      	lsls	r3, r3, #3
 8011938:	440b      	add	r3, r1
 801193a:	3314      	adds	r3, #20
 801193c:	2204      	movs	r2, #4
 801193e:	701a      	strb	r2, [r3, #0]
 8011940:	e034      	b.n	80119ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011942:	79fa      	ldrb	r2, [r7, #7]
 8011944:	491f      	ldr	r1, [pc, #124]	; (80119c4 <etharp_tmr+0x14c>)
 8011946:	4613      	mov	r3, r2
 8011948:	005b      	lsls	r3, r3, #1
 801194a:	4413      	add	r3, r2
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	440b      	add	r3, r1
 8011950:	3314      	adds	r3, #20
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	2b04      	cmp	r3, #4
 8011956:	d10a      	bne.n	801196e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011958:	79fa      	ldrb	r2, [r7, #7]
 801195a:	491a      	ldr	r1, [pc, #104]	; (80119c4 <etharp_tmr+0x14c>)
 801195c:	4613      	mov	r3, r2
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	4413      	add	r3, r2
 8011962:	00db      	lsls	r3, r3, #3
 8011964:	440b      	add	r3, r1
 8011966:	3314      	adds	r3, #20
 8011968:	2202      	movs	r2, #2
 801196a:	701a      	strb	r2, [r3, #0]
 801196c:	e01e      	b.n	80119ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801196e:	79fa      	ldrb	r2, [r7, #7]
 8011970:	4914      	ldr	r1, [pc, #80]	; (80119c4 <etharp_tmr+0x14c>)
 8011972:	4613      	mov	r3, r2
 8011974:	005b      	lsls	r3, r3, #1
 8011976:	4413      	add	r3, r2
 8011978:	00db      	lsls	r3, r3, #3
 801197a:	440b      	add	r3, r1
 801197c:	3314      	adds	r3, #20
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	2b01      	cmp	r3, #1
 8011982:	d113      	bne.n	80119ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011984:	79fa      	ldrb	r2, [r7, #7]
 8011986:	490f      	ldr	r1, [pc, #60]	; (80119c4 <etharp_tmr+0x14c>)
 8011988:	4613      	mov	r3, r2
 801198a:	005b      	lsls	r3, r3, #1
 801198c:	4413      	add	r3, r2
 801198e:	00db      	lsls	r3, r3, #3
 8011990:	440b      	add	r3, r1
 8011992:	3308      	adds	r3, #8
 8011994:	6818      	ldr	r0, [r3, #0]
 8011996:	79fa      	ldrb	r2, [r7, #7]
 8011998:	4613      	mov	r3, r2
 801199a:	005b      	lsls	r3, r3, #1
 801199c:	4413      	add	r3, r2
 801199e:	00db      	lsls	r3, r3, #3
 80119a0:	4a08      	ldr	r2, [pc, #32]	; (80119c4 <etharp_tmr+0x14c>)
 80119a2:	4413      	add	r3, r2
 80119a4:	3304      	adds	r3, #4
 80119a6:	4619      	mov	r1, r3
 80119a8:	f000 fe38 	bl	801261c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119ac:	79fb      	ldrb	r3, [r7, #7]
 80119ae:	3301      	adds	r3, #1
 80119b0:	71fb      	strb	r3, [r7, #7]
 80119b2:	79fb      	ldrb	r3, [r7, #7]
 80119b4:	2b09      	cmp	r3, #9
 80119b6:	f67f af65 	bls.w	8011884 <etharp_tmr+0xc>
      }
    }
  }
}
 80119ba:	bf00      	nop
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	20005fc0 	.word	0x20005fc0

080119c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b088      	sub	sp, #32
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	460b      	mov	r3, r1
 80119d2:	607a      	str	r2, [r7, #4]
 80119d4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80119d6:	230a      	movs	r3, #10
 80119d8:	77fb      	strb	r3, [r7, #31]
 80119da:	230a      	movs	r3, #10
 80119dc:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80119de:	230a      	movs	r3, #10
 80119e0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80119e2:	2300      	movs	r3, #0
 80119e4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80119e6:	230a      	movs	r3, #10
 80119e8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80119ea:	2300      	movs	r3, #0
 80119ec:	833b      	strh	r3, [r7, #24]
 80119ee:	2300      	movs	r3, #0
 80119f0:	82fb      	strh	r3, [r7, #22]
 80119f2:	2300      	movs	r3, #0
 80119f4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119f6:	2300      	movs	r3, #0
 80119f8:	773b      	strb	r3, [r7, #28]
 80119fa:	e093      	b.n	8011b24 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80119fc:	7f3a      	ldrb	r2, [r7, #28]
 80119fe:	4990      	ldr	r1, [pc, #576]	; (8011c40 <etharp_find_entry+0x278>)
 8011a00:	4613      	mov	r3, r2
 8011a02:	005b      	lsls	r3, r3, #1
 8011a04:	4413      	add	r3, r2
 8011a06:	00db      	lsls	r3, r3, #3
 8011a08:	440b      	add	r3, r1
 8011a0a:	3314      	adds	r3, #20
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011a10:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011a14:	2b0a      	cmp	r3, #10
 8011a16:	d105      	bne.n	8011a24 <etharp_find_entry+0x5c>
 8011a18:	7cfb      	ldrb	r3, [r7, #19]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d102      	bne.n	8011a24 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8011a1e:	7f3b      	ldrb	r3, [r7, #28]
 8011a20:	777b      	strb	r3, [r7, #29]
 8011a22:	e07c      	b.n	8011b1e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011a24:	7cfb      	ldrb	r3, [r7, #19]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d079      	beq.n	8011b1e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011a2a:	7cfb      	ldrb	r3, [r7, #19]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d009      	beq.n	8011a44 <etharp_find_entry+0x7c>
 8011a30:	7cfb      	ldrb	r3, [r7, #19]
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d806      	bhi.n	8011a44 <etharp_find_entry+0x7c>
 8011a36:	4b83      	ldr	r3, [pc, #524]	; (8011c44 <etharp_find_entry+0x27c>)
 8011a38:	f44f 7293 	mov.w	r2, #294	; 0x126
 8011a3c:	4982      	ldr	r1, [pc, #520]	; (8011c48 <etharp_find_entry+0x280>)
 8011a3e:	4883      	ldr	r0, [pc, #524]	; (8011c4c <etharp_find_entry+0x284>)
 8011a40:	f003 fe06 	bl	8015650 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d00f      	beq.n	8011a6a <etharp_find_entry+0xa2>
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	6819      	ldr	r1, [r3, #0]
 8011a4e:	7f3a      	ldrb	r2, [r7, #28]
 8011a50:	487b      	ldr	r0, [pc, #492]	; (8011c40 <etharp_find_entry+0x278>)
 8011a52:	4613      	mov	r3, r2
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	4413      	add	r3, r2
 8011a58:	00db      	lsls	r3, r3, #3
 8011a5a:	4403      	add	r3, r0
 8011a5c:	3304      	adds	r3, #4
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4299      	cmp	r1, r3
 8011a62:	d102      	bne.n	8011a6a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011a64:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011a68:	e0e5      	b.n	8011c36 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011a6a:	7cfb      	ldrb	r3, [r7, #19]
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d13b      	bne.n	8011ae8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011a70:	7f3a      	ldrb	r2, [r7, #28]
 8011a72:	4973      	ldr	r1, [pc, #460]	; (8011c40 <etharp_find_entry+0x278>)
 8011a74:	4613      	mov	r3, r2
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	4413      	add	r3, r2
 8011a7a:	00db      	lsls	r3, r3, #3
 8011a7c:	440b      	add	r3, r1
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d018      	beq.n	8011ab6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8011a84:	7f3a      	ldrb	r2, [r7, #28]
 8011a86:	496e      	ldr	r1, [pc, #440]	; (8011c40 <etharp_find_entry+0x278>)
 8011a88:	4613      	mov	r3, r2
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	4413      	add	r3, r2
 8011a8e:	00db      	lsls	r3, r3, #3
 8011a90:	440b      	add	r3, r1
 8011a92:	3312      	adds	r3, #18
 8011a94:	881b      	ldrh	r3, [r3, #0]
 8011a96:	8b3a      	ldrh	r2, [r7, #24]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d840      	bhi.n	8011b1e <etharp_find_entry+0x156>
            old_queue = i;
 8011a9c:	7f3b      	ldrb	r3, [r7, #28]
 8011a9e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8011aa0:	7f3a      	ldrb	r2, [r7, #28]
 8011aa2:	4967      	ldr	r1, [pc, #412]	; (8011c40 <etharp_find_entry+0x278>)
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	005b      	lsls	r3, r3, #1
 8011aa8:	4413      	add	r3, r2
 8011aaa:	00db      	lsls	r3, r3, #3
 8011aac:	440b      	add	r3, r1
 8011aae:	3312      	adds	r3, #18
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	833b      	strh	r3, [r7, #24]
 8011ab4:	e033      	b.n	8011b1e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011ab6:	7f3a      	ldrb	r2, [r7, #28]
 8011ab8:	4961      	ldr	r1, [pc, #388]	; (8011c40 <etharp_find_entry+0x278>)
 8011aba:	4613      	mov	r3, r2
 8011abc:	005b      	lsls	r3, r3, #1
 8011abe:	4413      	add	r3, r2
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	440b      	add	r3, r1
 8011ac4:	3312      	adds	r3, #18
 8011ac6:	881b      	ldrh	r3, [r3, #0]
 8011ac8:	8afa      	ldrh	r2, [r7, #22]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d827      	bhi.n	8011b1e <etharp_find_entry+0x156>
            old_pending = i;
 8011ace:	7f3b      	ldrb	r3, [r7, #28]
 8011ad0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8011ad2:	7f3a      	ldrb	r2, [r7, #28]
 8011ad4:	495a      	ldr	r1, [pc, #360]	; (8011c40 <etharp_find_entry+0x278>)
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	005b      	lsls	r3, r3, #1
 8011ada:	4413      	add	r3, r2
 8011adc:	00db      	lsls	r3, r3, #3
 8011ade:	440b      	add	r3, r1
 8011ae0:	3312      	adds	r3, #18
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	82fb      	strh	r3, [r7, #22]
 8011ae6:	e01a      	b.n	8011b1e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011ae8:	7cfb      	ldrb	r3, [r7, #19]
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d917      	bls.n	8011b1e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011aee:	7f3a      	ldrb	r2, [r7, #28]
 8011af0:	4953      	ldr	r1, [pc, #332]	; (8011c40 <etharp_find_entry+0x278>)
 8011af2:	4613      	mov	r3, r2
 8011af4:	005b      	lsls	r3, r3, #1
 8011af6:	4413      	add	r3, r2
 8011af8:	00db      	lsls	r3, r3, #3
 8011afa:	440b      	add	r3, r1
 8011afc:	3312      	adds	r3, #18
 8011afe:	881b      	ldrh	r3, [r3, #0]
 8011b00:	8aba      	ldrh	r2, [r7, #20]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d80b      	bhi.n	8011b1e <etharp_find_entry+0x156>
            old_stable = i;
 8011b06:	7f3b      	ldrb	r3, [r7, #28]
 8011b08:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8011b0a:	7f3a      	ldrb	r2, [r7, #28]
 8011b0c:	494c      	ldr	r1, [pc, #304]	; (8011c40 <etharp_find_entry+0x278>)
 8011b0e:	4613      	mov	r3, r2
 8011b10:	005b      	lsls	r3, r3, #1
 8011b12:	4413      	add	r3, r2
 8011b14:	00db      	lsls	r3, r3, #3
 8011b16:	440b      	add	r3, r1
 8011b18:	3312      	adds	r3, #18
 8011b1a:	881b      	ldrh	r3, [r3, #0]
 8011b1c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b1e:	7f3b      	ldrb	r3, [r7, #28]
 8011b20:	3301      	adds	r3, #1
 8011b22:	773b      	strb	r3, [r7, #28]
 8011b24:	7f3b      	ldrb	r3, [r7, #28]
 8011b26:	2b09      	cmp	r3, #9
 8011b28:	f67f af68 	bls.w	80119fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011b2c:	7afb      	ldrb	r3, [r7, #11]
 8011b2e:	f003 0302 	and.w	r3, r3, #2
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d108      	bne.n	8011b48 <etharp_find_entry+0x180>
 8011b36:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011b3a:	2b0a      	cmp	r3, #10
 8011b3c:	d107      	bne.n	8011b4e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011b3e:	7afb      	ldrb	r3, [r7, #11]
 8011b40:	f003 0301 	and.w	r3, r3, #1
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d102      	bne.n	8011b4e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8011b48:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4c:	e073      	b.n	8011c36 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011b4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011b52:	2b09      	cmp	r3, #9
 8011b54:	dc02      	bgt.n	8011b5c <etharp_find_entry+0x194>
    i = empty;
 8011b56:	7f7b      	ldrb	r3, [r7, #29]
 8011b58:	773b      	strb	r3, [r7, #28]
 8011b5a:	e036      	b.n	8011bca <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011b5c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011b60:	2b09      	cmp	r3, #9
 8011b62:	dc13      	bgt.n	8011b8c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8011b64:	7fbb      	ldrb	r3, [r7, #30]
 8011b66:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011b68:	7f3a      	ldrb	r2, [r7, #28]
 8011b6a:	4935      	ldr	r1, [pc, #212]	; (8011c40 <etharp_find_entry+0x278>)
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	005b      	lsls	r3, r3, #1
 8011b70:	4413      	add	r3, r2
 8011b72:	00db      	lsls	r3, r3, #3
 8011b74:	440b      	add	r3, r1
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d018      	beq.n	8011bae <etharp_find_entry+0x1e6>
 8011b7c:	4b31      	ldr	r3, [pc, #196]	; (8011c44 <etharp_find_entry+0x27c>)
 8011b7e:	f240 126f 	movw	r2, #367	; 0x16f
 8011b82:	4933      	ldr	r1, [pc, #204]	; (8011c50 <etharp_find_entry+0x288>)
 8011b84:	4831      	ldr	r0, [pc, #196]	; (8011c4c <etharp_find_entry+0x284>)
 8011b86:	f003 fd63 	bl	8015650 <iprintf>
 8011b8a:	e010      	b.n	8011bae <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011b8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011b90:	2b09      	cmp	r3, #9
 8011b92:	dc02      	bgt.n	8011b9a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8011b94:	7ffb      	ldrb	r3, [r7, #31]
 8011b96:	773b      	strb	r3, [r7, #28]
 8011b98:	e009      	b.n	8011bae <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011b9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011b9e:	2b09      	cmp	r3, #9
 8011ba0:	dc02      	bgt.n	8011ba8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011ba2:	7efb      	ldrb	r3, [r7, #27]
 8011ba4:	773b      	strb	r3, [r7, #28]
 8011ba6:	e002      	b.n	8011bae <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8011ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bac:	e043      	b.n	8011c36 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011bae:	7f3b      	ldrb	r3, [r7, #28]
 8011bb0:	2b09      	cmp	r3, #9
 8011bb2:	d906      	bls.n	8011bc2 <etharp_find_entry+0x1fa>
 8011bb4:	4b23      	ldr	r3, [pc, #140]	; (8011c44 <etharp_find_entry+0x27c>)
 8011bb6:	f240 1281 	movw	r2, #385	; 0x181
 8011bba:	4926      	ldr	r1, [pc, #152]	; (8011c54 <etharp_find_entry+0x28c>)
 8011bbc:	4823      	ldr	r0, [pc, #140]	; (8011c4c <etharp_find_entry+0x284>)
 8011bbe:	f003 fd47 	bl	8015650 <iprintf>
    etharp_free_entry(i);
 8011bc2:	7f3b      	ldrb	r3, [r7, #28]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7ff fe25 	bl	8011814 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011bca:	7f3b      	ldrb	r3, [r7, #28]
 8011bcc:	2b09      	cmp	r3, #9
 8011bce:	d906      	bls.n	8011bde <etharp_find_entry+0x216>
 8011bd0:	4b1c      	ldr	r3, [pc, #112]	; (8011c44 <etharp_find_entry+0x27c>)
 8011bd2:	f240 1285 	movw	r2, #389	; 0x185
 8011bd6:	491f      	ldr	r1, [pc, #124]	; (8011c54 <etharp_find_entry+0x28c>)
 8011bd8:	481c      	ldr	r0, [pc, #112]	; (8011c4c <etharp_find_entry+0x284>)
 8011bda:	f003 fd39 	bl	8015650 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011bde:	7f3a      	ldrb	r2, [r7, #28]
 8011be0:	4917      	ldr	r1, [pc, #92]	; (8011c40 <etharp_find_entry+0x278>)
 8011be2:	4613      	mov	r3, r2
 8011be4:	005b      	lsls	r3, r3, #1
 8011be6:	4413      	add	r3, r2
 8011be8:	00db      	lsls	r3, r3, #3
 8011bea:	440b      	add	r3, r1
 8011bec:	3314      	adds	r3, #20
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d006      	beq.n	8011c02 <etharp_find_entry+0x23a>
 8011bf4:	4b13      	ldr	r3, [pc, #76]	; (8011c44 <etharp_find_entry+0x27c>)
 8011bf6:	f240 1287 	movw	r2, #391	; 0x187
 8011bfa:	4917      	ldr	r1, [pc, #92]	; (8011c58 <etharp_find_entry+0x290>)
 8011bfc:	4813      	ldr	r0, [pc, #76]	; (8011c4c <etharp_find_entry+0x284>)
 8011bfe:	f003 fd27 	bl	8015650 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d00a      	beq.n	8011c1e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011c08:	7f3a      	ldrb	r2, [r7, #28]
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	6819      	ldr	r1, [r3, #0]
 8011c0e:	480c      	ldr	r0, [pc, #48]	; (8011c40 <etharp_find_entry+0x278>)
 8011c10:	4613      	mov	r3, r2
 8011c12:	005b      	lsls	r3, r3, #1
 8011c14:	4413      	add	r3, r2
 8011c16:	00db      	lsls	r3, r3, #3
 8011c18:	4403      	add	r3, r0
 8011c1a:	3304      	adds	r3, #4
 8011c1c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011c1e:	7f3a      	ldrb	r2, [r7, #28]
 8011c20:	4907      	ldr	r1, [pc, #28]	; (8011c40 <etharp_find_entry+0x278>)
 8011c22:	4613      	mov	r3, r2
 8011c24:	005b      	lsls	r3, r3, #1
 8011c26:	4413      	add	r3, r2
 8011c28:	00db      	lsls	r3, r3, #3
 8011c2a:	440b      	add	r3, r1
 8011c2c:	3312      	adds	r3, #18
 8011c2e:	2200      	movs	r2, #0
 8011c30:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8011c32:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3720      	adds	r7, #32
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	20005fc0 	.word	0x20005fc0
 8011c44:	08018154 	.word	0x08018154
 8011c48:	0801818c 	.word	0x0801818c
 8011c4c:	080181cc 	.word	0x080181cc
 8011c50:	080181f4 	.word	0x080181f4
 8011c54:	0801820c 	.word	0x0801820c
 8011c58:	08018220 	.word	0x08018220

08011c5c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b088      	sub	sp, #32
 8011c60:	af02      	add	r7, sp, #8
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]
 8011c68:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011c70:	2b06      	cmp	r3, #6
 8011c72:	d006      	beq.n	8011c82 <etharp_update_arp_entry+0x26>
 8011c74:	4b48      	ldr	r3, [pc, #288]	; (8011d98 <etharp_update_arp_entry+0x13c>)
 8011c76:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011c7a:	4948      	ldr	r1, [pc, #288]	; (8011d9c <etharp_update_arp_entry+0x140>)
 8011c7c:	4848      	ldr	r0, [pc, #288]	; (8011da0 <etharp_update_arp_entry+0x144>)
 8011c7e:	f003 fce7 	bl	8015650 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d012      	beq.n	8011cae <etharp_update_arp_entry+0x52>
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d00e      	beq.n	8011cae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	68f9      	ldr	r1, [r7, #12]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f001 f8da 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 8011c9c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d105      	bne.n	8011cae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011caa:	2be0      	cmp	r3, #224	; 0xe0
 8011cac:	d102      	bne.n	8011cb4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011cae:	f06f 030f 	mvn.w	r3, #15
 8011cb2:	e06c      	b.n	8011d8e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011cb4:	78fb      	ldrb	r3, [r7, #3]
 8011cb6:	68fa      	ldr	r2, [r7, #12]
 8011cb8:	4619      	mov	r1, r3
 8011cba:	68b8      	ldr	r0, [r7, #8]
 8011cbc:	f7ff fe84 	bl	80119c8 <etharp_find_entry>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	da02      	bge.n	8011cd2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cd0:	e05d      	b.n	8011d8e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011cd2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011cd6:	4933      	ldr	r1, [pc, #204]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011cd8:	4613      	mov	r3, r2
 8011cda:	005b      	lsls	r3, r3, #1
 8011cdc:	4413      	add	r3, r2
 8011cde:	00db      	lsls	r3, r3, #3
 8011ce0:	440b      	add	r3, r1
 8011ce2:	3314      	adds	r3, #20
 8011ce4:	2202      	movs	r2, #2
 8011ce6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011ce8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011cec:	492d      	ldr	r1, [pc, #180]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011cee:	4613      	mov	r3, r2
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	4413      	add	r3, r2
 8011cf4:	00db      	lsls	r3, r3, #3
 8011cf6:	440b      	add	r3, r1
 8011cf8:	3308      	adds	r3, #8
 8011cfa:	68fa      	ldr	r2, [r7, #12]
 8011cfc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8011cfe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011d02:	4613      	mov	r3, r2
 8011d04:	005b      	lsls	r3, r3, #1
 8011d06:	4413      	add	r3, r2
 8011d08:	00db      	lsls	r3, r3, #3
 8011d0a:	3308      	adds	r3, #8
 8011d0c:	4a25      	ldr	r2, [pc, #148]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d0e:	4413      	add	r3, r2
 8011d10:	3304      	adds	r3, #4
 8011d12:	2206      	movs	r2, #6
 8011d14:	6879      	ldr	r1, [r7, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f003 fc87 	bl	801562a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011d1c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011d20:	4920      	ldr	r1, [pc, #128]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d22:	4613      	mov	r3, r2
 8011d24:	005b      	lsls	r3, r3, #1
 8011d26:	4413      	add	r3, r2
 8011d28:	00db      	lsls	r3, r3, #3
 8011d2a:	440b      	add	r3, r1
 8011d2c:	3312      	adds	r3, #18
 8011d2e:	2200      	movs	r2, #0
 8011d30:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011d32:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011d36:	491b      	ldr	r1, [pc, #108]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d38:	4613      	mov	r3, r2
 8011d3a:	005b      	lsls	r3, r3, #1
 8011d3c:	4413      	add	r3, r2
 8011d3e:	00db      	lsls	r3, r3, #3
 8011d40:	440b      	add	r3, r1
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d021      	beq.n	8011d8c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011d48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011d4c:	4915      	ldr	r1, [pc, #84]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d4e:	4613      	mov	r3, r2
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	4413      	add	r3, r2
 8011d54:	00db      	lsls	r3, r3, #3
 8011d56:	440b      	add	r3, r1
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011d5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011d60:	4910      	ldr	r1, [pc, #64]	; (8011da4 <etharp_update_arp_entry+0x148>)
 8011d62:	4613      	mov	r3, r2
 8011d64:	005b      	lsls	r3, r3, #1
 8011d66:	4413      	add	r3, r2
 8011d68:	00db      	lsls	r3, r3, #3
 8011d6a:	440b      	add	r3, r1
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8011d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6939      	ldr	r1, [r7, #16]
 8011d80:	68f8      	ldr	r0, [r7, #12]
 8011d82:	f001 ff07 	bl	8013b94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011d86:	6938      	ldr	r0, [r7, #16]
 8011d88:	f7fb f864 	bl	800ce54 <pbuf_free>
  }
  return ERR_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3718      	adds	r7, #24
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	08018154 	.word	0x08018154
 8011d9c:	0801824c 	.word	0x0801824c
 8011da0:	080181cc 	.word	0x080181cc
 8011da4:	20005fc0 	.word	0x20005fc0

08011da8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011db0:	2300      	movs	r3, #0
 8011db2:	73fb      	strb	r3, [r7, #15]
 8011db4:	e01f      	b.n	8011df6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8011db6:	7bfa      	ldrb	r2, [r7, #15]
 8011db8:	4912      	ldr	r1, [pc, #72]	; (8011e04 <etharp_cleanup_netif+0x5c>)
 8011dba:	4613      	mov	r3, r2
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	4413      	add	r3, r2
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	440b      	add	r3, r1
 8011dc4:	3314      	adds	r3, #20
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011dca:	7bbb      	ldrb	r3, [r7, #14]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00f      	beq.n	8011df0 <etharp_cleanup_netif+0x48>
 8011dd0:	7bfa      	ldrb	r2, [r7, #15]
 8011dd2:	490c      	ldr	r1, [pc, #48]	; (8011e04 <etharp_cleanup_netif+0x5c>)
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	005b      	lsls	r3, r3, #1
 8011dd8:	4413      	add	r3, r2
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	440b      	add	r3, r1
 8011dde:	3308      	adds	r3, #8
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d103      	bne.n	8011df0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8011de8:	7bfb      	ldrb	r3, [r7, #15]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff fd12 	bl	8011814 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011df0:	7bfb      	ldrb	r3, [r7, #15]
 8011df2:	3301      	adds	r3, #1
 8011df4:	73fb      	strb	r3, [r7, #15]
 8011df6:	7bfb      	ldrb	r3, [r7, #15]
 8011df8:	2b09      	cmp	r3, #9
 8011dfa:	d9dc      	bls.n	8011db6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011dfc:	bf00      	nop
 8011dfe:	3710      	adds	r7, #16
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	20005fc0 	.word	0x20005fc0

08011e08 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011e08:	b5b0      	push	{r4, r5, r7, lr}
 8011e0a:	b08a      	sub	sp, #40	; 0x28
 8011e0c:	af04      	add	r7, sp, #16
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d107      	bne.n	8011e28 <etharp_input+0x20>
 8011e18:	4b3d      	ldr	r3, [pc, #244]	; (8011f10 <etharp_input+0x108>)
 8011e1a:	f44f 7222 	mov.w	r2, #648	; 0x288
 8011e1e:	493d      	ldr	r1, [pc, #244]	; (8011f14 <etharp_input+0x10c>)
 8011e20:	483d      	ldr	r0, [pc, #244]	; (8011f18 <etharp_input+0x110>)
 8011e22:	f003 fc15 	bl	8015650 <iprintf>
 8011e26:	e06f      	b.n	8011f08 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	881b      	ldrh	r3, [r3, #0]
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e38:	d10c      	bne.n	8011e54 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8011e3e:	2b06      	cmp	r3, #6
 8011e40:	d108      	bne.n	8011e54 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e46:	2b04      	cmp	r3, #4
 8011e48:	d104      	bne.n	8011e54 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	885b      	ldrh	r3, [r3, #2]
 8011e4e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e50:	2b08      	cmp	r3, #8
 8011e52:	d003      	beq.n	8011e5c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f7fa fffd 	bl	800ce54 <pbuf_free>
    return;
 8011e5a:	e055      	b.n	8011f08 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	330e      	adds	r3, #14
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	3318      	adds	r3, #24
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	3304      	adds	r3, #4
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d102      	bne.n	8011e7c <etharp_input+0x74>
    for_us = 0;
 8011e76:	2300      	movs	r3, #0
 8011e78:	75fb      	strb	r3, [r7, #23]
 8011e7a:	e009      	b.n	8011e90 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	3304      	adds	r3, #4
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	bf0c      	ite	eq
 8011e88:	2301      	moveq	r3, #1
 8011e8a:	2300      	movne	r3, #0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	f103 0208 	add.w	r2, r3, #8
 8011e96:	7dfb      	ldrb	r3, [r7, #23]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d001      	beq.n	8011ea0 <etharp_input+0x98>
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	e000      	b.n	8011ea2 <etharp_input+0x9a>
 8011ea0:	2302      	movs	r3, #2
 8011ea2:	f107 010c 	add.w	r1, r7, #12
 8011ea6:	6838      	ldr	r0, [r7, #0]
 8011ea8:	f7ff fed8 	bl	8011c5c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	88db      	ldrh	r3, [r3, #6]
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011eb6:	d003      	beq.n	8011ec0 <etharp_input+0xb8>
 8011eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ebc:	d01e      	beq.n	8011efc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8011ebe:	e020      	b.n	8011f02 <etharp_input+0xfa>
    if (for_us) {
 8011ec0:	7dfb      	ldrb	r3, [r7, #23]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d01c      	beq.n	8011f00 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8011edc:	693a      	ldr	r2, [r7, #16]
 8011ede:	3208      	adds	r2, #8
      etharp_raw(netif,
 8011ee0:	2102      	movs	r1, #2
 8011ee2:	9103      	str	r1, [sp, #12]
 8011ee4:	f107 010c 	add.w	r1, r7, #12
 8011ee8:	9102      	str	r1, [sp, #8]
 8011eea:	9201      	str	r2, [sp, #4]
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	462b      	mov	r3, r5
 8011ef0:	4622      	mov	r2, r4
 8011ef2:	4601      	mov	r1, r0
 8011ef4:	6838      	ldr	r0, [r7, #0]
 8011ef6:	f000 fae3 	bl	80124c0 <etharp_raw>
    break;
 8011efa:	e001      	b.n	8011f00 <etharp_input+0xf8>
    break;
 8011efc:	bf00      	nop
 8011efe:	e000      	b.n	8011f02 <etharp_input+0xfa>
    break;
 8011f00:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f7fa ffa6 	bl	800ce54 <pbuf_free>
}
 8011f08:	3718      	adds	r7, #24
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	08018154 	.word	0x08018154
 8011f14:	080182a4 	.word	0x080182a4
 8011f18:	080181cc 	.word	0x080181cc

08011f1c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b086      	sub	sp, #24
 8011f20:	af02      	add	r7, sp, #8
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	4613      	mov	r3, r2
 8011f28:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011f2a:	79fa      	ldrb	r2, [r7, #7]
 8011f2c:	4944      	ldr	r1, [pc, #272]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011f2e:	4613      	mov	r3, r2
 8011f30:	005b      	lsls	r3, r3, #1
 8011f32:	4413      	add	r3, r2
 8011f34:	00db      	lsls	r3, r3, #3
 8011f36:	440b      	add	r3, r1
 8011f38:	3314      	adds	r3, #20
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d806      	bhi.n	8011f4e <etharp_output_to_arp_index+0x32>
 8011f40:	4b40      	ldr	r3, [pc, #256]	; (8012044 <etharp_output_to_arp_index+0x128>)
 8011f42:	f240 22ed 	movw	r2, #749	; 0x2ed
 8011f46:	4940      	ldr	r1, [pc, #256]	; (8012048 <etharp_output_to_arp_index+0x12c>)
 8011f48:	4840      	ldr	r0, [pc, #256]	; (801204c <etharp_output_to_arp_index+0x130>)
 8011f4a:	f003 fb81 	bl	8015650 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011f4e:	79fa      	ldrb	r2, [r7, #7]
 8011f50:	493b      	ldr	r1, [pc, #236]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011f52:	4613      	mov	r3, r2
 8011f54:	005b      	lsls	r3, r3, #1
 8011f56:	4413      	add	r3, r2
 8011f58:	00db      	lsls	r3, r3, #3
 8011f5a:	440b      	add	r3, r1
 8011f5c:	3314      	adds	r3, #20
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	2b02      	cmp	r3, #2
 8011f62:	d153      	bne.n	801200c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011f64:	79fa      	ldrb	r2, [r7, #7]
 8011f66:	4936      	ldr	r1, [pc, #216]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011f68:	4613      	mov	r3, r2
 8011f6a:	005b      	lsls	r3, r3, #1
 8011f6c:	4413      	add	r3, r2
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	440b      	add	r3, r1
 8011f72:	3312      	adds	r3, #18
 8011f74:	881b      	ldrh	r3, [r3, #0]
 8011f76:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011f7a:	d919      	bls.n	8011fb0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011f7c:	79fa      	ldrb	r2, [r7, #7]
 8011f7e:	4613      	mov	r3, r2
 8011f80:	005b      	lsls	r3, r3, #1
 8011f82:	4413      	add	r3, r2
 8011f84:	00db      	lsls	r3, r3, #3
 8011f86:	4a2e      	ldr	r2, [pc, #184]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011f88:	4413      	add	r3, r2
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	68f8      	ldr	r0, [r7, #12]
 8011f90:	f000 fb44 	bl	801261c <etharp_request>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d138      	bne.n	801200c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f9a:	79fa      	ldrb	r2, [r7, #7]
 8011f9c:	4928      	ldr	r1, [pc, #160]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	00db      	lsls	r3, r3, #3
 8011fa6:	440b      	add	r3, r1
 8011fa8:	3314      	adds	r3, #20
 8011faa:	2203      	movs	r2, #3
 8011fac:	701a      	strb	r2, [r3, #0]
 8011fae:	e02d      	b.n	801200c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011fb0:	79fa      	ldrb	r2, [r7, #7]
 8011fb2:	4923      	ldr	r1, [pc, #140]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011fb4:	4613      	mov	r3, r2
 8011fb6:	005b      	lsls	r3, r3, #1
 8011fb8:	4413      	add	r3, r2
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	440b      	add	r3, r1
 8011fbe:	3312      	adds	r3, #18
 8011fc0:	881b      	ldrh	r3, [r3, #0]
 8011fc2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011fc6:	d321      	bcc.n	801200c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011fc8:	79fa      	ldrb	r2, [r7, #7]
 8011fca:	4613      	mov	r3, r2
 8011fcc:	005b      	lsls	r3, r3, #1
 8011fce:	4413      	add	r3, r2
 8011fd0:	00db      	lsls	r3, r3, #3
 8011fd2:	4a1b      	ldr	r2, [pc, #108]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011fd4:	4413      	add	r3, r2
 8011fd6:	1d19      	adds	r1, r3, #4
 8011fd8:	79fa      	ldrb	r2, [r7, #7]
 8011fda:	4613      	mov	r3, r2
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	4413      	add	r3, r2
 8011fe0:	00db      	lsls	r3, r3, #3
 8011fe2:	3308      	adds	r3, #8
 8011fe4:	4a16      	ldr	r2, [pc, #88]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011fe6:	4413      	add	r3, r2
 8011fe8:	3304      	adds	r3, #4
 8011fea:	461a      	mov	r2, r3
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f000 faf3 	bl	80125d8 <etharp_request_dst>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d109      	bne.n	801200c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011ff8:	79fa      	ldrb	r2, [r7, #7]
 8011ffa:	4911      	ldr	r1, [pc, #68]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	005b      	lsls	r3, r3, #1
 8012000:	4413      	add	r3, r2
 8012002:	00db      	lsls	r3, r3, #3
 8012004:	440b      	add	r3, r1
 8012006:	3314      	adds	r3, #20
 8012008:	2203      	movs	r2, #3
 801200a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8012012:	79fa      	ldrb	r2, [r7, #7]
 8012014:	4613      	mov	r3, r2
 8012016:	005b      	lsls	r3, r3, #1
 8012018:	4413      	add	r3, r2
 801201a:	00db      	lsls	r3, r3, #3
 801201c:	3308      	adds	r3, #8
 801201e:	4a08      	ldr	r2, [pc, #32]	; (8012040 <etharp_output_to_arp_index+0x124>)
 8012020:	4413      	add	r3, r2
 8012022:	1d1a      	adds	r2, r3, #4
 8012024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012028:	9300      	str	r3, [sp, #0]
 801202a:	4613      	mov	r3, r2
 801202c:	460a      	mov	r2, r1
 801202e:	68b9      	ldr	r1, [r7, #8]
 8012030:	68f8      	ldr	r0, [r7, #12]
 8012032:	f001 fdaf 	bl	8013b94 <ethernet_output>
 8012036:	4603      	mov	r3, r0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	20005fc0 	.word	0x20005fc0
 8012044:	08018154 	.word	0x08018154
 8012048:	080182c4 	.word	0x080182c4
 801204c:	080181cc 	.word	0x080181cc

08012050 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b08a      	sub	sp, #40	; 0x28
 8012054:	af02      	add	r7, sp, #8
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d106      	bne.n	8012074 <etharp_output+0x24>
 8012066:	4b69      	ldr	r3, [pc, #420]	; (801220c <etharp_output+0x1bc>)
 8012068:	f240 321b 	movw	r2, #795	; 0x31b
 801206c:	4968      	ldr	r1, [pc, #416]	; (8012210 <etharp_output+0x1c0>)
 801206e:	4869      	ldr	r0, [pc, #420]	; (8012214 <etharp_output+0x1c4>)
 8012070:	f003 faee 	bl	8015650 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d106      	bne.n	8012088 <etharp_output+0x38>
 801207a:	4b64      	ldr	r3, [pc, #400]	; (801220c <etharp_output+0x1bc>)
 801207c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012080:	4965      	ldr	r1, [pc, #404]	; (8012218 <etharp_output+0x1c8>)
 8012082:	4864      	ldr	r0, [pc, #400]	; (8012214 <etharp_output+0x1c4>)
 8012084:	f003 fae4 	bl	8015650 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d106      	bne.n	801209c <etharp_output+0x4c>
 801208e:	4b5f      	ldr	r3, [pc, #380]	; (801220c <etharp_output+0x1bc>)
 8012090:	f240 321d 	movw	r2, #797	; 0x31d
 8012094:	4961      	ldr	r1, [pc, #388]	; (801221c <etharp_output+0x1cc>)
 8012096:	485f      	ldr	r0, [pc, #380]	; (8012214 <etharp_output+0x1c4>)
 8012098:	f003 fada 	bl	8015650 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	68f9      	ldr	r1, [r7, #12]
 80120a2:	4618      	mov	r0, r3
 80120a4:	f000 fed4 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d002      	beq.n	80120b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80120ae:	4b5c      	ldr	r3, [pc, #368]	; (8012220 <etharp_output+0x1d0>)
 80120b0:	61fb      	str	r3, [r7, #28]
 80120b2:	e09b      	b.n	80121ec <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120bc:	2be0      	cmp	r3, #224	; 0xe0
 80120be:	d118      	bne.n	80120f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80120c0:	2301      	movs	r3, #1
 80120c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80120c4:	2300      	movs	r3, #0
 80120c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80120c8:	235e      	movs	r3, #94	; 0x5e
 80120ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	3301      	adds	r3, #1
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	3302      	adds	r3, #2
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	3303      	adds	r3, #3
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80120ea:	f107 0310 	add.w	r3, r7, #16
 80120ee:	61fb      	str	r3, [r7, #28]
 80120f0:	e07c      	b.n	80121ec <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681a      	ldr	r2, [r3, #0]
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	3304      	adds	r3, #4
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	405a      	eors	r2, r3
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	3308      	adds	r3, #8
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4013      	ands	r3, r2
 8012106:	2b00      	cmp	r3, #0
 8012108:	d012      	beq.n	8012130 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012110:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012114:	4293      	cmp	r3, r2
 8012116:	d00b      	beq.n	8012130 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	330c      	adds	r3, #12
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d003      	beq.n	801212a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	330c      	adds	r3, #12
 8012126:	61bb      	str	r3, [r7, #24]
 8012128:	e002      	b.n	8012130 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801212a:	f06f 0303 	mvn.w	r3, #3
 801212e:	e069      	b.n	8012204 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012130:	4b3c      	ldr	r3, [pc, #240]	; (8012224 <etharp_output+0x1d4>)
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	4619      	mov	r1, r3
 8012136:	4a3c      	ldr	r2, [pc, #240]	; (8012228 <etharp_output+0x1d8>)
 8012138:	460b      	mov	r3, r1
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	440b      	add	r3, r1
 801213e:	00db      	lsls	r3, r3, #3
 8012140:	4413      	add	r3, r2
 8012142:	3314      	adds	r3, #20
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	2b01      	cmp	r3, #1
 8012148:	d917      	bls.n	801217a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	4b35      	ldr	r3, [pc, #212]	; (8012224 <etharp_output+0x1d4>)
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	4618      	mov	r0, r3
 8012154:	4934      	ldr	r1, [pc, #208]	; (8012228 <etharp_output+0x1d8>)
 8012156:	4603      	mov	r3, r0
 8012158:	005b      	lsls	r3, r3, #1
 801215a:	4403      	add	r3, r0
 801215c:	00db      	lsls	r3, r3, #3
 801215e:	440b      	add	r3, r1
 8012160:	3304      	adds	r3, #4
 8012162:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012164:	429a      	cmp	r2, r3
 8012166:	d108      	bne.n	801217a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012168:	4b2e      	ldr	r3, [pc, #184]	; (8012224 <etharp_output+0x1d4>)
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	461a      	mov	r2, r3
 801216e:	68b9      	ldr	r1, [r7, #8]
 8012170:	68f8      	ldr	r0, [r7, #12]
 8012172:	f7ff fed3 	bl	8011f1c <etharp_output_to_arp_index>
 8012176:	4603      	mov	r3, r0
 8012178:	e044      	b.n	8012204 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801217a:	2300      	movs	r3, #0
 801217c:	75fb      	strb	r3, [r7, #23]
 801217e:	e02a      	b.n	80121d6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012180:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012184:	4928      	ldr	r1, [pc, #160]	; (8012228 <etharp_output+0x1d8>)
 8012186:	4613      	mov	r3, r2
 8012188:	005b      	lsls	r3, r3, #1
 801218a:	4413      	add	r3, r2
 801218c:	00db      	lsls	r3, r3, #3
 801218e:	440b      	add	r3, r1
 8012190:	3314      	adds	r3, #20
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	2b01      	cmp	r3, #1
 8012196:	d918      	bls.n	80121ca <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012198:	69bb      	ldr	r3, [r7, #24]
 801219a:	6819      	ldr	r1, [r3, #0]
 801219c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80121a0:	4821      	ldr	r0, [pc, #132]	; (8012228 <etharp_output+0x1d8>)
 80121a2:	4613      	mov	r3, r2
 80121a4:	005b      	lsls	r3, r3, #1
 80121a6:	4413      	add	r3, r2
 80121a8:	00db      	lsls	r3, r3, #3
 80121aa:	4403      	add	r3, r0
 80121ac:	3304      	adds	r3, #4
 80121ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80121b0:	4299      	cmp	r1, r3
 80121b2:	d10a      	bne.n	80121ca <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80121b4:	7dfa      	ldrb	r2, [r7, #23]
 80121b6:	4b1b      	ldr	r3, [pc, #108]	; (8012224 <etharp_output+0x1d4>)
 80121b8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80121ba:	7dfb      	ldrb	r3, [r7, #23]
 80121bc:	461a      	mov	r2, r3
 80121be:	68b9      	ldr	r1, [r7, #8]
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f7ff feab 	bl	8011f1c <etharp_output_to_arp_index>
 80121c6:	4603      	mov	r3, r0
 80121c8:	e01c      	b.n	8012204 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80121ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	3301      	adds	r3, #1
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	75fb      	strb	r3, [r7, #23]
 80121d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121da:	2b09      	cmp	r3, #9
 80121dc:	ddd0      	ble.n	8012180 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80121de:	68ba      	ldr	r2, [r7, #8]
 80121e0:	69b9      	ldr	r1, [r7, #24]
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f000 f822 	bl	801222c <etharp_query>
 80121e8:	4603      	mov	r3, r0
 80121ea:	e00b      	b.n	8012204 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80121f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	68b9      	ldr	r1, [r7, #8]
 80121fc:	68f8      	ldr	r0, [r7, #12]
 80121fe:	f001 fcc9 	bl	8013b94 <ethernet_output>
 8012202:	4603      	mov	r3, r0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3720      	adds	r7, #32
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}
 801220c:	08018154 	.word	0x08018154
 8012210:	080182a4 	.word	0x080182a4
 8012214:	080181cc 	.word	0x080181cc
 8012218:	080182f4 	.word	0x080182f4
 801221c:	08018294 	.word	0x08018294
 8012220:	080189e4 	.word	0x080189e4
 8012224:	200060b0 	.word	0x200060b0
 8012228:	20005fc0 	.word	0x20005fc0

0801222c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b08c      	sub	sp, #48	; 0x30
 8012230:	af02      	add	r7, sp, #8
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	3325      	adds	r3, #37	; 0x25
 801223c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801223e:	23ff      	movs	r3, #255	; 0xff
 8012240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012244:	2300      	movs	r3, #0
 8012246:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	68f9      	ldr	r1, [r7, #12]
 801224e:	4618      	mov	r0, r3
 8012250:	f000 fdfe 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 8012254:	4603      	mov	r3, r0
 8012256:	2b00      	cmp	r3, #0
 8012258:	d10c      	bne.n	8012274 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012262:	2be0      	cmp	r3, #224	; 0xe0
 8012264:	d006      	beq.n	8012274 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d003      	beq.n	8012274 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d102      	bne.n	801227a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012274:	f06f 030f 	mvn.w	r3, #15
 8012278:	e10f      	b.n	801249a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801227a:	68fa      	ldr	r2, [r7, #12]
 801227c:	2101      	movs	r1, #1
 801227e:	68b8      	ldr	r0, [r7, #8]
 8012280:	f7ff fba2 	bl	80119c8 <etharp_find_entry>
 8012284:	4603      	mov	r3, r0
 8012286:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8012288:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801228c:	2b00      	cmp	r3, #0
 801228e:	da02      	bge.n	8012296 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8012290:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012294:	e101      	b.n	801249a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012296:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801229a:	4982      	ldr	r1, [pc, #520]	; (80124a4 <etharp_query+0x278>)
 801229c:	4613      	mov	r3, r2
 801229e:	005b      	lsls	r3, r3, #1
 80122a0:	4413      	add	r3, r2
 80122a2:	00db      	lsls	r3, r3, #3
 80122a4:	440b      	add	r3, r1
 80122a6:	3314      	adds	r3, #20
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d117      	bne.n	80122de <etharp_query+0xb2>
    is_new_entry = 1;
 80122ae:	2301      	movs	r3, #1
 80122b0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80122b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80122b6:	497b      	ldr	r1, [pc, #492]	; (80124a4 <etharp_query+0x278>)
 80122b8:	4613      	mov	r3, r2
 80122ba:	005b      	lsls	r3, r3, #1
 80122bc:	4413      	add	r3, r2
 80122be:	00db      	lsls	r3, r3, #3
 80122c0:	440b      	add	r3, r1
 80122c2:	3314      	adds	r3, #20
 80122c4:	2201      	movs	r2, #1
 80122c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80122c8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80122cc:	4975      	ldr	r1, [pc, #468]	; (80124a4 <etharp_query+0x278>)
 80122ce:	4613      	mov	r3, r2
 80122d0:	005b      	lsls	r3, r3, #1
 80122d2:	4413      	add	r3, r2
 80122d4:	00db      	lsls	r3, r3, #3
 80122d6:	440b      	add	r3, r1
 80122d8:	3308      	adds	r3, #8
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80122de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80122e2:	4970      	ldr	r1, [pc, #448]	; (80124a4 <etharp_query+0x278>)
 80122e4:	4613      	mov	r3, r2
 80122e6:	005b      	lsls	r3, r3, #1
 80122e8:	4413      	add	r3, r2
 80122ea:	00db      	lsls	r3, r3, #3
 80122ec:	440b      	add	r3, r1
 80122ee:	3314      	adds	r3, #20
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	d012      	beq.n	801231c <etharp_query+0xf0>
 80122f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80122fa:	496a      	ldr	r1, [pc, #424]	; (80124a4 <etharp_query+0x278>)
 80122fc:	4613      	mov	r3, r2
 80122fe:	005b      	lsls	r3, r3, #1
 8012300:	4413      	add	r3, r2
 8012302:	00db      	lsls	r3, r3, #3
 8012304:	440b      	add	r3, r1
 8012306:	3314      	adds	r3, #20
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	2b01      	cmp	r3, #1
 801230c:	d806      	bhi.n	801231c <etharp_query+0xf0>
 801230e:	4b66      	ldr	r3, [pc, #408]	; (80124a8 <etharp_query+0x27c>)
 8012310:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012314:	4965      	ldr	r1, [pc, #404]	; (80124ac <etharp_query+0x280>)
 8012316:	4866      	ldr	r0, [pc, #408]	; (80124b0 <etharp_query+0x284>)
 8012318:	f003 f99a 	bl	8015650 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801231c:	6a3b      	ldr	r3, [r7, #32]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d102      	bne.n	8012328 <etharp_query+0xfc>
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d10c      	bne.n	8012342 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012328:	68b9      	ldr	r1, [r7, #8]
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	f000 f976 	bl	801261c <etharp_request>
 8012330:	4603      	mov	r3, r0
 8012332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d102      	bne.n	8012342 <etharp_query+0x116>
      return result;
 801233c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012340:	e0ab      	b.n	801249a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d106      	bne.n	8012356 <etharp_query+0x12a>
 8012348:	4b57      	ldr	r3, [pc, #348]	; (80124a8 <etharp_query+0x27c>)
 801234a:	f240 32db 	movw	r2, #987	; 0x3db
 801234e:	4959      	ldr	r1, [pc, #356]	; (80124b4 <etharp_query+0x288>)
 8012350:	4857      	ldr	r0, [pc, #348]	; (80124b0 <etharp_query+0x284>)
 8012352:	f003 f97d 	bl	8015650 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012356:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801235a:	4952      	ldr	r1, [pc, #328]	; (80124a4 <etharp_query+0x278>)
 801235c:	4613      	mov	r3, r2
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	4413      	add	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	440b      	add	r3, r1
 8012366:	3314      	adds	r3, #20
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b01      	cmp	r3, #1
 801236c:	d919      	bls.n	80123a2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801236e:	7cfa      	ldrb	r2, [r7, #19]
 8012370:	4b51      	ldr	r3, [pc, #324]	; (80124b8 <etharp_query+0x28c>)
 8012372:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012374:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012378:	4613      	mov	r3, r2
 801237a:	005b      	lsls	r3, r3, #1
 801237c:	4413      	add	r3, r2
 801237e:	00db      	lsls	r3, r3, #3
 8012380:	3308      	adds	r3, #8
 8012382:	4a48      	ldr	r2, [pc, #288]	; (80124a4 <etharp_query+0x278>)
 8012384:	4413      	add	r3, r2
 8012386:	1d1a      	adds	r2, r3, #4
 8012388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	4613      	mov	r3, r2
 8012390:	697a      	ldr	r2, [r7, #20]
 8012392:	6879      	ldr	r1, [r7, #4]
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f001 fbfd 	bl	8013b94 <ethernet_output>
 801239a:	4603      	mov	r3, r0
 801239c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123a0:	e079      	b.n	8012496 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80123a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80123a6:	493f      	ldr	r1, [pc, #252]	; (80124a4 <etharp_query+0x278>)
 80123a8:	4613      	mov	r3, r2
 80123aa:	005b      	lsls	r3, r3, #1
 80123ac:	4413      	add	r3, r2
 80123ae:	00db      	lsls	r3, r3, #3
 80123b0:	440b      	add	r3, r1
 80123b2:	3314      	adds	r3, #20
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	2b01      	cmp	r3, #1
 80123b8:	d16d      	bne.n	8012496 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80123ba:	2300      	movs	r3, #0
 80123bc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123c2:	e01a      	b.n	80123fa <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	895a      	ldrh	r2, [r3, #10]
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	891b      	ldrh	r3, [r3, #8]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d10a      	bne.n	80123e6 <etharp_query+0x1ba>
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d006      	beq.n	80123e6 <etharp_query+0x1ba>
 80123d8:	4b33      	ldr	r3, [pc, #204]	; (80124a8 <etharp_query+0x27c>)
 80123da:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80123de:	4937      	ldr	r1, [pc, #220]	; (80124bc <etharp_query+0x290>)
 80123e0:	4833      	ldr	r0, [pc, #204]	; (80124b0 <etharp_query+0x284>)
 80123e2:	f003 f935 	bl	8015650 <iprintf>
      if (p->type != PBUF_ROM) {
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	7b1b      	ldrb	r3, [r3, #12]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d002      	beq.n	80123f4 <etharp_query+0x1c8>
        copy_needed = 1;
 80123ee:	2301      	movs	r3, #1
 80123f0:	61bb      	str	r3, [r7, #24]
        break;
 80123f2:	e005      	b.n	8012400 <etharp_query+0x1d4>
      }
      p = p->next;
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d1e1      	bne.n	80123c4 <etharp_query+0x198>
    }
    if (copy_needed) {
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d017      	beq.n	8012436 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	891b      	ldrh	r3, [r3, #8]
 801240a:	2200      	movs	r2, #0
 801240c:	4619      	mov	r1, r3
 801240e:	2002      	movs	r0, #2
 8012410:	f7fa f9b2 	bl	800c778 <pbuf_alloc>
 8012414:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d011      	beq.n	8012440 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801241c:	6879      	ldr	r1, [r7, #4]
 801241e:	69f8      	ldr	r0, [r7, #28]
 8012420:	f7fa fe48 	bl	800d0b4 <pbuf_copy>
 8012424:	4603      	mov	r3, r0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00a      	beq.n	8012440 <etharp_query+0x214>
          pbuf_free(p);
 801242a:	69f8      	ldr	r0, [r7, #28]
 801242c:	f7fa fd12 	bl	800ce54 <pbuf_free>
          p = NULL;
 8012430:	2300      	movs	r3, #0
 8012432:	61fb      	str	r3, [r7, #28]
 8012434:	e004      	b.n	8012440 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801243a:	69f8      	ldr	r0, [r7, #28]
 801243c:	f7fa fdbc 	bl	800cfb8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d024      	beq.n	8012490 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012446:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801244a:	4916      	ldr	r1, [pc, #88]	; (80124a4 <etharp_query+0x278>)
 801244c:	4613      	mov	r3, r2
 801244e:	005b      	lsls	r3, r3, #1
 8012450:	4413      	add	r3, r2
 8012452:	00db      	lsls	r3, r3, #3
 8012454:	440b      	add	r3, r1
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d00b      	beq.n	8012474 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801245c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012460:	4910      	ldr	r1, [pc, #64]	; (80124a4 <etharp_query+0x278>)
 8012462:	4613      	mov	r3, r2
 8012464:	005b      	lsls	r3, r3, #1
 8012466:	4413      	add	r3, r2
 8012468:	00db      	lsls	r3, r3, #3
 801246a:	440b      	add	r3, r1
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	4618      	mov	r0, r3
 8012470:	f7fa fcf0 	bl	800ce54 <pbuf_free>
      }
      arp_table[i].q = p;
 8012474:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012478:	490a      	ldr	r1, [pc, #40]	; (80124a4 <etharp_query+0x278>)
 801247a:	4613      	mov	r3, r2
 801247c:	005b      	lsls	r3, r3, #1
 801247e:	4413      	add	r3, r2
 8012480:	00db      	lsls	r3, r3, #3
 8012482:	440b      	add	r3, r1
 8012484:	69fa      	ldr	r2, [r7, #28]
 8012486:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012488:	2300      	movs	r3, #0
 801248a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801248e:	e002      	b.n	8012496 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012490:	23ff      	movs	r3, #255	; 0xff
 8012492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012496:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801249a:	4618      	mov	r0, r3
 801249c:	3728      	adds	r7, #40	; 0x28
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	20005fc0 	.word	0x20005fc0
 80124a8:	08018154 	.word	0x08018154
 80124ac:	08018300 	.word	0x08018300
 80124b0:	080181cc 	.word	0x080181cc
 80124b4:	080182f4 	.word	0x080182f4
 80124b8:	200060b0 	.word	0x200060b0
 80124bc:	08018328 	.word	0x08018328

080124c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b08a      	sub	sp, #40	; 0x28
 80124c4:	af02      	add	r7, sp, #8
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
 80124cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80124ce:	2300      	movs	r3, #0
 80124d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d106      	bne.n	80124e6 <etharp_raw+0x26>
 80124d8:	4b3a      	ldr	r3, [pc, #232]	; (80125c4 <etharp_raw+0x104>)
 80124da:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80124de:	493a      	ldr	r1, [pc, #232]	; (80125c8 <etharp_raw+0x108>)
 80124e0:	483a      	ldr	r0, [pc, #232]	; (80125cc <etharp_raw+0x10c>)
 80124e2:	f003 f8b5 	bl	8015650 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80124e6:	2200      	movs	r2, #0
 80124e8:	211c      	movs	r1, #28
 80124ea:	2002      	movs	r0, #2
 80124ec:	f7fa f944 	bl	800c778 <pbuf_alloc>
 80124f0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d102      	bne.n	80124fe <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80124f8:	f04f 33ff 	mov.w	r3, #4294967295
 80124fc:	e05d      	b.n	80125ba <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	895b      	ldrh	r3, [r3, #10]
 8012502:	2b1b      	cmp	r3, #27
 8012504:	d806      	bhi.n	8012514 <etharp_raw+0x54>
 8012506:	4b2f      	ldr	r3, [pc, #188]	; (80125c4 <etharp_raw+0x104>)
 8012508:	f240 4264 	movw	r2, #1124	; 0x464
 801250c:	4930      	ldr	r1, [pc, #192]	; (80125d0 <etharp_raw+0x110>)
 801250e:	482f      	ldr	r0, [pc, #188]	; (80125cc <etharp_raw+0x10c>)
 8012510:	f003 f89e 	bl	8015650 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801251a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801251c:	4618      	mov	r0, r3
 801251e:	f7f9 fb63 	bl	800bbe8 <lwip_htons>
 8012522:	4603      	mov	r3, r0
 8012524:	461a      	mov	r2, r3
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012530:	2b06      	cmp	r3, #6
 8012532:	d006      	beq.n	8012542 <etharp_raw+0x82>
 8012534:	4b23      	ldr	r3, [pc, #140]	; (80125c4 <etharp_raw+0x104>)
 8012536:	f240 426b 	movw	r2, #1131	; 0x46b
 801253a:	4926      	ldr	r1, [pc, #152]	; (80125d4 <etharp_raw+0x114>)
 801253c:	4823      	ldr	r0, [pc, #140]	; (80125cc <etharp_raw+0x10c>)
 801253e:	f003 f887 	bl	8015650 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	3308      	adds	r3, #8
 8012546:	2206      	movs	r2, #6
 8012548:	6839      	ldr	r1, [r7, #0]
 801254a:	4618      	mov	r0, r3
 801254c:	f003 f86d 	bl	801562a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	3312      	adds	r3, #18
 8012554:	2206      	movs	r2, #6
 8012556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012558:	4618      	mov	r0, r3
 801255a:	f003 f866 	bl	801562a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	330e      	adds	r3, #14
 8012562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012564:	6812      	ldr	r2, [r2, #0]
 8012566:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	3318      	adds	r3, #24
 801256c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801256e:	6812      	ldr	r2, [r2, #0]
 8012570:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	2200      	movs	r2, #0
 8012576:	701a      	strb	r2, [r3, #0]
 8012578:	2200      	movs	r2, #0
 801257a:	f042 0201 	orr.w	r2, r2, #1
 801257e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	2200      	movs	r2, #0
 8012584:	f042 0208 	orr.w	r2, r2, #8
 8012588:	709a      	strb	r2, [r3, #2]
 801258a:	2200      	movs	r2, #0
 801258c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	2206      	movs	r2, #6
 8012592:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	2204      	movs	r2, #4
 8012598:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801259a:	f640 0306 	movw	r3, #2054	; 0x806
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	68ba      	ldr	r2, [r7, #8]
 80125a4:	69b9      	ldr	r1, [r7, #24]
 80125a6:	68f8      	ldr	r0, [r7, #12]
 80125a8:	f001 faf4 	bl	8013b94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80125ac:	69b8      	ldr	r0, [r7, #24]
 80125ae:	f7fa fc51 	bl	800ce54 <pbuf_free>
  p = NULL;
 80125b2:	2300      	movs	r3, #0
 80125b4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80125b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3720      	adds	r7, #32
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	08018154 	.word	0x08018154
 80125c8:	080182a4 	.word	0x080182a4
 80125cc:	080181cc 	.word	0x080181cc
 80125d0:	08018344 	.word	0x08018344
 80125d4:	08018378 	.word	0x08018378

080125d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b088      	sub	sp, #32
 80125dc:	af04      	add	r7, sp, #16
 80125de:	60f8      	str	r0, [r7, #12]
 80125e0:	60b9      	str	r1, [r7, #8]
 80125e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125f4:	2201      	movs	r2, #1
 80125f6:	9203      	str	r2, [sp, #12]
 80125f8:	68ba      	ldr	r2, [r7, #8]
 80125fa:	9202      	str	r2, [sp, #8]
 80125fc:	4a06      	ldr	r2, [pc, #24]	; (8012618 <etharp_request_dst+0x40>)
 80125fe:	9201      	str	r2, [sp, #4]
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	4603      	mov	r3, r0
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f7ff ff5a 	bl	80124c0 <etharp_raw>
 801260c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801260e:	4618      	mov	r0, r3
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	080189ec 	.word	0x080189ec

0801261c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012626:	4a05      	ldr	r2, [pc, #20]	; (801263c <etharp_request+0x20>)
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff ffd4 	bl	80125d8 <etharp_request_dst>
 8012630:	4603      	mov	r3, r0
}
 8012632:	4618      	mov	r0, r3
 8012634:	3708      	adds	r7, #8
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
 801263a:	bf00      	nop
 801263c:	080189e4 	.word	0x080189e4

08012640 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b08e      	sub	sp, #56	; 0x38
 8012644:	af04      	add	r7, sp, #16
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801264a:	4b7a      	ldr	r3, [pc, #488]	; (8012834 <icmp_input+0x1f4>)
 801264c:	689b      	ldr	r3, [r3, #8]
 801264e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8012650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	b29b      	uxth	r3, r3
 8012656:	f003 030f 	and.w	r3, r3, #15
 801265a:	b29b      	uxth	r3, r3
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012662:	2b13      	cmp	r3, #19
 8012664:	f240 80d1 	bls.w	801280a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	895b      	ldrh	r3, [r3, #10]
 801266c:	2b03      	cmp	r3, #3
 801266e:	f240 80ce 	bls.w	801280e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801267c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012680:	2b00      	cmp	r3, #0
 8012682:	f000 80bb 	beq.w	80127fc <icmp_input+0x1bc>
 8012686:	2b08      	cmp	r3, #8
 8012688:	f040 80bb 	bne.w	8012802 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801268c:	4b6a      	ldr	r3, [pc, #424]	; (8012838 <icmp_input+0x1f8>)
 801268e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012690:	4b68      	ldr	r3, [pc, #416]	; (8012834 <icmp_input+0x1f4>)
 8012692:	695b      	ldr	r3, [r3, #20]
 8012694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012698:	2be0      	cmp	r3, #224	; 0xe0
 801269a:	f000 80bf 	beq.w	801281c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801269e:	4b65      	ldr	r3, [pc, #404]	; (8012834 <icmp_input+0x1f4>)
 80126a0:	695a      	ldr	r2, [r3, #20]
 80126a2:	4b64      	ldr	r3, [pc, #400]	; (8012834 <icmp_input+0x1f4>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4619      	mov	r1, r3
 80126a8:	4610      	mov	r0, r2
 80126aa:	f000 fbd1 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 80126ae:	4603      	mov	r3, r0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	f040 80b5 	bne.w	8012820 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	891b      	ldrh	r3, [r3, #8]
 80126ba:	2b07      	cmp	r3, #7
 80126bc:	f240 80a9 	bls.w	8012812 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80126c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126c2:	330e      	adds	r3, #14
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	b21b      	sxth	r3, r3
 80126c8:	4619      	mov	r1, r3
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f7fa fb9e 	bl	800ce0c <pbuf_header>
 80126d0:	4603      	mov	r3, r0
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d046      	beq.n	8012764 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	891a      	ldrh	r2, [r3, #8]
 80126da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126dc:	4413      	add	r3, r2
 80126de:	b29b      	uxth	r3, r3
 80126e0:	2200      	movs	r2, #0
 80126e2:	4619      	mov	r1, r3
 80126e4:	2002      	movs	r0, #2
 80126e6:	f7fa f847 	bl	800c778 <pbuf_alloc>
 80126ea:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	f000 8098 	beq.w	8012824 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	895b      	ldrh	r3, [r3, #10]
 80126f8:	461a      	mov	r2, r3
 80126fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126fc:	3308      	adds	r3, #8
 80126fe:	429a      	cmp	r2, r3
 8012700:	d203      	bcs.n	801270a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8012702:	69b8      	ldr	r0, [r7, #24]
 8012704:	f7fa fba6 	bl	800ce54 <pbuf_free>
        goto icmperr;
 8012708:	e08d      	b.n	8012826 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801270a:	69bb      	ldr	r3, [r7, #24]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012712:	4618      	mov	r0, r3
 8012714:	f002 ff89 	bl	801562a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8012718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801271a:	425b      	negs	r3, r3
 801271c:	b29b      	uxth	r3, r3
 801271e:	b21b      	sxth	r3, r3
 8012720:	4619      	mov	r1, r3
 8012722:	69b8      	ldr	r0, [r7, #24]
 8012724:	f7fa fb72 	bl	800ce0c <pbuf_header>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	d009      	beq.n	8012742 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801272e:	4b43      	ldr	r3, [pc, #268]	; (801283c <icmp_input+0x1fc>)
 8012730:	22af      	movs	r2, #175	; 0xaf
 8012732:	4943      	ldr	r1, [pc, #268]	; (8012840 <icmp_input+0x200>)
 8012734:	4843      	ldr	r0, [pc, #268]	; (8012844 <icmp_input+0x204>)
 8012736:	f002 ff8b 	bl	8015650 <iprintf>
        pbuf_free(r);
 801273a:	69b8      	ldr	r0, [r7, #24]
 801273c:	f7fa fb8a 	bl	800ce54 <pbuf_free>
        goto icmperr;
 8012740:	e071      	b.n	8012826 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8012742:	6879      	ldr	r1, [r7, #4]
 8012744:	69b8      	ldr	r0, [r7, #24]
 8012746:	f7fa fcb5 	bl	800d0b4 <pbuf_copy>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d003      	beq.n	8012758 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8012750:	69b8      	ldr	r0, [r7, #24]
 8012752:	f7fa fb7f 	bl	800ce54 <pbuf_free>
        goto icmperr;
 8012756:	e066      	b.n	8012826 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7fa fb7b 	bl	800ce54 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	607b      	str	r3, [r7, #4]
 8012762:	e015      	b.n	8012790 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8012764:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012766:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801276a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801276e:	33f2      	adds	r3, #242	; 0xf2
 8012770:	b29b      	uxth	r3, r3
 8012772:	b21b      	sxth	r3, r3
 8012774:	4619      	mov	r1, r3
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f7fa fb48 	bl	800ce0c <pbuf_header>
 801277c:	4603      	mov	r3, r0
 801277e:	2b00      	cmp	r3, #0
 8012780:	d006      	beq.n	8012790 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012782:	4b2e      	ldr	r3, [pc, #184]	; (801283c <icmp_input+0x1fc>)
 8012784:	22c0      	movs	r2, #192	; 0xc0
 8012786:	4930      	ldr	r1, [pc, #192]	; (8012848 <icmp_input+0x208>)
 8012788:	482e      	ldr	r0, [pc, #184]	; (8012844 <icmp_input+0x204>)
 801278a:	f002 ff61 	bl	8015650 <iprintf>
        goto icmperr;
 801278e:	e04a      	b.n	8012826 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8012796:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801279a:	4619      	mov	r1, r3
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f7fa fb35 	bl	800ce0c <pbuf_header>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d12b      	bne.n	8012800 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80127b6:	4b1f      	ldr	r3, [pc, #124]	; (8012834 <icmp_input+0x1f4>)
 80127b8:	691a      	ldr	r2, [r3, #16]
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	2200      	movs	r2, #0
 80127c2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	2200      	movs	r2, #0
 80127c8:	709a      	strb	r2, [r3, #2]
 80127ca:	2200      	movs	r2, #0
 80127cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	22ff      	movs	r2, #255	; 0xff
 80127d2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	2200      	movs	r2, #0
 80127d8:	729a      	strb	r2, [r3, #10]
 80127da:	2200      	movs	r2, #0
 80127dc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	9302      	str	r3, [sp, #8]
 80127e2:	2301      	movs	r3, #1
 80127e4:	9301      	str	r3, [sp, #4]
 80127e6:	2300      	movs	r3, #0
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	23ff      	movs	r3, #255	; 0xff
 80127ec:	2200      	movs	r2, #0
 80127ee:	69f9      	ldr	r1, [r7, #28]
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f000 fa5b 	bl	8012cac <ip4_output_if>
 80127f6:	4603      	mov	r3, r0
 80127f8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80127fa:	e001      	b.n	8012800 <icmp_input+0x1c0>
    break;
 80127fc:	bf00      	nop
 80127fe:	e000      	b.n	8012802 <icmp_input+0x1c2>
    break;
 8012800:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7fa fb26 	bl	800ce54 <pbuf_free>
  return;
 8012808:	e011      	b.n	801282e <icmp_input+0x1ee>
    goto lenerr;
 801280a:	bf00      	nop
 801280c:	e002      	b.n	8012814 <icmp_input+0x1d4>
    goto lenerr;
 801280e:	bf00      	nop
 8012810:	e000      	b.n	8012814 <icmp_input+0x1d4>
      goto lenerr;
 8012812:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7fa fb1d 	bl	800ce54 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801281a:	e008      	b.n	801282e <icmp_input+0x1ee>
      goto icmperr;
 801281c:	bf00      	nop
 801281e:	e002      	b.n	8012826 <icmp_input+0x1e6>
      goto icmperr;
 8012820:	bf00      	nop
 8012822:	e000      	b.n	8012826 <icmp_input+0x1e6>
        goto icmperr;
 8012824:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7fa fb14 	bl	800ce54 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801282c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801282e:	3728      	adds	r7, #40	; 0x28
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}
 8012834:	2000a2c4 	.word	0x2000a2c4
 8012838:	2000a2d8 	.word	0x2000a2d8
 801283c:	080183bc 	.word	0x080183bc
 8012840:	080183f4 	.word	0x080183f4
 8012844:	0801842c 	.word	0x0801842c
 8012848:	08018454 	.word	0x08018454

0801284c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	460b      	mov	r3, r1
 8012856:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012858:	78fb      	ldrb	r3, [r7, #3]
 801285a:	461a      	mov	r2, r3
 801285c:	2103      	movs	r1, #3
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f000 f814 	bl	801288c <icmp_send_response>
}
 8012864:	bf00      	nop
 8012866:	3708      	adds	r7, #8
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	460b      	mov	r3, r1
 8012876:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012878:	78fb      	ldrb	r3, [r7, #3]
 801287a:	461a      	mov	r2, r3
 801287c:	210b      	movs	r1, #11
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f000 f804 	bl	801288c <icmp_send_response>
}
 8012884:	bf00      	nop
 8012886:	3708      	adds	r7, #8
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}

0801288c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b08c      	sub	sp, #48	; 0x30
 8012890:	af04      	add	r7, sp, #16
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	460b      	mov	r3, r1
 8012896:	70fb      	strb	r3, [r7, #3]
 8012898:	4613      	mov	r3, r2
 801289a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801289c:	2200      	movs	r2, #0
 801289e:	2124      	movs	r1, #36	; 0x24
 80128a0:	2001      	movs	r0, #1
 80128a2:	f7f9 ff69 	bl	800c778 <pbuf_alloc>
 80128a6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80128a8:	69fb      	ldr	r3, [r7, #28]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d04c      	beq.n	8012948 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80128ae:	69fb      	ldr	r3, [r7, #28]
 80128b0:	895b      	ldrh	r3, [r3, #10]
 80128b2:	2b23      	cmp	r3, #35	; 0x23
 80128b4:	d806      	bhi.n	80128c4 <icmp_send_response+0x38>
 80128b6:	4b26      	ldr	r3, [pc, #152]	; (8012950 <icmp_send_response+0xc4>)
 80128b8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80128bc:	4925      	ldr	r1, [pc, #148]	; (8012954 <icmp_send_response+0xc8>)
 80128be:	4826      	ldr	r0, [pc, #152]	; (8012958 <icmp_send_response+0xcc>)
 80128c0:	f002 fec6 	bl	8015650 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80128ca:	69fb      	ldr	r3, [r7, #28]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	78fa      	ldrb	r2, [r7, #3]
 80128d4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	78ba      	ldrb	r2, [r7, #2]
 80128da:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	2200      	movs	r2, #0
 80128e0:	711a      	strb	r2, [r3, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	2200      	movs	r2, #0
 80128ea:	719a      	strb	r2, [r3, #6]
 80128ec:	2200      	movs	r2, #0
 80128ee:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	f103 0008 	add.w	r0, r3, #8
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	221c      	movs	r2, #28
 80128fe:	4619      	mov	r1, r3
 8012900:	f002 fe93 	bl	801562a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801290a:	f107 030c 	add.w	r3, r7, #12
 801290e:	4618      	mov	r0, r3
 8012910:	f000 f824 	bl	801295c <ip4_route>
 8012914:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d011      	beq.n	8012940 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	2200      	movs	r2, #0
 8012920:	709a      	strb	r2, [r3, #2]
 8012922:	2200      	movs	r2, #0
 8012924:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012926:	f107 020c 	add.w	r2, r7, #12
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	9302      	str	r3, [sp, #8]
 801292e:	2301      	movs	r3, #1
 8012930:	9301      	str	r3, [sp, #4]
 8012932:	2300      	movs	r3, #0
 8012934:	9300      	str	r3, [sp, #0]
 8012936:	23ff      	movs	r3, #255	; 0xff
 8012938:	2100      	movs	r1, #0
 801293a:	69f8      	ldr	r0, [r7, #28]
 801293c:	f000 f9b6 	bl	8012cac <ip4_output_if>
  }
  pbuf_free(q);
 8012940:	69f8      	ldr	r0, [r7, #28]
 8012942:	f7fa fa87 	bl	800ce54 <pbuf_free>
 8012946:	e000      	b.n	801294a <icmp_send_response+0xbe>
    return;
 8012948:	bf00      	nop
}
 801294a:	3720      	adds	r7, #32
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	080183bc 	.word	0x080183bc
 8012954:	08018488 	.word	0x08018488
 8012958:	0801842c 	.word	0x0801842c

0801295c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801295c:	b480      	push	{r7}
 801295e:	b085      	sub	sp, #20
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8012964:	4b30      	ldr	r3, [pc, #192]	; (8012a28 <ip4_route+0xcc>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	60fb      	str	r3, [r7, #12]
 801296a:	e036      	b.n	80129da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012972:	f003 0301 	and.w	r3, r3, #1
 8012976:	b2db      	uxtb	r3, r3
 8012978:	2b00      	cmp	r3, #0
 801297a:	d02b      	beq.n	80129d4 <ip4_route+0x78>
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012982:	089b      	lsrs	r3, r3, #2
 8012984:	f003 0301 	and.w	r3, r3, #1
 8012988:	b2db      	uxtb	r3, r3
 801298a:	2b00      	cmp	r3, #0
 801298c:	d022      	beq.n	80129d4 <ip4_route+0x78>
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	3304      	adds	r3, #4
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d01d      	beq.n	80129d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	3304      	adds	r3, #4
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	405a      	eors	r2, r3
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	3308      	adds	r3, #8
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4013      	ands	r3, r2
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d101      	bne.n	80129b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	e033      	b.n	8012a1c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80129ba:	f003 0302 	and.w	r3, r3, #2
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d108      	bne.n	80129d4 <ip4_route+0x78>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	330c      	adds	r3, #12
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d101      	bne.n	80129d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	e023      	b.n	8012a1c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	60fb      	str	r3, [r7, #12]
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d1c5      	bne.n	801296c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80129e0:	4b12      	ldr	r3, [pc, #72]	; (8012a2c <ip4_route+0xd0>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d015      	beq.n	8012a14 <ip4_route+0xb8>
 80129e8:	4b10      	ldr	r3, [pc, #64]	; (8012a2c <ip4_route+0xd0>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80129f0:	f003 0301 	and.w	r3, r3, #1
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d00d      	beq.n	8012a14 <ip4_route+0xb8>
 80129f8:	4b0c      	ldr	r3, [pc, #48]	; (8012a2c <ip4_route+0xd0>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012a00:	f003 0304 	and.w	r3, r3, #4
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d005      	beq.n	8012a14 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8012a08:	4b08      	ldr	r3, [pc, #32]	; (8012a2c <ip4_route+0xd0>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	3304      	adds	r3, #4
 8012a0e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d101      	bne.n	8012a18 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012a14:	2300      	movs	r3, #0
 8012a16:	e001      	b.n	8012a1c <ip4_route+0xc0>
  }

  return netif_default;
 8012a18:	4b04      	ldr	r3, [pc, #16]	; (8012a2c <ip4_route+0xd0>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3714      	adds	r7, #20
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr
 8012a28:	20017690 	.word	0x20017690
 8012a2c:	20017694 	.word	0x20017694

08012a30 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b086      	sub	sp, #24
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
 8012a38:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	091b      	lsrs	r3, r3, #4
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	2b04      	cmp	r3, #4
 8012a4a:	d004      	beq.n	8012a56 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7fa fa01 	bl	800ce54 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012a52:	2300      	movs	r3, #0
 8012a54:	e122      	b.n	8012c9c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	f003 030f 	and.w	r3, r3, #15
 8012a60:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8012a62:	897b      	ldrh	r3, [r7, #10]
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	885b      	ldrh	r3, [r3, #2]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7f9 f8ba 	bl	800bbe8 <lwip_htons>
 8012a74:	4603      	mov	r3, r0
 8012a76:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	891b      	ldrh	r3, [r3, #8]
 8012a7c:	893a      	ldrh	r2, [r7, #8]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d204      	bcs.n	8012a8c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8012a82:	893b      	ldrh	r3, [r7, #8]
 8012a84:	4619      	mov	r1, r3
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f7fa f870 	bl	800cb6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	895b      	ldrh	r3, [r3, #10]
 8012a90:	897a      	ldrh	r2, [r7, #10]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d807      	bhi.n	8012aa6 <ip4_input+0x76>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	891b      	ldrh	r3, [r3, #8]
 8012a9a:	893a      	ldrh	r2, [r7, #8]
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d802      	bhi.n	8012aa6 <ip4_input+0x76>
 8012aa0:	897b      	ldrh	r3, [r7, #10]
 8012aa2:	2b13      	cmp	r3, #19
 8012aa4:	d804      	bhi.n	8012ab0 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f7fa f9d4 	bl	800ce54 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012aac:	2300      	movs	r3, #0
 8012aae:	e0f5      	b.n	8012c9c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	691b      	ldr	r3, [r3, #16]
 8012ab4:	4a7b      	ldr	r2, [pc, #492]	; (8012ca4 <ip4_input+0x274>)
 8012ab6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	4a79      	ldr	r2, [pc, #484]	; (8012ca4 <ip4_input+0x274>)
 8012abe:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012ac0:	4b78      	ldr	r3, [pc, #480]	; (8012ca4 <ip4_input+0x274>)
 8012ac2:	695b      	ldr	r3, [r3, #20]
 8012ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ac8:	2be0      	cmp	r3, #224	; 0xe0
 8012aca:	d112      	bne.n	8012af2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012ad2:	f003 0301 	and.w	r3, r3, #1
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d007      	beq.n	8012aec <ip4_input+0xbc>
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	3304      	adds	r3, #4
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d002      	beq.n	8012aec <ip4_input+0xbc>
      netif = inp;
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	613b      	str	r3, [r7, #16]
 8012aea:	e041      	b.n	8012b70 <ip4_input+0x140>
    } else {
      netif = NULL;
 8012aec:	2300      	movs	r3, #0
 8012aee:	613b      	str	r3, [r7, #16]
 8012af0:	e03e      	b.n	8012b70 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8012af2:	2301      	movs	r3, #1
 8012af4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012b00:	f003 0301 	and.w	r3, r3, #1
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d014      	beq.n	8012b34 <ip4_input+0x104>
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	3304      	adds	r3, #4
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d00f      	beq.n	8012b34 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012b14:	4b63      	ldr	r3, [pc, #396]	; (8012ca4 <ip4_input+0x274>)
 8012b16:	695a      	ldr	r2, [r3, #20]
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	3304      	adds	r3, #4
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d026      	beq.n	8012b70 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012b22:	4b60      	ldr	r3, [pc, #384]	; (8012ca4 <ip4_input+0x274>)
 8012b24:	695b      	ldr	r3, [r3, #20]
 8012b26:	6939      	ldr	r1, [r7, #16]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f000 f991 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 8012b2e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d11d      	bne.n	8012b70 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00d      	beq.n	8012b56 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8012b3a:	4b5a      	ldr	r3, [pc, #360]	; (8012ca4 <ip4_input+0x274>)
 8012b3c:	695b      	ldr	r3, [r3, #20]
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	2b7f      	cmp	r3, #127	; 0x7f
 8012b42:	d102      	bne.n	8012b4a <ip4_input+0x11a>
          netif = NULL;
 8012b44:	2300      	movs	r3, #0
 8012b46:	613b      	str	r3, [r7, #16]
          break;
 8012b48:	e012      	b.n	8012b70 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8012b4e:	4b56      	ldr	r3, [pc, #344]	; (8012ca8 <ip4_input+0x278>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	613b      	str	r3, [r7, #16]
 8012b54:	e002      	b.n	8012b5c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8012b5c:	693a      	ldr	r2, [r7, #16]
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d102      	bne.n	8012b6a <ip4_input+0x13a>
        netif = netif->next;
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d1c4      	bne.n	8012afa <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012b70:	4b4c      	ldr	r3, [pc, #304]	; (8012ca4 <ip4_input+0x274>)
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	6839      	ldr	r1, [r7, #0]
 8012b76:	4618      	mov	r0, r3
 8012b78:	f000 f96a 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d105      	bne.n	8012b8e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012b82:	4b48      	ldr	r3, [pc, #288]	; (8012ca4 <ip4_input+0x274>)
 8012b84:	691b      	ldr	r3, [r3, #16]
 8012b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012b8a:	2be0      	cmp	r3, #224	; 0xe0
 8012b8c:	d104      	bne.n	8012b98 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f7fa f960 	bl	800ce54 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012b94:	2300      	movs	r3, #0
 8012b96:	e081      	b.n	8012c9c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d104      	bne.n	8012ba8 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f7fa f958 	bl	800ce54 <pbuf_free>
    return ERR_OK;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	e079      	b.n	8012c9c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	88db      	ldrh	r3, [r3, #6]
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	461a      	mov	r2, r3
 8012bb0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012bb4:	4013      	ands	r3, r2
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00b      	beq.n	8012bd2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f000 fc8e 	bl	80134dc <ip4_reass>
 8012bc0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d101      	bne.n	8012bcc <ip4_input+0x19c>
      return ERR_OK;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	e067      	b.n	8012c9c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012bd2:	4a34      	ldr	r2, [pc, #208]	; (8012ca4 <ip4_input+0x274>)
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012bd8:	4a32      	ldr	r2, [pc, #200]	; (8012ca4 <ip4_input+0x274>)
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012bde:	4a31      	ldr	r2, [pc, #196]	; (8012ca4 <ip4_input+0x274>)
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	f003 030f 	and.w	r3, r3, #15
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	009b      	lsls	r3, r3, #2
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	4b2b      	ldr	r3, [pc, #172]	; (8012ca4 <ip4_input+0x274>)
 8012bf6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8012bf8:	897b      	ldrh	r3, [r7, #10]
 8012bfa:	425b      	negs	r3, r3
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	b21b      	sxth	r3, r3
 8012c00:	4619      	mov	r1, r3
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f7fa f902 	bl	800ce0c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	7a5b      	ldrb	r3, [r3, #9]
 8012c0c:	2b06      	cmp	r3, #6
 8012c0e:	d009      	beq.n	8012c24 <ip4_input+0x1f4>
 8012c10:	2b11      	cmp	r3, #17
 8012c12:	d002      	beq.n	8012c1a <ip4_input+0x1ea>
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d00a      	beq.n	8012c2e <ip4_input+0x1fe>
 8012c18:	e00e      	b.n	8012c38 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8012c1a:	6839      	ldr	r1, [r7, #0]
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7fe fce3 	bl	80115e8 <udp_input>
      break;
 8012c22:	e028      	b.n	8012c76 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8012c24:	6839      	ldr	r1, [r7, #0]
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f7fb fcf4 	bl	800e614 <tcp_input>
      break;
 8012c2c:	e023      	b.n	8012c76 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8012c2e:	6839      	ldr	r1, [r7, #0]
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7ff fd05 	bl	8012640 <icmp_input>
      break;
 8012c36:	e01e      	b.n	8012c76 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012c38:	4b1a      	ldr	r3, [pc, #104]	; (8012ca4 <ip4_input+0x274>)
 8012c3a:	695b      	ldr	r3, [r3, #20]
 8012c3c:	6939      	ldr	r1, [r7, #16]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f000 f906 	bl	8012e50 <ip4_addr_isbroadcast_u32>
 8012c44:	4603      	mov	r3, r0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d112      	bne.n	8012c70 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012c4a:	4b16      	ldr	r3, [pc, #88]	; (8012ca4 <ip4_input+0x274>)
 8012c4c:	695b      	ldr	r3, [r3, #20]
 8012c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012c52:	2be0      	cmp	r3, #224	; 0xe0
 8012c54:	d00c      	beq.n	8012c70 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8012c56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7fa f8e7 	bl	800ce30 <pbuf_header_force>
        p->payload = iphdr;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012c68:	2102      	movs	r1, #2
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f7ff fdee 	bl	801284c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7fa f8ef 	bl	800ce54 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012c76:	4b0b      	ldr	r3, [pc, #44]	; (8012ca4 <ip4_input+0x274>)
 8012c78:	2200      	movs	r2, #0
 8012c7a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012c7c:	4b09      	ldr	r3, [pc, #36]	; (8012ca4 <ip4_input+0x274>)
 8012c7e:	2200      	movs	r2, #0
 8012c80:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012c82:	4b08      	ldr	r3, [pc, #32]	; (8012ca4 <ip4_input+0x274>)
 8012c84:	2200      	movs	r2, #0
 8012c86:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012c88:	4b06      	ldr	r3, [pc, #24]	; (8012ca4 <ip4_input+0x274>)
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012c8e:	4b05      	ldr	r3, [pc, #20]	; (8012ca4 <ip4_input+0x274>)
 8012c90:	2200      	movs	r2, #0
 8012c92:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012c94:	4b03      	ldr	r3, [pc, #12]	; (8012ca4 <ip4_input+0x274>)
 8012c96:	2200      	movs	r2, #0
 8012c98:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012c9a:	2300      	movs	r3, #0
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3718      	adds	r7, #24
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	2000a2c4 	.word	0x2000a2c4
 8012ca8:	20017690 	.word	0x20017690

08012cac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b08a      	sub	sp, #40	; 0x28
 8012cb0:	af04      	add	r7, sp, #16
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
 8012cb8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d009      	beq.n	8012cd8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d003      	beq.n	8012cd2 <ip4_output_if+0x26>
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d102      	bne.n	8012cd8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd4:	3304      	adds	r3, #4
 8012cd6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012cd8:	78fa      	ldrb	r2, [r7, #3]
 8012cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cdc:	9302      	str	r3, [sp, #8]
 8012cde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012ce2:	9301      	str	r3, [sp, #4]
 8012ce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ce8:	9300      	str	r3, [sp, #0]
 8012cea:	4613      	mov	r3, r2
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	6979      	ldr	r1, [r7, #20]
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	f000 f805 	bl	8012d00 <ip4_output_if_src>
 8012cf6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3718      	adds	r7, #24
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b088      	sub	sp, #32
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	607a      	str	r2, [r7, #4]
 8012d0c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	89db      	ldrh	r3, [r3, #14]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d006      	beq.n	8012d24 <ip4_output_if_src+0x24>
 8012d16:	4b48      	ldr	r3, [pc, #288]	; (8012e38 <ip4_output_if_src+0x138>)
 8012d18:	f240 3233 	movw	r2, #819	; 0x333
 8012d1c:	4947      	ldr	r1, [pc, #284]	; (8012e3c <ip4_output_if_src+0x13c>)
 8012d1e:	4848      	ldr	r0, [pc, #288]	; (8012e40 <ip4_output_if_src+0x140>)
 8012d20:	f002 fc96 	bl	8015650 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d060      	beq.n	8012dec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012d2a:	2314      	movs	r3, #20
 8012d2c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8012d2e:	2114      	movs	r1, #20
 8012d30:	68f8      	ldr	r0, [r7, #12]
 8012d32:	f7fa f86b 	bl	800ce0c <pbuf_header>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d002      	beq.n	8012d42 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012d3c:	f06f 0301 	mvn.w	r3, #1
 8012d40:	e075      	b.n	8012e2e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	685b      	ldr	r3, [r3, #4]
 8012d46:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	895b      	ldrh	r3, [r3, #10]
 8012d4c:	2b13      	cmp	r3, #19
 8012d4e:	d806      	bhi.n	8012d5e <ip4_output_if_src+0x5e>
 8012d50:	4b39      	ldr	r3, [pc, #228]	; (8012e38 <ip4_output_if_src+0x138>)
 8012d52:	f240 3261 	movw	r2, #865	; 0x361
 8012d56:	493b      	ldr	r1, [pc, #236]	; (8012e44 <ip4_output_if_src+0x144>)
 8012d58:	4839      	ldr	r0, [pc, #228]	; (8012e40 <ip4_output_if_src+0x140>)
 8012d5a:	f002 fc79 	bl	8015650 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	78fa      	ldrb	r2, [r7, #3]
 8012d62:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012d64:	69fb      	ldr	r3, [r7, #28]
 8012d66:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012d6a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681a      	ldr	r2, [r3, #0]
 8012d70:	69fb      	ldr	r3, [r7, #28]
 8012d72:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012d74:	8b7b      	ldrh	r3, [r7, #26]
 8012d76:	089b      	lsrs	r3, r3, #2
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d80:	b2da      	uxtb	r2, r3
 8012d82:	69fb      	ldr	r3, [r7, #28]
 8012d84:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012d8c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	891b      	ldrh	r3, [r3, #8]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7f8 ff28 	bl	800bbe8 <lwip_htons>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	2200      	movs	r2, #0
 8012da4:	719a      	strb	r2, [r3, #6]
 8012da6:	2200      	movs	r2, #0
 8012da8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012daa:	4b27      	ldr	r3, [pc, #156]	; (8012e48 <ip4_output_if_src+0x148>)
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7f8 ff1a 	bl	800bbe8 <lwip_htons>
 8012db4:	4603      	mov	r3, r0
 8012db6:	461a      	mov	r2, r3
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012dbc:	4b22      	ldr	r3, [pc, #136]	; (8012e48 <ip4_output_if_src+0x148>)
 8012dbe:	881b      	ldrh	r3, [r3, #0]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	4b20      	ldr	r3, [pc, #128]	; (8012e48 <ip4_output_if_src+0x148>)
 8012dc6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d104      	bne.n	8012dd8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012dce:	4b1f      	ldr	r3, [pc, #124]	; (8012e4c <ip4_output_if_src+0x14c>)
 8012dd0:	681a      	ldr	r2, [r3, #0]
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	60da      	str	r2, [r3, #12]
 8012dd6:	e003      	b.n	8012de0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	681a      	ldr	r2, [r3, #0]
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	2200      	movs	r2, #0
 8012de4:	729a      	strb	r2, [r3, #10]
 8012de6:	2200      	movs	r2, #0
 8012de8:	72da      	strb	r2, [r3, #11]
 8012dea:	e008      	b.n	8012dfe <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012df2:	69fb      	ldr	r3, [r7, #28]
 8012df4:	691b      	ldr	r3, [r3, #16]
 8012df6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012df8:	f107 0314 	add.w	r3, r7, #20
 8012dfc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e00:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d00c      	beq.n	8012e20 <ip4_output_if_src+0x120>
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	891a      	ldrh	r2, [r3, #8]
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d906      	bls.n	8012e20 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e16:	68f8      	ldr	r0, [r7, #12]
 8012e18:	f000 fd0a 	bl	8013830 <ip4_frag>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	e006      	b.n	8012e2e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e22:	695b      	ldr	r3, [r3, #20]
 8012e24:	687a      	ldr	r2, [r7, #4]
 8012e26:	68f9      	ldr	r1, [r7, #12]
 8012e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e2a:	4798      	blx	r3
 8012e2c:	4603      	mov	r3, r0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3720      	adds	r7, #32
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	080184b4 	.word	0x080184b4
 8012e3c:	080184e8 	.word	0x080184e8
 8012e40:	080184f4 	.word	0x080184f4
 8012e44:	0801851c 	.word	0x0801851c
 8012e48:	200060b2 	.word	0x200060b2
 8012e4c:	080189e0 	.word	0x080189e0

08012e50 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b085      	sub	sp, #20
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e64:	d002      	beq.n	8012e6c <ip4_addr_isbroadcast_u32+0x1c>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d101      	bne.n	8012e70 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	e02a      	b.n	8012ec6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012e76:	f003 0302 	and.w	r3, r3, #2
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d101      	bne.n	8012e82 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	e021      	b.n	8012ec6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	3304      	adds	r3, #4
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	687a      	ldr	r2, [r7, #4]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d101      	bne.n	8012e92 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e019      	b.n	8012ec6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012e92:	68fa      	ldr	r2, [r7, #12]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	3304      	adds	r3, #4
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	405a      	eors	r2, r3
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	3308      	adds	r3, #8
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4013      	ands	r3, r2
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d10d      	bne.n	8012ec4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	3308      	adds	r3, #8
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	43da      	mvns	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	3308      	adds	r3, #8
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d101      	bne.n	8012ec4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e000      	b.n	8012ec6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012ec4:	2300      	movs	r3, #0
  }
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3714      	adds	r7, #20
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr
	...

08012ed4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012eda:	2300      	movs	r3, #0
 8012edc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012ede:	4b12      	ldr	r3, [pc, #72]	; (8012f28 <ip_reass_tmr+0x54>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012ee4:	e018      	b.n	8012f18 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	7fdb      	ldrb	r3, [r3, #31]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d00b      	beq.n	8012f06 <ip_reass_tmr+0x32>
      r->timer--;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	7fdb      	ldrb	r3, [r3, #31]
 8012ef2:	3b01      	subs	r3, #1
 8012ef4:	b2da      	uxtb	r2, r3
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	60fb      	str	r3, [r7, #12]
 8012f04:	e008      	b.n	8012f18 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012f10:	68b9      	ldr	r1, [r7, #8]
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f000 f80a 	bl	8012f2c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d1e3      	bne.n	8012ee6 <ip_reass_tmr+0x12>
     }
   }
}
 8012f1e:	bf00      	nop
 8012f20:	3710      	adds	r7, #16
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	200060b4 	.word	0x200060b4

08012f2c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b088      	sub	sp, #32
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012f36:	2300      	movs	r3, #0
 8012f38:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012f3a:	683a      	ldr	r2, [r7, #0]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d105      	bne.n	8012f4e <ip_reass_free_complete_datagram+0x22>
 8012f42:	4b45      	ldr	r3, [pc, #276]	; (8013058 <ip_reass_free_complete_datagram+0x12c>)
 8012f44:	22ab      	movs	r2, #171	; 0xab
 8012f46:	4945      	ldr	r1, [pc, #276]	; (801305c <ip_reass_free_complete_datagram+0x130>)
 8012f48:	4845      	ldr	r0, [pc, #276]	; (8013060 <ip_reass_free_complete_datagram+0x134>)
 8012f4a:	f002 fb81 	bl	8015650 <iprintf>
  if (prev != NULL) {
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d00a      	beq.n	8012f6a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d005      	beq.n	8012f6a <ip_reass_free_complete_datagram+0x3e>
 8012f5e:	4b3e      	ldr	r3, [pc, #248]	; (8013058 <ip_reass_free_complete_datagram+0x12c>)
 8012f60:	22ad      	movs	r2, #173	; 0xad
 8012f62:	4940      	ldr	r1, [pc, #256]	; (8013064 <ip_reass_free_complete_datagram+0x138>)
 8012f64:	483e      	ldr	r0, [pc, #248]	; (8013060 <ip_reass_free_complete_datagram+0x134>)
 8012f66:	f002 fb73 	bl	8015650 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	889b      	ldrh	r3, [r3, #4]
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d12a      	bne.n	8012fd2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	6858      	ldr	r0, [r3, #4]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	3308      	adds	r3, #8
 8012f92:	2214      	movs	r2, #20
 8012f94:	4619      	mov	r1, r3
 8012f96:	f002 fb48 	bl	801562a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012f9a:	2101      	movs	r1, #1
 8012f9c:	69b8      	ldr	r0, [r7, #24]
 8012f9e:	f7ff fc65 	bl	801286c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012fa2:	69b8      	ldr	r0, [r7, #24]
 8012fa4:	f7f9 fff0 	bl	800cf88 <pbuf_clen>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012fac:	8bfa      	ldrh	r2, [r7, #30]
 8012fae:	8a7b      	ldrh	r3, [r7, #18]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fb6:	db05      	blt.n	8012fc4 <ip_reass_free_complete_datagram+0x98>
 8012fb8:	4b27      	ldr	r3, [pc, #156]	; (8013058 <ip_reass_free_complete_datagram+0x12c>)
 8012fba:	22bc      	movs	r2, #188	; 0xbc
 8012fbc:	492a      	ldr	r1, [pc, #168]	; (8013068 <ip_reass_free_complete_datagram+0x13c>)
 8012fbe:	4828      	ldr	r0, [pc, #160]	; (8013060 <ip_reass_free_complete_datagram+0x134>)
 8012fc0:	f002 fb46 	bl	8015650 <iprintf>
    pbufs_freed += clen;
 8012fc4:	8bfa      	ldrh	r2, [r7, #30]
 8012fc6:	8a7b      	ldrh	r3, [r7, #18]
 8012fc8:	4413      	add	r3, r2
 8012fca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012fcc:	69b8      	ldr	r0, [r7, #24]
 8012fce:	f7f9 ff41 	bl	800ce54 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012fd8:	e01f      	b.n	801301a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012fea:	68f8      	ldr	r0, [r7, #12]
 8012fec:	f7f9 ffcc 	bl	800cf88 <pbuf_clen>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ff4:	8bfa      	ldrh	r2, [r7, #30]
 8012ff6:	8a7b      	ldrh	r3, [r7, #18]
 8012ff8:	4413      	add	r3, r2
 8012ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ffe:	db05      	blt.n	801300c <ip_reass_free_complete_datagram+0xe0>
 8013000:	4b15      	ldr	r3, [pc, #84]	; (8013058 <ip_reass_free_complete_datagram+0x12c>)
 8013002:	22cc      	movs	r2, #204	; 0xcc
 8013004:	4918      	ldr	r1, [pc, #96]	; (8013068 <ip_reass_free_complete_datagram+0x13c>)
 8013006:	4816      	ldr	r0, [pc, #88]	; (8013060 <ip_reass_free_complete_datagram+0x134>)
 8013008:	f002 fb22 	bl	8015650 <iprintf>
    pbufs_freed += clen;
 801300c:	8bfa      	ldrh	r2, [r7, #30]
 801300e:	8a7b      	ldrh	r3, [r7, #18]
 8013010:	4413      	add	r3, r2
 8013012:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013014:	68f8      	ldr	r0, [r7, #12]
 8013016:	f7f9 ff1d 	bl	800ce54 <pbuf_free>
  while (p != NULL) {
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d1dc      	bne.n	8012fda <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013020:	6839      	ldr	r1, [r7, #0]
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f000 f8c2 	bl	80131ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8013028:	4b10      	ldr	r3, [pc, #64]	; (801306c <ip_reass_free_complete_datagram+0x140>)
 801302a:	881b      	ldrh	r3, [r3, #0]
 801302c:	8bfa      	ldrh	r2, [r7, #30]
 801302e:	429a      	cmp	r2, r3
 8013030:	d905      	bls.n	801303e <ip_reass_free_complete_datagram+0x112>
 8013032:	4b09      	ldr	r3, [pc, #36]	; (8013058 <ip_reass_free_complete_datagram+0x12c>)
 8013034:	22d2      	movs	r2, #210	; 0xd2
 8013036:	490e      	ldr	r1, [pc, #56]	; (8013070 <ip_reass_free_complete_datagram+0x144>)
 8013038:	4809      	ldr	r0, [pc, #36]	; (8013060 <ip_reass_free_complete_datagram+0x134>)
 801303a:	f002 fb09 	bl	8015650 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801303e:	4b0b      	ldr	r3, [pc, #44]	; (801306c <ip_reass_free_complete_datagram+0x140>)
 8013040:	881a      	ldrh	r2, [r3, #0]
 8013042:	8bfb      	ldrh	r3, [r7, #30]
 8013044:	1ad3      	subs	r3, r2, r3
 8013046:	b29a      	uxth	r2, r3
 8013048:	4b08      	ldr	r3, [pc, #32]	; (801306c <ip_reass_free_complete_datagram+0x140>)
 801304a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801304c:	8bfb      	ldrh	r3, [r7, #30]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3720      	adds	r7, #32
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	0801854c 	.word	0x0801854c
 801305c:	08018588 	.word	0x08018588
 8013060:	08018594 	.word	0x08018594
 8013064:	080185bc 	.word	0x080185bc
 8013068:	080185d0 	.word	0x080185d0
 801306c:	200060b8 	.word	0x200060b8
 8013070:	080185f0 	.word	0x080185f0

08013074 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b08a      	sub	sp, #40	; 0x28
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801307e:	2300      	movs	r3, #0
 8013080:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013082:	2300      	movs	r3, #0
 8013084:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013086:	2300      	movs	r3, #0
 8013088:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801308a:	2300      	movs	r3, #0
 801308c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801308e:	2300      	movs	r3, #0
 8013090:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013092:	4b28      	ldr	r3, [pc, #160]	; (8013134 <ip_reass_remove_oldest_datagram+0xc0>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013098:	e030      	b.n	80130fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309c:	695a      	ldr	r2, [r3, #20]
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	68db      	ldr	r3, [r3, #12]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d10c      	bne.n	80130c0 <ip_reass_remove_oldest_datagram+0x4c>
 80130a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a8:	699a      	ldr	r2, [r3, #24]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	691b      	ldr	r3, [r3, #16]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d106      	bne.n	80130c0 <ip_reass_remove_oldest_datagram+0x4c>
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b4:	899a      	ldrh	r2, [r3, #12]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	889b      	ldrh	r3, [r3, #4]
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	429a      	cmp	r2, r3
 80130be:	d014      	beq.n	80130ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	3301      	adds	r3, #1
 80130c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80130c6:	6a3b      	ldr	r3, [r7, #32]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d104      	bne.n	80130d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	61bb      	str	r3, [r7, #24]
 80130d4:	e009      	b.n	80130ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	7fda      	ldrb	r2, [r3, #31]
 80130da:	6a3b      	ldr	r3, [r7, #32]
 80130dc:	7fdb      	ldrb	r3, [r3, #31]
 80130de:	429a      	cmp	r2, r3
 80130e0:	d803      	bhi.n	80130ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80130e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80130e6:	69fb      	ldr	r3, [r7, #28]
 80130e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d001      	beq.n	80130f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80130f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80130f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80130fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d1cb      	bne.n	801309a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013102:	6a3b      	ldr	r3, [r7, #32]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d008      	beq.n	801311a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013108:	69b9      	ldr	r1, [r7, #24]
 801310a:	6a38      	ldr	r0, [r7, #32]
 801310c:	f7ff ff0e 	bl	8012f2c <ip_reass_free_complete_datagram>
 8013110:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013112:	697a      	ldr	r2, [r7, #20]
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	4413      	add	r3, r2
 8013118:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801311a:	697a      	ldr	r2, [r7, #20]
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	429a      	cmp	r2, r3
 8013120:	da02      	bge.n	8013128 <ip_reass_remove_oldest_datagram+0xb4>
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	2b01      	cmp	r3, #1
 8013126:	dcac      	bgt.n	8013082 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013128:	697b      	ldr	r3, [r7, #20]
}
 801312a:	4618      	mov	r0, r3
 801312c:	3728      	adds	r7, #40	; 0x28
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	200060b4 	.word	0x200060b4

08013138 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
 8013140:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013142:	2004      	movs	r0, #4
 8013144:	f7f9 f93e 	bl	800c3c4 <memp_malloc>
 8013148:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d110      	bne.n	8013172 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013150:	6839      	ldr	r1, [r7, #0]
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7ff ff8e 	bl	8013074 <ip_reass_remove_oldest_datagram>
 8013158:	4602      	mov	r2, r0
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	4293      	cmp	r3, r2
 801315e:	dc03      	bgt.n	8013168 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013160:	2004      	movs	r0, #4
 8013162:	f7f9 f92f 	bl	800c3c4 <memp_malloc>
 8013166:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d101      	bne.n	8013172 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801316e:	2300      	movs	r3, #0
 8013170:	e016      	b.n	80131a0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013172:	2220      	movs	r2, #32
 8013174:	2100      	movs	r1, #0
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f002 fa62 	bl	8015640 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2203      	movs	r2, #3
 8013180:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013182:	4b09      	ldr	r3, [pc, #36]	; (80131a8 <ip_reass_enqueue_new_datagram+0x70>)
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801318a:	4a07      	ldr	r2, [pc, #28]	; (80131a8 <ip_reass_enqueue_new_datagram+0x70>)
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	3308      	adds	r3, #8
 8013194:	2214      	movs	r2, #20
 8013196:	6879      	ldr	r1, [r7, #4]
 8013198:	4618      	mov	r0, r3
 801319a:	f002 fa46 	bl	801562a <memcpy>
  return ipr;
 801319e:	68fb      	ldr	r3, [r7, #12]
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	200060b4 	.word	0x200060b4

080131ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b082      	sub	sp, #8
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80131b6:	4b10      	ldr	r3, [pc, #64]	; (80131f8 <ip_reass_dequeue_datagram+0x4c>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	429a      	cmp	r2, r3
 80131be:	d104      	bne.n	80131ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	4a0c      	ldr	r2, [pc, #48]	; (80131f8 <ip_reass_dequeue_datagram+0x4c>)
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	e00d      	b.n	80131e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d106      	bne.n	80131de <ip_reass_dequeue_datagram+0x32>
 80131d0:	4b0a      	ldr	r3, [pc, #40]	; (80131fc <ip_reass_dequeue_datagram+0x50>)
 80131d2:	f240 1245 	movw	r2, #325	; 0x145
 80131d6:	490a      	ldr	r1, [pc, #40]	; (8013200 <ip_reass_dequeue_datagram+0x54>)
 80131d8:	480a      	ldr	r0, [pc, #40]	; (8013204 <ip_reass_dequeue_datagram+0x58>)
 80131da:	f002 fa39 	bl	8015650 <iprintf>
    prev->next = ipr->next;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80131e6:	6879      	ldr	r1, [r7, #4]
 80131e8:	2004      	movs	r0, #4
 80131ea:	f7f9 f93d 	bl	800c468 <memp_free>
}
 80131ee:	bf00      	nop
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	200060b4 	.word	0x200060b4
 80131fc:	0801854c 	.word	0x0801854c
 8013200:	0801860c 	.word	0x0801860c
 8013204:	08018594 	.word	0x08018594

08013208 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b08c      	sub	sp, #48	; 0x30
 801320c:	af00      	add	r7, sp, #0
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	60b9      	str	r1, [r7, #8]
 8013212:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8013214:	2300      	movs	r3, #0
 8013216:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013218:	2301      	movs	r3, #1
 801321a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	885b      	ldrh	r3, [r3, #2]
 8013226:	b29b      	uxth	r3, r3
 8013228:	4618      	mov	r0, r3
 801322a:	f7f8 fcdd 	bl	800bbe8 <lwip_htons>
 801322e:	4603      	mov	r3, r0
 8013230:	461a      	mov	r2, r3
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	b29b      	uxth	r3, r3
 8013238:	f003 030f 	and.w	r3, r3, #15
 801323c:	b29b      	uxth	r3, r3
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	b29b      	uxth	r3, r3
 8013242:	1ad3      	subs	r3, r2, r3
 8013244:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	88db      	ldrh	r3, [r3, #6]
 801324a:	b29b      	uxth	r3, r3
 801324c:	4618      	mov	r0, r3
 801324e:	f7f8 fccb 	bl	800bbe8 <lwip_htons>
 8013252:	4603      	mov	r3, r0
 8013254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013258:	b29b      	uxth	r3, r3
 801325a:	00db      	lsls	r3, r3, #3
 801325c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013266:	2200      	movs	r2, #0
 8013268:	701a      	strb	r2, [r3, #0]
 801326a:	2200      	movs	r2, #0
 801326c:	705a      	strb	r2, [r3, #1]
 801326e:	2200      	movs	r2, #0
 8013270:	709a      	strb	r2, [r3, #2]
 8013272:	2200      	movs	r2, #0
 8013274:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013278:	8b3a      	ldrh	r2, [r7, #24]
 801327a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801327c:	8b3a      	ldrh	r2, [r7, #24]
 801327e:	8b7b      	ldrh	r3, [r7, #26]
 8013280:	4413      	add	r3, r2
 8013282:	b29a      	uxth	r2, r3
 8013284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013286:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	627b      	str	r3, [r7, #36]	; 0x24
 801328e:	e061      	b.n	8013354 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8013290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013292:	685b      	ldr	r3, [r3, #4]
 8013294:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8013296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013298:	889b      	ldrh	r3, [r3, #4]
 801329a:	b29a      	uxth	r2, r3
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	889b      	ldrh	r3, [r3, #4]
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d232      	bcs.n	801330c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80132a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132aa:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80132ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d01f      	beq.n	80132f2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80132b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b4:	889b      	ldrh	r3, [r3, #4]
 80132b6:	b29a      	uxth	r2, r3
 80132b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ba:	88db      	ldrh	r3, [r3, #6]
 80132bc:	b29b      	uxth	r3, r3
 80132be:	429a      	cmp	r2, r3
 80132c0:	f0c0 80e3 	bcc.w	801348a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80132c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c6:	88db      	ldrh	r3, [r3, #6]
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	889b      	ldrh	r3, [r3, #4]
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	429a      	cmp	r2, r3
 80132d2:	f200 80da 	bhi.w	801348a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80132d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d8:	68ba      	ldr	r2, [r7, #8]
 80132da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80132dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132de:	88db      	ldrh	r3, [r3, #6]
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e4:	889b      	ldrh	r3, [r3, #4]
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d037      	beq.n	801335c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80132ec:	2300      	movs	r3, #0
 80132ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80132f0:	e034      	b.n	801335c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80132f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f4:	88db      	ldrh	r3, [r3, #6]
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	889b      	ldrh	r3, [r3, #4]
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	429a      	cmp	r2, r3
 8013300:	f200 80c5 	bhi.w	801348e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	68ba      	ldr	r2, [r7, #8]
 8013308:	605a      	str	r2, [r3, #4]
      break;
 801330a:	e027      	b.n	801335c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330e:	889b      	ldrh	r3, [r3, #4]
 8013310:	b29a      	uxth	r2, r3
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	889b      	ldrh	r3, [r3, #4]
 8013316:	b29b      	uxth	r3, r3
 8013318:	429a      	cmp	r2, r3
 801331a:	f000 80ba 	beq.w	8013492 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013320:	889b      	ldrh	r3, [r3, #4]
 8013322:	b29a      	uxth	r2, r3
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	88db      	ldrh	r3, [r3, #6]
 8013328:	b29b      	uxth	r3, r3
 801332a:	429a      	cmp	r2, r3
 801332c:	f0c0 80b3 	bcc.w	8013496 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013332:	2b00      	cmp	r3, #0
 8013334:	d009      	beq.n	801334a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8013336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013338:	88db      	ldrh	r3, [r3, #6]
 801333a:	b29a      	uxth	r2, r3
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	889b      	ldrh	r3, [r3, #4]
 8013340:	b29b      	uxth	r3, r3
 8013342:	429a      	cmp	r2, r3
 8013344:	d001      	beq.n	801334a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013346:	2300      	movs	r3, #0
 8013348:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013356:	2b00      	cmp	r3, #0
 8013358:	d19a      	bne.n	8013290 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801335a:	e000      	b.n	801335e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801335c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013360:	2b00      	cmp	r3, #0
 8013362:	d12d      	bne.n	80133c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8013364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013366:	2b00      	cmp	r3, #0
 8013368:	d01c      	beq.n	80133a4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336c:	88db      	ldrh	r3, [r3, #6]
 801336e:	b29a      	uxth	r2, r3
 8013370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013372:	889b      	ldrh	r3, [r3, #4]
 8013374:	b29b      	uxth	r3, r3
 8013376:	429a      	cmp	r2, r3
 8013378:	d906      	bls.n	8013388 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801337a:	4b51      	ldr	r3, [pc, #324]	; (80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801337c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8013380:	4950      	ldr	r1, [pc, #320]	; (80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013382:	4851      	ldr	r0, [pc, #324]	; (80134c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013384:	f002 f964 	bl	8015650 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338a:	68ba      	ldr	r2, [r7, #8]
 801338c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013390:	88db      	ldrh	r3, [r3, #6]
 8013392:	b29a      	uxth	r2, r3
 8013394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013396:	889b      	ldrh	r3, [r3, #4]
 8013398:	b29b      	uxth	r3, r3
 801339a:	429a      	cmp	r2, r3
 801339c:	d010      	beq.n	80133c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801339e:	2300      	movs	r3, #0
 80133a0:	623b      	str	r3, [r7, #32]
 80133a2:	e00d      	b.n	80133c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d006      	beq.n	80133ba <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80133ac:	4b44      	ldr	r3, [pc, #272]	; (80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80133ae:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80133b2:	4946      	ldr	r1, [pc, #280]	; (80134cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133b4:	4844      	ldr	r0, [pc, #272]	; (80134c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80133b6:	f002 f94b 	bl	8015650 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	68ba      	ldr	r2, [r7, #8]
 80133be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d105      	bne.n	80133d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	7f9b      	ldrb	r3, [r3, #30]
 80133ca:	f003 0301 	and.w	r3, r3, #1
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d059      	beq.n	8013486 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80133d2:	6a3b      	ldr	r3, [r7, #32]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d04f      	beq.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d006      	beq.n	80133ee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	889b      	ldrh	r3, [r3, #4]
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d002      	beq.n	80133f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	623b      	str	r3, [r7, #32]
 80133f2:	e041      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80133f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80133f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80133fe:	e012      	b.n	8013426 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8013400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013408:	88db      	ldrh	r3, [r3, #6]
 801340a:	b29a      	uxth	r2, r3
 801340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340e:	889b      	ldrh	r3, [r3, #4]
 8013410:	b29b      	uxth	r3, r3
 8013412:	429a      	cmp	r2, r3
 8013414:	d002      	beq.n	801341c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8013416:	2300      	movs	r3, #0
 8013418:	623b      	str	r3, [r7, #32]
            break;
 801341a:	e007      	b.n	801342c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013428:	2b00      	cmp	r3, #0
 801342a:	d1e9      	bne.n	8013400 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801342c:	6a3b      	ldr	r3, [r7, #32]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d022      	beq.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d106      	bne.n	8013448 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801343a:	4b21      	ldr	r3, [pc, #132]	; (80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801343c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8013440:	4923      	ldr	r1, [pc, #140]	; (80134d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013442:	4821      	ldr	r0, [pc, #132]	; (80134c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013444:	f002 f904 	bl	8015650 <iprintf>
          LWIP_ASSERT("sanity check",
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013450:	429a      	cmp	r2, r3
 8013452:	d106      	bne.n	8013462 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8013454:	4b1a      	ldr	r3, [pc, #104]	; (80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013456:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801345a:	491d      	ldr	r1, [pc, #116]	; (80134d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801345c:	481a      	ldr	r0, [pc, #104]	; (80134c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801345e:	f002 f8f7 	bl	8015650 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d006      	beq.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801346a:	4b15      	ldr	r3, [pc, #84]	; (80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801346c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8013470:	4918      	ldr	r1, [pc, #96]	; (80134d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013472:	4815      	ldr	r0, [pc, #84]	; (80134c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013474:	f002 f8ec 	bl	8015650 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013478:	6a3b      	ldr	r3, [r7, #32]
 801347a:	2b00      	cmp	r3, #0
 801347c:	bf14      	ite	ne
 801347e:	2301      	movne	r3, #1
 8013480:	2300      	moveq	r3, #0
 8013482:	b2db      	uxtb	r3, r3
 8013484:	e018      	b.n	80134b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013486:	2300      	movs	r3, #0
 8013488:	e016      	b.n	80134b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 801348a:	bf00      	nop
 801348c:	e004      	b.n	8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801348e:	bf00      	nop
 8013490:	e002      	b.n	8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013492:	bf00      	nop
 8013494:	e000      	b.n	8013498 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013496:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8013498:	68b8      	ldr	r0, [r7, #8]
 801349a:	f7f9 fd75 	bl	800cf88 <pbuf_clen>
 801349e:	4603      	mov	r3, r0
 80134a0:	461a      	mov	r2, r3
 80134a2:	4b0d      	ldr	r3, [pc, #52]	; (80134d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80134a4:	881b      	ldrh	r3, [r3, #0]
 80134a6:	1a9b      	subs	r3, r3, r2
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	4b0b      	ldr	r3, [pc, #44]	; (80134d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80134ac:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80134ae:	68b8      	ldr	r0, [r7, #8]
 80134b0:	f7f9 fcd0 	bl	800ce54 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134b4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3730      	adds	r7, #48	; 0x30
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	0801854c 	.word	0x0801854c
 80134c4:	08018628 	.word	0x08018628
 80134c8:	08018594 	.word	0x08018594
 80134cc:	08018648 	.word	0x08018648
 80134d0:	08018680 	.word	0x08018680
 80134d4:	08018690 	.word	0x08018690
 80134d8:	200060b8 	.word	0x200060b8

080134dc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b08e      	sub	sp, #56	; 0x38
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80134ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ec:	781b      	ldrb	r3, [r3, #0]
 80134ee:	f003 030f 	and.w	r3, r3, #15
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	2b14      	cmp	r3, #20
 80134f6:	f040 8131 	bne.w	801375c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80134fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fc:	88db      	ldrh	r3, [r3, #6]
 80134fe:	b29b      	uxth	r3, r3
 8013500:	4618      	mov	r0, r3
 8013502:	f7f8 fb71 	bl	800bbe8 <lwip_htons>
 8013506:	4603      	mov	r3, r0
 8013508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801350c:	b29b      	uxth	r3, r3
 801350e:	00db      	lsls	r3, r3, #3
 8013510:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8013512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013514:	885b      	ldrh	r3, [r3, #2]
 8013516:	b29b      	uxth	r3, r3
 8013518:	4618      	mov	r0, r3
 801351a:	f7f8 fb65 	bl	800bbe8 <lwip_htons>
 801351e:	4603      	mov	r3, r0
 8013520:	461a      	mov	r2, r3
 8013522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	b29b      	uxth	r3, r3
 8013528:	f003 030f 	and.w	r3, r3, #15
 801352c:	b29b      	uxth	r3, r3
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	b29b      	uxth	r3, r3
 8013532:	1ad3      	subs	r3, r2, r3
 8013534:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f7f9 fd26 	bl	800cf88 <pbuf_clen>
 801353c:	4603      	mov	r3, r0
 801353e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013540:	4b8d      	ldr	r3, [pc, #564]	; (8013778 <ip4_reass+0x29c>)
 8013542:	881b      	ldrh	r3, [r3, #0]
 8013544:	461a      	mov	r2, r3
 8013546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013548:	4413      	add	r3, r2
 801354a:	2b0a      	cmp	r3, #10
 801354c:	dd10      	ble.n	8013570 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801354e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013550:	4619      	mov	r1, r3
 8013552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013554:	f7ff fd8e 	bl	8013074 <ip_reass_remove_oldest_datagram>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	f000 8100 	beq.w	8013760 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013560:	4b85      	ldr	r3, [pc, #532]	; (8013778 <ip4_reass+0x29c>)
 8013562:	881b      	ldrh	r3, [r3, #0]
 8013564:	461a      	mov	r2, r3
 8013566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013568:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801356a:	2b0a      	cmp	r3, #10
 801356c:	f300 80f8 	bgt.w	8013760 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013570:	4b82      	ldr	r3, [pc, #520]	; (801377c <ip4_reass+0x2a0>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	633b      	str	r3, [r7, #48]	; 0x30
 8013576:	e015      	b.n	80135a4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357a:	695a      	ldr	r2, [r3, #20]
 801357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	429a      	cmp	r2, r3
 8013582:	d10c      	bne.n	801359e <ip4_reass+0xc2>
 8013584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013586:	699a      	ldr	r2, [r3, #24]
 8013588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358a:	691b      	ldr	r3, [r3, #16]
 801358c:	429a      	cmp	r2, r3
 801358e:	d106      	bne.n	801359e <ip4_reass+0xc2>
 8013590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013592:	899a      	ldrh	r2, [r3, #12]
 8013594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013596:	889b      	ldrh	r3, [r3, #4]
 8013598:	b29b      	uxth	r3, r3
 801359a:	429a      	cmp	r2, r3
 801359c:	d006      	beq.n	80135ac <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	633b      	str	r3, [r7, #48]	; 0x30
 80135a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d1e6      	bne.n	8013578 <ip4_reass+0x9c>
 80135aa:	e000      	b.n	80135ae <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80135ac:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80135ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d109      	bne.n	80135c8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80135b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80135b6:	4619      	mov	r1, r3
 80135b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135ba:	f7ff fdbd 	bl	8013138 <ip_reass_enqueue_new_datagram>
 80135be:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80135c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d11c      	bne.n	8013600 <ip4_reass+0x124>
      goto nullreturn;
 80135c6:	e0ce      	b.n	8013766 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80135c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ca:	88db      	ldrh	r3, [r3, #6]
 80135cc:	b29b      	uxth	r3, r3
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7f8 fb0a 	bl	800bbe8 <lwip_htons>
 80135d4:	4603      	mov	r3, r0
 80135d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d110      	bne.n	8013600 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80135de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e0:	89db      	ldrh	r3, [r3, #14]
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7f8 fb00 	bl	800bbe8 <lwip_htons>
 80135e8:	4603      	mov	r3, r0
 80135ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d006      	beq.n	8013600 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80135f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f4:	3308      	adds	r3, #8
 80135f6:	2214      	movs	r2, #20
 80135f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80135fa:	4618      	mov	r0, r3
 80135fc:	f002 f815 	bl	801562a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013602:	88db      	ldrh	r3, [r3, #6]
 8013604:	b29b      	uxth	r3, r3
 8013606:	f003 0320 	and.w	r3, r3, #32
 801360a:	2b00      	cmp	r3, #0
 801360c:	bf0c      	ite	eq
 801360e:	2301      	moveq	r3, #1
 8013610:	2300      	movne	r3, #0
 8013612:	b2db      	uxtb	r3, r3
 8013614:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d00e      	beq.n	801363a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801361c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801361e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013620:	4413      	add	r3, r2
 8013622:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013624:	8b7a      	ldrh	r2, [r7, #26]
 8013626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013628:	429a      	cmp	r2, r3
 801362a:	f0c0 8099 	bcc.w	8013760 <ip4_reass+0x284>
 801362e:	8b7b      	ldrh	r3, [r7, #26]
 8013630:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013634:	4293      	cmp	r3, r2
 8013636:	f200 8093 	bhi.w	8013760 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801363a:	69fa      	ldr	r2, [r7, #28]
 801363c:	6879      	ldr	r1, [r7, #4]
 801363e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013640:	f7ff fde2 	bl	8013208 <ip_reass_chain_frag_into_datagram_and_validate>
 8013644:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	f1b3 3fff 	cmp.w	r3, #4294967295
 801364c:	f000 808a 	beq.w	8013764 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013650:	4b49      	ldr	r3, [pc, #292]	; (8013778 <ip4_reass+0x29c>)
 8013652:	881a      	ldrh	r2, [r3, #0]
 8013654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013656:	4413      	add	r3, r2
 8013658:	b29a      	uxth	r2, r3
 801365a:	4b47      	ldr	r3, [pc, #284]	; (8013778 <ip4_reass+0x29c>)
 801365c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d00d      	beq.n	8013680 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8013664:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013668:	4413      	add	r3, r2
 801366a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366e:	8a7a      	ldrh	r2, [r7, #18]
 8013670:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	7f9b      	ldrb	r3, [r3, #30]
 8013676:	f043 0301 	orr.w	r3, r3, #1
 801367a:	b2da      	uxtb	r2, r3
 801367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	2b01      	cmp	r3, #1
 8013684:	d168      	bne.n	8013758 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8013686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013688:	8b9b      	ldrh	r3, [r3, #28]
 801368a:	3314      	adds	r3, #20
 801368c:	b29a      	uxth	r2, r3
 801368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013690:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8013692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013694:	685b      	ldr	r3, [r3, #4]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80136a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a6:	3308      	adds	r3, #8
 80136a8:	2214      	movs	r2, #20
 80136aa:	4619      	mov	r1, r3
 80136ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136ae:	f001 ffbc 	bl	801562a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80136b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b4:	8b9b      	ldrh	r3, [r3, #28]
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7f8 fa96 	bl	800bbe8 <lwip_htons>
 80136bc:	4603      	mov	r3, r0
 80136be:	461a      	mov	r2, r3
 80136c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80136c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c6:	2200      	movs	r2, #0
 80136c8:	719a      	strb	r2, [r3, #6]
 80136ca:	2200      	movs	r2, #0
 80136cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80136ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d0:	2200      	movs	r2, #0
 80136d2:	729a      	strb	r2, [r3, #10]
 80136d4:	2200      	movs	r2, #0
 80136d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80136d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80136de:	e00e      	b.n	80136fe <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80136e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80136e6:	f06f 0113 	mvn.w	r1, #19
 80136ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80136ec:	f7f9 fb8e 	bl	800ce0c <pbuf_header>
      pbuf_cat(p, r);
 80136f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7f9 fc88 	bl	800d008 <pbuf_cat>
      r = iprh->next_pbuf;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80136fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013700:	2b00      	cmp	r3, #0
 8013702:	d1ed      	bne.n	80136e0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013704:	4b1d      	ldr	r3, [pc, #116]	; (801377c <ip4_reass+0x2a0>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801370a:	429a      	cmp	r2, r3
 801370c:	d102      	bne.n	8013714 <ip4_reass+0x238>
      ipr_prev = NULL;
 801370e:	2300      	movs	r3, #0
 8013710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013712:	e010      	b.n	8013736 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013714:	4b19      	ldr	r3, [pc, #100]	; (801377c <ip4_reass+0x2a0>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	62fb      	str	r3, [r7, #44]	; 0x2c
 801371a:	e007      	b.n	801372c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013722:	429a      	cmp	r2, r3
 8013724:	d006      	beq.n	8013734 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801372e:	2b00      	cmp	r3, #0
 8013730:	d1f4      	bne.n	801371c <ip4_reass+0x240>
 8013732:	e000      	b.n	8013736 <ip4_reass+0x25a>
          break;
 8013734:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801373a:	f7ff fd37 	bl	80131ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7f9 fc22 	bl	800cf88 <pbuf_clen>
 8013744:	4603      	mov	r3, r0
 8013746:	461a      	mov	r2, r3
 8013748:	4b0b      	ldr	r3, [pc, #44]	; (8013778 <ip4_reass+0x29c>)
 801374a:	881b      	ldrh	r3, [r3, #0]
 801374c:	1a9b      	subs	r3, r3, r2
 801374e:	b29a      	uxth	r2, r3
 8013750:	4b09      	ldr	r3, [pc, #36]	; (8013778 <ip4_reass+0x29c>)
 8013752:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	e00a      	b.n	801376e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013758:	2300      	movs	r3, #0
 801375a:	e008      	b.n	801376e <ip4_reass+0x292>
    goto nullreturn;
 801375c:	bf00      	nop
 801375e:	e002      	b.n	8013766 <ip4_reass+0x28a>

nullreturn:
 8013760:	bf00      	nop
 8013762:	e000      	b.n	8013766 <ip4_reass+0x28a>
    goto nullreturn;
 8013764:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7f9 fb74 	bl	800ce54 <pbuf_free>
  return NULL;
 801376c:	2300      	movs	r3, #0
}
 801376e:	4618      	mov	r0, r3
 8013770:	3738      	adds	r7, #56	; 0x38
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	200060b8 	.word	0x200060b8
 801377c:	200060b4 	.word	0x200060b4

08013780 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8013784:	2005      	movs	r0, #5
 8013786:	f7f8 fe1d 	bl	800c3c4 <memp_malloc>
 801378a:	4603      	mov	r3, r0
}
 801378c:	4618      	mov	r0, r3
 801378e:	bd80      	pop	{r7, pc}

08013790 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d106      	bne.n	80137ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801379e:	4b07      	ldr	r3, [pc, #28]	; (80137bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80137a0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80137a4:	4906      	ldr	r1, [pc, #24]	; (80137c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80137a6:	4807      	ldr	r0, [pc, #28]	; (80137c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80137a8:	f001 ff52 	bl	8015650 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80137ac:	6879      	ldr	r1, [r7, #4]
 80137ae:	2005      	movs	r0, #5
 80137b0:	f7f8 fe5a 	bl	800c468 <memp_free>
}
 80137b4:	bf00      	nop
 80137b6:	3708      	adds	r7, #8
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}
 80137bc:	0801854c 	.word	0x0801854c
 80137c0:	080186b4 	.word	0x080186b4
 80137c4:	08018594 	.word	0x08018594

080137c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d106      	bne.n	80137e8 <ipfrag_free_pbuf_custom+0x20>
 80137da:	4b11      	ldr	r3, [pc, #68]	; (8013820 <ipfrag_free_pbuf_custom+0x58>)
 80137dc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80137e0:	4910      	ldr	r1, [pc, #64]	; (8013824 <ipfrag_free_pbuf_custom+0x5c>)
 80137e2:	4811      	ldr	r0, [pc, #68]	; (8013828 <ipfrag_free_pbuf_custom+0x60>)
 80137e4:	f001 ff34 	bl	8015650 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80137e8:	68fa      	ldr	r2, [r7, #12]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d006      	beq.n	80137fe <ipfrag_free_pbuf_custom+0x36>
 80137f0:	4b0b      	ldr	r3, [pc, #44]	; (8013820 <ipfrag_free_pbuf_custom+0x58>)
 80137f2:	f240 22b9 	movw	r2, #697	; 0x2b9
 80137f6:	490d      	ldr	r1, [pc, #52]	; (801382c <ipfrag_free_pbuf_custom+0x64>)
 80137f8:	480b      	ldr	r0, [pc, #44]	; (8013828 <ipfrag_free_pbuf_custom+0x60>)
 80137fa:	f001 ff29 	bl	8015650 <iprintf>
  if (pcr->original != NULL) {
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	695b      	ldr	r3, [r3, #20]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d004      	beq.n	8013810 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	695b      	ldr	r3, [r3, #20]
 801380a:	4618      	mov	r0, r3
 801380c:	f7f9 fb22 	bl	800ce54 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013810:	68f8      	ldr	r0, [r7, #12]
 8013812:	f7ff ffbd 	bl	8013790 <ip_frag_free_pbuf_custom_ref>
}
 8013816:	bf00      	nop
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	0801854c 	.word	0x0801854c
 8013824:	080186c0 	.word	0x080186c0
 8013828:	08018594 	.word	0x08018594
 801382c:	080186cc 	.word	0x080186cc

08013830 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b092      	sub	sp, #72	; 0x48
 8013834:	af02      	add	r7, sp, #8
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801383c:	2300      	movs	r3, #0
 801383e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013844:	3b14      	subs	r3, #20
 8013846:	2b00      	cmp	r3, #0
 8013848:	da00      	bge.n	801384c <ip4_frag+0x1c>
 801384a:	3307      	adds	r3, #7
 801384c:	10db      	asrs	r3, r3, #3
 801384e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013850:	2314      	movs	r3, #20
 8013852:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	f003 030f 	and.w	r3, r3, #15
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	2b14      	cmp	r3, #20
 801386a:	d009      	beq.n	8013880 <ip4_frag+0x50>
 801386c:	4b79      	ldr	r3, [pc, #484]	; (8013a54 <ip4_frag+0x224>)
 801386e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8013872:	4979      	ldr	r1, [pc, #484]	; (8013a58 <ip4_frag+0x228>)
 8013874:	4879      	ldr	r0, [pc, #484]	; (8013a5c <ip4_frag+0x22c>)
 8013876:	f001 feeb 	bl	8015650 <iprintf>
 801387a:	f06f 0305 	mvn.w	r3, #5
 801387e:	e0e5      	b.n	8013a4c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013882:	88db      	ldrh	r3, [r3, #6]
 8013884:	b29b      	uxth	r3, r3
 8013886:	4618      	mov	r0, r3
 8013888:	f7f8 f9ae 	bl	800bbe8 <lwip_htons>
 801388c:	4603      	mov	r3, r0
 801388e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8013890:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013892:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013896:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8013898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801389a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d009      	beq.n	80138b6 <ip4_frag+0x86>
 80138a2:	4b6c      	ldr	r3, [pc, #432]	; (8013a54 <ip4_frag+0x224>)
 80138a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80138a8:	496d      	ldr	r1, [pc, #436]	; (8013a60 <ip4_frag+0x230>)
 80138aa:	486c      	ldr	r0, [pc, #432]	; (8013a5c <ip4_frag+0x22c>)
 80138ac:	f001 fed0 	bl	8015650 <iprintf>
 80138b0:	f06f 0305 	mvn.w	r3, #5
 80138b4:	e0ca      	b.n	8013a4c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	891b      	ldrh	r3, [r3, #8]
 80138ba:	3b14      	subs	r3, #20
 80138bc:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80138be:	e0bc      	b.n	8013a3a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80138c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80138c2:	00da      	lsls	r2, r3, #3
 80138c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80138c6:	4293      	cmp	r3, r2
 80138c8:	bfa8      	it	ge
 80138ca:	4613      	movge	r3, r2
 80138cc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80138ce:	2200      	movs	r2, #0
 80138d0:	2114      	movs	r1, #20
 80138d2:	2002      	movs	r0, #2
 80138d4:	f7f8 ff50 	bl	800c778 <pbuf_alloc>
 80138d8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80138da:	6a3b      	ldr	r3, [r7, #32]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	f000 80b2 	beq.w	8013a46 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	895b      	ldrh	r3, [r3, #10]
 80138e6:	2b13      	cmp	r3, #19
 80138e8:	d806      	bhi.n	80138f8 <ip4_frag+0xc8>
 80138ea:	4b5a      	ldr	r3, [pc, #360]	; (8013a54 <ip4_frag+0x224>)
 80138ec:	f240 3209 	movw	r2, #777	; 0x309
 80138f0:	495c      	ldr	r1, [pc, #368]	; (8013a64 <ip4_frag+0x234>)
 80138f2:	485a      	ldr	r0, [pc, #360]	; (8013a5c <ip4_frag+0x22c>)
 80138f4:	f001 feac 	bl	8015650 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80138f8:	6a3b      	ldr	r3, [r7, #32]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	2214      	movs	r2, #20
 80138fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013900:	4618      	mov	r0, r3
 8013902:	f001 fe92 	bl	801562a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013906:	6a3b      	ldr	r3, [r7, #32]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801390c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801390e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8013910:	e04f      	b.n	80139b2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	895a      	ldrh	r2, [r3, #10]
 8013916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013918:	1ad3      	subs	r3, r2, r3
 801391a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801391c:	8b7a      	ldrh	r2, [r7, #26]
 801391e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013920:	4293      	cmp	r3, r2
 8013922:	bf28      	it	cs
 8013924:	4613      	movcs	r3, r2
 8013926:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013928:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801392a:	2b00      	cmp	r3, #0
 801392c:	d105      	bne.n	801393a <ip4_frag+0x10a>
        poff = 0;
 801392e:	2300      	movs	r3, #0
 8013930:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	60fb      	str	r3, [r7, #12]
        continue;
 8013938:	e03b      	b.n	80139b2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801393a:	f7ff ff21 	bl	8013780 <ip_frag_alloc_pbuf_custom_ref>
 801393e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d103      	bne.n	801394e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8013946:	6a38      	ldr	r0, [r7, #32]
 8013948:	f7f9 fa84 	bl	800ce54 <pbuf_free>
        goto memerr;
 801394c:	e07c      	b.n	8013a48 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801394e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013954:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013956:	4413      	add	r3, r2
 8013958:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801395a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801395c:	9201      	str	r2, [sp, #4]
 801395e:	9300      	str	r3, [sp, #0]
 8013960:	4603      	mov	r3, r0
 8013962:	2202      	movs	r2, #2
 8013964:	2004      	movs	r0, #4
 8013966:	f7f9 f897 	bl	800ca98 <pbuf_alloced_custom>
 801396a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d106      	bne.n	8013980 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013972:	6978      	ldr	r0, [r7, #20]
 8013974:	f7ff ff0c 	bl	8013790 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013978:	6a38      	ldr	r0, [r7, #32]
 801397a:	f7f9 fa6b 	bl	800ce54 <pbuf_free>
        goto memerr;
 801397e:	e063      	b.n	8013a48 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f7f9 fb19 	bl	800cfb8 <pbuf_ref>
      pcr->original = p;
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	68fa      	ldr	r2, [r7, #12]
 801398a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	4a36      	ldr	r2, [pc, #216]	; (8013a68 <ip4_frag+0x238>)
 8013990:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013992:	6939      	ldr	r1, [r7, #16]
 8013994:	6a38      	ldr	r0, [r7, #32]
 8013996:	f7f9 fb37 	bl	800d008 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801399a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801399c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801399e:	1ad3      	subs	r3, r2, r3
 80139a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80139a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d004      	beq.n	80139b2 <ip4_frag+0x182>
        poff = 0;
 80139a8:	2300      	movs	r3, #0
 80139aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80139b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d1ac      	bne.n	8013912 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80139b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80139ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139bc:	4413      	add	r3, r2
 80139be:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80139c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80139c6:	3b14      	subs	r3, #20
 80139c8:	429a      	cmp	r2, r3
 80139ca:	bfd4      	ite	le
 80139cc:	2301      	movle	r3, #1
 80139ce:	2300      	movgt	r3, #0
 80139d0:	b2db      	uxtb	r3, r3
 80139d2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80139d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80139d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139da:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d103      	bne.n	80139ea <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80139e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80139e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80139e8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80139ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f8 f8fb 	bl	800bbe8 <lwip_htons>
 80139f2:	4603      	mov	r3, r0
 80139f4:	461a      	mov	r2, r3
 80139f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80139fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80139fc:	3314      	adds	r3, #20
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7f8 f8f1 	bl	800bbe8 <lwip_htons>
 8013a06:	4603      	mov	r3, r0
 8013a08:	461a      	mov	r2, r3
 8013a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a10:	2200      	movs	r2, #0
 8013a12:	729a      	strb	r2, [r3, #10]
 8013a14:	2200      	movs	r2, #0
 8013a16:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	695b      	ldr	r3, [r3, #20]
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	6a39      	ldr	r1, [r7, #32]
 8013a20:	68b8      	ldr	r0, [r7, #8]
 8013a22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013a24:	6a38      	ldr	r0, [r7, #32]
 8013a26:	f7f9 fa15 	bl	800ce54 <pbuf_free>
    left -= fragsize;
 8013a2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8013a32:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013a34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013a36:	4413      	add	r3, r2
 8013a38:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8013a3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f47f af3f 	bne.w	80138c0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013a42:	2300      	movs	r3, #0
 8013a44:	e002      	b.n	8013a4c <ip4_frag+0x21c>
      goto memerr;
 8013a46:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3740      	adds	r7, #64	; 0x40
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	0801854c 	.word	0x0801854c
 8013a58:	080186d8 	.word	0x080186d8
 8013a5c:	08018594 	.word	0x08018594
 8013a60:	08018700 	.word	0x08018700
 8013a64:	0801871c 	.word	0x0801871c
 8013a68:	080137c9 	.word	0x080137c9

08013a6c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b086      	sub	sp, #24
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8013a76:	230e      	movs	r3, #14
 8013a78:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	895b      	ldrh	r3, [r3, #10]
 8013a7e:	2b0e      	cmp	r3, #14
 8013a80:	d977      	bls.n	8013b72 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	7b1a      	ldrb	r2, [r3, #12]
 8013a8c:	7b5b      	ldrb	r3, [r3, #13]
 8013a8e:	021b      	lsls	r3, r3, #8
 8013a90:	4313      	orrs	r3, r2
 8013a92:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	781b      	ldrb	r3, [r3, #0]
 8013a98:	f003 0301 	and.w	r3, r3, #1
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d023      	beq.n	8013ae8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	2b01      	cmp	r3, #1
 8013aa6:	d10f      	bne.n	8013ac8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	785b      	ldrb	r3, [r3, #1]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d11b      	bne.n	8013ae8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013ab4:	2b5e      	cmp	r3, #94	; 0x5e
 8013ab6:	d117      	bne.n	8013ae8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	7b5b      	ldrb	r3, [r3, #13]
 8013abc:	f043 0310 	orr.w	r3, r3, #16
 8013ac0:	b2da      	uxtb	r2, r3
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	735a      	strb	r2, [r3, #13]
 8013ac6:	e00f      	b.n	8013ae8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	2206      	movs	r2, #6
 8013acc:	4930      	ldr	r1, [pc, #192]	; (8013b90 <ethernet_input+0x124>)
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f001 fd9c 	bl	801560c <memcmp>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d106      	bne.n	8013ae8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	7b5b      	ldrb	r3, [r3, #13]
 8013ade:	f043 0308 	orr.w	r3, r3, #8
 8013ae2:	b2da      	uxtb	r2, r3
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013ae8:	89fb      	ldrh	r3, [r7, #14]
 8013aea:	2b08      	cmp	r3, #8
 8013aec:	d003      	beq.n	8013af6 <ethernet_input+0x8a>
 8013aee:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013af2:	d01e      	beq.n	8013b32 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013af4:	e044      	b.n	8013b80 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013afc:	f003 0308 	and.w	r3, r3, #8
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d038      	beq.n	8013b76 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	895b      	ldrh	r3, [r3, #10]
 8013b08:	461a      	mov	r2, r3
 8013b0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	db33      	blt.n	8013b7a <ethernet_input+0x10e>
 8013b12:	8afb      	ldrh	r3, [r7, #22]
 8013b14:	425b      	negs	r3, r3
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	b21b      	sxth	r3, r3
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f7f9 f975 	bl	800ce0c <pbuf_header>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d128      	bne.n	8013b7a <ethernet_input+0x10e>
        ip4_input(p, netif);
 8013b28:	6839      	ldr	r1, [r7, #0]
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7fe ff80 	bl	8012a30 <ip4_input>
      break;
 8013b30:	e01d      	b.n	8013b6e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013b38:	f003 0308 	and.w	r3, r3, #8
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d01e      	beq.n	8013b7e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	895b      	ldrh	r3, [r3, #10]
 8013b44:	461a      	mov	r2, r3
 8013b46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	db15      	blt.n	8013b7a <ethernet_input+0x10e>
 8013b4e:	8afb      	ldrh	r3, [r7, #22]
 8013b50:	425b      	negs	r3, r3
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	b21b      	sxth	r3, r3
 8013b56:	4619      	mov	r1, r3
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f7f9 f957 	bl	800ce0c <pbuf_header>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10a      	bne.n	8013b7a <ethernet_input+0x10e>
        etharp_input(p, netif);
 8013b64:	6839      	ldr	r1, [r7, #0]
 8013b66:	6878      	ldr	r0, [r7, #4]
 8013b68:	f7fe f94e 	bl	8011e08 <etharp_input>
      break;
 8013b6c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	e00a      	b.n	8013b88 <ethernet_input+0x11c>
    goto free_and_return;
 8013b72:	bf00      	nop
 8013b74:	e004      	b.n	8013b80 <ethernet_input+0x114>
        goto free_and_return;
 8013b76:	bf00      	nop
 8013b78:	e002      	b.n	8013b80 <ethernet_input+0x114>

free_and_return:
 8013b7a:	bf00      	nop
 8013b7c:	e000      	b.n	8013b80 <ethernet_input+0x114>
        goto free_and_return;
 8013b7e:	bf00      	nop
  pbuf_free(p);
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f7f9 f967 	bl	800ce54 <pbuf_free>
  return ERR_OK;
 8013b86:	2300      	movs	r3, #0
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3718      	adds	r7, #24
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	080189e4 	.word	0x080189e4

08013b94 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b086      	sub	sp, #24
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
 8013ba0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013ba2:	8c3b      	ldrh	r3, [r7, #32]
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7f8 f81f 	bl	800bbe8 <lwip_htons>
 8013baa:	4603      	mov	r3, r0
 8013bac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8013bae:	210e      	movs	r1, #14
 8013bb0:	68b8      	ldr	r0, [r7, #8]
 8013bb2:	f7f9 f92b 	bl	800ce0c <pbuf_header>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d125      	bne.n	8013c08 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	8afa      	ldrh	r2, [r7, #22]
 8013bc6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	2206      	movs	r2, #6
 8013bcc:	6839      	ldr	r1, [r7, #0]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f001 fd2b 	bl	801562a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	3306      	adds	r3, #6
 8013bd8:	2206      	movs	r2, #6
 8013bda:	6879      	ldr	r1, [r7, #4]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f001 fd24 	bl	801562a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013be8:	2b06      	cmp	r3, #6
 8013bea:	d006      	beq.n	8013bfa <ethernet_output+0x66>
 8013bec:	4b0a      	ldr	r3, [pc, #40]	; (8013c18 <ethernet_output+0x84>)
 8013bee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013bf2:	490a      	ldr	r1, [pc, #40]	; (8013c1c <ethernet_output+0x88>)
 8013bf4:	480a      	ldr	r0, [pc, #40]	; (8013c20 <ethernet_output+0x8c>)
 8013bf6:	f001 fd2b 	bl	8015650 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	699b      	ldr	r3, [r3, #24]
 8013bfe:	68b9      	ldr	r1, [r7, #8]
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	4798      	blx	r3
 8013c04:	4603      	mov	r3, r0
 8013c06:	e002      	b.n	8013c0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013c08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013c0a:	f06f 0301 	mvn.w	r3, #1
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3718      	adds	r7, #24
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	0801873c 	.word	0x0801873c
 8013c1c:	08018774 	.word	0x08018774
 8013c20:	080187a8 	.word	0x080187a8

08013c24 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	2200      	movs	r2, #0
 8013c32:	2104      	movs	r1, #4
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7f4 fadb 	bl	80081f0 <osMessageQueueNew>
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d102      	bne.n	8013c4e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8013c48:	f04f 33ff 	mov.w	r3, #4294967295
 8013c4c:	e000      	b.n	8013c50 <sys_mbox_new+0x2c>

  return ERR_OK;
 8013c4e:	2300      	movs	r3, #0
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3708      	adds	r7, #8
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6818      	ldr	r0, [r3, #0]
 8013c66:	4639      	mov	r1, r7
 8013c68:	2300      	movs	r3, #0
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	f7f4 fb46 	bl	80082fc <osMessageQueuePut>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d102      	bne.n	8013c7c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8013c76:	2300      	movs	r3, #0
 8013c78:	73fb      	strb	r3, [r7, #15]
 8013c7a:	e001      	b.n	8013c80 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013c7c:	23ff      	movs	r3, #255	; 0xff
 8013c7e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3710      	adds	r7, #16
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b086      	sub	sp, #24
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8013c98:	f7f3 fe10 	bl	80078bc <osKernelGetTickCount>
 8013c9c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d013      	beq.n	8013ccc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	6818      	ldr	r0, [r3, #0]
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2200      	movs	r2, #0
 8013cac:	68b9      	ldr	r1, [r7, #8]
 8013cae:	f7f4 fb99 	bl	80083e4 <osMessageQueueGet>
 8013cb2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d105      	bne.n	8013cc6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8013cba:	f7f3 fdff 	bl	80078bc <osKernelGetTickCount>
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	1ad3      	subs	r3, r2, r3
 8013cc4:	e00f      	b.n	8013ce6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8013cca:	e00c      	b.n	8013ce6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	6818      	ldr	r0, [r3, #0]
 8013cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	68b9      	ldr	r1, [r7, #8]
 8013cd8:	f7f4 fb84 	bl	80083e4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8013cdc:	f7f3 fdee 	bl	80078bc <osKernelGetTickCount>
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3718      	adds	r7, #24
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013cee:	b480      	push	{r7}
 8013cf0:	b083      	sub	sp, #12
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d101      	bne.n	8013d02 <sys_mbox_valid+0x14>
    return 0;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	e000      	b.n	8013d04 <sys_mbox_valid+0x16>
  else
    return 1;
 8013d02:	2301      	movs	r3, #1
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	370c      	adds	r7, #12
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr

08013d10 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8013d14:	2000      	movs	r0, #0
 8013d16:	f7f3 ffc7 	bl	8007ca8 <osMutexNew>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	4b01      	ldr	r3, [pc, #4]	; (8013d24 <sys_init+0x14>)
 8013d1e:	601a      	str	r2, [r3, #0]
#endif
}
 8013d20:	bf00      	nop
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	200176bc 	.word	0x200176bc

08013d28 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8013d30:	2000      	movs	r0, #0
 8013d32:	f7f3 ffb9 	bl	8007ca8 <osMutexNew>
 8013d36:	4602      	mov	r2, r0
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d102      	bne.n	8013d4a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013d44:	f04f 33ff 	mov.w	r3, #4294967295
 8013d48:	e000      	b.n	8013d4c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013d4a:	2300      	movs	r3, #0
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3708      	adds	r7, #8
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f04f 31ff 	mov.w	r1, #4294967295
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7f4 f839 	bl	8007ddc <osMutexAcquire>
#endif
}
 8013d6a:	bf00      	nop
 8013d6c:	3708      	adds	r7, #8
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013d72:	b580      	push	{r7, lr}
 8013d74:	b082      	sub	sp, #8
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7f4 f88a 	bl	8007e98 <osMutexRelease>
}
 8013d84:	bf00      	nop
 8013d86:	3708      	adds	r7, #8
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b08e      	sub	sp, #56	; 0x38
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	60b9      	str	r1, [r7, #8]
 8013d96:	607a      	str	r2, [r7, #4]
 8013d98:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8013d9a:	f107 0314 	add.w	r3, r7, #20
 8013d9e:	2224      	movs	r2, #36	; 0x24
 8013da0:	2100      	movs	r1, #0
 8013da2:	4618      	mov	r0, r3
 8013da4:	f001 fc4c 	bl	8015640 <memset>
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	617b      	str	r3, [r7, #20]
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8013db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013db2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8013db4:	f107 0314 	add.w	r3, r7, #20
 8013db8:	461a      	mov	r2, r3
 8013dba:	6879      	ldr	r1, [r7, #4]
 8013dbc:	68b8      	ldr	r0, [r7, #8]
 8013dbe:	f7f3 fda5 	bl	800790c <osThreadNew>
 8013dc2:	4603      	mov	r3, r0
#endif
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3738      	adds	r7, #56	; 0x38
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8013dd0:	4b04      	ldr	r3, [pc, #16]	; (8013de4 <sys_arch_protect+0x18>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7f3 ffff 	bl	8007ddc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8013dde:	2301      	movs	r3, #1
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	bd80      	pop	{r7, pc}
 8013de4:	200176bc 	.word	0x200176bc

08013de8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013df0:	4b04      	ldr	r3, [pc, #16]	; (8013e04 <sys_arch_unprotect+0x1c>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7f4 f84f 	bl	8007e98 <osMutexRelease>
}
 8013dfa:	bf00      	nop
 8013dfc:	3708      	adds	r7, #8
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	200176bc 	.word	0x200176bc

08013e08 <UART1_IDLECallBack>:
extern USART_DATA UsartType3;
extern osThreadId_t usart1TaskHandle;

//空闲中断
void UART1_IDLECallBack(void)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart1);
 8013e0e:	480f      	ldr	r0, [pc, #60]	; (8013e4c <UART1_IDLECallBack+0x44>)
 8013e10:	f7f2 f992 	bl	8006138 <HAL_UART_DMAStop>
	UsartType1.rx_len =  USART_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8013e14:	4b0d      	ldr	r3, [pc, #52]	; (8013e4c <UART1_IDLECallBack+0x44>)
 8013e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013e22:	b29a      	uxth	r2, r3
 8013e24:	4b0a      	ldr	r3, [pc, #40]	; (8013e50 <UART1_IDLECallBack+0x48>)
 8013e26:	80da      	strh	r2, [r3, #6]
	HAL_UART_Receive_DMA(&huart1,UsartType1.RxBuf,USART_BUF_SIZE);
 8013e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013e2c:	4909      	ldr	r1, [pc, #36]	; (8013e54 <UART1_IDLECallBack+0x4c>)
 8013e2e:	4807      	ldr	r0, [pc, #28]	; (8013e4c <UART1_IDLECallBack+0x44>)
 8013e30:	f7f2 f902 	bl	8006038 <HAL_UART_Receive_DMA>
	uint32_t rflags=osThreadFlagsSet(usart1TaskHandle,0x01U);
 8013e34:	4b08      	ldr	r3, [pc, #32]	; (8013e58 <UART1_IDLECallBack+0x50>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	2101      	movs	r1, #1
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7f3 fe10 	bl	8007a60 <osThreadFlagsSet>
 8013e40:	6078      	str	r0, [r7, #4]
//	//pdata[3]=(uint8_t)(rflags>>24);
//	HAL_UART_Transmit(&huart1, pdata, 2,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1, UsartType1.RxBuf, 8,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1, UsartType3.RxBuf, 8,HAL_MAX_DELAY);
    //printf("rt=%lx\n",rflags);
}
 8013e42:	bf00      	nop
 8013e44:	3708      	adds	r7, #8
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	2000710c 	.word	0x2000710c
 8013e50:	20018b24 	.word	0x20018b24
 8013e54:	20018b2c 	.word	0x20018b2c
 8013e58:	20006458 	.word	0x20006458

08013e5c <HAL_CAN_RxFifo0MsgPendingCallback>:
//}



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
	if(hcan->Instance==CAN1)
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	4a0b      	ldr	r2, [pc, #44]	; (8013e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	d10f      	bne.n	8013e8e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
  {
		HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&can_msg.RxHead,can_msg.RxBuffer);
 8013e6e:	4b0b      	ldr	r3, [pc, #44]	; (8013e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8013e70:	4a0b      	ldr	r2, [pc, #44]	; (8013ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8013e72:	2100      	movs	r1, #0
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f7ed ff39 	bl	8001cec <HAL_CAN_GetRxMessage>
		can_msg.hcan=hcan;
 8013e7a:	4a0a      	ldr	r2, [pc, #40]	; (8013ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6013      	str	r3, [r2, #0]
    osMessageQueuePut (canRxQueueHandle, &can_msg, 0, 0);
 8013e80:	4b09      	ldr	r3, [pc, #36]	; (8013ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8013e82:	6818      	ldr	r0, [r3, #0]
 8013e84:	2300      	movs	r3, #0
 8013e86:	2200      	movs	r2, #0
 8013e88:	4906      	ldr	r1, [pc, #24]	; (8013ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8013e8a:	f7f4 fa37 	bl	80082fc <osMessageQueuePut>
  }
}
 8013e8e:	bf00      	nop
 8013e90:	3708      	adds	r7, #8
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}
 8013e96:	bf00      	nop
 8013e98:	40006400 	.word	0x40006400
 8013e9c:	20019564 	.word	0x20019564
 8013ea0:	20019548 	.word	0x20019548
 8013ea4:	20019544 	.word	0x20019544
 8013ea8:	20006454 	.word	0x20006454

08013eac <CalculateCrc>:
		0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
		0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
};

uint16_t CalculateCrc(uint8_t* data,int len)
{
 8013eac:	b480      	push	{r7}
 8013eae:	b087      	sub	sp, #28
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
	uint16_t crc=0xffff;
 8013eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013eba:	82fb      	strh	r3, [r7, #22]
	
	for(int i=0;i<len;i++)
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	613b      	str	r3, [r7, #16]
 8013ec0:	e014      	b.n	8013eec <CalculateCrc+0x40>
	{
		uint8_t tableIndex = (uint8_t) (crc ^ data[i]);
 8013ec2:	8afb      	ldrh	r3, [r7, #22]
 8013ec4:	b2da      	uxtb	r2, r3
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	6879      	ldr	r1, [r7, #4]
 8013eca:	440b      	add	r3, r1
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	4053      	eors	r3, r2
 8013ed0:	73fb      	strb	r3, [r7, #15]
		crc >>= 8;
 8013ed2:	8afb      	ldrh	r3, [r7, #22]
 8013ed4:	0a1b      	lsrs	r3, r3, #8
 8013ed6:	82fb      	strh	r3, [r7, #22]
		crc ^= crcTable[tableIndex];
 8013ed8:	7bfb      	ldrb	r3, [r7, #15]
 8013eda:	4a0a      	ldr	r2, [pc, #40]	; (8013f04 <CalculateCrc+0x58>)
 8013edc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013ee0:	8afb      	ldrh	r3, [r7, #22]
 8013ee2:	4053      	eors	r3, r2
 8013ee4:	82fb      	strh	r3, [r7, #22]
	for(int i=0;i<len;i++)
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	3301      	adds	r3, #1
 8013eea:	613b      	str	r3, [r7, #16]
 8013eec:	693a      	ldr	r2, [r7, #16]
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	dbe6      	blt.n	8013ec2 <CalculateCrc+0x16>
	}
		return crc;
 8013ef4:	8afb      	ldrh	r3, [r7, #22]
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	371c      	adds	r7, #28
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr
 8013f02:	bf00      	nop
 8013f04:	080189f4 	.word	0x080189f4

08013f08 <CRC16>:

uint16_t CRC16(uint8_t *data,uint16_t len)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b087      	sub	sp, #28
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	460b      	mov	r3, r1
 8013f12:	807b      	strh	r3, [r7, #2]
	uint16_t crc=0xFFFF;
 8013f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f18:	82fb      	strh	r3, [r7, #22]
	if (len>0)
 8013f1a:	887b      	ldrh	r3, [r7, #2]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d02c      	beq.n	8013f7a <CRC16+0x72>
	{
		for(int i=0; i<len; i++)
 8013f20:	2300      	movs	r3, #0
 8013f22:	613b      	str	r3, [r7, #16]
 8013f24:	e023      	b.n	8013f6e <CRC16+0x66>
		{
				crc=(uint16_t)(crc^(data[i]));
 8013f26:	693b      	ldr	r3, [r7, #16]
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	b29a      	uxth	r2, r3
 8013f30:	8afb      	ldrh	r3, [r7, #22]
 8013f32:	4053      	eors	r3, r2
 8013f34:	82fb      	strh	r3, [r7, #22]
				for(int j=0; j<8; j++)
 8013f36:	2300      	movs	r3, #0
 8013f38:	60fb      	str	r3, [r7, #12]
 8013f3a:	e012      	b.n	8013f62 <CRC16+0x5a>
				{
						crc=(crc&1)!=0 ? (uint16_t)((crc>>1)^0xA001) : (uint16_t)(crc>>1);
 8013f3c:	8afb      	ldrh	r3, [r7, #22]
 8013f3e:	f003 0301 	and.w	r3, r3, #1
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d006      	beq.n	8013f54 <CRC16+0x4c>
 8013f46:	8afb      	ldrh	r3, [r7, #22]
 8013f48:	085b      	lsrs	r3, r3, #1
 8013f4a:	b29a      	uxth	r2, r3
 8013f4c:	4b0e      	ldr	r3, [pc, #56]	; (8013f88 <CRC16+0x80>)
 8013f4e:	4053      	eors	r3, r2
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	e002      	b.n	8013f5a <CRC16+0x52>
 8013f54:	8afb      	ldrh	r3, [r7, #22]
 8013f56:	085b      	lsrs	r3, r3, #1
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	82fb      	strh	r3, [r7, #22]
				for(int j=0; j<8; j++)
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	3301      	adds	r3, #1
 8013f60:	60fb      	str	r3, [r7, #12]
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2b07      	cmp	r3, #7
 8013f66:	dde9      	ble.n	8013f3c <CRC16+0x34>
		for(int i=0; i<len; i++)
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	613b      	str	r3, [r7, #16]
 8013f6e:	887b      	ldrh	r3, [r7, #2]
 8013f70:	693a      	ldr	r2, [r7, #16]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	dbd7      	blt.n	8013f26 <CRC16+0x1e>
				}
		}
		return crc;
 8013f76:	8afb      	ldrh	r3, [r7, #22]
 8013f78:	e000      	b.n	8013f7c <CRC16+0x74>
}
	return 0;
 8013f7a:	2300      	movs	r3, #0
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	371c      	adds	r7, #28
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr
 8013f88:	ffffa001 	.word	0xffffa001

08013f8c <CreateSampleData>:

int CreateSampleData(uint16_t *pbuf)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b087      	sub	sp, #28
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
int i,j;
	j=0;
 8013f94:	2300      	movs	r3, #0
 8013f96:	613b      	str	r3, [r7, #16]
	//8��ģ����
	for(i=0;i<ADC_NUMBER+FREQ_NUMBER;i++)
 8013f98:	2300      	movs	r3, #0
 8013f9a:	617b      	str	r3, [r7, #20]
 8013f9c:	e00d      	b.n	8013fba <CreateSampleData+0x2e>
	{
		pbuf[j++]=AllSampleBuf[i];
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	1c5a      	adds	r2, r3, #1
 8013fa2:	613a      	str	r2, [r7, #16]
 8013fa4:	005b      	lsls	r3, r3, #1
 8013fa6:	687a      	ldr	r2, [r7, #4]
 8013fa8:	4413      	add	r3, r2
 8013faa:	4958      	ldr	r1, [pc, #352]	; (801410c <CreateSampleData+0x180>)
 8013fac:	697a      	ldr	r2, [r7, #20]
 8013fae:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8013fb2:	801a      	strh	r2, [r3, #0]
	for(i=0;i<ADC_NUMBER+FREQ_NUMBER;i++)
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	617b      	str	r3, [r7, #20]
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	2b0f      	cmp	r3, #15
 8013fbe:	ddee      	ble.n	8013f9e <CreateSampleData+0x12>
	}
	
	pbuf[j++]=0;//SWStatus;
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	1c5a      	adds	r2, r3, #1
 8013fc4:	613a      	str	r2, [r7, #16]
 8013fc6:	005b      	lsls	r3, r3, #1
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	4413      	add	r3, r2
 8013fcc:	2200      	movs	r2, #0
 8013fce:	801a      	strh	r2, [r3, #0]
	
	//16��������
	pbuf[j++]=0;//KinStatus;
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	1c5a      	adds	r2, r3, #1
 8013fd4:	613a      	str	r2, [r7, #16]
 8013fd6:	005b      	lsls	r3, r3, #1
 8013fd8:	687a      	ldr	r2, [r7, #4]
 8013fda:	4413      	add	r3, r2
 8013fdc:	2200      	movs	r2, #0
 8013fde:	801a      	strh	r2, [r3, #0]
	
	//16��������
	pbuf[j++]=0;//KoutStatus;
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	1c5a      	adds	r2, r3, #1
 8013fe4:	613a      	str	r2, [r7, #16]
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	687a      	ldr	r2, [r7, #4]
 8013fea:	4413      	add	r3, r2
 8013fec:	2200      	movs	r2, #0
 8013fee:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=AlarmFlag;
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	1c5a      	adds	r2, r3, #1
 8013ff4:	613a      	str	r2, [r7, #16]
 8013ff6:	005b      	lsls	r3, r3, #1
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	4413      	add	r3, r2
 8013ffc:	4a44      	ldr	r2, [pc, #272]	; (8014110 <CreateSampleData+0x184>)
 8013ffe:	8812      	ldrh	r2, [r2, #0]
 8014000:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=RunTime;
 8014002:	4b44      	ldr	r3, [pc, #272]	; (8014114 <CreateSampleData+0x188>)
 8014004:	6819      	ldr	r1, [r3, #0]
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	1c5a      	adds	r2, r3, #1
 801400a:	613a      	str	r2, [r7, #16]
 801400c:	005b      	lsls	r3, r3, #1
 801400e:	687a      	ldr	r2, [r7, #4]
 8014010:	4413      	add	r3, r2
 8014012:	b28a      	uxth	r2, r1
 8014014:	801a      	strh	r2, [r3, #0]

	uint16_t tmp=0;//HAL_DAC_GetValue(&hdac,DAC_CHANNEL_1);
 8014016:	2300      	movs	r3, #0
 8014018:	81fb      	strh	r3, [r7, #14]
	pbuf[j++]=tmp;
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	1c5a      	adds	r2, r3, #1
 801401e:	613a      	str	r2, [r7, #16]
 8014020:	005b      	lsls	r3, r3, #1
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	4413      	add	r3, r2
 8014026:	89fa      	ldrh	r2, [r7, #14]
 8014028:	801a      	strh	r2, [r3, #0]
	
	pbuf[j++]=0;//TemperatureValue;
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	1c5a      	adds	r2, r3, #1
 801402e:	613a      	str	r2, [r7, #16]
 8014030:	005b      	lsls	r3, r3, #1
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	4413      	add	r3, r2
 8014036:	2200      	movs	r2, #0
 8014038:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//TemperatureError;
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	1c5a      	adds	r2, r3, #1
 801403e:	613a      	str	r2, [r7, #16]
 8014040:	005b      	lsls	r3, r3, #1
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	4413      	add	r3, r2
 8014046:	2200      	movs	r2, #0
 8014048:	801a      	strh	r2, [r3, #0]
	
/////////used for test 11 words//////////////////////////////////
	pbuf[j++]=0;//bengPid.Target;
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	1c5a      	adds	r2, r3, #1
 801404e:	613a      	str	r2, [r7, #16]
 8014050:	005b      	lsls	r3, r3, #1
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	4413      	add	r3, r2
 8014056:	2200      	movs	r2, #0
 8014058:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//bengPid.Period;
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	1c5a      	adds	r2, r3, #1
 801405e:	613a      	str	r2, [r7, #16]
 8014060:	005b      	lsls	r3, r3, #1
 8014062:	687a      	ldr	r2, [r7, #4]
 8014064:	4413      	add	r3, r2
 8014066:	2200      	movs	r2, #0
 8014068:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//bengPid.Gain;
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	1c5a      	adds	r2, r3, #1
 801406e:	613a      	str	r2, [r7, #16]
 8014070:	005b      	lsls	r3, r3, #1
 8014072:	687a      	ldr	r2, [r7, #4]
 8014074:	4413      	add	r3, r2
 8014076:	2200      	movs	r2, #0
 8014078:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//bengPid.Kp;
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	1c5a      	adds	r2, r3, #1
 801407e:	613a      	str	r2, [r7, #16]
 8014080:	005b      	lsls	r3, r3, #1
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	4413      	add	r3, r2
 8014086:	2200      	movs	r2, #0
 8014088:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//bengPid.Ki;
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	1c5a      	adds	r2, r3, #1
 801408e:	613a      	str	r2, [r7, #16]
 8014090:	005b      	lsls	r3, r3, #1
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	4413      	add	r3, r2
 8014096:	2200      	movs	r2, #0
 8014098:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//bengPid.Kd;
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	1c5a      	adds	r2, r3, #1
 801409e:	613a      	str	r2, [r7, #16]
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	4413      	add	r3, r2
 80140a6:	2200      	movs	r2, #0
 80140a8:	801a      	strh	r2, [r3, #0]

	pbuf[j++]=0;//bengTest;
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	1c5a      	adds	r2, r3, #1
 80140ae:	613a      	str	r2, [r7, #16]
 80140b0:	005b      	lsls	r3, r3, #1
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	4413      	add	r3, r2
 80140b6:	2200      	movs	r2, #0
 80140b8:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//madaTest;
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	1c5a      	adds	r2, r3, #1
 80140be:	613a      	str	r2, [r7, #16]
 80140c0:	005b      	lsls	r3, r3, #1
 80140c2:	687a      	ldr	r2, [r7, #4]
 80140c4:	4413      	add	r3, r2
 80140c6:	2200      	movs	r2, #0
 80140c8:	801a      	strh	r2, [r3, #0]

	pbuf[j++]=0;//bengPid.AbsOfIncrease;
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	1c5a      	adds	r2, r3, #1
 80140ce:	613a      	str	r2, [r7, #16]
 80140d0:	005b      	lsls	r3, r3, #1
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	4413      	add	r3, r2
 80140d6:	2200      	movs	r2, #0
 80140d8:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0;//bengPid.PrdCnt;
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	1c5a      	adds	r2, r3, #1
 80140de:	613a      	str	r2, [r7, #16]
 80140e0:	005b      	lsls	r3, r3, #1
 80140e2:	687a      	ldr	r2, [r7, #4]
 80140e4:	4413      	add	r3, r2
 80140e6:	2200      	movs	r2, #0
 80140e8:	801a      	strh	r2, [r3, #0]
	pbuf[j++]=0x5678;
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	1c5a      	adds	r2, r3, #1
 80140ee:	613a      	str	r2, [r7, #16]
 80140f0:	005b      	lsls	r3, r3, #1
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	4413      	add	r3, r2
 80140f6:	f245 6278 	movw	r2, #22136	; 0x5678
 80140fa:	801a      	strh	r2, [r3, #0]
//35
	return j;
 80140fc:	693b      	ldr	r3, [r7, #16]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	371c      	adds	r7, #28
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop
 801410c:	20018a04 	.word	0x20018a04
 8014110:	200060c0 	.word	0x200060c0
 8014114:	200060bc 	.word	0x200060bc

08014118 <makeReturnData>:

int makeReturnData(uint8_t funCode,uint16_t* pAddr,uint8_t len,uint8_t *pDstBuf)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b088      	sub	sp, #32
 801411c:	af00      	add	r7, sp, #0
 801411e:	60b9      	str	r1, [r7, #8]
 8014120:	607b      	str	r3, [r7, #4]
 8014122:	4603      	mov	r3, r0
 8014124:	73fb      	strb	r3, [r7, #15]
 8014126:	4613      	mov	r3, r2
 8014128:	73bb      	strb	r3, [r7, #14]
	int j=0;
 801412a:	2300      	movs	r3, #0
 801412c:	61fb      	str	r3, [r7, #28]
	pDstBuf[j++]=LocalAddr;					//��ַ
 801412e:	4b30      	ldr	r3, [pc, #192]	; (80141f0 <makeReturnData+0xd8>)
 8014130:	8819      	ldrh	r1, [r3, #0]
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	1c5a      	adds	r2, r3, #1
 8014136:	61fa      	str	r2, [r7, #28]
 8014138:	461a      	mov	r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	4413      	add	r3, r2
 801413e:	b2ca      	uxtb	r2, r1
 8014140:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=funCode;	//������
 8014142:	69fb      	ldr	r3, [r7, #28]
 8014144:	1c5a      	adds	r2, r3, #1
 8014146:	61fa      	str	r2, [r7, #28]
 8014148:	461a      	mov	r2, r3
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	4413      	add	r3, r2
 801414e:	7bfa      	ldrb	r2, [r7, #15]
 8014150:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=len*2;									//�ֽ���
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	1c5a      	adds	r2, r3, #1
 8014156:	61fa      	str	r2, [r7, #28]
 8014158:	461a      	mov	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	4413      	add	r3, r2
 801415e:	7bba      	ldrb	r2, [r7, #14]
 8014160:	0052      	lsls	r2, r2, #1
 8014162:	b2d2      	uxtb	r2, r2
 8014164:	701a      	strb	r2, [r3, #0]

	//������ ��λ��ǰ
	for(int i=0;i<len;i++)
 8014166:	2300      	movs	r3, #0
 8014168:	61bb      	str	r3, [r7, #24]
 801416a:	e01e      	b.n	80141aa <makeReturnData+0x92>
	{
		pDstBuf[j++]=pAddr[i]>>8;
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	005b      	lsls	r3, r3, #1
 8014170:	68ba      	ldr	r2, [r7, #8]
 8014172:	4413      	add	r3, r2
 8014174:	881b      	ldrh	r3, [r3, #0]
 8014176:	0a1b      	lsrs	r3, r3, #8
 8014178:	b299      	uxth	r1, r3
 801417a:	69fb      	ldr	r3, [r7, #28]
 801417c:	1c5a      	adds	r2, r3, #1
 801417e:	61fa      	str	r2, [r7, #28]
 8014180:	461a      	mov	r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	4413      	add	r3, r2
 8014186:	b2ca      	uxtb	r2, r1
 8014188:	701a      	strb	r2, [r3, #0]
		pDstBuf[j++]=pAddr[i];
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	005b      	lsls	r3, r3, #1
 801418e:	68ba      	ldr	r2, [r7, #8]
 8014190:	4413      	add	r3, r2
 8014192:	8819      	ldrh	r1, [r3, #0]
 8014194:	69fb      	ldr	r3, [r7, #28]
 8014196:	1c5a      	adds	r2, r3, #1
 8014198:	61fa      	str	r2, [r7, #28]
 801419a:	461a      	mov	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	4413      	add	r3, r2
 80141a0:	b2ca      	uxtb	r2, r1
 80141a2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
 80141a4:	69bb      	ldr	r3, [r7, #24]
 80141a6:	3301      	adds	r3, #1
 80141a8:	61bb      	str	r3, [r7, #24]
 80141aa:	7bbb      	ldrb	r3, [r7, #14]
 80141ac:	69ba      	ldr	r2, [r7, #24]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	dbdc      	blt.n	801416c <makeReturnData+0x54>
	}

	uint16_t crc=CalculateCrc(pDstBuf,j);
 80141b2:	69f9      	ldr	r1, [r7, #28]
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	f7ff fe79 	bl	8013eac <CalculateCrc>
 80141ba:	4603      	mov	r3, r0
 80141bc:	82fb      	strh	r3, [r7, #22]
	pDstBuf[j++]=crc;											//У��
 80141be:	69fb      	ldr	r3, [r7, #28]
 80141c0:	1c5a      	adds	r2, r3, #1
 80141c2:	61fa      	str	r2, [r7, #28]
 80141c4:	461a      	mov	r2, r3
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	4413      	add	r3, r2
 80141ca:	8afa      	ldrh	r2, [r7, #22]
 80141cc:	b2d2      	uxtb	r2, r2
 80141ce:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=crc>>8;
 80141d0:	8afb      	ldrh	r3, [r7, #22]
 80141d2:	0a1b      	lsrs	r3, r3, #8
 80141d4:	b299      	uxth	r1, r3
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	1c5a      	adds	r2, r3, #1
 80141da:	61fa      	str	r2, [r7, #28]
 80141dc:	461a      	mov	r2, r3
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	4413      	add	r3, r2
 80141e2:	b2ca      	uxtb	r2, r1
 80141e4:	701a      	strb	r2, [r3, #0]


	return j;
 80141e6:	69fb      	ldr	r3, [r7, #28]
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3720      	adds	r7, #32
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}
 80141f0:	2001956c 	.word	0x2001956c

080141f4 <makeReturnDataByte>:
int makeReturnDataByte(uint8_t funCode,uint8_t* pAddr,uint8_t len,uint8_t *pDstBuf)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b088      	sub	sp, #32
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	60b9      	str	r1, [r7, #8]
 80141fc:	607b      	str	r3, [r7, #4]
 80141fe:	4603      	mov	r3, r0
 8014200:	73fb      	strb	r3, [r7, #15]
 8014202:	4613      	mov	r3, r2
 8014204:	73bb      	strb	r3, [r7, #14]
	int j=0;
 8014206:	2300      	movs	r3, #0
 8014208:	61fb      	str	r3, [r7, #28]
	pDstBuf[j++]=LocalAddr;					//��ַ
 801420a:	4b28      	ldr	r3, [pc, #160]	; (80142ac <makeReturnDataByte+0xb8>)
 801420c:	8819      	ldrh	r1, [r3, #0]
 801420e:	69fb      	ldr	r3, [r7, #28]
 8014210:	1c5a      	adds	r2, r3, #1
 8014212:	61fa      	str	r2, [r7, #28]
 8014214:	461a      	mov	r2, r3
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	4413      	add	r3, r2
 801421a:	b2ca      	uxtb	r2, r1
 801421c:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=funCode;	//������
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	1c5a      	adds	r2, r3, #1
 8014222:	61fa      	str	r2, [r7, #28]
 8014224:	461a      	mov	r2, r3
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	4413      	add	r3, r2
 801422a:	7bfa      	ldrb	r2, [r7, #15]
 801422c:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=len;									//�ֽ��� 
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	1c5a      	adds	r2, r3, #1
 8014232:	61fa      	str	r2, [r7, #28]
 8014234:	461a      	mov	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	4413      	add	r3, r2
 801423a:	7bba      	ldrb	r2, [r7, #14]
 801423c:	701a      	strb	r2, [r3, #0]
	
	//������ ��λ��ǰ
	for(int i=0;i<len;i++)pDstBuf[j++]=pAddr[i];
 801423e:	2300      	movs	r3, #0
 8014240:	61bb      	str	r3, [r7, #24]
 8014242:	e00d      	b.n	8014260 <makeReturnDataByte+0x6c>
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	68ba      	ldr	r2, [r7, #8]
 8014248:	441a      	add	r2, r3
 801424a:	69fb      	ldr	r3, [r7, #28]
 801424c:	1c59      	adds	r1, r3, #1
 801424e:	61f9      	str	r1, [r7, #28]
 8014250:	4619      	mov	r1, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	440b      	add	r3, r1
 8014256:	7812      	ldrb	r2, [r2, #0]
 8014258:	701a      	strb	r2, [r3, #0]
 801425a:	69bb      	ldr	r3, [r7, #24]
 801425c:	3301      	adds	r3, #1
 801425e:	61bb      	str	r3, [r7, #24]
 8014260:	7bbb      	ldrb	r3, [r7, #14]
 8014262:	69ba      	ldr	r2, [r7, #24]
 8014264:	429a      	cmp	r2, r3
 8014266:	dbed      	blt.n	8014244 <makeReturnDataByte+0x50>

	uint16_t crc=CRC16(pDstBuf,j);
 8014268:	69fb      	ldr	r3, [r7, #28]
 801426a:	b29b      	uxth	r3, r3
 801426c:	4619      	mov	r1, r3
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f7ff fe4a 	bl	8013f08 <CRC16>
 8014274:	4603      	mov	r3, r0
 8014276:	82fb      	strh	r3, [r7, #22]
	pDstBuf[j++]=crc;											//У��
 8014278:	69fb      	ldr	r3, [r7, #28]
 801427a:	1c5a      	adds	r2, r3, #1
 801427c:	61fa      	str	r2, [r7, #28]
 801427e:	461a      	mov	r2, r3
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	4413      	add	r3, r2
 8014284:	8afa      	ldrh	r2, [r7, #22]
 8014286:	b2d2      	uxtb	r2, r2
 8014288:	701a      	strb	r2, [r3, #0]
	pDstBuf[j++]=crc>>8;
 801428a:	8afb      	ldrh	r3, [r7, #22]
 801428c:	0a1b      	lsrs	r3, r3, #8
 801428e:	b299      	uxth	r1, r3
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	1c5a      	adds	r2, r3, #1
 8014294:	61fa      	str	r2, [r7, #28]
 8014296:	461a      	mov	r2, r3
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	4413      	add	r3, r2
 801429c:	b2ca      	uxtb	r2, r1
 801429e:	701a      	strb	r2, [r3, #0]
	
	return j;
 80142a0:	69fb      	ldr	r3, [r7, #28]
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3720      	adds	r7, #32
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	2001956c 	.word	0x2001956c

080142b0 <MbusReadCoils>:

//1
int MbusReadCoils(uint16_t regAddr,uint16_t regNumber,uint8_t *pDstBuf)//regNumber ��ʾ����λ
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b08c      	sub	sp, #48	; 0x30
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	4603      	mov	r3, r0
 80142b8:	603a      	str	r2, [r7, #0]
 80142ba:	80fb      	strh	r3, [r7, #6]
 80142bc:	460b      	mov	r3, r1
 80142be:	80bb      	strh	r3, [r7, #4]
	int size;
	uint16_t DoBuf[16];
	if(regAddr!=InputsRegister) return 0;
 80142c0:	88fb      	ldrh	r3, [r7, #6]
 80142c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80142c6:	d001      	beq.n	80142cc <MbusReadCoils+0x1c>
 80142c8:	2300      	movs	r3, #0
 80142ca:	e019      	b.n	8014300 <MbusReadCoils+0x50>

	DoBuf[0]=0;//KoutStatus;
 80142cc:	2300      	movs	r3, #0
 80142ce:	813b      	strh	r3, [r7, #8]
	DoBuf[1]=0;//KoutStatus;
 80142d0:	2300      	movs	r3, #0
 80142d2:	817b      	strh	r3, [r7, #10]
	uint16_t len=regNumber/8;
 80142d4:	88bb      	ldrh	r3, [r7, #4]
 80142d6:	08db      	lsrs	r3, r3, #3
 80142d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if(regNumber%8) len++;
 80142da:	88bb      	ldrh	r3, [r7, #4]
 80142dc:	f003 0307 	and.w	r3, r3, #7
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d002      	beq.n	80142ec <MbusReadCoils+0x3c>
 80142e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80142e8:	3301      	adds	r3, #1
 80142ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
	size=makeReturnDataByte(ReadCoils,(uint8_t*)DoBuf,len,pDstBuf);
 80142ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80142ee:	b2da      	uxtb	r2, r3
 80142f0:	f107 0108 	add.w	r1, r7, #8
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	2001      	movs	r0, #1
 80142f8:	f7ff ff7c 	bl	80141f4 <makeReturnDataByte>
 80142fc:	62b8      	str	r0, [r7, #40]	; 0x28

	return size;
 80142fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014300:	4618      	mov	r0, r3
 8014302:	3730      	adds	r7, #48	; 0x30
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <MbusReadInputs>:

//2
int MbusReadInputs(uint16_t regAddr,uint16_t regNumber,uint8_t *pDstBuf)//regNumber ��ʾ����λ
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b08c      	sub	sp, #48	; 0x30
 801430c:	af00      	add	r7, sp, #0
 801430e:	4603      	mov	r3, r0
 8014310:	603a      	str	r2, [r7, #0]
 8014312:	80fb      	strh	r3, [r7, #6]
 8014314:	460b      	mov	r3, r1
 8014316:	80bb      	strh	r3, [r7, #4]
	int size;
	uint16_t DiBuf[16];
	if(regAddr!=InputsRegister) return 0;
 8014318:	88fb      	ldrh	r3, [r7, #6]
 801431a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801431e:	d001      	beq.n	8014324 <MbusReadInputs+0x1c>
 8014320:	2300      	movs	r3, #0
 8014322:	e017      	b.n	8014354 <MbusReadInputs+0x4c>

	DiBuf[0]=0;//KinStatus;
 8014324:	2300      	movs	r3, #0
 8014326:	813b      	strh	r3, [r7, #8]
	uint16_t len=regNumber/8;
 8014328:	88bb      	ldrh	r3, [r7, #4]
 801432a:	08db      	lsrs	r3, r3, #3
 801432c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if(regNumber%8) len++;
 801432e:	88bb      	ldrh	r3, [r7, #4]
 8014330:	f003 0307 	and.w	r3, r3, #7
 8014334:	b29b      	uxth	r3, r3
 8014336:	2b00      	cmp	r3, #0
 8014338:	d002      	beq.n	8014340 <MbusReadInputs+0x38>
 801433a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801433c:	3301      	adds	r3, #1
 801433e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	size=makeReturnDataByte(ReadInputs,(uint8_t*)DiBuf,len,pDstBuf);
 8014340:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014342:	b2da      	uxtb	r2, r3
 8014344:	f107 0108 	add.w	r1, r7, #8
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	2002      	movs	r0, #2
 801434c:	f7ff ff52 	bl	80141f4 <makeReturnDataByte>
 8014350:	62b8      	str	r0, [r7, #40]	; 0x28

	return size;
 8014352:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8014354:	4618      	mov	r0, r3
 8014356:	3730      	adds	r7, #48	; 0x30
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}

0801435c <MbusReadHoldingRegisters>:

//3
int MbusReadHoldingRegisters(uint16_t regAddr,uint16_t regNumber,uint8_t *pDstBuf)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b084      	sub	sp, #16
 8014360:	af00      	add	r7, sp, #0
 8014362:	4603      	mov	r3, r0
 8014364:	603a      	str	r2, [r7, #0]
 8014366:	80fb      	strh	r3, [r7, #6]
 8014368:	460b      	mov	r3, r1
 801436a:	80bb      	strh	r3, [r7, #4]
	if(regAddr<ParameterRegister) return 0;
 801436c:	88fb      	ldrh	r3, [r7, #6]
 801436e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014372:	d201      	bcs.n	8014378 <MbusReadHoldingRegisters+0x1c>
 8014374:	2300      	movs	r3, #0
 8014376:	e00d      	b.n	8014394 <MbusReadHoldingRegisters+0x38>

	int size=makeReturnData(ReadHoldingRegisters,&Parameters[regAddr-ParameterRegister],regNumber,pDstBuf);
 8014378:	88fb      	ldrh	r3, [r7, #6]
 801437a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801437e:	005b      	lsls	r3, r3, #1
 8014380:	4a06      	ldr	r2, [pc, #24]	; (801439c <MbusReadHoldingRegisters+0x40>)
 8014382:	1899      	adds	r1, r3, r2
 8014384:	88bb      	ldrh	r3, [r7, #4]
 8014386:	b2da      	uxtb	r2, r3
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	2003      	movs	r0, #3
 801438c:	f7ff fec4 	bl	8014118 <makeReturnData>
 8014390:	60f8      	str	r0, [r7, #12]
	
	return size;
 8014392:	68fb      	ldr	r3, [r7, #12]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3710      	adds	r7, #16
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	20019640 	.word	0x20019640

080143a0 <MbusReadInputRegisters>:

//4
int MbusReadInputRegisters(uint16_t regAddr,uint16_t regNumber,uint8_t *pDstBuf)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b0a4      	sub	sp, #144	; 0x90
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	4603      	mov	r3, r0
 80143a8:	603a      	str	r2, [r7, #0]
 80143aa:	80fb      	strh	r3, [r7, #6]
 80143ac:	460b      	mov	r3, r1
 80143ae:	80bb      	strh	r3, [r7, #4]
	uint16_t SampleBuf[64];//modbus retunr buffer

	if(regAddr<SampleRegister) return 0;
 80143b0:	88fb      	ldrh	r3, [r7, #6]
 80143b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80143b6:	d201      	bcs.n	80143bc <MbusReadInputRegisters+0x1c>
 80143b8:	2300      	movs	r3, #0
 80143ba:	e015      	b.n	80143e8 <MbusReadInputRegisters+0x48>
	CreateSampleData(SampleBuf);//35����
 80143bc:	f107 030c 	add.w	r3, r7, #12
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7ff fde3 	bl	8013f8c <CreateSampleData>
	int size=makeReturnData(ReadInputRegisters,&SampleBuf[regAddr-SampleRegister],regNumber,pDstBuf);
 80143c6:	88fb      	ldrh	r3, [r7, #6]
 80143c8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80143cc:	f107 020c 	add.w	r2, r7, #12
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	18d1      	adds	r1, r2, r3
 80143d4:	88bb      	ldrh	r3, [r7, #4]
 80143d6:	b2da      	uxtb	r2, r3
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	2004      	movs	r0, #4
 80143dc:	f7ff fe9c 	bl	8014118 <makeReturnData>
 80143e0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	return size;
 80143e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3790      	adds	r7, #144	; 0x90
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <MbusWriteSingleCoil>:


//5
int MbusWriteSingleCoil(uint16_t Index,uint16_t opCode)//opCode true-0xff00 false-0x0000
{
 80143f0:	b480      	push	{r7}
 80143f2:	b083      	sub	sp, #12
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	4603      	mov	r3, r0
 80143f8:	460a      	mov	r2, r1
 80143fa:	80fb      	strh	r3, [r7, #6]
 80143fc:	4613      	mov	r3, r2
 80143fe:	80bb      	strh	r3, [r7, #4]
	if(Index>TOTAL_OUT-1) return 1;
 8014400:	88fb      	ldrh	r3, [r7, #6]
 8014402:	2b07      	cmp	r3, #7
 8014404:	d901      	bls.n	801440a <MbusWriteSingleCoil+0x1a>
 8014406:	2301      	movs	r3, #1
 8014408:	e000      	b.n	801440c <MbusWriteSingleCoil+0x1c>
	
//	if(opCode==0)
//		Out_Cmd[Index]=K_CMD_OFF;
//	else
//		Out_Cmd[Index]=K_CMD_ON; //0xff00
	return 0;
 801440a:	2300      	movs	r3, #0
}
 801440c:	4618      	mov	r0, r3
 801440e:	370c      	adds	r7, #12
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr

08014418 <MbusWriteSingleRegister>:

//6
int MbusWriteSingleRegister(uint8_t * pData)
{
 8014418:	b480      	push	{r7}
 801441a:	b085      	sub	sp, #20
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
//	uint8_t StationID,FunctionCode;
	uint16_t Register,regValue;
	//StationID=pData[0];			//��ַ��
	//FunctionCode=pData[1];	//������
	Register=pData[2]<<8;		//�Ĵ�����ַ 16bit
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	3302      	adds	r3, #2
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	b29b      	uxth	r3, r3
 8014428:	021b      	lsls	r3, r3, #8
 801442a:	81fb      	strh	r3, [r7, #14]
	Register|=pData[3];
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	3303      	adds	r3, #3
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	b29a      	uxth	r2, r3
 8014434:	89fb      	ldrh	r3, [r7, #14]
 8014436:	4313      	orrs	r3, r2
 8014438:	81fb      	strh	r3, [r7, #14]
	regValue=pData[4]<<8;	
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	3304      	adds	r3, #4
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	b29b      	uxth	r3, r3
 8014442:	021b      	lsls	r3, r3, #8
 8014444:	81bb      	strh	r3, [r7, #12]
	regValue|=pData[5];
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	3305      	adds	r3, #5
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	b29a      	uxth	r2, r3
 801444e:	89bb      	ldrh	r3, [r7, #12]
 8014450:	4313      	orrs	r3, r2
 8014452:	81bb      	strh	r3, [r7, #12]
	if(Register==StopMotorRegister)
	{
		//StopMotor(regValue);
	}
	return 8;
 8014454:	2308      	movs	r3, #8
}
 8014456:	4618      	mov	r0, r3
 8014458:	3714      	adds	r7, #20
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr

08014462 <MbusWriteMultipleCoils>:

//15
int MbusWriteMultipleCoils(uint8_t * pData)
{
 8014462:	b580      	push	{r7, lr}
 8014464:	b084      	sub	sp, #16
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
//	uint8_t StationID,FunctionCode;
	uint16_t Register,regNumber;
	//StationID=pData[0];			//��ַ��
	//FunctionCode=pData[1];	//������
	Register=pData[2]<<8;		//�Ĵ�����ַ 16bit
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	3302      	adds	r3, #2
 801446e:	781b      	ldrb	r3, [r3, #0]
 8014470:	b29b      	uxth	r3, r3
 8014472:	021b      	lsls	r3, r3, #8
 8014474:	81fb      	strh	r3, [r7, #14]
	Register|=pData[3];
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	3303      	adds	r3, #3
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	b29a      	uxth	r2, r3
 801447e:	89fb      	ldrh	r3, [r7, #14]
 8014480:	4313      	orrs	r3, r2
 8014482:	81fb      	strh	r3, [r7, #14]
	regNumber=pData[4]<<8;	
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	3304      	adds	r3, #4
 8014488:	781b      	ldrb	r3, [r3, #0]
 801448a:	b29b      	uxth	r3, r3
 801448c:	021b      	lsls	r3, r3, #8
 801448e:	81bb      	strh	r3, [r7, #12]
	regNumber|=pData[5];
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	3305      	adds	r3, #5
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	b29a      	uxth	r2, r3
 8014498:	89bb      	ldrh	r3, [r7, #12]
 801449a:	4313      	orrs	r3, r2
 801449c:	81bb      	strh	r3, [r7, #12]
	
	uint16_t crc=CRC16(pData,6);
 801449e:	2106      	movs	r1, #6
 80144a0:	6878      	ldr	r0, [r7, #4]
 80144a2:	f7ff fd31 	bl	8013f08 <CRC16>
 80144a6:	4603      	mov	r3, r0
 80144a8:	817b      	strh	r3, [r7, #10]
	pData[6]=crc;											//У��
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	3306      	adds	r3, #6
 80144ae:	897a      	ldrh	r2, [r7, #10]
 80144b0:	b2d2      	uxtb	r2, r2
 80144b2:	701a      	strb	r2, [r3, #0]
	pData[7]=crc>>8;
 80144b4:	897b      	ldrh	r3, [r7, #10]
 80144b6:	0a1b      	lsrs	r3, r3, #8
 80144b8:	b29a      	uxth	r2, r3
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	3307      	adds	r3, #7
 80144be:	b2d2      	uxtb	r2, r2
 80144c0:	701a      	strb	r2, [r3, #0]

	return 8;
 80144c2:	2308      	movs	r3, #8
}
 80144c4:	4618      	mov	r0, r3
 80144c6:	3710      	adds	r7, #16
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}

080144cc <GetModBusWord>:
uint16_t GetModBusWord(uint8_t *pData)
{
 80144cc:	b480      	push	{r7}
 80144ce:	b085      	sub	sp, #20
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	temp=pData[0]<<8;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	b29b      	uxth	r3, r3
 80144da:	021b      	lsls	r3, r3, #8
 80144dc:	81fb      	strh	r3, [r7, #14]
	temp|=pData[1];
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	3301      	adds	r3, #1
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	89fb      	ldrh	r3, [r7, #14]
 80144e8:	4313      	orrs	r3, r2
 80144ea:	81fb      	strh	r3, [r7, #14]
	return temp;
 80144ec:	89fb      	ldrh	r3, [r7, #14]
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3714      	adds	r7, #20
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr
	...

080144fc <MbusWriteMultipleRegisters>:
//16
int MbusWriteMultipleRegisters(uint8_t*pData)
{
 80144fc:	b590      	push	{r4, r7, lr}
 80144fe:	b085      	sub	sp, #20
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
//	uint8_t StationID,FunctionCode;
	uint16_t Register,regNumber;
	//StationID=pData[0];			//��ַ��
	//FunctionCode=pData[1];	//������
	Register=pData[2]<<8;		//�Ĵ�����ַ 16bit
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	3302      	adds	r3, #2
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	b29b      	uxth	r3, r3
 801450c:	021b      	lsls	r3, r3, #8
 801450e:	817b      	strh	r3, [r7, #10]
	Register|=pData[3];
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	3303      	adds	r3, #3
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	b29a      	uxth	r2, r3
 8014518:	897b      	ldrh	r3, [r7, #10]
 801451a:	4313      	orrs	r3, r2
 801451c:	817b      	strh	r3, [r7, #10]
	regNumber=pData[4]<<8;	//����
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	3304      	adds	r3, #4
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	b29b      	uxth	r3, r3
 8014526:	021b      	lsls	r3, r3, #8
 8014528:	813b      	strh	r3, [r7, #8]
	regNumber|=pData[5];
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	3305      	adds	r3, #5
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	b29a      	uxth	r2, r3
 8014532:	893b      	ldrh	r3, [r7, #8]
 8014534:	4313      	orrs	r3, r2
 8014536:	813b      	strh	r3, [r7, #8]
	//д����
	if(Register>=ParameterRegister && Register<(ParameterRegister+PARAMETER_NUM))
 8014538:	897b      	ldrh	r3, [r7, #10]
 801453a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801453e:	d32e      	bcc.n	801459e <MbusWriteMultipleRegisters+0xa2>
 8014540:	897b      	ldrh	r3, [r7, #10]
 8014542:	f240 4275 	movw	r2, #1141	; 0x475
 8014546:	4293      	cmp	r3, r2
 8014548:	d829      	bhi.n	801459e <MbusWriteMultipleRegisters+0xa2>
	{
		if(regNumber>(PARAMETER_NUM+ParameterRegister-Register)) return 2;
 801454a:	893a      	ldrh	r2, [r7, #8]
 801454c:	897b      	ldrh	r3, [r7, #10]
 801454e:	f5c3 638e 	rsb	r3, r3, #1136	; 0x470
 8014552:	3306      	adds	r3, #6
 8014554:	429a      	cmp	r2, r3
 8014556:	dd01      	ble.n	801455c <MbusWriteMultipleRegisters+0x60>
 8014558:	2302      	movs	r3, #2
 801455a:	e034      	b.n	80145c6 <MbusWriteMultipleRegisters+0xca>

		pData+=7;	//���ݴӵ�8���ֽڿ�ʼ(0��ʼ)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	3307      	adds	r3, #7
 8014560:	607b      	str	r3, [r7, #4]
		for(int i=0;i<regNumber;i++)
 8014562:	2300      	movs	r3, #0
 8014564:	60fb      	str	r3, [r7, #12]
 8014566:	e012      	b.n	801458e <MbusWriteMultipleRegisters+0x92>
		{
			Parameters[Register-ParameterRegister+i]=GetModBusWord(pData);
 8014568:	897b      	ldrh	r3, [r7, #10]
 801456a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	18d4      	adds	r4, r2, r3
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f7ff ffaa 	bl	80144cc <GetModBusWord>
 8014578:	4603      	mov	r3, r0
 801457a:	461a      	mov	r2, r3
 801457c:	4b14      	ldr	r3, [pc, #80]	; (80145d0 <MbusWriteMultipleRegisters+0xd4>)
 801457e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			pData+=2;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	3302      	adds	r3, #2
 8014586:	607b      	str	r3, [r7, #4]
		for(int i=0;i<regNumber;i++)
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	3301      	adds	r3, #1
 801458c:	60fb      	str	r3, [r7, #12]
 801458e:	893b      	ldrh	r3, [r7, #8]
 8014590:	68fa      	ldr	r2, [r7, #12]
 8014592:	429a      	cmp	r2, r3
 8014594:	dbe8      	blt.n	8014568 <MbusWriteMultipleRegisters+0x6c>
		}
		Write_All_Parameters();
 8014596:	f000 ff87 	bl	80154a8 <Write_All_Parameters>
		return 0;
 801459a:	2300      	movs	r3, #0
 801459c:	e013      	b.n	80145c6 <MbusWriteMultipleRegisters+0xca>
	}
	
	//д�������register
	if(Register==MotorCmdRegister)
 801459e:	897b      	ldrh	r3, [r7, #10]
 80145a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80145a4:	d101      	bne.n	80145aa <MbusWriteMultipleRegisters+0xae>
	{
		//ProcModBusDJCmd(pData);
		return 0;
 80145a6:	2300      	movs	r3, #0
 80145a8:	e00d      	b.n	80145c6 <MbusWriteMultipleRegisters+0xca>
	}

	//PID register
	if(Register==PIDCmdRegister)
 80145aa:	897b      	ldrh	r3, [r7, #10]
 80145ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80145b0:	4293      	cmp	r3, r2
 80145b2:	d101      	bne.n	80145b8 <MbusWriteMultipleRegisters+0xbc>
	{
		//ProcModBusPidCmd(pData);
		return 0;
 80145b4:	2300      	movs	r3, #0
 80145b6:	e006      	b.n	80145c6 <MbusWriteMultipleRegisters+0xca>
	}
	if(Register==KZRunCmdRegister)
 80145b8:	897b      	ldrh	r3, [r7, #10]
 80145ba:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80145be:	d101      	bne.n	80145c4 <MbusWriteMultipleRegisters+0xc8>
	{
		//ProcKZRunCmdBuf(pData);
		return 0;
 80145c0:	2300      	movs	r3, #0
 80145c2:	e000      	b.n	80145c6 <MbusWriteMultipleRegisters+0xca>
	}
	return 0;
 80145c4:	2300      	movs	r3, #0
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3714      	adds	r7, #20
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd90      	pop	{r4, r7, pc}
 80145ce:	bf00      	nop
 80145d0:	20019640 	.word	0x20019640

080145d4 <ReturnCopy>:
int ReturnCopy(uint8_t * pData,uint8_t *pDstBuf)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
	memcpy(pDstBuf,pData,6);
 80145de:	2206      	movs	r2, #6
 80145e0:	6879      	ldr	r1, [r7, #4]
 80145e2:	6838      	ldr	r0, [r7, #0]
 80145e4:	f001 f821 	bl	801562a <memcpy>
	uint16_t crc=CRC16(pDstBuf,6);
 80145e8:	2106      	movs	r1, #6
 80145ea:	6838      	ldr	r0, [r7, #0]
 80145ec:	f7ff fc8c 	bl	8013f08 <CRC16>
 80145f0:	4603      	mov	r3, r0
 80145f2:	81fb      	strh	r3, [r7, #14]
	pDstBuf[6]=crc;											//У��
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	3306      	adds	r3, #6
 80145f8:	89fa      	ldrh	r2, [r7, #14]
 80145fa:	b2d2      	uxtb	r2, r2
 80145fc:	701a      	strb	r2, [r3, #0]
	pDstBuf[7]=crc>>8;
 80145fe:	89fb      	ldrh	r3, [r7, #14]
 8014600:	0a1b      	lsrs	r3, r3, #8
 8014602:	b29a      	uxth	r2, r3
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	3307      	adds	r3, #7
 8014608:	b2d2      	uxtb	r2, r2
 801460a:	701a      	strb	r2, [r3, #0]

	return 8;
 801460c:	2308      	movs	r3, #8
}
 801460e:	4618      	mov	r0, r3
 8014610:	3710      	adds	r7, #16
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
	...

08014618 <ParseModeBusData>:

//���ص��ֽ���
//pDstBuf ���ص�����ָ��
int ParseModeBusData(uint8_t * pData,uint16_t dataSize,uint8_t *pDstBuf)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b088      	sub	sp, #32
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	460b      	mov	r3, r1
 8014622:	607a      	str	r2, [r7, #4]
 8014624:	817b      	strh	r3, [r7, #10]
	if(CRC16(pData,dataSize)!=0) return 0;
 8014626:	897b      	ldrh	r3, [r7, #10]
 8014628:	4619      	mov	r1, r3
 801462a:	68f8      	ldr	r0, [r7, #12]
 801462c:	f7ff fc6c 	bl	8013f08 <CRC16>
 8014630:	4603      	mov	r3, r0
 8014632:	2b00      	cmp	r3, #0
 8014634:	d001      	beq.n	801463a <ParseModeBusData+0x22>
 8014636:	2300      	movs	r3, #0
 8014638:	e099      	b.n	801476e <ParseModeBusData+0x156>

	uint8_t StationID,FunctionCode;
	uint16_t Register,regNumber;
	StationID=pData[0];		//��ַ��
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	76fb      	strb	r3, [r7, #27]
	FunctionCode=pData[1];	//������
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	785b      	ldrb	r3, [r3, #1]
 8014644:	76bb      	strb	r3, [r7, #26]
	Register=pData[2]<<8;	//�Ĵ�����ַ 16bit
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	3302      	adds	r3, #2
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	b29b      	uxth	r3, r3
 801464e:	021b      	lsls	r3, r3, #8
 8014650:	833b      	strh	r3, [r7, #24]
	Register|=pData[3];
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	3303      	adds	r3, #3
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	b29a      	uxth	r2, r3
 801465a:	8b3b      	ldrh	r3, [r7, #24]
 801465c:	4313      	orrs	r3, r2
 801465e:	833b      	strh	r3, [r7, #24]
	regNumber=pData[4]<<8;	
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	3304      	adds	r3, #4
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	b29b      	uxth	r3, r3
 8014668:	021b      	lsls	r3, r3, #8
 801466a:	82fb      	strh	r3, [r7, #22]
	regNumber|=pData[5];
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	3305      	adds	r3, #5
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	b29a      	uxth	r2, r3
 8014674:	8afb      	ldrh	r3, [r7, #22]
 8014676:	4313      	orrs	r3, r2
 8014678:	82fb      	strh	r3, [r7, #22]
	
	if(StationID!=LocalAddr)	//���Ǳ�����ַ
 801467a:	7efb      	ldrb	r3, [r7, #27]
 801467c:	b29a      	uxth	r2, r3
 801467e:	4b3e      	ldr	r3, [pc, #248]	; (8014778 <ParseModeBusData+0x160>)
 8014680:	881b      	ldrh	r3, [r3, #0]
 8014682:	429a      	cmp	r2, r3
 8014684:	d001      	beq.n	801468a <ParseModeBusData+0x72>
	{
		return 0;
 8014686:	2300      	movs	r3, #0
 8014688:	e071      	b.n	801476e <ParseModeBusData+0x156>
	}

	int size;
	switch(FunctionCode)
 801468a:	7ebb      	ldrb	r3, [r7, #26]
 801468c:	3b01      	subs	r3, #1
 801468e:	2b0f      	cmp	r3, #15
 8014690:	d869      	bhi.n	8014766 <ParseModeBusData+0x14e>
 8014692:	a201      	add	r2, pc, #4	; (adr r2, 8014698 <ParseModeBusData+0x80>)
 8014694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014698:	080146e9 	.word	0x080146e9
 801469c:	080146d9 	.word	0x080146d9
 80146a0:	080146f9 	.word	0x080146f9
 80146a4:	08014709 	.word	0x08014709
 80146a8:	08014719 	.word	0x08014719
 80146ac:	08014731 	.word	0x08014731
 80146b0:	08014767 	.word	0x08014767
 80146b4:	08014767 	.word	0x08014767
 80146b8:	08014767 	.word	0x08014767
 80146bc:	08014767 	.word	0x08014767
 80146c0:	08014767 	.word	0x08014767
 80146c4:	08014767 	.word	0x08014767
 80146c8:	08014767 	.word	0x08014767
 80146cc:	08014767 	.word	0x08014767
 80146d0:	08014743 	.word	0x08014743
 80146d4:	08014755 	.word	0x08014755
	{
		case ReadInputs:							//2 ������
			size=MbusReadInputs(Register,regNumber,pDstBuf);
 80146d8:	8af9      	ldrh	r1, [r7, #22]
 80146da:	8b3b      	ldrh	r3, [r7, #24]
 80146dc:	687a      	ldr	r2, [r7, #4]
 80146de:	4618      	mov	r0, r3
 80146e0:	f7ff fe12 	bl	8014308 <MbusReadInputs>
 80146e4:	61f8      	str	r0, [r7, #28]
			break;
 80146e6:	e041      	b.n	801476c <ParseModeBusData+0x154>
		case ReadCoils:
			size=MbusReadCoils(Register,regNumber,pDstBuf);
 80146e8:	8af9      	ldrh	r1, [r7, #22]
 80146ea:	8b3b      	ldrh	r3, [r7, #24]
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7ff fdde 	bl	80142b0 <MbusReadCoils>
 80146f4:	61f8      	str	r0, [r7, #28]
			break;
 80146f6:	e039      	b.n	801476c <ParseModeBusData+0x154>
		case ReadHoldingRegisters:		//3 eeprom  01 03 03 E8 00 64 C4 51
			//01 03 03 E8 00 64 C4 51
			//02 03 03 E8 00 64 C4 62
			size=MbusReadHoldingRegisters(Register,regNumber,pDstBuf);
 80146f8:	8af9      	ldrh	r1, [r7, #22]
 80146fa:	8b3b      	ldrh	r3, [r7, #24]
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	4618      	mov	r0, r3
 8014700:	f7ff fe2c 	bl	801435c <MbusReadHoldingRegisters>
 8014704:	61f8      	str	r0, [r7, #28]
			break;
 8014706:	e031      	b.n	801476c <ParseModeBusData+0x154>

		case ReadInputRegisters:		//4  SAMPLE 01 04 03 E8 00 24 70 61
			//01 04 03 E8 00 24 70 61
			//02 04 03 E8 00 24 70 52
			size=MbusReadInputRegisters(Register,regNumber,pDstBuf);
 8014708:	8af9      	ldrh	r1, [r7, #22]
 801470a:	8b3b      	ldrh	r3, [r7, #24]
 801470c:	687a      	ldr	r2, [r7, #4]
 801470e:	4618      	mov	r0, r3
 8014710:	f7ff fe46 	bl	80143a0 <MbusReadInputRegisters>
 8014714:	61f8      	str	r0, [r7, #28]

			break;
 8014716:	e029      	b.n	801476c <ParseModeBusData+0x154>
		
		case WriteSingleCoil:					//5 ��·������� 
			MbusWriteSingleCoil(Register,regNumber);
 8014718:	8afa      	ldrh	r2, [r7, #22]
 801471a:	8b3b      	ldrh	r3, [r7, #24]
 801471c:	4611      	mov	r1, r2
 801471e:	4618      	mov	r0, r3
 8014720:	f7ff fe66 	bl	80143f0 <MbusWriteSingleCoil>
			size=ReturnCopy(pData,pDstBuf);
 8014724:	6879      	ldr	r1, [r7, #4]
 8014726:	68f8      	ldr	r0, [r7, #12]
 8014728:	f7ff ff54 	bl	80145d4 <ReturnCopy>
 801472c:	61f8      	str	r0, [r7, #28]
			break;
 801472e:	e01d      	b.n	801476c <ParseModeBusData+0x154>
		
		case WriteSingleRegister:			//6 ��·ģ�������
			MbusWriteSingleRegister(pData);
 8014730:	68f8      	ldr	r0, [r7, #12]
 8014732:	f7ff fe71 	bl	8014418 <MbusWriteSingleRegister>
			size=ReturnCopy(pData,pDstBuf);
 8014736:	6879      	ldr	r1, [r7, #4]
 8014738:	68f8      	ldr	r0, [r7, #12]
 801473a:	f7ff ff4b 	bl	80145d4 <ReturnCopy>
 801473e:	61f8      	str	r0, [r7, #28]
			break;
 8014740:	e014      	b.n	801476c <ParseModeBusData+0x154>

		case WriteMultipleCoils:			//15
			MbusWriteMultipleCoils(pData);
 8014742:	68f8      	ldr	r0, [r7, #12]
 8014744:	f7ff fe8d 	bl	8014462 <MbusWriteMultipleCoils>
			size=ReturnCopy(pData,pDstBuf);
 8014748:	6879      	ldr	r1, [r7, #4]
 801474a:	68f8      	ldr	r0, [r7, #12]
 801474c:	f7ff ff42 	bl	80145d4 <ReturnCopy>
 8014750:	61f8      	str	r0, [r7, #28]
			break;
 8014752:	e00b      	b.n	801476c <ParseModeBusData+0x154>
		case WriteMultipleRegisters:	//16	д ����Ĵ���
			MbusWriteMultipleRegisters(pData);
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	f7ff fed1 	bl	80144fc <MbusWriteMultipleRegisters>
			size=ReturnCopy(pData,pDstBuf);
 801475a:	6879      	ldr	r1, [r7, #4]
 801475c:	68f8      	ldr	r0, [r7, #12]
 801475e:	f7ff ff39 	bl	80145d4 <ReturnCopy>
 8014762:	61f8      	str	r0, [r7, #28]
			break;
 8014764:	e002      	b.n	801476c <ParseModeBusData+0x154>
		
		default:
			size=0;
 8014766:	2300      	movs	r3, #0
 8014768:	61fb      	str	r3, [r7, #28]
			break;
 801476a:	bf00      	nop
	}
	return size;
 801476c:	69fb      	ldr	r3, [r7, #28]
}
 801476e:	4618      	mov	r0, r3
 8014770:	3720      	adds	r7, #32
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}
 8014776:	bf00      	nop
 8014778:	2001956c 	.word	0x2001956c

0801477c <SendBufByCan>:
	return addr;
}

//CAN ����buf�е����� ��������
void SendBufByCan(int DataID,uint8_t *pBuf,int len)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b08a      	sub	sp, #40	; 0x28
 8014780:	af00      	add	r7, sp, #0
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	607a      	str	r2, [r7, #4]
	
	uint8_t buf[8];
	int i,j;
	int cnt=len/6;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4a4b      	ldr	r2, [pc, #300]	; (80148b8 <SendBufByCan+0x13c>)
 801478c:	fb82 1203 	smull	r1, r2, r2, r3
 8014790:	17db      	asrs	r3, r3, #31
 8014792:	1ad3      	subs	r3, r2, r3
 8014794:	61fb      	str	r3, [r7, #28]

	j=0;
 8014796:	2300      	movs	r3, #0
 8014798:	623b      	str	r3, [r7, #32]
	for(i=0;i<cnt;i++)
 801479a:	2300      	movs	r3, #0
 801479c:	627b      	str	r3, [r7, #36]	; 0x24
 801479e:	e039      	b.n	8014814 <SendBufByCan+0x98>
	{

		buf[0]=j;
 80147a0:	6a3b      	ldr	r3, [r7, #32]
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	753b      	strb	r3, [r7, #20]
		buf[1]=j>>8;//offset index
 80147a6:	6a3b      	ldr	r3, [r7, #32]
 80147a8:	121b      	asrs	r3, r3, #8
 80147aa:	b2db      	uxtb	r3, r3
 80147ac:	757b      	strb	r3, [r7, #21]

		buf[2]=pBuf[j];
 80147ae:	6a3b      	ldr	r3, [r7, #32]
 80147b0:	68ba      	ldr	r2, [r7, #8]
 80147b2:	4413      	add	r3, r2
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	75bb      	strb	r3, [r7, #22]
		buf[3]=pBuf[j+1];
 80147b8:	6a3b      	ldr	r3, [r7, #32]
 80147ba:	3301      	adds	r3, #1
 80147bc:	68ba      	ldr	r2, [r7, #8]
 80147be:	4413      	add	r3, r2
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	75fb      	strb	r3, [r7, #23]
		buf[4]=pBuf[j+2];
 80147c4:	6a3b      	ldr	r3, [r7, #32]
 80147c6:	3302      	adds	r3, #2
 80147c8:	68ba      	ldr	r2, [r7, #8]
 80147ca:	4413      	add	r3, r2
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	763b      	strb	r3, [r7, #24]
		buf[5]=pBuf[j+3];
 80147d0:	6a3b      	ldr	r3, [r7, #32]
 80147d2:	3303      	adds	r3, #3
 80147d4:	68ba      	ldr	r2, [r7, #8]
 80147d6:	4413      	add	r3, r2
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	767b      	strb	r3, [r7, #25]
		buf[6]=pBuf[j+4];
 80147dc:	6a3b      	ldr	r3, [r7, #32]
 80147de:	3304      	adds	r3, #4
 80147e0:	68ba      	ldr	r2, [r7, #8]
 80147e2:	4413      	add	r3, r2
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	76bb      	strb	r3, [r7, #26]
		buf[7]=pBuf[j+5];
 80147e8:	6a3b      	ldr	r3, [r7, #32]
 80147ea:	3305      	adds	r3, #5
 80147ec:	68ba      	ldr	r2, [r7, #8]
 80147ee:	4413      	add	r3, r2
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	76fb      	strb	r3, [r7, #27]
		j+=6;
 80147f4:	6a3b      	ldr	r3, [r7, #32]
 80147f6:	3306      	adds	r3, #6
 80147f8:	623b      	str	r3, [r7, #32]
		CanSendData(DataID,8,buf);
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	f107 0214 	add.w	r2, r7, #20
 8014800:	2108      	movs	r1, #8
 8014802:	4618      	mov	r0, r3
 8014804:	f000 fb30 	bl	8014e68 <CanSendData>
		osDelay(1);
 8014808:	2001      	movs	r0, #1
 801480a:	f7f3 fa1f 	bl	8007c4c <osDelay>
	for(i=0;i<cnt;i++)
 801480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014810:	3301      	adds	r3, #1
 8014812:	627b      	str	r3, [r7, #36]	; 0x24
 8014814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014816:	69fb      	ldr	r3, [r7, #28]
 8014818:	429a      	cmp	r2, r3
 801481a:	dbc1      	blt.n	80147a0 <SendBufByCan+0x24>
	}
	if(len%6)
 801481c:	6879      	ldr	r1, [r7, #4]
 801481e:	4b26      	ldr	r3, [pc, #152]	; (80148b8 <SendBufByCan+0x13c>)
 8014820:	fb83 3201 	smull	r3, r2, r3, r1
 8014824:	17cb      	asrs	r3, r1, #31
 8014826:	1ad2      	subs	r2, r2, r3
 8014828:	4613      	mov	r3, r2
 801482a:	005b      	lsls	r3, r3, #1
 801482c:	4413      	add	r3, r2
 801482e:	005b      	lsls	r3, r3, #1
 8014830:	1aca      	subs	r2, r1, r3
 8014832:	2a00      	cmp	r2, #0
 8014834:	d034      	beq.n	80148a0 <SendBufByCan+0x124>
	{
		i=0;
 8014836:	2300      	movs	r3, #0
 8014838:	627b      	str	r3, [r7, #36]	; 0x24
		buf[i++]=j;
 801483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483c:	1c5a      	adds	r2, r3, #1
 801483e:	627a      	str	r2, [r7, #36]	; 0x24
 8014840:	6a3a      	ldr	r2, [r7, #32]
 8014842:	b2d2      	uxtb	r2, r2
 8014844:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014848:	440b      	add	r3, r1
 801484a:	f803 2c14 	strb.w	r2, [r3, #-20]
		buf[i++]=j>>8;//offset index
 801484e:	6a3b      	ldr	r3, [r7, #32]
 8014850:	1219      	asrs	r1, r3, #8
 8014852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014854:	1c5a      	adds	r2, r3, #1
 8014856:	627a      	str	r2, [r7, #36]	; 0x24
 8014858:	b2ca      	uxtb	r2, r1
 801485a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801485e:	440b      	add	r3, r1
 8014860:	f803 2c14 	strb.w	r2, [r3, #-20]
		for(;j<len;j++)
 8014864:	e00e      	b.n	8014884 <SendBufByCan+0x108>
		{
			buf[i++]=pBuf[j];
 8014866:	6a3b      	ldr	r3, [r7, #32]
 8014868:	68ba      	ldr	r2, [r7, #8]
 801486a:	441a      	add	r2, r3
 801486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486e:	1c59      	adds	r1, r3, #1
 8014870:	6279      	str	r1, [r7, #36]	; 0x24
 8014872:	7812      	ldrb	r2, [r2, #0]
 8014874:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014878:	440b      	add	r3, r1
 801487a:	f803 2c14 	strb.w	r2, [r3, #-20]
		for(;j<len;j++)
 801487e:	6a3b      	ldr	r3, [r7, #32]
 8014880:	3301      	adds	r3, #1
 8014882:	623b      	str	r3, [r7, #32]
 8014884:	6a3a      	ldr	r2, [r7, #32]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	429a      	cmp	r2, r3
 801488a:	dbec      	blt.n	8014866 <SendBufByCan+0xea>
		}
		CanSendData(DataID,i,buf);
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014890:	f107 0214 	add.w	r2, r7, #20
 8014894:	4618      	mov	r0, r3
 8014896:	f000 fae7 	bl	8014e68 <CanSendData>
		osDelay(1);
 801489a:	2001      	movs	r0, #1
 801489c:	f7f3 f9d6 	bl	8007c4c <osDelay>
	}
		CanSendData(DataID,0,buf);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	f107 0214 	add.w	r2, r7, #20
 80148a6:	2100      	movs	r1, #0
 80148a8:	4618      	mov	r0, r3
 80148aa:	f000 fadd 	bl	8014e68 <CanSendData>
}
 80148ae:	bf00      	nop
 80148b0:	3728      	adds	r7, #40	; 0x28
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	2aaaaaab 	.word	0x2aaaaaab

080148bc <SendDataToSlave>:

//�������ݵ��ӻ����ȴ��ӻ���Ӧ�����ݣ���ʱ����1���ɹ��򷵻�0
int SendDataToSlave(uint8_t StationNum,uint8_t* pData,uint16_t dataSize,int timeout)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b086      	sub	sp, #24
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	60b9      	str	r1, [r7, #8]
 80148c4:	607b      	str	r3, [r7, #4]
 80148c6:	4603      	mov	r3, r0
 80148c8:	73fb      	strb	r3, [r7, #15]
 80148ca:	4613      	mov	r3, r2
 80148cc:	81bb      	strh	r3, [r7, #12]
	//������ת�����ӻ�
	int StdId=(DATA_OF_MASTER&0x7f)|(StationNum<<7);
 80148ce:	7bfb      	ldrb	r3, [r7, #15]
 80148d0:	01db      	lsls	r3, r3, #7
 80148d2:	f043 0312 	orr.w	r3, r3, #18
 80148d6:	613b      	str	r3, [r7, #16]
	SendBufByCan(StdId,pData,dataSize);
 80148d8:	89bb      	ldrh	r3, [r7, #12]
 80148da:	461a      	mov	r2, r3
 80148dc:	68b9      	ldr	r1, [r7, #8]
 80148de:	6938      	ldr	r0, [r7, #16]
 80148e0:	f7ff ff4c 	bl	801477c <SendBufByCan>
	SlaveDataFlag[StationNum]=0;
 80148e4:	7bfb      	ldrb	r3, [r7, #15]
 80148e6:	4a14      	ldr	r2, [pc, #80]	; (8014938 <SendDataToSlave+0x7c>)
 80148e8:	2100      	movs	r1, #0
 80148ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	SlaveDataLen[StationNum]=0;
 80148ee:	7bfb      	ldrb	r3, [r7, #15]
 80148f0:	4a12      	ldr	r2, [pc, #72]	; (801493c <SendDataToSlave+0x80>)
 80148f2:	2100      	movs	r1, #0
 80148f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	int i;

	for(i=0;i<timeout;i++)
 80148f8:	2300      	movs	r3, #0
 80148fa:	617b      	str	r3, [r7, #20]
 80148fc:	e00d      	b.n	801491a <SendDataToSlave+0x5e>
	{
		osDelay(1);
 80148fe:	2001      	movs	r0, #1
 8014900:	f7f3 f9a4 	bl	8007c4c <osDelay>
		if(SlaveDataFlag[StationNum]) return 0;
 8014904:	7bfb      	ldrb	r3, [r7, #15]
 8014906:	4a0c      	ldr	r2, [pc, #48]	; (8014938 <SendDataToSlave+0x7c>)
 8014908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d001      	beq.n	8014914 <SendDataToSlave+0x58>
 8014910:	2300      	movs	r3, #0
 8014912:	e00d      	b.n	8014930 <SendDataToSlave+0x74>
	for(i=0;i<timeout;i++)
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	3301      	adds	r3, #1
 8014918:	617b      	str	r3, [r7, #20]
 801491a:	697a      	ldr	r2, [r7, #20]
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	429a      	cmp	r2, r3
 8014920:	dbed      	blt.n	80148fe <SendDataToSlave+0x42>
	}//i=91
	if(i==timeout) return 1;
 8014922:	697a      	ldr	r2, [r7, #20]
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	429a      	cmp	r2, r3
 8014928:	d101      	bne.n	801492e <SendDataToSlave+0x72>
 801492a:	2301      	movs	r3, #1
 801492c:	e000      	b.n	8014930 <SendDataToSlave+0x74>
	return 0;
 801492e:	2300      	movs	r3, #0
}
 8014930:	4618      	mov	r0, r3
 8014932:	3718      	adds	r7, #24
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}
 8014938:	200178e0 	.word	0x200178e0
 801493c:	200176c0 	.word	0x200176c0

08014940 <SendCanMsg>:
//	}
//	else //��ʱ
//	{
//	}
//}
void SendCanMsg(USART_DATA *pRx,uint8_t *buf,int len){
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(pRx->UsartHandle,buf,len,0xFFFF);
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	6818      	ldr	r0, [r3, #0]
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	b29a      	uxth	r2, r3
 8014954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014958:	68b9      	ldr	r1, [r7, #8]
 801495a:	f7f1 fad4 	bl	8005f06 <HAL_UART_Transmit>
}
 801495e:	bf00      	nop
 8014960:	3710      	adds	r7, #16
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}

08014966 <SendUsartData>:
void SendUsartData(USART_DATA *pRx)
{
 8014966:	b580      	push	{r7, lr}
 8014968:	b082      	sub	sp, #8
 801496a:	af00      	add	r7, sp, #0
 801496c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(pRx->UsartHandle,pRx->TxBuf,pRx->tx_len,0xFFFF);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6818      	ldr	r0, [r3, #0]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f503 7185 	add.w	r1, r3, #266	; 0x10a
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 801497e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014982:	f7f1 fac0 	bl	8005f06 <HAL_UART_Transmit>
}
 8014986:	bf00      	nop
 8014988:	3708      	adds	r7, #8
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}
	...

08014990 <ParseUsartModBusData>:

void ParseUsartModBusData(USART_DATA *pRx)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b086      	sub	sp, #24
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
	if(CRC16(pRx->RxBuf,pRx->rx_len)!=0) //CRCУ�����
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f103 0208 	add.w	r2, r3, #8
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	88db      	ldrh	r3, [r3, #6]
 80149a2:	4619      	mov	r1, r3
 80149a4:	4610      	mov	r0, r2
 80149a6:	f7ff faaf 	bl	8013f08 <CRC16>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d16a      	bne.n	8014a86 <ParseUsartModBusData+0xf6>
		return;
	uint8_t StationNum,FunctionCode;
	uint16_t Register,regNumber;
	StationNum=pRx->RxBuf[0];		//��ַ��
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	7a1b      	ldrb	r3, [r3, #8]
 80149b4:	75fb      	strb	r3, [r7, #23]
	FunctionCode=pRx->RxBuf[1];	//������
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	7a5b      	ldrb	r3, [r3, #9]
 80149ba:	75bb      	strb	r3, [r7, #22]
	Register=pRx->RxBuf[2]<<8;	//�Ĵ�����ַ 16bit
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	7a9b      	ldrb	r3, [r3, #10]
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	021b      	lsls	r3, r3, #8
 80149c4:	82bb      	strh	r3, [r7, #20]
	Register|=pRx->RxBuf[3];
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	7adb      	ldrb	r3, [r3, #11]
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	8abb      	ldrh	r3, [r7, #20]
 80149ce:	4313      	orrs	r3, r2
 80149d0:	82bb      	strh	r3, [r7, #20]
	regNumber=pRx->RxBuf[4]<<8;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	7b1b      	ldrb	r3, [r3, #12]
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	021b      	lsls	r3, r3, #8
 80149da:	827b      	strh	r3, [r7, #18]
	regNumber|=pRx->RxBuf[5];
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	7b5b      	ldrb	r3, [r3, #13]
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	8a7b      	ldrh	r3, [r7, #18]
 80149e4:	4313      	orrs	r3, r2
 80149e6:	827b      	strh	r3, [r7, #18]
//		uint8_t pdata[2];//={0x12,0x34};
//		pdata[0]=(uint8_t)StationNum;
//		pdata[1]=(uint8_t)LocalAddr;
//		HAL_UART_Transmit(&huart1, pdata, 2,HAL_MAX_DELAY);

	if(StationNum==LocalAddr)//����Ǳ�����ַ
 80149e8:	7dfb      	ldrb	r3, [r7, #23]
 80149ea:	b29a      	uxth	r2, r3
 80149ec:	4b29      	ldr	r3, [pc, #164]	; (8014a94 <ParseUsartModBusData+0x104>)
 80149ee:	881b      	ldrh	r3, [r3, #0]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d113      	bne.n	8014a1c <ParseUsartModBusData+0x8c>
	{
		pRx->tx_len=ParseModeBusData(pRx->RxBuf,pRx->rx_len,pRx->TxBuf);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f103 0008 	add.w	r0, r3, #8
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	88d9      	ldrh	r1, [r3, #6]
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8014a04:	461a      	mov	r2, r3
 8014a06:	f7ff fe07 	bl	8014618 <ParseModeBusData>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		SendUsartData(pRx);
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f7ff ffa6 	bl	8014966 <SendUsartData>
		return;
 8014a1a:	e037      	b.n	8014a8c <ParseUsartModBusData+0xfc>
	}

	if(MasterFlag==0) return;//������������ͷ���
 8014a1c:	4b1e      	ldr	r3, [pc, #120]	; (8014a98 <ParseUsartModBusData+0x108>)
 8014a1e:	881b      	ldrh	r3, [r3, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d032      	beq.n	8014a8a <ParseUsartModBusData+0xfa>

	if(StationNum==0)							//�㲥��ַ
 8014a24:	7dfb      	ldrb	r3, [r7, #23]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d113      	bne.n	8014a52 <ParseUsartModBusData+0xc2>
	{
		if(Register==ResetRegister && FunctionCode==WriteSingleRegister)	//��λϵͳ�Ĵ���
 8014a2a:	8abb      	ldrh	r3, [r7, #20]
 8014a2c:	2b64      	cmp	r3, #100	; 0x64
 8014a2e:	d110      	bne.n	8014a52 <ParseUsartModBusData+0xc2>
 8014a30:	7dbb      	ldrb	r3, [r7, #22]
 8014a32:	2b06      	cmp	r3, #6
 8014a34:	d10d      	bne.n	8014a52 <ParseUsartModBusData+0xc2>
		{
			SendUsartData(pRx);//ԭ�ķ���
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7ff ff95 	bl	8014966 <SendUsartData>
			CanSendRemoteExd(BROADCAST_EXTID,0,0);//�㲥��λ
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	2100      	movs	r1, #0
 8014a40:	4816      	ldr	r0, [pc, #88]	; (8014a9c <ParseUsartModBusData+0x10c>)
 8014a42:	f000 fa51 	bl	8014ee8 <CanSendRemoteExd>
			osDelay(10);
 8014a46:	200a      	movs	r0, #10
 8014a48:	f7f3 f900 	bl	8007c4c <osDelay>
			HAL_NVIC_SystemReset();
 8014a4c:	f7ed fda7 	bl	800259e <HAL_NVIC_SystemReset>
			return;
 8014a50:	e01c      	b.n	8014a8c <ParseUsartModBusData+0xfc>
		}
	}

	//������ת�����ӻ�
	int ret=SendDataToSlave(StationNum,pRx->RxBuf,pRx->rx_len,100);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f103 0108 	add.w	r1, r3, #8
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	88da      	ldrh	r2, [r3, #6]
 8014a5c:	7df8      	ldrb	r0, [r7, #23]
 8014a5e:	2364      	movs	r3, #100	; 0x64
 8014a60:	f7ff ff2c 	bl	80148bc <SendDataToSlave>
 8014a64:	60f8      	str	r0, [r7, #12]
	if(ret==0)	//�з�������
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d10f      	bne.n	8014a8c <ParseUsartModBusData+0xfc>
	{
		SendCanMsg(pRx,SlaveDataBuf[StationNum],SlaveDataLen[StationNum]);
 8014a6c:	7dfb      	ldrb	r3, [r7, #23]
 8014a6e:	021b      	lsls	r3, r3, #8
 8014a70:	4a0b      	ldr	r2, [pc, #44]	; (8014aa0 <ParseUsartModBusData+0x110>)
 8014a72:	1899      	adds	r1, r3, r2
 8014a74:	7dfb      	ldrb	r3, [r7, #23]
 8014a76:	4a0b      	ldr	r2, [pc, #44]	; (8014aa4 <ParseUsartModBusData+0x114>)
 8014a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f7ff ff5e 	bl	8014940 <SendCanMsg>
 8014a84:	e002      	b.n	8014a8c <ParseUsartModBusData+0xfc>
		return;
 8014a86:	bf00      	nop
 8014a88:	e000      	b.n	8014a8c <ParseUsartModBusData+0xfc>
	if(MasterFlag==0) return;//������������ͷ���
 8014a8a:	bf00      	nop
	}
	else //��ʱ
	{
	}
}
 8014a8c:	3718      	adds	r7, #24
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}
 8014a92:	bf00      	nop
 8014a94:	2001956c 	.word	0x2001956c
 8014a98:	200060d0 	.word	0x200060d0
 8014a9c:	12345678 	.word	0x12345678
 8014aa0:	20017900 	.word	0x20017900
 8014aa4:	200176c0 	.word	0x200176c0

08014aa8 <__io_putchar>:
extern uint16_t LocalAddr;
extern uint16_t MasterFlag;
extern uint16_t AllSampleBuf[];
extern ESP_StatusTypeDef ESP_Status_Flag;

PUTCHAR_PROTOTYPE {
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8014ab0:	1d39      	adds	r1, r7, #4
 8014ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab6:	2201      	movs	r2, #1
 8014ab8:	4803      	ldr	r0, [pc, #12]	; (8014ac8 <__io_putchar+0x20>)
 8014aba:	f7f1 fa24 	bl	8005f06 <HAL_UART_Transmit>
	return ch;
 8014abe:	687b      	ldr	r3, [r7, #4]
}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}
 8014ac8:	2000710c 	.word	0x2000710c

08014acc <cal_crc_table>:
		83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115, 202, 148, 118,
		40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139, 87, 9, 235,
		181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22, 233, 183,
		85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168, 116, 42,
		200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53 };
unsigned char cal_crc_table(unsigned char *p, unsigned char j) {
 8014acc:	b480      	push	{r7}
 8014ace:	b085      	sub	sp, #20
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	70fb      	strb	r3, [r7, #3]
	unsigned char i, crc_data = 0;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < j; i++)
 8014adc:	2300      	movs	r3, #0
 8014ade:	73fb      	strb	r3, [r7, #15]
 8014ae0:	e00d      	b.n	8014afe <cal_crc_table+0x32>
		crc_data = CrcTable[crc_data ^ p[i]];
 8014ae2:	7bfb      	ldrb	r3, [r7, #15]
 8014ae4:	687a      	ldr	r2, [r7, #4]
 8014ae6:	4413      	add	r3, r2
 8014ae8:	781a      	ldrb	r2, [r3, #0]
 8014aea:	7bbb      	ldrb	r3, [r7, #14]
 8014aec:	4053      	eors	r3, r2
 8014aee:	b2db      	uxtb	r3, r3
 8014af0:	461a      	mov	r2, r3
 8014af2:	4b08      	ldr	r3, [pc, #32]	; (8014b14 <cal_crc_table+0x48>)
 8014af4:	5c9b      	ldrb	r3, [r3, r2]
 8014af6:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < j; i++)
 8014af8:	7bfb      	ldrb	r3, [r7, #15]
 8014afa:	3301      	adds	r3, #1
 8014afc:	73fb      	strb	r3, [r7, #15]
 8014afe:	7bfa      	ldrb	r2, [r7, #15]
 8014b00:	78fb      	ldrb	r3, [r7, #3]
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d3ed      	bcc.n	8014ae2 <cal_crc_table+0x16>
	return (crc_data);
 8014b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3714      	adds	r7, #20
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr
 8014b14:	08018bf4 	.word	0x08018bf4

08014b18 <Get_ChipID>:
static uint32_t CpuID[3];
void Get_ChipID(void) {
 8014b18:	b480      	push	{r7}
 8014b1a:	af00      	add	r7, sp, #0
CpuID[0]=*(__IO uint32_t*)(0x1FFF7A10);
 8014b1c:	4b08      	ldr	r3, [pc, #32]	; (8014b40 <Get_ChipID+0x28>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4a08      	ldr	r2, [pc, #32]	; (8014b44 <Get_ChipID+0x2c>)
 8014b22:	6013      	str	r3, [r2, #0]
CpuID[1]=*(__IO uint32_t*)(0x1FFF7A14);
 8014b24:	4b08      	ldr	r3, [pc, #32]	; (8014b48 <Get_ChipID+0x30>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	4a06      	ldr	r2, [pc, #24]	; (8014b44 <Get_ChipID+0x2c>)
 8014b2a:	6053      	str	r3, [r2, #4]
CpuID[2]=*(__IO uint32_t*)(0x1FFF7A18);
 8014b2c:	4b07      	ldr	r3, [pc, #28]	; (8014b4c <Get_ChipID+0x34>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	4a04      	ldr	r2, [pc, #16]	; (8014b44 <Get_ChipID+0x2c>)
 8014b32:	6093      	str	r3, [r2, #8]
}
 8014b34:	bf00      	nop
 8014b36:	46bd      	mov	sp, r7
 8014b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3c:	4770      	bx	lr
 8014b3e:	bf00      	nop
 8014b40:	1fff7a10 	.word	0x1fff7a10
 8014b44:	200060c4 	.word	0x200060c4
 8014b48:	1fff7a14 	.word	0x1fff7a14
 8014b4c:	1fff7a18 	.word	0x1fff7a18

08014b50 <getChipidCRC>:

uint8_t getChipidCRC() {
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
unsigned char crc = cal_crc_table((unsigned char*) CpuID, 12);
 8014b56:	210c      	movs	r1, #12
 8014b58:	4804      	ldr	r0, [pc, #16]	; (8014b6c <getChipidCRC+0x1c>)
 8014b5a:	f7ff ffb7 	bl	8014acc <cal_crc_table>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	71fb      	strb	r3, [r7, #7]
return crc;
 8014b62:	79fb      	ldrb	r3, [r7, #7]
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	3708      	adds	r7, #8
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}
 8014b6c:	200060c4 	.word	0x200060c4

08014b70 <InitMyApp>:
//GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//GPIO_InitStruct.Pull = GPIO_NOPULL;
//GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
//HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
//}
void InitMyApp() {
 8014b70:	b580      	push	{r7, lr}
 8014b72:	af00      	add	r7, sp, #0
//	clrCapturreFlag();

Get_ChipID();
 8014b74:	f7ff ffd0 	bl	8014b18 <Get_ChipID>
//read_KinOutSw();
LocalAddr = 1;//read_sw_sta();
 8014b78:	4b30      	ldr	r3, [pc, #192]	; (8014c3c <InitMyApp+0xcc>)
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	801a      	strh	r2, [r3, #0]

UsartType1.UsartHandle = &huart1;
 8014b7e:	4b30      	ldr	r3, [pc, #192]	; (8014c40 <InitMyApp+0xd0>)
 8014b80:	4a30      	ldr	r2, [pc, #192]	; (8014c44 <InitMyApp+0xd4>)
 8014b82:	601a      	str	r2, [r3, #0]
HAL_UART_Receive_DMA(&huart1, UsartType1.RxBuf, USART_BUF_SIZE);
 8014b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014b88:	492f      	ldr	r1, [pc, #188]	; (8014c48 <InitMyApp+0xd8>)
 8014b8a:	482e      	ldr	r0, [pc, #184]	; (8014c44 <InitMyApp+0xd4>)
 8014b8c:	f7f1 fa54 	bl	8006038 <HAL_UART_Receive_DMA>
__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); //¿ªÆô¿ÕÏÐÖÐ¶Ï
 8014b90:	4b2c      	ldr	r3, [pc, #176]	; (8014c44 <InitMyApp+0xd4>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	68da      	ldr	r2, [r3, #12]
 8014b96:	4b2b      	ldr	r3, [pc, #172]	; (8014c44 <InitMyApp+0xd4>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	f042 0210 	orr.w	r2, r2, #16
 8014b9e:	60da      	str	r2, [r3, #12]
__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE); //¹Ø±Õ×Ö·û½ÓÊÕÖÐ¶Ï
 8014ba0:	4b28      	ldr	r3, [pc, #160]	; (8014c44 <InitMyApp+0xd4>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	68da      	ldr	r2, [r3, #12]
 8014ba6:	4b27      	ldr	r3, [pc, #156]	; (8014c44 <InitMyApp+0xd4>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	f022 0220 	bic.w	r2, r2, #32
 8014bae:	60da      	str	r2, [r3, #12]
__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //¹Ø±Õ·¢ËÍ¿ÕÖÐ¶Ï
 8014bb0:	4b24      	ldr	r3, [pc, #144]	; (8014c44 <InitMyApp+0xd4>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	68da      	ldr	r2, [r3, #12]
 8014bb6:	4b23      	ldr	r3, [pc, #140]	; (8014c44 <InitMyApp+0xd4>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014bbe:	60da      	str	r2, [r3, #12]

//UsartType3.dmaSend_flag=USART_DMA_SENDOVER;
UsartType3.UsartHandle = &huart3;
 8014bc0:	4b22      	ldr	r3, [pc, #136]	; (8014c4c <InitMyApp+0xdc>)
 8014bc2:	4a23      	ldr	r2, [pc, #140]	; (8014c50 <InitMyApp+0xe0>)
 8014bc4:	601a      	str	r2, [r3, #0]
HAL_UART_Receive_DMA(&huart3, UsartType3.RxBuf, USART_BUF_SIZE);
 8014bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014bca:	4922      	ldr	r1, [pc, #136]	; (8014c54 <InitMyApp+0xe4>)
 8014bcc:	4820      	ldr	r0, [pc, #128]	; (8014c50 <InitMyApp+0xe0>)
 8014bce:	f7f1 fa33 	bl	8006038 <HAL_UART_Receive_DMA>
__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE); //¿ªÆô¿ÕÏÐÖÐ¶Ï
 8014bd2:	4b1f      	ldr	r3, [pc, #124]	; (8014c50 <InitMyApp+0xe0>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	68da      	ldr	r2, [r3, #12]
 8014bd8:	4b1d      	ldr	r3, [pc, #116]	; (8014c50 <InitMyApp+0xe0>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	f042 0210 	orr.w	r2, r2, #16
 8014be0:	60da      	str	r2, [r3, #12]
__HAL_UART_DISABLE_IT(&huart3, UART_IT_RXNE); //¹Ø±Õ×Ö·û½ÓÊÕÖÐ¶Ï
 8014be2:	4b1b      	ldr	r3, [pc, #108]	; (8014c50 <InitMyApp+0xe0>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	68da      	ldr	r2, [r3, #12]
 8014be8:	4b19      	ldr	r3, [pc, #100]	; (8014c50 <InitMyApp+0xe0>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	f022 0220 	bic.w	r2, r2, #32
 8014bf0:	60da      	str	r2, [r3, #12]
__HAL_UART_DISABLE_IT(&huart3, UART_IT_TXE); //¹Ø±Õ·¢ËÍ¿ÕÖÐ¶Ï
 8014bf2:	4b17      	ldr	r3, [pc, #92]	; (8014c50 <InitMyApp+0xe0>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	68da      	ldr	r2, [r3, #12]
 8014bf8:	4b15      	ldr	r3, [pc, #84]	; (8014c50 <InitMyApp+0xe0>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014c00:	60da      	str	r2, [r3, #12]
#if ((defined SPI_CS_Pin) && (defined SPI_CLK_Pin))
	MX6675_Init(&Max6675TypeDef1);
	MX31855_Init(&Max31855TypeDef1);
#endif

if (LocalAddr == 0x01) {
 8014c02:	4b0e      	ldr	r3, [pc, #56]	; (8014c3c <InitMyApp+0xcc>)
 8014c04:	881b      	ldrh	r3, [r3, #0]
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d105      	bne.n	8014c16 <InitMyApp+0xa6>
	CAN1_Filter_Init_All_In();
 8014c0a:	f000 fa05 	bl	8015018 <CAN1_Filter_Init_All_In>
	MasterFlag = 1;
 8014c0e:	4b12      	ldr	r3, [pc, #72]	; (8014c58 <InitMyApp+0xe8>)
 8014c10:	2201      	movs	r2, #1
 8014c12:	801a      	strh	r2, [r3, #0]
 8014c14:	e006      	b.n	8014c24 <InitMyApp+0xb4>
} else {
	CAN1_Filter_Init_StdID();
 8014c16:	f000 f993 	bl	8014f40 <CAN1_Filter_Init_StdID>
	CAN1_Filter_Init_ExdID();
 8014c1a:	f000 f9c3 	bl	8014fa4 <CAN1_Filter_Init_ExdID>
	MasterFlag = 0;
 8014c1e:	4b0e      	ldr	r3, [pc, #56]	; (8014c58 <InitMyApp+0xe8>)
 8014c20:	2200      	movs	r2, #0
 8014c22:	801a      	strh	r2, [r3, #0]
}
HAL_CAN_Start(&hcan1); //¿ªÆôCAN1
 8014c24:	480d      	ldr	r0, [pc, #52]	; (8014c5c <InitMyApp+0xec>)
 8014c26:	f7ec ff0d 	bl	8001a44 <HAL_CAN_Start>
HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //ÖÐ¶ÏÔÊÐí
 8014c2a:	2102      	movs	r1, #2
 8014c2c:	480b      	ldr	r0, [pc, #44]	; (8014c5c <InitMyApp+0xec>)
 8014c2e:	f7ed f96f 	bl	8001f10 <HAL_CAN_ActivateNotification>

Read_All_Parameters();
 8014c32:	f000 fc7b 	bl	801552c <Read_All_Parameters>

//InitOut();
//HAL_TIM_Base_Start_IT(&htim14); //2K Hz

}
 8014c36:	bf00      	nop
 8014c38:	bd80      	pop	{r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	2001956c 	.word	0x2001956c
 8014c40:	20018b24 	.word	0x20018b24
 8014c44:	2000710c 	.word	0x2000710c
 8014c48:	20018b2c 	.word	0x20018b2c
 8014c4c:	20018d30 	.word	0x20018d30
 8014c50:	2000706c 	.word	0x2000706c
 8014c54:	20018d38 	.word	0x20018d38
 8014c58:	200060d0 	.word	0x200060d0
 8014c5c:	20006104 	.word	0x20006104

08014c60 <StartUsart1Task>:
//	}
////--------------------------------------------------------------
//
//}
//}
void StartUsart1Task(void *argument) {
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b082      	sub	sp, #8
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
	for (;;) {
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 8014c68:	f04f 32ff 	mov.w	r2, #4294967295
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	2001      	movs	r0, #1
 8014c70:	f7f2 ff58 	bl	8007b24 <osThreadFlagsWait>

		ParseUsartModBusData(&UsartType1);
 8014c74:	4805      	ldr	r0, [pc, #20]	; (8014c8c <StartUsart1Task+0x2c>)
 8014c76:	f7ff fe8b 	bl	8014990 <ParseUsartModBusData>
  LED2_T;
 8014c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014c7e:	4804      	ldr	r0, [pc, #16]	; (8014c90 <StartUsart1Task+0x30>)
 8014c80:	f7ef fa57 	bl	8004132 <HAL_GPIO_TogglePin>
  printf("12345");
 8014c84:	4803      	ldr	r0, [pc, #12]	; (8014c94 <StartUsart1Task+0x34>)
 8014c86:	f000 fce3 	bl	8015650 <iprintf>
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 8014c8a:	e7ed      	b.n	8014c68 <StartUsart1Task+0x8>
 8014c8c:	20018b24 	.word	0x20018b24
 8014c90:	40021800 	.word	0x40021800
 8014c94:	080187d0 	.word	0x080187d0

08014c98 <ParseEspRxData>:
//		}

	}		//for
}

void ParseEspRxData(uint8_t *pdata, ReciveDataTypeDef *pesp) {
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b086      	sub	sp, #24
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
	char *head, *clientID, *dataSize, *dataBuffer;
	UNUSED(head);
	head = strtok((char*) pdata, ",");		//+IPD
 8014ca2:	4914      	ldr	r1, [pc, #80]	; (8014cf4 <ParseEspRxData+0x5c>)
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f000 fd33 	bl	8015710 <strtok>
 8014caa:	6178      	str	r0, [r7, #20]
	clientID = strtok(NULL, ",");		//0
 8014cac:	4911      	ldr	r1, [pc, #68]	; (8014cf4 <ParseEspRxData+0x5c>)
 8014cae:	2000      	movs	r0, #0
 8014cb0:	f000 fd2e 	bl	8015710 <strtok>
 8014cb4:	6138      	str	r0, [r7, #16]
	dataSize = strtok(NULL, ":");		//5
 8014cb6:	4910      	ldr	r1, [pc, #64]	; (8014cf8 <ParseEspRxData+0x60>)
 8014cb8:	2000      	movs	r0, #0
 8014cba:	f000 fd29 	bl	8015710 <strtok>
 8014cbe:	60f8      	str	r0, [r7, #12]
	dataBuffer = strtok(NULL, "");		//12345
 8014cc0:	490e      	ldr	r1, [pc, #56]	; (8014cfc <ParseEspRxData+0x64>)
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	f000 fd24 	bl	8015710 <strtok>
 8014cc8:	60b8      	str	r0, [r7, #8]

	pesp->clientID = atoi(clientID);
 8014cca:	6938      	ldr	r0, [r7, #16]
 8014ccc:	f000 fc76 	bl	80155bc <atoi>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	b29a      	uxth	r2, r3
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	805a      	strh	r2, [r3, #2]
	pesp->dataSize = atoi(dataSize);
 8014cd8:	68f8      	ldr	r0, [r7, #12]
 8014cda:	f000 fc6f 	bl	80155bc <atoi>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	b29a      	uxth	r2, r3
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	809a      	strh	r2, [r3, #4]
	pesp->pData = (uint8_t*) dataBuffer;
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	68ba      	ldr	r2, [r7, #8]
 8014cea:	609a      	str	r2, [r3, #8]
}
 8014cec:	bf00      	nop
 8014cee:	3718      	adds	r7, #24
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	080187d8 	.word	0x080187d8
 8014cf8:	080187dc 	.word	0x080187dc
 8014cfc:	080187e0 	.word	0x080187e0

08014d00 <StartUsart3Task>:

void StartUsart3Task(void *argument) {
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b088      	sub	sp, #32
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
	ReciveDataTypeDef Esp_Rx;
	uint8_t *str;

	for (;;) {
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 8014d08:	f04f 32ff 	mov.w	r2, #4294967295
 8014d0c:	2100      	movs	r1, #0
 8014d0e:	2001      	movs	r0, #1
 8014d10:	f7f2 ff08 	bl	8007b24 <osThreadFlagsWait>

		UsartType3.RxBuf[UsartType3.rx_len] = 0;
 8014d14:	4b2d      	ldr	r3, [pc, #180]	; (8014dcc <StartUsart3Task+0xcc>)
 8014d16:	88db      	ldrh	r3, [r3, #6]
 8014d18:	461a      	mov	r2, r3
 8014d1a:	4b2c      	ldr	r3, [pc, #176]	; (8014dcc <StartUsart3Task+0xcc>)
 8014d1c:	4413      	add	r3, r2
 8014d1e:	2200      	movs	r2, #0
 8014d20:	721a      	strb	r2, [r3, #8]
		str = UsartType3.RxBuf;
 8014d22:	4b2b      	ldr	r3, [pc, #172]	; (8014dd0 <StartUsart3Task+0xd0>)
 8014d24:	61fb      	str	r3, [r7, #28]
		//HAL_UART_Transmit(&huart1,(uint8_t*)str,UsartType3.rx_len,0xffff);

		if (strstr((char*) str, "+IPD,"))	//
 8014d26:	492b      	ldr	r1, [pc, #172]	; (8014dd4 <StartUsart3Task+0xd4>)
 8014d28:	69f8      	ldr	r0, [r7, #28]
 8014d2a:	f000 fcd6 	bl	80156da <strstr>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d00e      	beq.n	8014d52 <StartUsart3Task+0x52>
				{
			ParseEspRxData(str, &Esp_Rx);
 8014d34:	f107 0308 	add.w	r3, r7, #8
 8014d38:	4619      	mov	r1, r3
 8014d3a:	69f8      	ldr	r0, [r7, #28]
 8014d3c:	f7ff ffac 	bl	8014c98 <ParseEspRxData>
			osMessageQueuePut(canRxQueueHandle, &Esp_Rx, 0, 0);
 8014d40:	4b25      	ldr	r3, [pc, #148]	; (8014dd8 <StartUsart3Task+0xd8>)
 8014d42:	6818      	ldr	r0, [r3, #0]
 8014d44:	f107 0108 	add.w	r1, r7, #8
 8014d48:	2300      	movs	r3, #0
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	f7f3 fad6 	bl	80082fc <osMessageQueuePut>
 8014d50:	e7da      	b.n	8014d08 <StartUsart3Task+0x8>

		} else if (strstr((char*) str, ">")) {
 8014d52:	213e      	movs	r1, #62	; 0x3e
 8014d54:	69f8      	ldr	r0, [r7, #28]
 8014d56:	f000 fcb3 	bl	80156c0 <strchr>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d007      	beq.n	8014d70 <StartUsart3Task+0x70>
			ESP_Status_Flag |= ESP_SEND_READY;
 8014d60:	4b1e      	ldr	r3, [pc, #120]	; (8014ddc <StartUsart3Task+0xdc>)
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	f043 0308 	orr.w	r3, r3, #8
 8014d68:	b2da      	uxtb	r2, r3
 8014d6a:	4b1c      	ldr	r3, [pc, #112]	; (8014ddc <StartUsart3Task+0xdc>)
 8014d6c:	701a      	strb	r2, [r3, #0]
 8014d6e:	e7cb      	b.n	8014d08 <StartUsart3Task+0x8>
		} else if (strstr((char*) str, "SEND OK")) {
 8014d70:	491b      	ldr	r1, [pc, #108]	; (8014de0 <StartUsart3Task+0xe0>)
 8014d72:	69f8      	ldr	r0, [r7, #28]
 8014d74:	f000 fcb1 	bl	80156da <strstr>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d007      	beq.n	8014d8e <StartUsart3Task+0x8e>
			ESP_Status_Flag |= ESP_SEND_OK;
 8014d7e:	4b17      	ldr	r3, [pc, #92]	; (8014ddc <StartUsart3Task+0xdc>)
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	f043 0304 	orr.w	r3, r3, #4
 8014d86:	b2da      	uxtb	r2, r3
 8014d88:	4b14      	ldr	r3, [pc, #80]	; (8014ddc <StartUsart3Task+0xdc>)
 8014d8a:	701a      	strb	r2, [r3, #0]
 8014d8c:	e7bc      	b.n	8014d08 <StartUsart3Task+0x8>
			//printf("send ok flag=1\r\n");
		} else if (strstr((char*) str, "OK")) {
 8014d8e:	4915      	ldr	r1, [pc, #84]	; (8014de4 <StartUsart3Task+0xe4>)
 8014d90:	69f8      	ldr	r0, [r7, #28]
 8014d92:	f000 fca2 	bl	80156da <strstr>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d007      	beq.n	8014dac <StartUsart3Task+0xac>
			ESP_Status_Flag |= ESP_OK;
 8014d9c:	4b0f      	ldr	r3, [pc, #60]	; (8014ddc <StartUsart3Task+0xdc>)
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	f043 0301 	orr.w	r3, r3, #1
 8014da4:	b2da      	uxtb	r2, r3
 8014da6:	4b0d      	ldr	r3, [pc, #52]	; (8014ddc <StartUsart3Task+0xdc>)
 8014da8:	701a      	strb	r2, [r3, #0]
 8014daa:	e7ad      	b.n	8014d08 <StartUsart3Task+0x8>
		} else if (strstr((char*) str, "ready")) {
 8014dac:	490e      	ldr	r1, [pc, #56]	; (8014de8 <StartUsart3Task+0xe8>)
 8014dae:	69f8      	ldr	r0, [r7, #28]
 8014db0:	f000 fc93 	bl	80156da <strstr>
 8014db4:	4603      	mov	r3, r0
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d0a6      	beq.n	8014d08 <StartUsart3Task+0x8>
			ESP_Status_Flag |= ESP_RST_READY;
 8014dba:	4b08      	ldr	r3, [pc, #32]	; (8014ddc <StartUsart3Task+0xdc>)
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	f043 0310 	orr.w	r3, r3, #16
 8014dc2:	b2da      	uxtb	r2, r3
 8014dc4:	4b05      	ldr	r3, [pc, #20]	; (8014ddc <StartUsart3Task+0xdc>)
 8014dc6:	701a      	strb	r2, [r3, #0]
		osThreadFlagsWait(0x01U, osFlagsWaitAny, osWaitForever);
 8014dc8:	e79e      	b.n	8014d08 <StartUsart3Task+0x8>
 8014dca:	bf00      	nop
 8014dcc:	20018d30 	.word	0x20018d30
 8014dd0:	20018d38 	.word	0x20018d38
 8014dd4:	080187e4 	.word	0x080187e4
 8014dd8:	20006454 	.word	0x20006454
 8014ddc:	2001960a 	.word	0x2001960a
 8014de0:	080187ec 	.word	0x080187ec
 8014de4:	080187f4 	.word	0x080187f4
 8014de8:	080187f8 	.word	0x080187f8

08014dec <StartEspTask>:
		 printf("\n");
		 */

	}
}
void StartEspTask(void *argument) {
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b088      	sub	sp, #32
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
	osDelay(2000);
 8014df4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014df8:	f7f2 ff28 	bl	8007c4c <osDelay>
	if (esp8266_initAP())
 8014dfc:	f000 f984 	bl	8015108 <esp8266_initAP>
 8014e00:	4603      	mov	r3, r0
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d007      	beq.n	8014e16 <StartEspTask+0x2a>
		AlarmFlag |= WIFI_ERROR;
 8014e06:	4b15      	ldr	r3, [pc, #84]	; (8014e5c <StartEspTask+0x70>)
 8014e08:	881b      	ldrh	r3, [r3, #0]
 8014e0a:	f043 0301 	orr.w	r3, r3, #1
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	4b12      	ldr	r3, [pc, #72]	; (8014e5c <StartEspTask+0x70>)
 8014e12:	801a      	strh	r2, [r3, #0]
 8014e14:	e006      	b.n	8014e24 <StartEspTask+0x38>
	else
		AlarmFlag &= ~WIFI_ERROR;
 8014e16:	4b11      	ldr	r3, [pc, #68]	; (8014e5c <StartEspTask+0x70>)
 8014e18:	881b      	ldrh	r3, [r3, #0]
 8014e1a:	f023 0301 	bic.w	r3, r3, #1
 8014e1e:	b29a      	uxth	r2, r3
 8014e20:	4b0e      	ldr	r3, [pc, #56]	; (8014e5c <StartEspTask+0x70>)
 8014e22:	801a      	strh	r2, [r3, #0]

	ReciveDataTypeDef EspRxData;
	//printf("----------Task_Of_Esp\r\n");

	for (;;) {
		osStatus_t status = osMessageQueueGet(espCmdQueueHandle, &EspRxData,
 8014e24:	4b0e      	ldr	r3, [pc, #56]	; (8014e60 <StartEspTask+0x74>)
 8014e26:	6818      	ldr	r0, [r3, #0]
 8014e28:	f107 0108 	add.w	r1, r7, #8
 8014e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e30:	2200      	movs	r2, #0
 8014e32:	f7f3 fad7 	bl	80083e4 <osMessageQueueGet>
 8014e36:	61f8      	str	r0, [r7, #28]
		NULL, portMAX_DELAY);
		if (status == osOK) {
 8014e38:	69fb      	ldr	r3, [r7, #28]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d1f2      	bne.n	8014e24 <StartEspTask+0x38>
			//printf( "dataBuffer=%s\r\n", EspRxData.pData );//???????

			//HAL_UART_Transmit(&huart1,esp_rcv.pData,esp_rcv.dataSize,0xffff);
			//esp_rcv

			memcpy(EspTxBuffer, EspRxData.pData, EspRxData.dataSize);
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	89ba      	ldrh	r2, [r7, #12]
 8014e42:	4619      	mov	r1, r3
 8014e44:	4807      	ldr	r0, [pc, #28]	; (8014e64 <StartEspTask+0x78>)
 8014e46:	f000 fbf0 	bl	801562a <memcpy>
			EspRxData.type = TYPE_ESP;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	723b      	strb	r3, [r7, #8]
			EspRxData.pData = EspTxBuffer;
 8014e4e:	4b05      	ldr	r3, [pc, #20]	; (8014e64 <StartEspTask+0x78>)
 8014e50:	613b      	str	r3, [r7, #16]
			osDelay(20);
 8014e52:	2014      	movs	r0, #20
 8014e54:	f7f2 fefa 	bl	8007c4c <osDelay>
	for (;;) {
 8014e58:	e7e4      	b.n	8014e24 <StartEspTask+0x38>
 8014e5a:	bf00      	nop
 8014e5c:	200060c0 	.word	0x200060c0
 8014e60:	20006f74 	.word	0x20006f74
 8014e64:	2001913c 	.word	0x2001913c

08014e68 <CanSendData>:
	HAL_StatusTypeDef result;
  result=HAL_CAN_AddTxMessage(&hcan1,&TxMessage,buf,(uint32_t*)CAN_TX_MAILBOX0);
	return result;
}
HAL_StatusTypeDef CanSendData(uint32_t StdId,uint32_t len,uint8_t * buf)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b08c      	sub	sp, #48	; 0x30
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	60f8      	str	r0, [r7, #12]
 8014e70:	60b9      	str	r1, [r7, #8]
 8014e72:	607a      	str	r2, [r7, #4]
	if(MasterFlag==0){
 8014e74:	4b19      	ldr	r3, [pc, #100]	; (8014edc <CanSendData+0x74>)
 8014e76:	881b      	ldrh	r3, [r3, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d10a      	bne.n	8014e92 <CanSendData+0x2a>
		StdId&=0x7f;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e82:	60fb      	str	r3, [r7, #12]
		StdId|=LocalAddr<<7;
 8014e84:	4b16      	ldr	r3, [pc, #88]	; (8014ee0 <CanSendData+0x78>)
 8014e86:	881b      	ldrh	r3, [r3, #0]
 8014e88:	01db      	lsls	r3, r3, #7
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	4313      	orrs	r3, r2
 8014e90:	60fb      	str	r3, [r7, #12]
	}

	CAN_TxHeaderTypeDef TxMessage;
  TxMessage.DLC=len;
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	627b      	str	r3, [r7, #36]	; 0x24
  TxMessage.StdId=StdId;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	617b      	str	r3, [r7, #20]
  TxMessage.ExtId=0;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	61bb      	str	r3, [r7, #24]
  TxMessage.IDE=CAN_ID_STD;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	61fb      	str	r3, [r7, #28]
  TxMessage.RTR=CAN_RTR_DATA;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	623b      	str	r3, [r7, #32]
  
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0) osDelay(1);
 8014ea6:	e002      	b.n	8014eae <CanSendData+0x46>
 8014ea8:	2001      	movs	r0, #1
 8014eaa:	f7f2 fecf 	bl	8007c4c <osDelay>
 8014eae:	480d      	ldr	r0, [pc, #52]	; (8014ee4 <CanSendData+0x7c>)
 8014eb0:	f7ec fee7 	bl	8001c82 <HAL_CAN_GetTxMailboxesFreeLevel>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d0f6      	beq.n	8014ea8 <CanSendData+0x40>
	HAL_StatusTypeDef result;
  result=HAL_CAN_AddTxMessage(&hcan1,&TxMessage,buf,(uint32_t*)CAN_TX_MAILBOX0);
 8014eba:	f107 0114 	add.w	r1, r7, #20
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	4808      	ldr	r0, [pc, #32]	; (8014ee4 <CanSendData+0x7c>)
 8014ec4:	f7ec fe02 	bl	8001acc <HAL_CAN_AddTxMessage>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return result;
 8014ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3730      	adds	r7, #48	; 0x30
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	200060d0 	.word	0x200060d0
 8014ee0:	2001956c 	.word	0x2001956c
 8014ee4:	20006104 	.word	0x20006104

08014ee8 <CanSendRemoteExd>:
	HAL_StatusTypeDef result;
  result=HAL_CAN_AddTxMessage(&hcan1,&TxMessage,buf,(uint32_t*)CAN_TX_MAILBOX1);
	return result;
}
HAL_StatusTypeDef CanSendRemoteExd(uint32_t ExtId,uint32_t len,uint8_t * buf)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b08c      	sub	sp, #48	; 0x30
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef TxMessage;
  TxMessage.DLC=len;
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	627b      	str	r3, [r7, #36]	; 0x24
  TxMessage.StdId=0;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	617b      	str	r3, [r7, #20]
  TxMessage.ExtId=ExtId;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	61bb      	str	r3, [r7, #24]
  TxMessage.IDE=CAN_ID_EXT;
 8014f00:	2304      	movs	r3, #4
 8014f02:	61fb      	str	r3, [r7, #28]
  TxMessage.RTR=CAN_RTR_REMOTE;
 8014f04:	2302      	movs	r3, #2
 8014f06:	623b      	str	r3, [r7, #32]
  
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)==0) osDelay(1);
 8014f08:	e002      	b.n	8014f10 <CanSendRemoteExd+0x28>
 8014f0a:	2001      	movs	r0, #1
 8014f0c:	f7f2 fe9e 	bl	8007c4c <osDelay>
 8014f10:	480a      	ldr	r0, [pc, #40]	; (8014f3c <CanSendRemoteExd+0x54>)
 8014f12:	f7ec feb6 	bl	8001c82 <HAL_CAN_GetTxMailboxesFreeLevel>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d0f6      	beq.n	8014f0a <CanSendRemoteExd+0x22>
	HAL_StatusTypeDef result;
  result=HAL_CAN_AddTxMessage(&hcan1,&TxMessage,buf,(uint32_t*)CAN_TX_MAILBOX1);
 8014f1c:	f107 0114 	add.w	r1, r7, #20
 8014f20:	2302      	movs	r3, #2
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	4805      	ldr	r0, [pc, #20]	; (8014f3c <CanSendRemoteExd+0x54>)
 8014f26:	f7ec fdd1 	bl	8001acc <HAL_CAN_AddTxMessage>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return result;
 8014f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3730      	adds	r7, #48	; 0x30
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}
 8014f3c:	20006104 	.word	0x20006104

08014f40 <CAN1_Filter_Init_StdID>:
     //printf("Failed\n");
  }
  }
*/
void CAN1_Filter_Init_StdID(void)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b08c      	sub	sp, #48	; 0x30
 8014f44:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;
  uint16_t tmp;
  
	tmp=LocalAddr<<7;//��4λ�Ǳ�����ַ
 8014f46:	4b15      	ldr	r3, [pc, #84]	; (8014f9c <CAN1_Filter_Init_StdID+0x5c>)
 8014f48:	881b      	ldrh	r3, [r3, #0]
 8014f4a:	01db      	lsls	r3, r3, #7
 8014f4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  sFilterConfig.FilterBank = 1;
 8014f4e:	2301      	movs	r3, #1
 8014f50:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8014f52:	2300      	movs	r3, #0
 8014f54:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8014f56:	2301      	movs	r3, #1
 8014f58:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterIdHigh =(tmp<<5);//��֤��
 8014f5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f5c:	015b      	lsls	r3, r3, #5
 8014f5e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterIdLow =0;
 8014f60:	2300      	movs	r3, #0
 8014f62:	60bb      	str	r3, [r7, #8]
  
	tmp=0xf<<7;//������ 4λ
 8014f64:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8014f68:	85fb      	strh	r3, [r7, #46]	; 0x2e
  sFilterConfig.FilterMaskIdHigh =(tmp<<5);
 8014f6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f6c:	015b      	lsls	r3, r3, #5
 8014f6e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdLow =0;//|0x02; 		//ֻ��������֡
 8014f70:	2300      	movs	r3, #0
 8014f72:	613b      	str	r3, [r7, #16]
  
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8014f74:	2300      	movs	r3, #0
 8014f76:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterActivation = ENABLE;
 8014f78:	2301      	movs	r3, #1
 8014f7a:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.SlaveStartFilterBank = 14;
 8014f7c:	230e      	movs	r3, #14
 8014f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8014f80:	1d3b      	adds	r3, r7, #4
 8014f82:	4619      	mov	r1, r3
 8014f84:	4806      	ldr	r0, [pc, #24]	; (8014fa0 <CAN1_Filter_Init_StdID+0x60>)
 8014f86:	f7ec fc7d 	bl	8001884 <HAL_CAN_ConfigFilter>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d001      	beq.n	8014f94 <CAN1_Filter_Init_StdID+0x54>
  {
    Error_Handler();
 8014f90:	f7eb ffbc 	bl	8000f0c <Error_Handler>
  }
}
 8014f94:	bf00      	nop
 8014f96:	3730      	adds	r7, #48	; 0x30
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	2001956c 	.word	0x2001956c
 8014fa0:	20006104 	.word	0x20006104

08014fa4 <CAN1_Filter_Init_ExdID>:
void CAN1_Filter_Init_ExdID(void)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b08c      	sub	sp, #48	; 0x30
 8014fa8:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;
  uint32_t ExtId1 =BROADCAST_EXTID;
 8014faa:	4b19      	ldr	r3, [pc, #100]	; (8015010 <CAN1_Filter_Init_ExdID+0x6c>)
 8014fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t ExtId2 =BROADCAST_EXTID;
 8014fae:	4b18      	ldr	r3, [pc, #96]	; (8015010 <CAN1_Filter_Init_ExdID+0x6c>)
 8014fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  
  sFilterConfig.FilterBank = 2;
 8014fb2:	2302      	movs	r3, #2
 8014fb4:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	61fb      	str	r3, [r7, #28]

  sFilterConfig.FilterIdHigh = ((ExtId1<<3)>>16)&0xffff;
 8014fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc0:	00db      	lsls	r3, r3, #3
 8014fc2:	0c1b      	lsrs	r3, r3, #16
 8014fc4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = ((ExtId1<<3)&0xffff)|CAN_ID_EXT|CAN_RTR_DATA;
 8014fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc8:	00db      	lsls	r3, r3, #3
 8014fca:	b29b      	uxth	r3, r3
 8014fcc:	f043 0304 	orr.w	r3, r3, #4
 8014fd0:	607b      	str	r3, [r7, #4]

  sFilterConfig.FilterMaskIdHigh = ((ExtId2<<3)>>16)&0xffff;
 8014fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fd4:	00db      	lsls	r3, r3, #3
 8014fd6:	0c1b      	lsrs	r3, r3, #16
 8014fd8:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = ((ExtId2<<3)&0xffff)|CAN_ID_EXT|CAN_RTR_REMOTE;
 8014fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fdc:	00db      	lsls	r3, r3, #3
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	f043 0306 	orr.w	r3, r3, #6
 8014fe4:	60fb      	str	r3, [r7, #12]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8014fea:	2301      	movs	r3, #1
 8014fec:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8014fee:	230e      	movs	r3, #14
 8014ff0:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8014ff2:	463b      	mov	r3, r7
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	4807      	ldr	r0, [pc, #28]	; (8015014 <CAN1_Filter_Init_ExdID+0x70>)
 8014ff8:	f7ec fc44 	bl	8001884 <HAL_CAN_ConfigFilter>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d001      	beq.n	8015006 <CAN1_Filter_Init_ExdID+0x62>
  {
    Error_Handler();
 8015002:	f7eb ff83 	bl	8000f0c <Error_Handler>
  }
}
 8015006:	bf00      	nop
 8015008:	3730      	adds	r7, #48	; 0x30
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	12345678 	.word	0x12345678
 8015014:	20006104 	.word	0x20006104

08015018 <CAN1_Filter_Init_All_In>:

void CAN1_Filter_Init_All_In(void)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b08a      	sub	sp, #40	; 0x28
 801501c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  CAN_FilterInitStructure;
   
	//���ù�����
	CAN_FilterInitStructure.FilterBank=0;	  //������0
 801501e:	2300      	movs	r3, #0
 8015020:	617b      	str	r3, [r7, #20]
	CAN_FilterInitStructure.FilterMode=CAN_FILTERMODE_IDMASK; 
 8015022:	2300      	movs	r3, #0
 8015024:	61bb      	str	r3, [r7, #24]
	CAN_FilterInitStructure.FilterScale=CAN_FILTERSCALE_32BIT; //32λ 
 8015026:	2301      	movs	r3, #1
 8015028:	61fb      	str	r3, [r7, #28]
	
	CAN_FilterInitStructure.FilterIdHigh=0x0000;////32λID
 801502a:	2300      	movs	r3, #0
 801502c:	603b      	str	r3, [r7, #0]
	CAN_FilterInitStructure.FilterIdLow=0x0000;
 801502e:	2300      	movs	r3, #0
 8015030:	607b      	str	r3, [r7, #4]
	
	CAN_FilterInitStructure.FilterMaskIdHigh=0x0000;//32λMASK
 8015032:	2300      	movs	r3, #0
 8015034:	60bb      	str	r3, [r7, #8]
	CAN_FilterInitStructure.FilterMaskIdLow=0x0000;
 8015036:	2300      	movs	r3, #0
 8015038:	60fb      	str	r3, [r7, #12]
	
	CAN_FilterInitStructure.FilterFIFOAssignment=CAN_FILTER_FIFO0;//������0������FIFO0
 801503a:	2300      	movs	r3, #0
 801503c:	613b      	str	r3, [r7, #16]
	CAN_FilterInitStructure.FilterActivation=ENABLE; //���������
 801503e:	2301      	movs	r3, #1
 8015040:	623b      	str	r3, [r7, #32]
	
	CAN_FilterInitStructure.SlaveStartFilterBank=14;
 8015042:	230e      	movs	r3, #14
 8015044:	627b      	str	r3, [r7, #36]	; 0x24
	
  HAL_CAN_ConfigFilter(&hcan1,&CAN_FilterInitStructure);//�˲�����ʼ��
 8015046:	463b      	mov	r3, r7
 8015048:	4619      	mov	r1, r3
 801504a:	4803      	ldr	r0, [pc, #12]	; (8015058 <CAN1_Filter_Init_All_In+0x40>)
 801504c:	f7ec fc1a 	bl	8001884 <HAL_CAN_ConfigFilter>
		
}
 8015050:	bf00      	nop
 8015052:	3728      	adds	r7, #40	; 0x28
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	20006104 	.word	0x20006104

0801505c <ESP_Send>:
extern UART_HandleTypeDef huart3;

uint8_t getChipidCRC(void);

void ESP_Send(uint8_t* buf,int len)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	b082      	sub	sp, #8
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
 8015064:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3,(uint8_t*)buf,len,0xFFFF);
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	b29a      	uxth	r2, r3
 801506a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801506e:	6879      	ldr	r1, [r7, #4]
 8015070:	4803      	ldr	r0, [pc, #12]	; (8015080 <ESP_Send+0x24>)
 8015072:	f7f0 ff48 	bl	8005f06 <HAL_UART_Transmit>
}
 8015076:	bf00      	nop
 8015078:	3708      	adds	r7, #8
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	2000706c 	.word	0x2000706c

08015084 <esp8266_Cmd>:

int esp8266_Cmd(char *cmd,ESP_StatusTypeDef FLAG,uint32_t wait)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b086      	sub	sp, #24
 8015088:	af00      	add	r7, sp, #0
 801508a:	60f8      	str	r0, [r7, #12]
 801508c:	460b      	mov	r3, r1
 801508e:	607a      	str	r2, [r7, #4]
 8015090:	72fb      	strb	r3, [r7, #11]
	uint32_t tm;
	sprintf(tempBuf1,"%s\r\n",cmd);
 8015092:	68fa      	ldr	r2, [r7, #12]
 8015094:	4919      	ldr	r1, [pc, #100]	; (80150fc <esp8266_Cmd+0x78>)
 8015096:	481a      	ldr	r0, [pc, #104]	; (8015100 <esp8266_Cmd+0x7c>)
 8015098:	f000 faf2 	bl	8015680 <siprintf>
	ESP_Status_Flag&=~FLAG;
 801509c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80150a0:	43db      	mvns	r3, r3
 80150a2:	b25a      	sxtb	r2, r3
 80150a4:	4b17      	ldr	r3, [pc, #92]	; (8015104 <esp8266_Cmd+0x80>)
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	b25b      	sxtb	r3, r3
 80150aa:	4013      	ands	r3, r2
 80150ac:	b25b      	sxtb	r3, r3
 80150ae:	b2da      	uxtb	r2, r3
 80150b0:	4b14      	ldr	r3, [pc, #80]	; (8015104 <esp8266_Cmd+0x80>)
 80150b2:	701a      	strb	r2, [r3, #0]
	ESP_Send((uint8_t*)tempBuf1,strlen(tempBuf1));
 80150b4:	4812      	ldr	r0, [pc, #72]	; (8015100 <esp8266_Cmd+0x7c>)
 80150b6:	f7eb f88b 	bl	80001d0 <strlen>
 80150ba:	4603      	mov	r3, r0
 80150bc:	4619      	mov	r1, r3
 80150be:	4810      	ldr	r0, [pc, #64]	; (8015100 <esp8266_Cmd+0x7c>)
 80150c0:	f7ff ffcc 	bl	801505c <ESP_Send>
	for(tm=0;tm<wait;tm++)
 80150c4:	2300      	movs	r3, #0
 80150c6:	617b      	str	r3, [r7, #20]
 80150c8:	e00e      	b.n	80150e8 <esp8266_Cmd+0x64>
	{
		osDelay(1);
 80150ca:	2001      	movs	r0, #1
 80150cc:	f7f2 fdbe 	bl	8007c4c <osDelay>
		if(ESP_Status_Flag&FLAG) return 0;
 80150d0:	4b0c      	ldr	r3, [pc, #48]	; (8015104 <esp8266_Cmd+0x80>)
 80150d2:	781a      	ldrb	r2, [r3, #0]
 80150d4:	7afb      	ldrb	r3, [r7, #11]
 80150d6:	4013      	ands	r3, r2
 80150d8:	b2db      	uxtb	r3, r3
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d001      	beq.n	80150e2 <esp8266_Cmd+0x5e>
 80150de:	2300      	movs	r3, #0
 80150e0:	e007      	b.n	80150f2 <esp8266_Cmd+0x6e>
	for(tm=0;tm<wait;tm++)
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	3301      	adds	r3, #1
 80150e6:	617b      	str	r3, [r7, #20]
 80150e8:	697a      	ldr	r2, [r7, #20]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d3ec      	bcc.n	80150ca <esp8266_Cmd+0x46>
	}
	return tm;
 80150f0:	697b      	ldr	r3, [r7, #20]
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3718      	adds	r7, #24
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	08018828 	.word	0x08018828
 8015100:	200195a4 	.word	0x200195a4
 8015104:	2001960a 	.word	0x2001960a

08015108 <esp8266_initAP>:

//wait time almost<10 except reset
int esp8266_initAP(void)
{
 8015108:	b590      	push	{r4, r7, lr}
 801510a:	b089      	sub	sp, #36	; 0x24
 801510c:	af02      	add	r7, sp, #8
	int ret;
	char SSID[20];
	sprintf(SSID,"%s%d",AP_SSID,getChipidCRC());
 801510e:	4b3d      	ldr	r3, [pc, #244]	; (8015204 <esp8266_initAP+0xfc>)
 8015110:	681c      	ldr	r4, [r3, #0]
 8015112:	f7ff fd1d 	bl	8014b50 <getChipidCRC>
 8015116:	4603      	mov	r3, r0
 8015118:	4638      	mov	r0, r7
 801511a:	4622      	mov	r2, r4
 801511c:	493a      	ldr	r1, [pc, #232]	; (8015208 <esp8266_initAP+0x100>)
 801511e:	f000 faaf 	bl	8015680 <siprintf>

	
	ret=esp8266_Cmd("AT",ESP_OK,10);
 8015122:	220a      	movs	r2, #10
 8015124:	2101      	movs	r1, #1
 8015126:	4839      	ldr	r0, [pc, #228]	; (801520c <esp8266_initAP+0x104>)
 8015128:	f7ff ffac 	bl	8015084 <esp8266_Cmd>
 801512c:	6178      	str	r0, [r7, #20]
	//printf("1 ret=%d\r\n",ret);
	if(ret) return 1;
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d001      	beq.n	8015138 <esp8266_initAP+0x30>
 8015134:	2301      	movs	r3, #1
 8015136:	e060      	b.n	80151fa <esp8266_initAP+0xf2>

	ret=esp8266_Cmd("AT+RST",ESP_RST_READY,2000);
 8015138:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801513c:	2110      	movs	r1, #16
 801513e:	4834      	ldr	r0, [pc, #208]	; (8015210 <esp8266_initAP+0x108>)
 8015140:	f7ff ffa0 	bl	8015084 <esp8266_Cmd>
 8015144:	6178      	str	r0, [r7, #20]
	//printf("2 ret=%d\r\n",ret);
	if(ret) return 2;
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d001      	beq.n	8015150 <esp8266_initAP+0x48>
 801514c:	2302      	movs	r3, #2
 801514e:	e054      	b.n	80151fa <esp8266_initAP+0xf2>

	ret=esp8266_Cmd("AT+CWMODE=2",ESP_OK,20);
 8015150:	2214      	movs	r2, #20
 8015152:	2101      	movs	r1, #1
 8015154:	482f      	ldr	r0, [pc, #188]	; (8015214 <esp8266_initAP+0x10c>)
 8015156:	f7ff ff95 	bl	8015084 <esp8266_Cmd>
 801515a:	6178      	str	r0, [r7, #20]
	//printf("3 ret=%d\r\n",ret);
	if(ret) return 3;
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d001      	beq.n	8015166 <esp8266_initAP+0x5e>
 8015162:	2303      	movs	r3, #3
 8015164:	e049      	b.n	80151fa <esp8266_initAP+0xf2>

	sprintf(tempBuf3,"AT+CWSAP=\"%s\",\"%s\",%s,%s",SSID,AP_PASSWRD,AP_CHANNEL,AP_JIAMI);//1ͨ�� 4-���ܷ�ʽ WPA_WPA2_PSK
 8015166:	4b2c      	ldr	r3, [pc, #176]	; (8015218 <esp8266_initAP+0x110>)
 8015168:	6818      	ldr	r0, [r3, #0]
 801516a:	4b2c      	ldr	r3, [pc, #176]	; (801521c <esp8266_initAP+0x114>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	4a2c      	ldr	r2, [pc, #176]	; (8015220 <esp8266_initAP+0x118>)
 8015170:	6812      	ldr	r2, [r2, #0]
 8015172:	4639      	mov	r1, r7
 8015174:	9201      	str	r2, [sp, #4]
 8015176:	9300      	str	r3, [sp, #0]
 8015178:	4603      	mov	r3, r0
 801517a:	460a      	mov	r2, r1
 801517c:	4929      	ldr	r1, [pc, #164]	; (8015224 <esp8266_initAP+0x11c>)
 801517e:	482a      	ldr	r0, [pc, #168]	; (8015228 <esp8266_initAP+0x120>)
 8015180:	f000 fa7e 	bl	8015680 <siprintf>
	ret=esp8266_Cmd(tempBuf3,ESP_OK,50);
 8015184:	2232      	movs	r2, #50	; 0x32
 8015186:	2101      	movs	r1, #1
 8015188:	4827      	ldr	r0, [pc, #156]	; (8015228 <esp8266_initAP+0x120>)
 801518a:	f7ff ff7b 	bl	8015084 <esp8266_Cmd>
 801518e:	6178      	str	r0, [r7, #20]
	//printf("4 ret=%d\r\n",ret);
	if(ret) return 4;
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d001      	beq.n	801519a <esp8266_initAP+0x92>
 8015196:	2304      	movs	r3, #4
 8015198:	e02f      	b.n	80151fa <esp8266_initAP+0xf2>
	
//	ret=esp8266_Cmd("AT+CIFSR",ESP_OK,100);//��ӡ IP Address
//	if(ret!=ESP_OK) return 4;

	ret=esp8266_Cmd("AT+CIPMUX=1",ESP_OK,20);//����������
 801519a:	2214      	movs	r2, #20
 801519c:	2101      	movs	r1, #1
 801519e:	4823      	ldr	r0, [pc, #140]	; (801522c <esp8266_initAP+0x124>)
 80151a0:	f7ff ff70 	bl	8015084 <esp8266_Cmd>
 80151a4:	6178      	str	r0, [r7, #20]
	//printf("5 ret=%d\r\n",ret);
	if(ret) return 5;
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d001      	beq.n	80151b0 <esp8266_initAP+0xa8>
 80151ac:	2305      	movs	r3, #5
 80151ae:	e024      	b.n	80151fa <esp8266_initAP+0xf2>

	sprintf(tempBuf3,"AT+CIPSERVER=1,%s",TCP_PORT);//��������
 80151b0:	4b1f      	ldr	r3, [pc, #124]	; (8015230 <esp8266_initAP+0x128>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	461a      	mov	r2, r3
 80151b6:	491f      	ldr	r1, [pc, #124]	; (8015234 <esp8266_initAP+0x12c>)
 80151b8:	481b      	ldr	r0, [pc, #108]	; (8015228 <esp8266_initAP+0x120>)
 80151ba:	f000 fa61 	bl	8015680 <siprintf>
	ret=esp8266_Cmd(tempBuf3,ESP_OK,20);
 80151be:	2214      	movs	r2, #20
 80151c0:	2101      	movs	r1, #1
 80151c2:	4819      	ldr	r0, [pc, #100]	; (8015228 <esp8266_initAP+0x120>)
 80151c4:	f7ff ff5e 	bl	8015084 <esp8266_Cmd>
 80151c8:	6178      	str	r0, [r7, #20]
	//printf("6 ret=%d\r\n",ret);
	if(ret) return 6;
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d001      	beq.n	80151d4 <esp8266_initAP+0xcc>
 80151d0:	2306      	movs	r3, #6
 80151d2:	e012      	b.n	80151fa <esp8266_initAP+0xf2>

	sprintf(tempBuf3,"AT+CIPSTO=%s",AP_TIMEOUT);
 80151d4:	4b18      	ldr	r3, [pc, #96]	; (8015238 <esp8266_initAP+0x130>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	461a      	mov	r2, r3
 80151da:	4918      	ldr	r1, [pc, #96]	; (801523c <esp8266_initAP+0x134>)
 80151dc:	4812      	ldr	r0, [pc, #72]	; (8015228 <esp8266_initAP+0x120>)
 80151de:	f000 fa4f 	bl	8015680 <siprintf>
	ret=esp8266_Cmd(tempBuf3,ESP_OK,60);//��ʱ�Ͽ�   0~28800(s)
 80151e2:	223c      	movs	r2, #60	; 0x3c
 80151e4:	2101      	movs	r1, #1
 80151e6:	4810      	ldr	r0, [pc, #64]	; (8015228 <esp8266_initAP+0x120>)
 80151e8:	f7ff ff4c 	bl	8015084 <esp8266_Cmd>
 80151ec:	6178      	str	r0, [r7, #20]
	//printf("7 ret=%d\r\n",ret);
	if(ret) return 7;
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d001      	beq.n	80151f8 <esp8266_initAP+0xf0>
 80151f4:	2307      	movs	r3, #7
 80151f6:	e000      	b.n	80151fa <esp8266_initAP+0xf2>

	return 0;
 80151f8:	2300      	movs	r3, #0
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	371c      	adds	r7, #28
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd90      	pop	{r4, r7, pc}
 8015202:	bf00      	nop
 8015204:	20000014 	.word	0x20000014
 8015208:	08018830 	.word	0x08018830
 801520c:	08018838 	.word	0x08018838
 8015210:	0801883c 	.word	0x0801883c
 8015214:	08018844 	.word	0x08018844
 8015218:	20000018 	.word	0x20000018
 801521c:	20000020 	.word	0x20000020
 8015220:	20000028 	.word	0x20000028
 8015224:	08018850 	.word	0x08018850
 8015228:	2001960c 	.word	0x2001960c
 801522c:	0801886c 	.word	0x0801886c
 8015230:	2000001c 	.word	0x2000001c
 8015234:	08018878 	.word	0x08018878
 8015238:	20000024 	.word	0x20000024
 801523c:	0801888c 	.word	0x0801888c

08015240 <writeAT24C16>:
5,							//WENDU_RANGE 

};

HAL_StatusTypeDef writeAT24C16(uint16_t addr, uint8_t *data, uint16_t len)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b08a      	sub	sp, #40	; 0x28
 8015244:	af04      	add	r7, sp, #16
 8015246:	4603      	mov	r3, r0
 8015248:	6039      	str	r1, [r7, #0]
 801524a:	80fb      	strh	r3, [r7, #6]
 801524c:	4613      	mov	r3, r2
 801524e:	80bb      	strh	r3, [r7, #4]
	uint8_t wNum = 0;
 8015250:	2300      	movs	r3, #0
 8015252:	75fb      	strb	r3, [r7, #23]
	uint16_t lenLeft = len;
 8015254:	88bb      	ldrh	r3, [r7, #4]
 8015256:	82bb      	strh	r3, [r7, #20]
	uint8_t deviceId ;
	uint8_t *p = data;
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	613b      	str	r3, [r7, #16]
	
	//is the address overfolw
	if(addr + len >= E2PROM_SIZE)	return HAL_ERROR;
 801525c:	88fa      	ldrh	r2, [r7, #6]
 801525e:	88bb      	ldrh	r3, [r7, #4]
 8015260:	4413      	add	r3, r2
 8015262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015266:	db01      	blt.n	801526c <writeAT24C16+0x2c>
 8015268:	2301      	movs	r3, #1
 801526a:	e06d      	b.n	8015348 <writeAT24C16+0x108>
	
	//calculate the current write position to know how many word can write continully
	wNum = EE_PAGE_SIZE - (addr & E2PROM_PAGE_MASK);
 801526c:	88fb      	ldrh	r3, [r7, #6]
 801526e:	b2db      	uxtb	r3, r3
 8015270:	f003 030f 	and.w	r3, r3, #15
 8015274:	b2db      	uxtb	r3, r3
 8015276:	f1c3 0310 	rsb	r3, r3, #16
 801527a:	75fb      	strb	r3, [r7, #23]
	if(wNum == 0)	wNum = EE_PAGE_SIZE;
 801527c:	7dfb      	ldrb	r3, [r7, #23]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d101      	bne.n	8015286 <writeAT24C16+0x46>
 8015282:	2310      	movs	r3, #16
 8015284:	75fb      	strb	r3, [r7, #23]
	wNum = lenLeft>=wNum ? wNum : lenLeft;
 8015286:	7dfb      	ldrb	r3, [r7, #23]
 8015288:	b29b      	uxth	r3, r3
 801528a:	8aba      	ldrh	r2, [r7, #20]
 801528c:	4293      	cmp	r3, r2
 801528e:	bf28      	it	cs
 8015290:	4613      	movcs	r3, r2
 8015292:	b29b      	uxth	r3, r3
 8015294:	75fb      	strb	r3, [r7, #23]
	
	
	//transmit the date to e2prom

	AlarmFlag&=~I2C_ERROR;
 8015296:	4b2e      	ldr	r3, [pc, #184]	; (8015350 <writeAT24C16+0x110>)
 8015298:	881b      	ldrh	r3, [r3, #0]
 801529a:	f023 0304 	bic.w	r3, r3, #4
 801529e:	b29a      	uxth	r2, r3
 80152a0:	4b2b      	ldr	r3, [pc, #172]	; (8015350 <writeAT24C16+0x110>)
 80152a2:	801a      	strh	r2, [r3, #0]
	while(lenLeft)
 80152a4:	e044      	b.n	8015330 <writeAT24C16+0xf0>
	{
		//calculate the device id
		deviceId = (addr >> 8)<=0 ? E2PROM_BASE_WID : (E2PROM_BASE_WID | (uint8_t)((addr>>7)&0x0E));
 80152a6:	88fb      	ldrh	r3, [r7, #6]
 80152a8:	0a1b      	lsrs	r3, r3, #8
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d00b      	beq.n	80152c8 <writeAT24C16+0x88>
 80152b0:	88fb      	ldrh	r3, [r7, #6]
 80152b2:	09db      	lsrs	r3, r3, #7
 80152b4:	b29b      	uxth	r3, r3
 80152b6:	b25b      	sxtb	r3, r3
 80152b8:	f003 030e 	and.w	r3, r3, #14
 80152bc:	b25b      	sxtb	r3, r3
 80152be:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80152c2:	b25b      	sxtb	r3, r3
 80152c4:	b2db      	uxtb	r3, r3
 80152c6:	e000      	b.n	80152ca <writeAT24C16+0x8a>
 80152c8:	23a0      	movs	r3, #160	; 0xa0
 80152ca:	73fb      	strb	r3, [r7, #15]
		
		if( HAL_I2C_Mem_Write(&hi2c1, deviceId, addr&0x00FF, I2C_MEMADD_SIZE_8BIT, p, wNum, I2C_TIMEOUT) != HAL_OK)
 80152cc:	7bfb      	ldrb	r3, [r7, #15]
 80152ce:	b299      	uxth	r1, r3
 80152d0:	88fb      	ldrh	r3, [r7, #6]
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	b298      	uxth	r0, r3
 80152d6:	7dfb      	ldrb	r3, [r7, #23]
 80152d8:	b29b      	uxth	r3, r3
 80152da:	2220      	movs	r2, #32
 80152dc:	9202      	str	r2, [sp, #8]
 80152de:	9301      	str	r3, [sp, #4]
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	2301      	movs	r3, #1
 80152e6:	4602      	mov	r2, r0
 80152e8:	481a      	ldr	r0, [pc, #104]	; (8015354 <writeAT24C16+0x114>)
 80152ea:	f7ef f875 	bl	80043d8 <HAL_I2C_Mem_Write>
 80152ee:	4603      	mov	r3, r0
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d006      	beq.n	8015302 <writeAT24C16+0xc2>
			AlarmFlag|=I2C_ERROR;
 80152f4:	4b16      	ldr	r3, [pc, #88]	; (8015350 <writeAT24C16+0x110>)
 80152f6:	881b      	ldrh	r3, [r3, #0]
 80152f8:	f043 0304 	orr.w	r3, r3, #4
 80152fc:	b29a      	uxth	r2, r3
 80152fe:	4b14      	ldr	r3, [pc, #80]	; (8015350 <writeAT24C16+0x110>)
 8015300:	801a      	strh	r2, [r3, #0]

		addr += wNum;
 8015302:	7dfb      	ldrb	r3, [r7, #23]
 8015304:	b29a      	uxth	r2, r3
 8015306:	88fb      	ldrh	r3, [r7, #6]
 8015308:	4413      	add	r3, r2
 801530a:	80fb      	strh	r3, [r7, #6]
		lenLeft -= wNum;
 801530c:	7dfb      	ldrb	r3, [r7, #23]
 801530e:	b29b      	uxth	r3, r3
 8015310:	8aba      	ldrh	r2, [r7, #20]
 8015312:	1ad3      	subs	r3, r2, r3
 8015314:	82bb      	strh	r3, [r7, #20]
		p += wNum;
 8015316:	7dfb      	ldrb	r3, [r7, #23]
 8015318:	693a      	ldr	r2, [r7, #16]
 801531a:	4413      	add	r3, r2
 801531c:	613b      	str	r3, [r7, #16]
		wNum = lenLeft > EE_PAGE_SIZE ? EE_PAGE_SIZE : lenLeft;
 801531e:	8abb      	ldrh	r3, [r7, #20]
 8015320:	2b10      	cmp	r3, #16
 8015322:	bf28      	it	cs
 8015324:	2310      	movcs	r3, #16
 8015326:	b29b      	uxth	r3, r3
 8015328:	75fb      	strb	r3, [r7, #23]
	 
		osDelay(5);
 801532a:	2005      	movs	r0, #5
 801532c:	f7f2 fc8e 	bl	8007c4c <osDelay>
	while(lenLeft)
 8015330:	8abb      	ldrh	r3, [r7, #20]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d1b7      	bne.n	80152a6 <writeAT24C16+0x66>
		//HAL_Delay(5);
	}
	if(AlarmFlag&I2C_ERROR) return HAL_ERROR;
 8015336:	4b06      	ldr	r3, [pc, #24]	; (8015350 <writeAT24C16+0x110>)
 8015338:	881b      	ldrh	r3, [r3, #0]
 801533a:	f003 0304 	and.w	r3, r3, #4
 801533e:	2b00      	cmp	r3, #0
 8015340:	d001      	beq.n	8015346 <writeAT24C16+0x106>
 8015342:	2301      	movs	r3, #1
 8015344:	e000      	b.n	8015348 <writeAT24C16+0x108>
	else return HAL_OK;
 8015346:	2300      	movs	r3, #0
}
 8015348:	4618      	mov	r0, r3
 801534a:	3718      	adds	r7, #24
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}
 8015350:	200060c0 	.word	0x200060c0
 8015354:	20006f78 	.word	0x20006f78

08015358 <readAT24C16>:
 
HAL_StatusTypeDef readAT24C16(uint16_t addr, uint8_t *data, uint16_t len)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b08a      	sub	sp, #40	; 0x28
 801535c:	af04      	add	r7, sp, #16
 801535e:	4603      	mov	r3, r0
 8015360:	6039      	str	r1, [r7, #0]
 8015362:	80fb      	strh	r3, [r7, #6]
 8015364:	4613      	mov	r3, r2
 8015366:	80bb      	strh	r3, [r7, #4]
	uint8_t rNum = 0;
 8015368:	2300      	movs	r3, #0
 801536a:	75fb      	strb	r3, [r7, #23]
	uint16_t lenLeft = len;
 801536c:	88bb      	ldrh	r3, [r7, #4]
 801536e:	82bb      	strh	r3, [r7, #20]
	uint8_t deviceId ;
	uint8_t *p = data;
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	613b      	str	r3, [r7, #16]
 
	//is the address overfolw
	if(addr + len >= E2PROM_SIZE)	return HAL_ERROR;
 8015374:	88fa      	ldrh	r2, [r7, #6]
 8015376:	88bb      	ldrh	r3, [r7, #4]
 8015378:	4413      	add	r3, r2
 801537a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801537e:	db01      	blt.n	8015384 <readAT24C16+0x2c>
 8015380:	2301      	movs	r3, #1
 8015382:	e06a      	b.n	801545a <readAT24C16+0x102>
	
	//calculate the current write position to know how many word can write continully
	rNum = EE_PAGE_SIZE - (addr & E2PROM_PAGE_MASK);
 8015384:	88fb      	ldrh	r3, [r7, #6]
 8015386:	b2db      	uxtb	r3, r3
 8015388:	f003 030f 	and.w	r3, r3, #15
 801538c:	b2db      	uxtb	r3, r3
 801538e:	f1c3 0310 	rsb	r3, r3, #16
 8015392:	75fb      	strb	r3, [r7, #23]
	if(rNum == 0)	rNum = EE_PAGE_SIZE;
 8015394:	7dfb      	ldrb	r3, [r7, #23]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d101      	bne.n	801539e <readAT24C16+0x46>
 801539a:	2310      	movs	r3, #16
 801539c:	75fb      	strb	r3, [r7, #23]
	rNum = lenLeft>=rNum ? rNum : lenLeft;
 801539e:	7dfb      	ldrb	r3, [r7, #23]
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	8aba      	ldrh	r2, [r7, #20]
 80153a4:	4293      	cmp	r3, r2
 80153a6:	bf28      	it	cs
 80153a8:	4613      	movcs	r3, r2
 80153aa:	b29b      	uxth	r3, r3
 80153ac:	75fb      	strb	r3, [r7, #23]
	
	//transmit the date to e2prom

	AlarmFlag&=~I2C_ERROR;
 80153ae:	4b2d      	ldr	r3, [pc, #180]	; (8015464 <readAT24C16+0x10c>)
 80153b0:	881b      	ldrh	r3, [r3, #0]
 80153b2:	f023 0304 	bic.w	r3, r3, #4
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	4b2a      	ldr	r3, [pc, #168]	; (8015464 <readAT24C16+0x10c>)
 80153ba:	801a      	strh	r2, [r3, #0]
	while(lenLeft)
 80153bc:	e041      	b.n	8015442 <readAT24C16+0xea>
	{
		//calculate the device id
		deviceId = (addr >> 8)<=0 ? E2PROM_BASE_RID : (E2PROM_BASE_RID | (uint8_t)((addr>>7)&0x0E));
 80153be:	88fb      	ldrh	r3, [r7, #6]
 80153c0:	0a1b      	lsrs	r3, r3, #8
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d00b      	beq.n	80153e0 <readAT24C16+0x88>
 80153c8:	88fb      	ldrh	r3, [r7, #6]
 80153ca:	09db      	lsrs	r3, r3, #7
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	b25b      	sxtb	r3, r3
 80153d0:	f003 030e 	and.w	r3, r3, #14
 80153d4:	b25b      	sxtb	r3, r3
 80153d6:	f063 035e 	orn	r3, r3, #94	; 0x5e
 80153da:	b25b      	sxtb	r3, r3
 80153dc:	b2db      	uxtb	r3, r3
 80153de:	e000      	b.n	80153e2 <readAT24C16+0x8a>
 80153e0:	23a1      	movs	r3, #161	; 0xa1
 80153e2:	73fb      	strb	r3, [r7, #15]
		
		if( HAL_I2C_Mem_Read(&hi2c1, deviceId, addr&0x00FF, I2C_MEMADD_SIZE_8BIT, p, rNum, I2C_TIMEOUT) != HAL_OK)
 80153e4:	7bfb      	ldrb	r3, [r7, #15]
 80153e6:	b299      	uxth	r1, r3
 80153e8:	88fb      	ldrh	r3, [r7, #6]
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	b298      	uxth	r0, r3
 80153ee:	7dfb      	ldrb	r3, [r7, #23]
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	2220      	movs	r2, #32
 80153f4:	9202      	str	r2, [sp, #8]
 80153f6:	9301      	str	r3, [sp, #4]
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	9300      	str	r3, [sp, #0]
 80153fc:	2301      	movs	r3, #1
 80153fe:	4602      	mov	r2, r0
 8015400:	4819      	ldr	r0, [pc, #100]	; (8015468 <readAT24C16+0x110>)
 8015402:	f7ef f8e3 	bl	80045cc <HAL_I2C_Mem_Read>
 8015406:	4603      	mov	r3, r0
 8015408:	2b00      	cmp	r3, #0
 801540a:	d006      	beq.n	801541a <readAT24C16+0xc2>
			AlarmFlag|=I2C_ERROR;
 801540c:	4b15      	ldr	r3, [pc, #84]	; (8015464 <readAT24C16+0x10c>)
 801540e:	881b      	ldrh	r3, [r3, #0]
 8015410:	f043 0304 	orr.w	r3, r3, #4
 8015414:	b29a      	uxth	r2, r3
 8015416:	4b13      	ldr	r3, [pc, #76]	; (8015464 <readAT24C16+0x10c>)
 8015418:	801a      	strh	r2, [r3, #0]

		addr += rNum;
 801541a:	7dfb      	ldrb	r3, [r7, #23]
 801541c:	b29a      	uxth	r2, r3
 801541e:	88fb      	ldrh	r3, [r7, #6]
 8015420:	4413      	add	r3, r2
 8015422:	80fb      	strh	r3, [r7, #6]
		lenLeft -= rNum;
 8015424:	7dfb      	ldrb	r3, [r7, #23]
 8015426:	b29b      	uxth	r3, r3
 8015428:	8aba      	ldrh	r2, [r7, #20]
 801542a:	1ad3      	subs	r3, r2, r3
 801542c:	82bb      	strh	r3, [r7, #20]
		p += rNum;
 801542e:	7dfb      	ldrb	r3, [r7, #23]
 8015430:	693a      	ldr	r2, [r7, #16]
 8015432:	4413      	add	r3, r2
 8015434:	613b      	str	r3, [r7, #16]
		rNum = lenLeft > EE_PAGE_SIZE ? EE_PAGE_SIZE : lenLeft;
 8015436:	8abb      	ldrh	r3, [r7, #20]
 8015438:	2b10      	cmp	r3, #16
 801543a:	bf28      	it	cs
 801543c:	2310      	movcs	r3, #16
 801543e:	b29b      	uxth	r3, r3
 8015440:	75fb      	strb	r3, [r7, #23]
	while(lenLeft)
 8015442:	8abb      	ldrh	r3, [r7, #20]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d1ba      	bne.n	80153be <readAT24C16+0x66>
	}
	if(AlarmFlag&I2C_ERROR) return HAL_ERROR;
 8015448:	4b06      	ldr	r3, [pc, #24]	; (8015464 <readAT24C16+0x10c>)
 801544a:	881b      	ldrh	r3, [r3, #0]
 801544c:	f003 0304 	and.w	r3, r3, #4
 8015450:	2b00      	cmp	r3, #0
 8015452:	d001      	beq.n	8015458 <readAT24C16+0x100>
 8015454:	2301      	movs	r3, #1
 8015456:	e000      	b.n	801545a <readAT24C16+0x102>
	else return HAL_OK;
 8015458:	2300      	movs	r3, #0
}
 801545a:	4618      	mov	r0, r3
 801545c:	3718      	adds	r7, #24
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
 8015462:	bf00      	nop
 8015464:	200060c0 	.word	0x200060c0
 8015468:	20006f78 	.word	0x20006f78

0801546c <Load_Default_Parameters>:
{
	memcpy(&Parameters, buf, PARAMETER_NUM*2);
}
*/
void Load_Default_Parameters()
{
 801546c:	b480      	push	{r7}
 801546e:	b083      	sub	sp, #12
 8015470:	af00      	add	r7, sp, #0
int i;
	for(i=0;i<PARAMETER_NUM-2;i++)
 8015472:	2300      	movs	r3, #0
 8015474:	607b      	str	r3, [r7, #4]
 8015476:	e00a      	b.n	801548e <Load_Default_Parameters+0x22>
		Parameters[i]=Para_Default_Table[i];
 8015478:	4a09      	ldr	r2, [pc, #36]	; (80154a0 <Load_Default_Parameters+0x34>)
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8015480:	4a08      	ldr	r2, [pc, #32]	; (80154a4 <Load_Default_Parameters+0x38>)
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<PARAMETER_NUM-2;i++)
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	3301      	adds	r3, #1
 801548c:	607b      	str	r3, [r7, #4]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2b8b      	cmp	r3, #139	; 0x8b
 8015492:	ddf1      	ble.n	8015478 <Load_Default_Parameters+0xc>
//	memcpy(&Parameters, &Para_Default_Table, PARAMETER_NUM*2);
}
 8015494:	bf00      	nop
 8015496:	370c      	adds	r7, #12
 8015498:	46bd      	mov	sp, r7
 801549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549e:	4770      	bx	lr
 80154a0:	08018cf4 	.word	0x08018cf4
 80154a4:	20019640 	.word	0x20019640

080154a8 <Write_All_Parameters>:

void Write_All_Parameters()
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
int i;

	PARAMETER_FLAG=0x5aa5;
 80154ae:	4b1d      	ldr	r3, [pc, #116]	; (8015524 <Write_All_Parameters+0x7c>)
 80154b0:	f645 22a5 	movw	r2, #23205	; 0x5aa5
 80154b4:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	PARAMETER_SUM=0;
 80154b8:	4b1a      	ldr	r3, [pc, #104]	; (8015524 <Write_All_Parameters+0x7c>)
 80154ba:	2200      	movs	r2, #0
 80154bc:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	for(i=0;i<PARAMETER_NUM-1;i++)
 80154c0:	2300      	movs	r3, #0
 80154c2:	607b      	str	r3, [r7, #4]
 80154c4:	e00e      	b.n	80154e4 <Write_All_Parameters+0x3c>
	{
		PARAMETER_SUM+=Parameters[i];
 80154c6:	4b17      	ldr	r3, [pc, #92]	; (8015524 <Write_All_Parameters+0x7c>)
 80154c8:	f8b3 211a 	ldrh.w	r2, [r3, #282]	; 0x11a
 80154cc:	4915      	ldr	r1, [pc, #84]	; (8015524 <Write_All_Parameters+0x7c>)
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80154d4:	4413      	add	r3, r2
 80154d6:	b29a      	uxth	r2, r3
 80154d8:	4b12      	ldr	r3, [pc, #72]	; (8015524 <Write_All_Parameters+0x7c>)
 80154da:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	for(i=0;i<PARAMETER_NUM-1;i++)
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	3301      	adds	r3, #1
 80154e2:	607b      	str	r3, [r7, #4]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2b8c      	cmp	r3, #140	; 0x8c
 80154e8:	dded      	ble.n	80154c6 <Write_All_Parameters+0x1e>
	}
	if(writeAT24C16(PARAMETER_ADDR, (uint8_t*)&Parameters,PARAMETER_NUM*2)== HAL_OK)
 80154ea:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80154ee:	490d      	ldr	r1, [pc, #52]	; (8015524 <Write_All_Parameters+0x7c>)
 80154f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80154f4:	f7ff fea4 	bl	8015240 <writeAT24C16>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d107      	bne.n	801550e <Write_All_Parameters+0x66>
	{
		AlarmFlag&=~I2C_ERROR;
 80154fe:	4b0a      	ldr	r3, [pc, #40]	; (8015528 <Write_All_Parameters+0x80>)
 8015500:	881b      	ldrh	r3, [r3, #0]
 8015502:	f023 0304 	bic.w	r3, r3, #4
 8015506:	b29a      	uxth	r2, r3
 8015508:	4b07      	ldr	r3, [pc, #28]	; (8015528 <Write_All_Parameters+0x80>)
 801550a:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		AlarmFlag|=I2C_ERROR;
	}
}
 801550c:	e006      	b.n	801551c <Write_All_Parameters+0x74>
		AlarmFlag|=I2C_ERROR;
 801550e:	4b06      	ldr	r3, [pc, #24]	; (8015528 <Write_All_Parameters+0x80>)
 8015510:	881b      	ldrh	r3, [r3, #0]
 8015512:	f043 0304 	orr.w	r3, r3, #4
 8015516:	b29a      	uxth	r2, r3
 8015518:	4b03      	ldr	r3, [pc, #12]	; (8015528 <Write_All_Parameters+0x80>)
 801551a:	801a      	strh	r2, [r3, #0]
}
 801551c:	bf00      	nop
 801551e:	3708      	adds	r7, #8
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	20019640 	.word	0x20019640
 8015528:	200060c0 	.word	0x200060c0

0801552c <Read_All_Parameters>:

void Read_All_Parameters()
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
uint16_t sum;
int i;
	
	// read date from EEPROM
	if(readAT24C16(PARAMETER_ADDR, (uint8_t*)&Parameters,PARAMETER_NUM*2)==HAL_OK)
 8015532:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8015536:	491f      	ldr	r1, [pc, #124]	; (80155b4 <Read_All_Parameters+0x88>)
 8015538:	f44f 7080 	mov.w	r0, #256	; 0x100
 801553c:	f7ff ff0c 	bl	8015358 <readAT24C16>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d12a      	bne.n	801559c <Read_All_Parameters+0x70>
	{
		AlarmFlag&=~I2C_ERROR;
 8015546:	4b1c      	ldr	r3, [pc, #112]	; (80155b8 <Read_All_Parameters+0x8c>)
 8015548:	881b      	ldrh	r3, [r3, #0]
 801554a:	f023 0304 	bic.w	r3, r3, #4
 801554e:	b29a      	uxth	r2, r3
 8015550:	4b19      	ldr	r3, [pc, #100]	; (80155b8 <Read_All_Parameters+0x8c>)
 8015552:	801a      	strh	r2, [r3, #0]
		sum=0;
 8015554:	2300      	movs	r3, #0
 8015556:	80fb      	strh	r3, [r7, #6]
		for(i=0;i<PARAMETER_NUM-1;i++)
 8015558:	2300      	movs	r3, #0
 801555a:	603b      	str	r3, [r7, #0]
 801555c:	e009      	b.n	8015572 <Read_All_Parameters+0x46>
		{
			sum+=Parameters[i];
 801555e:	4a15      	ldr	r2, [pc, #84]	; (80155b4 <Read_All_Parameters+0x88>)
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8015566:	88fb      	ldrh	r3, [r7, #6]
 8015568:	4413      	add	r3, r2
 801556a:	80fb      	strh	r3, [r7, #6]
		for(i=0;i<PARAMETER_NUM-1;i++)
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	3301      	adds	r3, #1
 8015570:	603b      	str	r3, [r7, #0]
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	2b8c      	cmp	r3, #140	; 0x8c
 8015576:	ddf2      	ble.n	801555e <Read_All_Parameters+0x32>
		}
		if(PARAMETER_FLAG!=0x5aa5 || PARAMETER_SUM!=sum )
 8015578:	4b0e      	ldr	r3, [pc, #56]	; (80155b4 <Read_All_Parameters+0x88>)
 801557a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 801557e:	f645 22a5 	movw	r2, #23205	; 0x5aa5
 8015582:	4293      	cmp	r3, r2
 8015584:	d105      	bne.n	8015592 <Read_All_Parameters+0x66>
 8015586:	4b0b      	ldr	r3, [pc, #44]	; (80155b4 <Read_All_Parameters+0x88>)
 8015588:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 801558c:	88fa      	ldrh	r2, [r7, #6]
 801558e:	429a      	cmp	r2, r3
 8015590:	d00b      	beq.n	80155aa <Read_All_Parameters+0x7e>
		{
			Load_Default_Parameters();
 8015592:	f7ff ff6b 	bl	801546c <Load_Default_Parameters>
			Write_All_Parameters();
 8015596:	f7ff ff87 	bl	80154a8 <Write_All_Parameters>
	}
	else
	{
		AlarmFlag|=I2C_ERROR;
	}
}
 801559a:	e006      	b.n	80155aa <Read_All_Parameters+0x7e>
		AlarmFlag|=I2C_ERROR;
 801559c:	4b06      	ldr	r3, [pc, #24]	; (80155b8 <Read_All_Parameters+0x8c>)
 801559e:	881b      	ldrh	r3, [r3, #0]
 80155a0:	f043 0304 	orr.w	r3, r3, #4
 80155a4:	b29a      	uxth	r2, r3
 80155a6:	4b04      	ldr	r3, [pc, #16]	; (80155b8 <Read_All_Parameters+0x8c>)
 80155a8:	801a      	strh	r2, [r3, #0]
}
 80155aa:	bf00      	nop
 80155ac:	3708      	adds	r7, #8
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	bf00      	nop
 80155b4:	20019640 	.word	0x20019640
 80155b8:	200060c0 	.word	0x200060c0

080155bc <atoi>:
 80155bc:	220a      	movs	r2, #10
 80155be:	2100      	movs	r1, #0
 80155c0:	f000 b976 	b.w	80158b0 <strtol>

080155c4 <__libc_init_array>:
 80155c4:	b570      	push	{r4, r5, r6, lr}
 80155c6:	4e0d      	ldr	r6, [pc, #52]	; (80155fc <__libc_init_array+0x38>)
 80155c8:	4c0d      	ldr	r4, [pc, #52]	; (8015600 <__libc_init_array+0x3c>)
 80155ca:	1ba4      	subs	r4, r4, r6
 80155cc:	10a4      	asrs	r4, r4, #2
 80155ce:	2500      	movs	r5, #0
 80155d0:	42a5      	cmp	r5, r4
 80155d2:	d109      	bne.n	80155e8 <__libc_init_array+0x24>
 80155d4:	4e0b      	ldr	r6, [pc, #44]	; (8015604 <__libc_init_array+0x40>)
 80155d6:	4c0c      	ldr	r4, [pc, #48]	; (8015608 <__libc_init_array+0x44>)
 80155d8:	f001 fa10 	bl	80169fc <_init>
 80155dc:	1ba4      	subs	r4, r4, r6
 80155de:	10a4      	asrs	r4, r4, #2
 80155e0:	2500      	movs	r5, #0
 80155e2:	42a5      	cmp	r5, r4
 80155e4:	d105      	bne.n	80155f2 <__libc_init_array+0x2e>
 80155e6:	bd70      	pop	{r4, r5, r6, pc}
 80155e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80155ec:	4798      	blx	r3
 80155ee:	3501      	adds	r5, #1
 80155f0:	e7ee      	b.n	80155d0 <__libc_init_array+0xc>
 80155f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80155f6:	4798      	blx	r3
 80155f8:	3501      	adds	r5, #1
 80155fa:	e7f2      	b.n	80155e2 <__libc_init_array+0x1e>
 80155fc:	08018fb8 	.word	0x08018fb8
 8015600:	08018fb8 	.word	0x08018fb8
 8015604:	08018fb8 	.word	0x08018fb8
 8015608:	08018fbc 	.word	0x08018fbc

0801560c <memcmp>:
 801560c:	b530      	push	{r4, r5, lr}
 801560e:	2400      	movs	r4, #0
 8015610:	42a2      	cmp	r2, r4
 8015612:	d101      	bne.n	8015618 <memcmp+0xc>
 8015614:	2000      	movs	r0, #0
 8015616:	e007      	b.n	8015628 <memcmp+0x1c>
 8015618:	5d03      	ldrb	r3, [r0, r4]
 801561a:	3401      	adds	r4, #1
 801561c:	190d      	adds	r5, r1, r4
 801561e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8015622:	42ab      	cmp	r3, r5
 8015624:	d0f4      	beq.n	8015610 <memcmp+0x4>
 8015626:	1b58      	subs	r0, r3, r5
 8015628:	bd30      	pop	{r4, r5, pc}

0801562a <memcpy>:
 801562a:	b510      	push	{r4, lr}
 801562c:	1e43      	subs	r3, r0, #1
 801562e:	440a      	add	r2, r1
 8015630:	4291      	cmp	r1, r2
 8015632:	d100      	bne.n	8015636 <memcpy+0xc>
 8015634:	bd10      	pop	{r4, pc}
 8015636:	f811 4b01 	ldrb.w	r4, [r1], #1
 801563a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801563e:	e7f7      	b.n	8015630 <memcpy+0x6>

08015640 <memset>:
 8015640:	4402      	add	r2, r0
 8015642:	4603      	mov	r3, r0
 8015644:	4293      	cmp	r3, r2
 8015646:	d100      	bne.n	801564a <memset+0xa>
 8015648:	4770      	bx	lr
 801564a:	f803 1b01 	strb.w	r1, [r3], #1
 801564e:	e7f9      	b.n	8015644 <memset+0x4>

08015650 <iprintf>:
 8015650:	b40f      	push	{r0, r1, r2, r3}
 8015652:	4b0a      	ldr	r3, [pc, #40]	; (801567c <iprintf+0x2c>)
 8015654:	b513      	push	{r0, r1, r4, lr}
 8015656:	681c      	ldr	r4, [r3, #0]
 8015658:	b124      	cbz	r4, 8015664 <iprintf+0x14>
 801565a:	69a3      	ldr	r3, [r4, #24]
 801565c:	b913      	cbnz	r3, 8015664 <iprintf+0x14>
 801565e:	4620      	mov	r0, r4
 8015660:	f000 faec 	bl	8015c3c <__sinit>
 8015664:	ab05      	add	r3, sp, #20
 8015666:	9a04      	ldr	r2, [sp, #16]
 8015668:	68a1      	ldr	r1, [r4, #8]
 801566a:	9301      	str	r3, [sp, #4]
 801566c:	4620      	mov	r0, r4
 801566e:	f000 fe15 	bl	801629c <_vfiprintf_r>
 8015672:	b002      	add	sp, #8
 8015674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015678:	b004      	add	sp, #16
 801567a:	4770      	bx	lr
 801567c:	2000002c 	.word	0x2000002c

08015680 <siprintf>:
 8015680:	b40e      	push	{r1, r2, r3}
 8015682:	b500      	push	{lr}
 8015684:	b09c      	sub	sp, #112	; 0x70
 8015686:	ab1d      	add	r3, sp, #116	; 0x74
 8015688:	9002      	str	r0, [sp, #8]
 801568a:	9006      	str	r0, [sp, #24]
 801568c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015690:	4809      	ldr	r0, [pc, #36]	; (80156b8 <siprintf+0x38>)
 8015692:	9107      	str	r1, [sp, #28]
 8015694:	9104      	str	r1, [sp, #16]
 8015696:	4909      	ldr	r1, [pc, #36]	; (80156bc <siprintf+0x3c>)
 8015698:	f853 2b04 	ldr.w	r2, [r3], #4
 801569c:	9105      	str	r1, [sp, #20]
 801569e:	6800      	ldr	r0, [r0, #0]
 80156a0:	9301      	str	r3, [sp, #4]
 80156a2:	a902      	add	r1, sp, #8
 80156a4:	f000 fcd8 	bl	8016058 <_svfiprintf_r>
 80156a8:	9b02      	ldr	r3, [sp, #8]
 80156aa:	2200      	movs	r2, #0
 80156ac:	701a      	strb	r2, [r3, #0]
 80156ae:	b01c      	add	sp, #112	; 0x70
 80156b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80156b4:	b003      	add	sp, #12
 80156b6:	4770      	bx	lr
 80156b8:	2000002c 	.word	0x2000002c
 80156bc:	ffff0208 	.word	0xffff0208

080156c0 <strchr>:
 80156c0:	b2c9      	uxtb	r1, r1
 80156c2:	4603      	mov	r3, r0
 80156c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156c8:	b11a      	cbz	r2, 80156d2 <strchr+0x12>
 80156ca:	428a      	cmp	r2, r1
 80156cc:	d1f9      	bne.n	80156c2 <strchr+0x2>
 80156ce:	4618      	mov	r0, r3
 80156d0:	4770      	bx	lr
 80156d2:	2900      	cmp	r1, #0
 80156d4:	bf18      	it	ne
 80156d6:	2300      	movne	r3, #0
 80156d8:	e7f9      	b.n	80156ce <strchr+0xe>

080156da <strstr>:
 80156da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156dc:	7803      	ldrb	r3, [r0, #0]
 80156de:	b17b      	cbz	r3, 8015700 <strstr+0x26>
 80156e0:	4604      	mov	r4, r0
 80156e2:	7823      	ldrb	r3, [r4, #0]
 80156e4:	4620      	mov	r0, r4
 80156e6:	1c66      	adds	r6, r4, #1
 80156e8:	b17b      	cbz	r3, 801570a <strstr+0x30>
 80156ea:	1e4a      	subs	r2, r1, #1
 80156ec:	1e63      	subs	r3, r4, #1
 80156ee:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80156f2:	b14d      	cbz	r5, 8015708 <strstr+0x2e>
 80156f4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80156f8:	42af      	cmp	r7, r5
 80156fa:	4634      	mov	r4, r6
 80156fc:	d0f7      	beq.n	80156ee <strstr+0x14>
 80156fe:	e7f0      	b.n	80156e2 <strstr+0x8>
 8015700:	780b      	ldrb	r3, [r1, #0]
 8015702:	2b00      	cmp	r3, #0
 8015704:	bf18      	it	ne
 8015706:	2000      	movne	r0, #0
 8015708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801570a:	4618      	mov	r0, r3
 801570c:	e7fc      	b.n	8015708 <strstr+0x2e>
	...

08015710 <strtok>:
 8015710:	4b13      	ldr	r3, [pc, #76]	; (8015760 <strtok+0x50>)
 8015712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015716:	681d      	ldr	r5, [r3, #0]
 8015718:	6dac      	ldr	r4, [r5, #88]	; 0x58
 801571a:	4606      	mov	r6, r0
 801571c:	460f      	mov	r7, r1
 801571e:	b9b4      	cbnz	r4, 801574e <strtok+0x3e>
 8015720:	2050      	movs	r0, #80	; 0x50
 8015722:	f000 fb7d 	bl	8015e20 <malloc>
 8015726:	65a8      	str	r0, [r5, #88]	; 0x58
 8015728:	e9c0 4400 	strd	r4, r4, [r0]
 801572c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8015730:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8015734:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8015738:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801573c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8015740:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8015744:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8015748:	6184      	str	r4, [r0, #24]
 801574a:	7704      	strb	r4, [r0, #28]
 801574c:	6244      	str	r4, [r0, #36]	; 0x24
 801574e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8015750:	4639      	mov	r1, r7
 8015752:	4630      	mov	r0, r6
 8015754:	2301      	movs	r3, #1
 8015756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801575a:	f000 b803 	b.w	8015764 <__strtok_r>
 801575e:	bf00      	nop
 8015760:	2000002c 	.word	0x2000002c

08015764 <__strtok_r>:
 8015764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015766:	b918      	cbnz	r0, 8015770 <__strtok_r+0xc>
 8015768:	6810      	ldr	r0, [r2, #0]
 801576a:	b908      	cbnz	r0, 8015770 <__strtok_r+0xc>
 801576c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801576e:	4620      	mov	r0, r4
 8015770:	4604      	mov	r4, r0
 8015772:	460f      	mov	r7, r1
 8015774:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015778:	f817 6b01 	ldrb.w	r6, [r7], #1
 801577c:	b91e      	cbnz	r6, 8015786 <__strtok_r+0x22>
 801577e:	b96d      	cbnz	r5, 801579c <__strtok_r+0x38>
 8015780:	6015      	str	r5, [r2, #0]
 8015782:	4628      	mov	r0, r5
 8015784:	e7f2      	b.n	801576c <__strtok_r+0x8>
 8015786:	42b5      	cmp	r5, r6
 8015788:	d1f6      	bne.n	8015778 <__strtok_r+0x14>
 801578a:	2b00      	cmp	r3, #0
 801578c:	d1ef      	bne.n	801576e <__strtok_r+0xa>
 801578e:	6014      	str	r4, [r2, #0]
 8015790:	7003      	strb	r3, [r0, #0]
 8015792:	e7eb      	b.n	801576c <__strtok_r+0x8>
 8015794:	462b      	mov	r3, r5
 8015796:	e00d      	b.n	80157b4 <__strtok_r+0x50>
 8015798:	b926      	cbnz	r6, 80157a4 <__strtok_r+0x40>
 801579a:	461c      	mov	r4, r3
 801579c:	4623      	mov	r3, r4
 801579e:	460f      	mov	r7, r1
 80157a0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80157a4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80157a8:	42b5      	cmp	r5, r6
 80157aa:	d1f5      	bne.n	8015798 <__strtok_r+0x34>
 80157ac:	2d00      	cmp	r5, #0
 80157ae:	d0f1      	beq.n	8015794 <__strtok_r+0x30>
 80157b0:	2100      	movs	r1, #0
 80157b2:	7021      	strb	r1, [r4, #0]
 80157b4:	6013      	str	r3, [r2, #0]
 80157b6:	e7d9      	b.n	801576c <__strtok_r+0x8>

080157b8 <_strtol_l.isra.0>:
 80157b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157bc:	4680      	mov	r8, r0
 80157be:	4689      	mov	r9, r1
 80157c0:	4692      	mov	sl, r2
 80157c2:	461e      	mov	r6, r3
 80157c4:	460f      	mov	r7, r1
 80157c6:	463d      	mov	r5, r7
 80157c8:	9808      	ldr	r0, [sp, #32]
 80157ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80157ce:	f000 fabf 	bl	8015d50 <__locale_ctype_ptr_l>
 80157d2:	4420      	add	r0, r4
 80157d4:	7843      	ldrb	r3, [r0, #1]
 80157d6:	f013 0308 	ands.w	r3, r3, #8
 80157da:	d132      	bne.n	8015842 <_strtol_l.isra.0+0x8a>
 80157dc:	2c2d      	cmp	r4, #45	; 0x2d
 80157de:	d132      	bne.n	8015846 <_strtol_l.isra.0+0x8e>
 80157e0:	787c      	ldrb	r4, [r7, #1]
 80157e2:	1cbd      	adds	r5, r7, #2
 80157e4:	2201      	movs	r2, #1
 80157e6:	2e00      	cmp	r6, #0
 80157e8:	d05d      	beq.n	80158a6 <_strtol_l.isra.0+0xee>
 80157ea:	2e10      	cmp	r6, #16
 80157ec:	d109      	bne.n	8015802 <_strtol_l.isra.0+0x4a>
 80157ee:	2c30      	cmp	r4, #48	; 0x30
 80157f0:	d107      	bne.n	8015802 <_strtol_l.isra.0+0x4a>
 80157f2:	782b      	ldrb	r3, [r5, #0]
 80157f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80157f8:	2b58      	cmp	r3, #88	; 0x58
 80157fa:	d14f      	bne.n	801589c <_strtol_l.isra.0+0xe4>
 80157fc:	786c      	ldrb	r4, [r5, #1]
 80157fe:	2610      	movs	r6, #16
 8015800:	3502      	adds	r5, #2
 8015802:	2a00      	cmp	r2, #0
 8015804:	bf14      	ite	ne
 8015806:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801580a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801580e:	2700      	movs	r7, #0
 8015810:	fbb1 fcf6 	udiv	ip, r1, r6
 8015814:	4638      	mov	r0, r7
 8015816:	fb06 1e1c 	mls	lr, r6, ip, r1
 801581a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801581e:	2b09      	cmp	r3, #9
 8015820:	d817      	bhi.n	8015852 <_strtol_l.isra.0+0x9a>
 8015822:	461c      	mov	r4, r3
 8015824:	42a6      	cmp	r6, r4
 8015826:	dd23      	ble.n	8015870 <_strtol_l.isra.0+0xb8>
 8015828:	1c7b      	adds	r3, r7, #1
 801582a:	d007      	beq.n	801583c <_strtol_l.isra.0+0x84>
 801582c:	4584      	cmp	ip, r0
 801582e:	d31c      	bcc.n	801586a <_strtol_l.isra.0+0xb2>
 8015830:	d101      	bne.n	8015836 <_strtol_l.isra.0+0x7e>
 8015832:	45a6      	cmp	lr, r4
 8015834:	db19      	blt.n	801586a <_strtol_l.isra.0+0xb2>
 8015836:	fb00 4006 	mla	r0, r0, r6, r4
 801583a:	2701      	movs	r7, #1
 801583c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015840:	e7eb      	b.n	801581a <_strtol_l.isra.0+0x62>
 8015842:	462f      	mov	r7, r5
 8015844:	e7bf      	b.n	80157c6 <_strtol_l.isra.0+0xe>
 8015846:	2c2b      	cmp	r4, #43	; 0x2b
 8015848:	bf04      	itt	eq
 801584a:	1cbd      	addeq	r5, r7, #2
 801584c:	787c      	ldrbeq	r4, [r7, #1]
 801584e:	461a      	mov	r2, r3
 8015850:	e7c9      	b.n	80157e6 <_strtol_l.isra.0+0x2e>
 8015852:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015856:	2b19      	cmp	r3, #25
 8015858:	d801      	bhi.n	801585e <_strtol_l.isra.0+0xa6>
 801585a:	3c37      	subs	r4, #55	; 0x37
 801585c:	e7e2      	b.n	8015824 <_strtol_l.isra.0+0x6c>
 801585e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015862:	2b19      	cmp	r3, #25
 8015864:	d804      	bhi.n	8015870 <_strtol_l.isra.0+0xb8>
 8015866:	3c57      	subs	r4, #87	; 0x57
 8015868:	e7dc      	b.n	8015824 <_strtol_l.isra.0+0x6c>
 801586a:	f04f 37ff 	mov.w	r7, #4294967295
 801586e:	e7e5      	b.n	801583c <_strtol_l.isra.0+0x84>
 8015870:	1c7b      	adds	r3, r7, #1
 8015872:	d108      	bne.n	8015886 <_strtol_l.isra.0+0xce>
 8015874:	2322      	movs	r3, #34	; 0x22
 8015876:	f8c8 3000 	str.w	r3, [r8]
 801587a:	4608      	mov	r0, r1
 801587c:	f1ba 0f00 	cmp.w	sl, #0
 8015880:	d107      	bne.n	8015892 <_strtol_l.isra.0+0xda>
 8015882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015886:	b102      	cbz	r2, 801588a <_strtol_l.isra.0+0xd2>
 8015888:	4240      	negs	r0, r0
 801588a:	f1ba 0f00 	cmp.w	sl, #0
 801588e:	d0f8      	beq.n	8015882 <_strtol_l.isra.0+0xca>
 8015890:	b10f      	cbz	r7, 8015896 <_strtol_l.isra.0+0xde>
 8015892:	f105 39ff 	add.w	r9, r5, #4294967295
 8015896:	f8ca 9000 	str.w	r9, [sl]
 801589a:	e7f2      	b.n	8015882 <_strtol_l.isra.0+0xca>
 801589c:	2430      	movs	r4, #48	; 0x30
 801589e:	2e00      	cmp	r6, #0
 80158a0:	d1af      	bne.n	8015802 <_strtol_l.isra.0+0x4a>
 80158a2:	2608      	movs	r6, #8
 80158a4:	e7ad      	b.n	8015802 <_strtol_l.isra.0+0x4a>
 80158a6:	2c30      	cmp	r4, #48	; 0x30
 80158a8:	d0a3      	beq.n	80157f2 <_strtol_l.isra.0+0x3a>
 80158aa:	260a      	movs	r6, #10
 80158ac:	e7a9      	b.n	8015802 <_strtol_l.isra.0+0x4a>
	...

080158b0 <strtol>:
 80158b0:	4b08      	ldr	r3, [pc, #32]	; (80158d4 <strtol+0x24>)
 80158b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158b4:	681c      	ldr	r4, [r3, #0]
 80158b6:	4d08      	ldr	r5, [pc, #32]	; (80158d8 <strtol+0x28>)
 80158b8:	6a23      	ldr	r3, [r4, #32]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	bf08      	it	eq
 80158be:	462b      	moveq	r3, r5
 80158c0:	9300      	str	r3, [sp, #0]
 80158c2:	4613      	mov	r3, r2
 80158c4:	460a      	mov	r2, r1
 80158c6:	4601      	mov	r1, r0
 80158c8:	4620      	mov	r0, r4
 80158ca:	f7ff ff75 	bl	80157b8 <_strtol_l.isra.0>
 80158ce:	b003      	add	sp, #12
 80158d0:	bd30      	pop	{r4, r5, pc}
 80158d2:	bf00      	nop
 80158d4:	2000002c 	.word	0x2000002c
 80158d8:	20000090 	.word	0x20000090

080158dc <__swbuf_r>:
 80158dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158de:	460e      	mov	r6, r1
 80158e0:	4614      	mov	r4, r2
 80158e2:	4605      	mov	r5, r0
 80158e4:	b118      	cbz	r0, 80158ee <__swbuf_r+0x12>
 80158e6:	6983      	ldr	r3, [r0, #24]
 80158e8:	b90b      	cbnz	r3, 80158ee <__swbuf_r+0x12>
 80158ea:	f000 f9a7 	bl	8015c3c <__sinit>
 80158ee:	4b21      	ldr	r3, [pc, #132]	; (8015974 <__swbuf_r+0x98>)
 80158f0:	429c      	cmp	r4, r3
 80158f2:	d12a      	bne.n	801594a <__swbuf_r+0x6e>
 80158f4:	686c      	ldr	r4, [r5, #4]
 80158f6:	69a3      	ldr	r3, [r4, #24]
 80158f8:	60a3      	str	r3, [r4, #8]
 80158fa:	89a3      	ldrh	r3, [r4, #12]
 80158fc:	071a      	lsls	r2, r3, #28
 80158fe:	d52e      	bpl.n	801595e <__swbuf_r+0x82>
 8015900:	6923      	ldr	r3, [r4, #16]
 8015902:	b363      	cbz	r3, 801595e <__swbuf_r+0x82>
 8015904:	6923      	ldr	r3, [r4, #16]
 8015906:	6820      	ldr	r0, [r4, #0]
 8015908:	1ac0      	subs	r0, r0, r3
 801590a:	6963      	ldr	r3, [r4, #20]
 801590c:	b2f6      	uxtb	r6, r6
 801590e:	4283      	cmp	r3, r0
 8015910:	4637      	mov	r7, r6
 8015912:	dc04      	bgt.n	801591e <__swbuf_r+0x42>
 8015914:	4621      	mov	r1, r4
 8015916:	4628      	mov	r0, r5
 8015918:	f000 f926 	bl	8015b68 <_fflush_r>
 801591c:	bb28      	cbnz	r0, 801596a <__swbuf_r+0x8e>
 801591e:	68a3      	ldr	r3, [r4, #8]
 8015920:	3b01      	subs	r3, #1
 8015922:	60a3      	str	r3, [r4, #8]
 8015924:	6823      	ldr	r3, [r4, #0]
 8015926:	1c5a      	adds	r2, r3, #1
 8015928:	6022      	str	r2, [r4, #0]
 801592a:	701e      	strb	r6, [r3, #0]
 801592c:	6963      	ldr	r3, [r4, #20]
 801592e:	3001      	adds	r0, #1
 8015930:	4283      	cmp	r3, r0
 8015932:	d004      	beq.n	801593e <__swbuf_r+0x62>
 8015934:	89a3      	ldrh	r3, [r4, #12]
 8015936:	07db      	lsls	r3, r3, #31
 8015938:	d519      	bpl.n	801596e <__swbuf_r+0x92>
 801593a:	2e0a      	cmp	r6, #10
 801593c:	d117      	bne.n	801596e <__swbuf_r+0x92>
 801593e:	4621      	mov	r1, r4
 8015940:	4628      	mov	r0, r5
 8015942:	f000 f911 	bl	8015b68 <_fflush_r>
 8015946:	b190      	cbz	r0, 801596e <__swbuf_r+0x92>
 8015948:	e00f      	b.n	801596a <__swbuf_r+0x8e>
 801594a:	4b0b      	ldr	r3, [pc, #44]	; (8015978 <__swbuf_r+0x9c>)
 801594c:	429c      	cmp	r4, r3
 801594e:	d101      	bne.n	8015954 <__swbuf_r+0x78>
 8015950:	68ac      	ldr	r4, [r5, #8]
 8015952:	e7d0      	b.n	80158f6 <__swbuf_r+0x1a>
 8015954:	4b09      	ldr	r3, [pc, #36]	; (801597c <__swbuf_r+0xa0>)
 8015956:	429c      	cmp	r4, r3
 8015958:	bf08      	it	eq
 801595a:	68ec      	ldreq	r4, [r5, #12]
 801595c:	e7cb      	b.n	80158f6 <__swbuf_r+0x1a>
 801595e:	4621      	mov	r1, r4
 8015960:	4628      	mov	r0, r5
 8015962:	f000 f80d 	bl	8015980 <__swsetup_r>
 8015966:	2800      	cmp	r0, #0
 8015968:	d0cc      	beq.n	8015904 <__swbuf_r+0x28>
 801596a:	f04f 37ff 	mov.w	r7, #4294967295
 801596e:	4638      	mov	r0, r7
 8015970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015972:	bf00      	nop
 8015974:	08018e30 	.word	0x08018e30
 8015978:	08018e50 	.word	0x08018e50
 801597c:	08018e10 	.word	0x08018e10

08015980 <__swsetup_r>:
 8015980:	4b32      	ldr	r3, [pc, #200]	; (8015a4c <__swsetup_r+0xcc>)
 8015982:	b570      	push	{r4, r5, r6, lr}
 8015984:	681d      	ldr	r5, [r3, #0]
 8015986:	4606      	mov	r6, r0
 8015988:	460c      	mov	r4, r1
 801598a:	b125      	cbz	r5, 8015996 <__swsetup_r+0x16>
 801598c:	69ab      	ldr	r3, [r5, #24]
 801598e:	b913      	cbnz	r3, 8015996 <__swsetup_r+0x16>
 8015990:	4628      	mov	r0, r5
 8015992:	f000 f953 	bl	8015c3c <__sinit>
 8015996:	4b2e      	ldr	r3, [pc, #184]	; (8015a50 <__swsetup_r+0xd0>)
 8015998:	429c      	cmp	r4, r3
 801599a:	d10f      	bne.n	80159bc <__swsetup_r+0x3c>
 801599c:	686c      	ldr	r4, [r5, #4]
 801599e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159a2:	b29a      	uxth	r2, r3
 80159a4:	0715      	lsls	r5, r2, #28
 80159a6:	d42c      	bmi.n	8015a02 <__swsetup_r+0x82>
 80159a8:	06d0      	lsls	r0, r2, #27
 80159aa:	d411      	bmi.n	80159d0 <__swsetup_r+0x50>
 80159ac:	2209      	movs	r2, #9
 80159ae:	6032      	str	r2, [r6, #0]
 80159b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159b4:	81a3      	strh	r3, [r4, #12]
 80159b6:	f04f 30ff 	mov.w	r0, #4294967295
 80159ba:	e03e      	b.n	8015a3a <__swsetup_r+0xba>
 80159bc:	4b25      	ldr	r3, [pc, #148]	; (8015a54 <__swsetup_r+0xd4>)
 80159be:	429c      	cmp	r4, r3
 80159c0:	d101      	bne.n	80159c6 <__swsetup_r+0x46>
 80159c2:	68ac      	ldr	r4, [r5, #8]
 80159c4:	e7eb      	b.n	801599e <__swsetup_r+0x1e>
 80159c6:	4b24      	ldr	r3, [pc, #144]	; (8015a58 <__swsetup_r+0xd8>)
 80159c8:	429c      	cmp	r4, r3
 80159ca:	bf08      	it	eq
 80159cc:	68ec      	ldreq	r4, [r5, #12]
 80159ce:	e7e6      	b.n	801599e <__swsetup_r+0x1e>
 80159d0:	0751      	lsls	r1, r2, #29
 80159d2:	d512      	bpl.n	80159fa <__swsetup_r+0x7a>
 80159d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159d6:	b141      	cbz	r1, 80159ea <__swsetup_r+0x6a>
 80159d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159dc:	4299      	cmp	r1, r3
 80159de:	d002      	beq.n	80159e6 <__swsetup_r+0x66>
 80159e0:	4630      	mov	r0, r6
 80159e2:	f000 fa37 	bl	8015e54 <_free_r>
 80159e6:	2300      	movs	r3, #0
 80159e8:	6363      	str	r3, [r4, #52]	; 0x34
 80159ea:	89a3      	ldrh	r3, [r4, #12]
 80159ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80159f0:	81a3      	strh	r3, [r4, #12]
 80159f2:	2300      	movs	r3, #0
 80159f4:	6063      	str	r3, [r4, #4]
 80159f6:	6923      	ldr	r3, [r4, #16]
 80159f8:	6023      	str	r3, [r4, #0]
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	f043 0308 	orr.w	r3, r3, #8
 8015a00:	81a3      	strh	r3, [r4, #12]
 8015a02:	6923      	ldr	r3, [r4, #16]
 8015a04:	b94b      	cbnz	r3, 8015a1a <__swsetup_r+0x9a>
 8015a06:	89a3      	ldrh	r3, [r4, #12]
 8015a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a10:	d003      	beq.n	8015a1a <__swsetup_r+0x9a>
 8015a12:	4621      	mov	r1, r4
 8015a14:	4630      	mov	r0, r6
 8015a16:	f000 f9c3 	bl	8015da0 <__smakebuf_r>
 8015a1a:	89a2      	ldrh	r2, [r4, #12]
 8015a1c:	f012 0301 	ands.w	r3, r2, #1
 8015a20:	d00c      	beq.n	8015a3c <__swsetup_r+0xbc>
 8015a22:	2300      	movs	r3, #0
 8015a24:	60a3      	str	r3, [r4, #8]
 8015a26:	6963      	ldr	r3, [r4, #20]
 8015a28:	425b      	negs	r3, r3
 8015a2a:	61a3      	str	r3, [r4, #24]
 8015a2c:	6923      	ldr	r3, [r4, #16]
 8015a2e:	b953      	cbnz	r3, 8015a46 <__swsetup_r+0xc6>
 8015a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015a38:	d1ba      	bne.n	80159b0 <__swsetup_r+0x30>
 8015a3a:	bd70      	pop	{r4, r5, r6, pc}
 8015a3c:	0792      	lsls	r2, r2, #30
 8015a3e:	bf58      	it	pl
 8015a40:	6963      	ldrpl	r3, [r4, #20]
 8015a42:	60a3      	str	r3, [r4, #8]
 8015a44:	e7f2      	b.n	8015a2c <__swsetup_r+0xac>
 8015a46:	2000      	movs	r0, #0
 8015a48:	e7f7      	b.n	8015a3a <__swsetup_r+0xba>
 8015a4a:	bf00      	nop
 8015a4c:	2000002c 	.word	0x2000002c
 8015a50:	08018e30 	.word	0x08018e30
 8015a54:	08018e50 	.word	0x08018e50
 8015a58:	08018e10 	.word	0x08018e10

08015a5c <__sflush_r>:
 8015a5c:	898a      	ldrh	r2, [r1, #12]
 8015a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a62:	4605      	mov	r5, r0
 8015a64:	0710      	lsls	r0, r2, #28
 8015a66:	460c      	mov	r4, r1
 8015a68:	d458      	bmi.n	8015b1c <__sflush_r+0xc0>
 8015a6a:	684b      	ldr	r3, [r1, #4]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	dc05      	bgt.n	8015a7c <__sflush_r+0x20>
 8015a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	dc02      	bgt.n	8015a7c <__sflush_r+0x20>
 8015a76:	2000      	movs	r0, #0
 8015a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a7e:	2e00      	cmp	r6, #0
 8015a80:	d0f9      	beq.n	8015a76 <__sflush_r+0x1a>
 8015a82:	2300      	movs	r3, #0
 8015a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015a88:	682f      	ldr	r7, [r5, #0]
 8015a8a:	6a21      	ldr	r1, [r4, #32]
 8015a8c:	602b      	str	r3, [r5, #0]
 8015a8e:	d032      	beq.n	8015af6 <__sflush_r+0x9a>
 8015a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015a92:	89a3      	ldrh	r3, [r4, #12]
 8015a94:	075a      	lsls	r2, r3, #29
 8015a96:	d505      	bpl.n	8015aa4 <__sflush_r+0x48>
 8015a98:	6863      	ldr	r3, [r4, #4]
 8015a9a:	1ac0      	subs	r0, r0, r3
 8015a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a9e:	b10b      	cbz	r3, 8015aa4 <__sflush_r+0x48>
 8015aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015aa2:	1ac0      	subs	r0, r0, r3
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	4602      	mov	r2, r0
 8015aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015aaa:	6a21      	ldr	r1, [r4, #32]
 8015aac:	4628      	mov	r0, r5
 8015aae:	47b0      	blx	r6
 8015ab0:	1c43      	adds	r3, r0, #1
 8015ab2:	89a3      	ldrh	r3, [r4, #12]
 8015ab4:	d106      	bne.n	8015ac4 <__sflush_r+0x68>
 8015ab6:	6829      	ldr	r1, [r5, #0]
 8015ab8:	291d      	cmp	r1, #29
 8015aba:	d848      	bhi.n	8015b4e <__sflush_r+0xf2>
 8015abc:	4a29      	ldr	r2, [pc, #164]	; (8015b64 <__sflush_r+0x108>)
 8015abe:	40ca      	lsrs	r2, r1
 8015ac0:	07d6      	lsls	r6, r2, #31
 8015ac2:	d544      	bpl.n	8015b4e <__sflush_r+0xf2>
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	6062      	str	r2, [r4, #4]
 8015ac8:	04d9      	lsls	r1, r3, #19
 8015aca:	6922      	ldr	r2, [r4, #16]
 8015acc:	6022      	str	r2, [r4, #0]
 8015ace:	d504      	bpl.n	8015ada <__sflush_r+0x7e>
 8015ad0:	1c42      	adds	r2, r0, #1
 8015ad2:	d101      	bne.n	8015ad8 <__sflush_r+0x7c>
 8015ad4:	682b      	ldr	r3, [r5, #0]
 8015ad6:	b903      	cbnz	r3, 8015ada <__sflush_r+0x7e>
 8015ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8015ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015adc:	602f      	str	r7, [r5, #0]
 8015ade:	2900      	cmp	r1, #0
 8015ae0:	d0c9      	beq.n	8015a76 <__sflush_r+0x1a>
 8015ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ae6:	4299      	cmp	r1, r3
 8015ae8:	d002      	beq.n	8015af0 <__sflush_r+0x94>
 8015aea:	4628      	mov	r0, r5
 8015aec:	f000 f9b2 	bl	8015e54 <_free_r>
 8015af0:	2000      	movs	r0, #0
 8015af2:	6360      	str	r0, [r4, #52]	; 0x34
 8015af4:	e7c0      	b.n	8015a78 <__sflush_r+0x1c>
 8015af6:	2301      	movs	r3, #1
 8015af8:	4628      	mov	r0, r5
 8015afa:	47b0      	blx	r6
 8015afc:	1c41      	adds	r1, r0, #1
 8015afe:	d1c8      	bne.n	8015a92 <__sflush_r+0x36>
 8015b00:	682b      	ldr	r3, [r5, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d0c5      	beq.n	8015a92 <__sflush_r+0x36>
 8015b06:	2b1d      	cmp	r3, #29
 8015b08:	d001      	beq.n	8015b0e <__sflush_r+0xb2>
 8015b0a:	2b16      	cmp	r3, #22
 8015b0c:	d101      	bne.n	8015b12 <__sflush_r+0xb6>
 8015b0e:	602f      	str	r7, [r5, #0]
 8015b10:	e7b1      	b.n	8015a76 <__sflush_r+0x1a>
 8015b12:	89a3      	ldrh	r3, [r4, #12]
 8015b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b18:	81a3      	strh	r3, [r4, #12]
 8015b1a:	e7ad      	b.n	8015a78 <__sflush_r+0x1c>
 8015b1c:	690f      	ldr	r7, [r1, #16]
 8015b1e:	2f00      	cmp	r7, #0
 8015b20:	d0a9      	beq.n	8015a76 <__sflush_r+0x1a>
 8015b22:	0793      	lsls	r3, r2, #30
 8015b24:	680e      	ldr	r6, [r1, #0]
 8015b26:	bf08      	it	eq
 8015b28:	694b      	ldreq	r3, [r1, #20]
 8015b2a:	600f      	str	r7, [r1, #0]
 8015b2c:	bf18      	it	ne
 8015b2e:	2300      	movne	r3, #0
 8015b30:	eba6 0807 	sub.w	r8, r6, r7
 8015b34:	608b      	str	r3, [r1, #8]
 8015b36:	f1b8 0f00 	cmp.w	r8, #0
 8015b3a:	dd9c      	ble.n	8015a76 <__sflush_r+0x1a>
 8015b3c:	4643      	mov	r3, r8
 8015b3e:	463a      	mov	r2, r7
 8015b40:	6a21      	ldr	r1, [r4, #32]
 8015b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b44:	4628      	mov	r0, r5
 8015b46:	47b0      	blx	r6
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	dc06      	bgt.n	8015b5a <__sflush_r+0xfe>
 8015b4c:	89a3      	ldrh	r3, [r4, #12]
 8015b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b52:	81a3      	strh	r3, [r4, #12]
 8015b54:	f04f 30ff 	mov.w	r0, #4294967295
 8015b58:	e78e      	b.n	8015a78 <__sflush_r+0x1c>
 8015b5a:	4407      	add	r7, r0
 8015b5c:	eba8 0800 	sub.w	r8, r8, r0
 8015b60:	e7e9      	b.n	8015b36 <__sflush_r+0xda>
 8015b62:	bf00      	nop
 8015b64:	20400001 	.word	0x20400001

08015b68 <_fflush_r>:
 8015b68:	b538      	push	{r3, r4, r5, lr}
 8015b6a:	690b      	ldr	r3, [r1, #16]
 8015b6c:	4605      	mov	r5, r0
 8015b6e:	460c      	mov	r4, r1
 8015b70:	b1db      	cbz	r3, 8015baa <_fflush_r+0x42>
 8015b72:	b118      	cbz	r0, 8015b7c <_fflush_r+0x14>
 8015b74:	6983      	ldr	r3, [r0, #24]
 8015b76:	b90b      	cbnz	r3, 8015b7c <_fflush_r+0x14>
 8015b78:	f000 f860 	bl	8015c3c <__sinit>
 8015b7c:	4b0c      	ldr	r3, [pc, #48]	; (8015bb0 <_fflush_r+0x48>)
 8015b7e:	429c      	cmp	r4, r3
 8015b80:	d109      	bne.n	8015b96 <_fflush_r+0x2e>
 8015b82:	686c      	ldr	r4, [r5, #4]
 8015b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b88:	b17b      	cbz	r3, 8015baa <_fflush_r+0x42>
 8015b8a:	4621      	mov	r1, r4
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b92:	f7ff bf63 	b.w	8015a5c <__sflush_r>
 8015b96:	4b07      	ldr	r3, [pc, #28]	; (8015bb4 <_fflush_r+0x4c>)
 8015b98:	429c      	cmp	r4, r3
 8015b9a:	d101      	bne.n	8015ba0 <_fflush_r+0x38>
 8015b9c:	68ac      	ldr	r4, [r5, #8]
 8015b9e:	e7f1      	b.n	8015b84 <_fflush_r+0x1c>
 8015ba0:	4b05      	ldr	r3, [pc, #20]	; (8015bb8 <_fflush_r+0x50>)
 8015ba2:	429c      	cmp	r4, r3
 8015ba4:	bf08      	it	eq
 8015ba6:	68ec      	ldreq	r4, [r5, #12]
 8015ba8:	e7ec      	b.n	8015b84 <_fflush_r+0x1c>
 8015baa:	2000      	movs	r0, #0
 8015bac:	bd38      	pop	{r3, r4, r5, pc}
 8015bae:	bf00      	nop
 8015bb0:	08018e30 	.word	0x08018e30
 8015bb4:	08018e50 	.word	0x08018e50
 8015bb8:	08018e10 	.word	0x08018e10

08015bbc <std>:
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	b510      	push	{r4, lr}
 8015bc0:	4604      	mov	r4, r0
 8015bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8015bc6:	6083      	str	r3, [r0, #8]
 8015bc8:	8181      	strh	r1, [r0, #12]
 8015bca:	6643      	str	r3, [r0, #100]	; 0x64
 8015bcc:	81c2      	strh	r2, [r0, #14]
 8015bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015bd2:	6183      	str	r3, [r0, #24]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	2208      	movs	r2, #8
 8015bd8:	305c      	adds	r0, #92	; 0x5c
 8015bda:	f7ff fd31 	bl	8015640 <memset>
 8015bde:	4b05      	ldr	r3, [pc, #20]	; (8015bf4 <std+0x38>)
 8015be0:	6263      	str	r3, [r4, #36]	; 0x24
 8015be2:	4b05      	ldr	r3, [pc, #20]	; (8015bf8 <std+0x3c>)
 8015be4:	62a3      	str	r3, [r4, #40]	; 0x28
 8015be6:	4b05      	ldr	r3, [pc, #20]	; (8015bfc <std+0x40>)
 8015be8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015bea:	4b05      	ldr	r3, [pc, #20]	; (8015c00 <std+0x44>)
 8015bec:	6224      	str	r4, [r4, #32]
 8015bee:	6323      	str	r3, [r4, #48]	; 0x30
 8015bf0:	bd10      	pop	{r4, pc}
 8015bf2:	bf00      	nop
 8015bf4:	080167f9 	.word	0x080167f9
 8015bf8:	0801681b 	.word	0x0801681b
 8015bfc:	08016853 	.word	0x08016853
 8015c00:	08016877 	.word	0x08016877

08015c04 <_cleanup_r>:
 8015c04:	4901      	ldr	r1, [pc, #4]	; (8015c0c <_cleanup_r+0x8>)
 8015c06:	f000 b885 	b.w	8015d14 <_fwalk_reent>
 8015c0a:	bf00      	nop
 8015c0c:	08015b69 	.word	0x08015b69

08015c10 <__sfmoreglue>:
 8015c10:	b570      	push	{r4, r5, r6, lr}
 8015c12:	1e4a      	subs	r2, r1, #1
 8015c14:	2568      	movs	r5, #104	; 0x68
 8015c16:	4355      	muls	r5, r2
 8015c18:	460e      	mov	r6, r1
 8015c1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015c1e:	f000 f967 	bl	8015ef0 <_malloc_r>
 8015c22:	4604      	mov	r4, r0
 8015c24:	b140      	cbz	r0, 8015c38 <__sfmoreglue+0x28>
 8015c26:	2100      	movs	r1, #0
 8015c28:	e9c0 1600 	strd	r1, r6, [r0]
 8015c2c:	300c      	adds	r0, #12
 8015c2e:	60a0      	str	r0, [r4, #8]
 8015c30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015c34:	f7ff fd04 	bl	8015640 <memset>
 8015c38:	4620      	mov	r0, r4
 8015c3a:	bd70      	pop	{r4, r5, r6, pc}

08015c3c <__sinit>:
 8015c3c:	6983      	ldr	r3, [r0, #24]
 8015c3e:	b510      	push	{r4, lr}
 8015c40:	4604      	mov	r4, r0
 8015c42:	bb33      	cbnz	r3, 8015c92 <__sinit+0x56>
 8015c44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015c48:	6503      	str	r3, [r0, #80]	; 0x50
 8015c4a:	4b12      	ldr	r3, [pc, #72]	; (8015c94 <__sinit+0x58>)
 8015c4c:	4a12      	ldr	r2, [pc, #72]	; (8015c98 <__sinit+0x5c>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	6282      	str	r2, [r0, #40]	; 0x28
 8015c52:	4298      	cmp	r0, r3
 8015c54:	bf04      	itt	eq
 8015c56:	2301      	moveq	r3, #1
 8015c58:	6183      	streq	r3, [r0, #24]
 8015c5a:	f000 f81f 	bl	8015c9c <__sfp>
 8015c5e:	6060      	str	r0, [r4, #4]
 8015c60:	4620      	mov	r0, r4
 8015c62:	f000 f81b 	bl	8015c9c <__sfp>
 8015c66:	60a0      	str	r0, [r4, #8]
 8015c68:	4620      	mov	r0, r4
 8015c6a:	f000 f817 	bl	8015c9c <__sfp>
 8015c6e:	2200      	movs	r2, #0
 8015c70:	60e0      	str	r0, [r4, #12]
 8015c72:	2104      	movs	r1, #4
 8015c74:	6860      	ldr	r0, [r4, #4]
 8015c76:	f7ff ffa1 	bl	8015bbc <std>
 8015c7a:	2201      	movs	r2, #1
 8015c7c:	2109      	movs	r1, #9
 8015c7e:	68a0      	ldr	r0, [r4, #8]
 8015c80:	f7ff ff9c 	bl	8015bbc <std>
 8015c84:	2202      	movs	r2, #2
 8015c86:	2112      	movs	r1, #18
 8015c88:	68e0      	ldr	r0, [r4, #12]
 8015c8a:	f7ff ff97 	bl	8015bbc <std>
 8015c8e:	2301      	movs	r3, #1
 8015c90:	61a3      	str	r3, [r4, #24]
 8015c92:	bd10      	pop	{r4, pc}
 8015c94:	08018e0c 	.word	0x08018e0c
 8015c98:	08015c05 	.word	0x08015c05

08015c9c <__sfp>:
 8015c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c9e:	4b1b      	ldr	r3, [pc, #108]	; (8015d0c <__sfp+0x70>)
 8015ca0:	681e      	ldr	r6, [r3, #0]
 8015ca2:	69b3      	ldr	r3, [r6, #24]
 8015ca4:	4607      	mov	r7, r0
 8015ca6:	b913      	cbnz	r3, 8015cae <__sfp+0x12>
 8015ca8:	4630      	mov	r0, r6
 8015caa:	f7ff ffc7 	bl	8015c3c <__sinit>
 8015cae:	3648      	adds	r6, #72	; 0x48
 8015cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015cb4:	3b01      	subs	r3, #1
 8015cb6:	d503      	bpl.n	8015cc0 <__sfp+0x24>
 8015cb8:	6833      	ldr	r3, [r6, #0]
 8015cba:	b133      	cbz	r3, 8015cca <__sfp+0x2e>
 8015cbc:	6836      	ldr	r6, [r6, #0]
 8015cbe:	e7f7      	b.n	8015cb0 <__sfp+0x14>
 8015cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015cc4:	b16d      	cbz	r5, 8015ce2 <__sfp+0x46>
 8015cc6:	3468      	adds	r4, #104	; 0x68
 8015cc8:	e7f4      	b.n	8015cb4 <__sfp+0x18>
 8015cca:	2104      	movs	r1, #4
 8015ccc:	4638      	mov	r0, r7
 8015cce:	f7ff ff9f 	bl	8015c10 <__sfmoreglue>
 8015cd2:	6030      	str	r0, [r6, #0]
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	d1f1      	bne.n	8015cbc <__sfp+0x20>
 8015cd8:	230c      	movs	r3, #12
 8015cda:	603b      	str	r3, [r7, #0]
 8015cdc:	4604      	mov	r4, r0
 8015cde:	4620      	mov	r0, r4
 8015ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ce2:	4b0b      	ldr	r3, [pc, #44]	; (8015d10 <__sfp+0x74>)
 8015ce4:	6665      	str	r5, [r4, #100]	; 0x64
 8015ce6:	e9c4 5500 	strd	r5, r5, [r4]
 8015cea:	60a5      	str	r5, [r4, #8]
 8015cec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015cf0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015cf4:	2208      	movs	r2, #8
 8015cf6:	4629      	mov	r1, r5
 8015cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015cfc:	f7ff fca0 	bl	8015640 <memset>
 8015d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015d08:	e7e9      	b.n	8015cde <__sfp+0x42>
 8015d0a:	bf00      	nop
 8015d0c:	08018e0c 	.word	0x08018e0c
 8015d10:	ffff0001 	.word	0xffff0001

08015d14 <_fwalk_reent>:
 8015d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d18:	4680      	mov	r8, r0
 8015d1a:	4689      	mov	r9, r1
 8015d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015d20:	2600      	movs	r6, #0
 8015d22:	b914      	cbnz	r4, 8015d2a <_fwalk_reent+0x16>
 8015d24:	4630      	mov	r0, r6
 8015d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015d2e:	3f01      	subs	r7, #1
 8015d30:	d501      	bpl.n	8015d36 <_fwalk_reent+0x22>
 8015d32:	6824      	ldr	r4, [r4, #0]
 8015d34:	e7f5      	b.n	8015d22 <_fwalk_reent+0xe>
 8015d36:	89ab      	ldrh	r3, [r5, #12]
 8015d38:	2b01      	cmp	r3, #1
 8015d3a:	d907      	bls.n	8015d4c <_fwalk_reent+0x38>
 8015d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015d40:	3301      	adds	r3, #1
 8015d42:	d003      	beq.n	8015d4c <_fwalk_reent+0x38>
 8015d44:	4629      	mov	r1, r5
 8015d46:	4640      	mov	r0, r8
 8015d48:	47c8      	blx	r9
 8015d4a:	4306      	orrs	r6, r0
 8015d4c:	3568      	adds	r5, #104	; 0x68
 8015d4e:	e7ee      	b.n	8015d2e <_fwalk_reent+0x1a>

08015d50 <__locale_ctype_ptr_l>:
 8015d50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015d54:	4770      	bx	lr

08015d56 <__swhatbuf_r>:
 8015d56:	b570      	push	{r4, r5, r6, lr}
 8015d58:	460e      	mov	r6, r1
 8015d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d5e:	2900      	cmp	r1, #0
 8015d60:	b096      	sub	sp, #88	; 0x58
 8015d62:	4614      	mov	r4, r2
 8015d64:	461d      	mov	r5, r3
 8015d66:	da07      	bge.n	8015d78 <__swhatbuf_r+0x22>
 8015d68:	2300      	movs	r3, #0
 8015d6a:	602b      	str	r3, [r5, #0]
 8015d6c:	89b3      	ldrh	r3, [r6, #12]
 8015d6e:	061a      	lsls	r2, r3, #24
 8015d70:	d410      	bmi.n	8015d94 <__swhatbuf_r+0x3e>
 8015d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d76:	e00e      	b.n	8015d96 <__swhatbuf_r+0x40>
 8015d78:	466a      	mov	r2, sp
 8015d7a:	f000 fdaf 	bl	80168dc <_fstat_r>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	dbf2      	blt.n	8015d68 <__swhatbuf_r+0x12>
 8015d82:	9a01      	ldr	r2, [sp, #4]
 8015d84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d8c:	425a      	negs	r2, r3
 8015d8e:	415a      	adcs	r2, r3
 8015d90:	602a      	str	r2, [r5, #0]
 8015d92:	e7ee      	b.n	8015d72 <__swhatbuf_r+0x1c>
 8015d94:	2340      	movs	r3, #64	; 0x40
 8015d96:	2000      	movs	r0, #0
 8015d98:	6023      	str	r3, [r4, #0]
 8015d9a:	b016      	add	sp, #88	; 0x58
 8015d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015da0 <__smakebuf_r>:
 8015da0:	898b      	ldrh	r3, [r1, #12]
 8015da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015da4:	079d      	lsls	r5, r3, #30
 8015da6:	4606      	mov	r6, r0
 8015da8:	460c      	mov	r4, r1
 8015daa:	d507      	bpl.n	8015dbc <__smakebuf_r+0x1c>
 8015dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015db0:	6023      	str	r3, [r4, #0]
 8015db2:	6123      	str	r3, [r4, #16]
 8015db4:	2301      	movs	r3, #1
 8015db6:	6163      	str	r3, [r4, #20]
 8015db8:	b002      	add	sp, #8
 8015dba:	bd70      	pop	{r4, r5, r6, pc}
 8015dbc:	ab01      	add	r3, sp, #4
 8015dbe:	466a      	mov	r2, sp
 8015dc0:	f7ff ffc9 	bl	8015d56 <__swhatbuf_r>
 8015dc4:	9900      	ldr	r1, [sp, #0]
 8015dc6:	4605      	mov	r5, r0
 8015dc8:	4630      	mov	r0, r6
 8015dca:	f000 f891 	bl	8015ef0 <_malloc_r>
 8015dce:	b948      	cbnz	r0, 8015de4 <__smakebuf_r+0x44>
 8015dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dd4:	059a      	lsls	r2, r3, #22
 8015dd6:	d4ef      	bmi.n	8015db8 <__smakebuf_r+0x18>
 8015dd8:	f023 0303 	bic.w	r3, r3, #3
 8015ddc:	f043 0302 	orr.w	r3, r3, #2
 8015de0:	81a3      	strh	r3, [r4, #12]
 8015de2:	e7e3      	b.n	8015dac <__smakebuf_r+0xc>
 8015de4:	4b0d      	ldr	r3, [pc, #52]	; (8015e1c <__smakebuf_r+0x7c>)
 8015de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8015de8:	89a3      	ldrh	r3, [r4, #12]
 8015dea:	6020      	str	r0, [r4, #0]
 8015dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015df0:	81a3      	strh	r3, [r4, #12]
 8015df2:	9b00      	ldr	r3, [sp, #0]
 8015df4:	6163      	str	r3, [r4, #20]
 8015df6:	9b01      	ldr	r3, [sp, #4]
 8015df8:	6120      	str	r0, [r4, #16]
 8015dfa:	b15b      	cbz	r3, 8015e14 <__smakebuf_r+0x74>
 8015dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e00:	4630      	mov	r0, r6
 8015e02:	f000 fd7d 	bl	8016900 <_isatty_r>
 8015e06:	b128      	cbz	r0, 8015e14 <__smakebuf_r+0x74>
 8015e08:	89a3      	ldrh	r3, [r4, #12]
 8015e0a:	f023 0303 	bic.w	r3, r3, #3
 8015e0e:	f043 0301 	orr.w	r3, r3, #1
 8015e12:	81a3      	strh	r3, [r4, #12]
 8015e14:	89a3      	ldrh	r3, [r4, #12]
 8015e16:	431d      	orrs	r5, r3
 8015e18:	81a5      	strh	r5, [r4, #12]
 8015e1a:	e7cd      	b.n	8015db8 <__smakebuf_r+0x18>
 8015e1c:	08015c05 	.word	0x08015c05

08015e20 <malloc>:
 8015e20:	4b02      	ldr	r3, [pc, #8]	; (8015e2c <malloc+0xc>)
 8015e22:	4601      	mov	r1, r0
 8015e24:	6818      	ldr	r0, [r3, #0]
 8015e26:	f000 b863 	b.w	8015ef0 <_malloc_r>
 8015e2a:	bf00      	nop
 8015e2c:	2000002c 	.word	0x2000002c

08015e30 <__ascii_mbtowc>:
 8015e30:	b082      	sub	sp, #8
 8015e32:	b901      	cbnz	r1, 8015e36 <__ascii_mbtowc+0x6>
 8015e34:	a901      	add	r1, sp, #4
 8015e36:	b142      	cbz	r2, 8015e4a <__ascii_mbtowc+0x1a>
 8015e38:	b14b      	cbz	r3, 8015e4e <__ascii_mbtowc+0x1e>
 8015e3a:	7813      	ldrb	r3, [r2, #0]
 8015e3c:	600b      	str	r3, [r1, #0]
 8015e3e:	7812      	ldrb	r2, [r2, #0]
 8015e40:	1c10      	adds	r0, r2, #0
 8015e42:	bf18      	it	ne
 8015e44:	2001      	movne	r0, #1
 8015e46:	b002      	add	sp, #8
 8015e48:	4770      	bx	lr
 8015e4a:	4610      	mov	r0, r2
 8015e4c:	e7fb      	b.n	8015e46 <__ascii_mbtowc+0x16>
 8015e4e:	f06f 0001 	mvn.w	r0, #1
 8015e52:	e7f8      	b.n	8015e46 <__ascii_mbtowc+0x16>

08015e54 <_free_r>:
 8015e54:	b538      	push	{r3, r4, r5, lr}
 8015e56:	4605      	mov	r5, r0
 8015e58:	2900      	cmp	r1, #0
 8015e5a:	d045      	beq.n	8015ee8 <_free_r+0x94>
 8015e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e60:	1f0c      	subs	r4, r1, #4
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	bfb8      	it	lt
 8015e66:	18e4      	addlt	r4, r4, r3
 8015e68:	f000 fd85 	bl	8016976 <__malloc_lock>
 8015e6c:	4a1f      	ldr	r2, [pc, #124]	; (8015eec <_free_r+0x98>)
 8015e6e:	6813      	ldr	r3, [r2, #0]
 8015e70:	4610      	mov	r0, r2
 8015e72:	b933      	cbnz	r3, 8015e82 <_free_r+0x2e>
 8015e74:	6063      	str	r3, [r4, #4]
 8015e76:	6014      	str	r4, [r2, #0]
 8015e78:	4628      	mov	r0, r5
 8015e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e7e:	f000 bd7b 	b.w	8016978 <__malloc_unlock>
 8015e82:	42a3      	cmp	r3, r4
 8015e84:	d90c      	bls.n	8015ea0 <_free_r+0x4c>
 8015e86:	6821      	ldr	r1, [r4, #0]
 8015e88:	1862      	adds	r2, r4, r1
 8015e8a:	4293      	cmp	r3, r2
 8015e8c:	bf04      	itt	eq
 8015e8e:	681a      	ldreq	r2, [r3, #0]
 8015e90:	685b      	ldreq	r3, [r3, #4]
 8015e92:	6063      	str	r3, [r4, #4]
 8015e94:	bf04      	itt	eq
 8015e96:	1852      	addeq	r2, r2, r1
 8015e98:	6022      	streq	r2, [r4, #0]
 8015e9a:	6004      	str	r4, [r0, #0]
 8015e9c:	e7ec      	b.n	8015e78 <_free_r+0x24>
 8015e9e:	4613      	mov	r3, r2
 8015ea0:	685a      	ldr	r2, [r3, #4]
 8015ea2:	b10a      	cbz	r2, 8015ea8 <_free_r+0x54>
 8015ea4:	42a2      	cmp	r2, r4
 8015ea6:	d9fa      	bls.n	8015e9e <_free_r+0x4a>
 8015ea8:	6819      	ldr	r1, [r3, #0]
 8015eaa:	1858      	adds	r0, r3, r1
 8015eac:	42a0      	cmp	r0, r4
 8015eae:	d10b      	bne.n	8015ec8 <_free_r+0x74>
 8015eb0:	6820      	ldr	r0, [r4, #0]
 8015eb2:	4401      	add	r1, r0
 8015eb4:	1858      	adds	r0, r3, r1
 8015eb6:	4282      	cmp	r2, r0
 8015eb8:	6019      	str	r1, [r3, #0]
 8015eba:	d1dd      	bne.n	8015e78 <_free_r+0x24>
 8015ebc:	6810      	ldr	r0, [r2, #0]
 8015ebe:	6852      	ldr	r2, [r2, #4]
 8015ec0:	605a      	str	r2, [r3, #4]
 8015ec2:	4401      	add	r1, r0
 8015ec4:	6019      	str	r1, [r3, #0]
 8015ec6:	e7d7      	b.n	8015e78 <_free_r+0x24>
 8015ec8:	d902      	bls.n	8015ed0 <_free_r+0x7c>
 8015eca:	230c      	movs	r3, #12
 8015ecc:	602b      	str	r3, [r5, #0]
 8015ece:	e7d3      	b.n	8015e78 <_free_r+0x24>
 8015ed0:	6820      	ldr	r0, [r4, #0]
 8015ed2:	1821      	adds	r1, r4, r0
 8015ed4:	428a      	cmp	r2, r1
 8015ed6:	bf04      	itt	eq
 8015ed8:	6811      	ldreq	r1, [r2, #0]
 8015eda:	6852      	ldreq	r2, [r2, #4]
 8015edc:	6062      	str	r2, [r4, #4]
 8015ede:	bf04      	itt	eq
 8015ee0:	1809      	addeq	r1, r1, r0
 8015ee2:	6021      	streq	r1, [r4, #0]
 8015ee4:	605c      	str	r4, [r3, #4]
 8015ee6:	e7c7      	b.n	8015e78 <_free_r+0x24>
 8015ee8:	bd38      	pop	{r3, r4, r5, pc}
 8015eea:	bf00      	nop
 8015eec:	200060d4 	.word	0x200060d4

08015ef0 <_malloc_r>:
 8015ef0:	b570      	push	{r4, r5, r6, lr}
 8015ef2:	1ccd      	adds	r5, r1, #3
 8015ef4:	f025 0503 	bic.w	r5, r5, #3
 8015ef8:	3508      	adds	r5, #8
 8015efa:	2d0c      	cmp	r5, #12
 8015efc:	bf38      	it	cc
 8015efe:	250c      	movcc	r5, #12
 8015f00:	2d00      	cmp	r5, #0
 8015f02:	4606      	mov	r6, r0
 8015f04:	db01      	blt.n	8015f0a <_malloc_r+0x1a>
 8015f06:	42a9      	cmp	r1, r5
 8015f08:	d903      	bls.n	8015f12 <_malloc_r+0x22>
 8015f0a:	230c      	movs	r3, #12
 8015f0c:	6033      	str	r3, [r6, #0]
 8015f0e:	2000      	movs	r0, #0
 8015f10:	bd70      	pop	{r4, r5, r6, pc}
 8015f12:	f000 fd30 	bl	8016976 <__malloc_lock>
 8015f16:	4a21      	ldr	r2, [pc, #132]	; (8015f9c <_malloc_r+0xac>)
 8015f18:	6814      	ldr	r4, [r2, #0]
 8015f1a:	4621      	mov	r1, r4
 8015f1c:	b991      	cbnz	r1, 8015f44 <_malloc_r+0x54>
 8015f1e:	4c20      	ldr	r4, [pc, #128]	; (8015fa0 <_malloc_r+0xb0>)
 8015f20:	6823      	ldr	r3, [r4, #0]
 8015f22:	b91b      	cbnz	r3, 8015f2c <_malloc_r+0x3c>
 8015f24:	4630      	mov	r0, r6
 8015f26:	f000 fc57 	bl	80167d8 <_sbrk_r>
 8015f2a:	6020      	str	r0, [r4, #0]
 8015f2c:	4629      	mov	r1, r5
 8015f2e:	4630      	mov	r0, r6
 8015f30:	f000 fc52 	bl	80167d8 <_sbrk_r>
 8015f34:	1c43      	adds	r3, r0, #1
 8015f36:	d124      	bne.n	8015f82 <_malloc_r+0x92>
 8015f38:	230c      	movs	r3, #12
 8015f3a:	6033      	str	r3, [r6, #0]
 8015f3c:	4630      	mov	r0, r6
 8015f3e:	f000 fd1b 	bl	8016978 <__malloc_unlock>
 8015f42:	e7e4      	b.n	8015f0e <_malloc_r+0x1e>
 8015f44:	680b      	ldr	r3, [r1, #0]
 8015f46:	1b5b      	subs	r3, r3, r5
 8015f48:	d418      	bmi.n	8015f7c <_malloc_r+0x8c>
 8015f4a:	2b0b      	cmp	r3, #11
 8015f4c:	d90f      	bls.n	8015f6e <_malloc_r+0x7e>
 8015f4e:	600b      	str	r3, [r1, #0]
 8015f50:	50cd      	str	r5, [r1, r3]
 8015f52:	18cc      	adds	r4, r1, r3
 8015f54:	4630      	mov	r0, r6
 8015f56:	f000 fd0f 	bl	8016978 <__malloc_unlock>
 8015f5a:	f104 000b 	add.w	r0, r4, #11
 8015f5e:	1d23      	adds	r3, r4, #4
 8015f60:	f020 0007 	bic.w	r0, r0, #7
 8015f64:	1ac3      	subs	r3, r0, r3
 8015f66:	d0d3      	beq.n	8015f10 <_malloc_r+0x20>
 8015f68:	425a      	negs	r2, r3
 8015f6a:	50e2      	str	r2, [r4, r3]
 8015f6c:	e7d0      	b.n	8015f10 <_malloc_r+0x20>
 8015f6e:	428c      	cmp	r4, r1
 8015f70:	684b      	ldr	r3, [r1, #4]
 8015f72:	bf16      	itet	ne
 8015f74:	6063      	strne	r3, [r4, #4]
 8015f76:	6013      	streq	r3, [r2, #0]
 8015f78:	460c      	movne	r4, r1
 8015f7a:	e7eb      	b.n	8015f54 <_malloc_r+0x64>
 8015f7c:	460c      	mov	r4, r1
 8015f7e:	6849      	ldr	r1, [r1, #4]
 8015f80:	e7cc      	b.n	8015f1c <_malloc_r+0x2c>
 8015f82:	1cc4      	adds	r4, r0, #3
 8015f84:	f024 0403 	bic.w	r4, r4, #3
 8015f88:	42a0      	cmp	r0, r4
 8015f8a:	d005      	beq.n	8015f98 <_malloc_r+0xa8>
 8015f8c:	1a21      	subs	r1, r4, r0
 8015f8e:	4630      	mov	r0, r6
 8015f90:	f000 fc22 	bl	80167d8 <_sbrk_r>
 8015f94:	3001      	adds	r0, #1
 8015f96:	d0cf      	beq.n	8015f38 <_malloc_r+0x48>
 8015f98:	6025      	str	r5, [r4, #0]
 8015f9a:	e7db      	b.n	8015f54 <_malloc_r+0x64>
 8015f9c:	200060d4 	.word	0x200060d4
 8015fa0:	200060d8 	.word	0x200060d8

08015fa4 <__ssputs_r>:
 8015fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fa8:	688e      	ldr	r6, [r1, #8]
 8015faa:	429e      	cmp	r6, r3
 8015fac:	4682      	mov	sl, r0
 8015fae:	460c      	mov	r4, r1
 8015fb0:	4690      	mov	r8, r2
 8015fb2:	4699      	mov	r9, r3
 8015fb4:	d837      	bhi.n	8016026 <__ssputs_r+0x82>
 8015fb6:	898a      	ldrh	r2, [r1, #12]
 8015fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015fbc:	d031      	beq.n	8016022 <__ssputs_r+0x7e>
 8015fbe:	6825      	ldr	r5, [r4, #0]
 8015fc0:	6909      	ldr	r1, [r1, #16]
 8015fc2:	1a6f      	subs	r7, r5, r1
 8015fc4:	6965      	ldr	r5, [r4, #20]
 8015fc6:	2302      	movs	r3, #2
 8015fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015fcc:	fb95 f5f3 	sdiv	r5, r5, r3
 8015fd0:	f109 0301 	add.w	r3, r9, #1
 8015fd4:	443b      	add	r3, r7
 8015fd6:	429d      	cmp	r5, r3
 8015fd8:	bf38      	it	cc
 8015fda:	461d      	movcc	r5, r3
 8015fdc:	0553      	lsls	r3, r2, #21
 8015fde:	d530      	bpl.n	8016042 <__ssputs_r+0x9e>
 8015fe0:	4629      	mov	r1, r5
 8015fe2:	f7ff ff85 	bl	8015ef0 <_malloc_r>
 8015fe6:	4606      	mov	r6, r0
 8015fe8:	b950      	cbnz	r0, 8016000 <__ssputs_r+0x5c>
 8015fea:	230c      	movs	r3, #12
 8015fec:	f8ca 3000 	str.w	r3, [sl]
 8015ff0:	89a3      	ldrh	r3, [r4, #12]
 8015ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ff6:	81a3      	strh	r3, [r4, #12]
 8015ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016000:	463a      	mov	r2, r7
 8016002:	6921      	ldr	r1, [r4, #16]
 8016004:	f7ff fb11 	bl	801562a <memcpy>
 8016008:	89a3      	ldrh	r3, [r4, #12]
 801600a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801600e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016012:	81a3      	strh	r3, [r4, #12]
 8016014:	6126      	str	r6, [r4, #16]
 8016016:	6165      	str	r5, [r4, #20]
 8016018:	443e      	add	r6, r7
 801601a:	1bed      	subs	r5, r5, r7
 801601c:	6026      	str	r6, [r4, #0]
 801601e:	60a5      	str	r5, [r4, #8]
 8016020:	464e      	mov	r6, r9
 8016022:	454e      	cmp	r6, r9
 8016024:	d900      	bls.n	8016028 <__ssputs_r+0x84>
 8016026:	464e      	mov	r6, r9
 8016028:	4632      	mov	r2, r6
 801602a:	4641      	mov	r1, r8
 801602c:	6820      	ldr	r0, [r4, #0]
 801602e:	f000 fc89 	bl	8016944 <memmove>
 8016032:	68a3      	ldr	r3, [r4, #8]
 8016034:	1b9b      	subs	r3, r3, r6
 8016036:	60a3      	str	r3, [r4, #8]
 8016038:	6823      	ldr	r3, [r4, #0]
 801603a:	441e      	add	r6, r3
 801603c:	6026      	str	r6, [r4, #0]
 801603e:	2000      	movs	r0, #0
 8016040:	e7dc      	b.n	8015ffc <__ssputs_r+0x58>
 8016042:	462a      	mov	r2, r5
 8016044:	f000 fc99 	bl	801697a <_realloc_r>
 8016048:	4606      	mov	r6, r0
 801604a:	2800      	cmp	r0, #0
 801604c:	d1e2      	bne.n	8016014 <__ssputs_r+0x70>
 801604e:	6921      	ldr	r1, [r4, #16]
 8016050:	4650      	mov	r0, sl
 8016052:	f7ff feff 	bl	8015e54 <_free_r>
 8016056:	e7c8      	b.n	8015fea <__ssputs_r+0x46>

08016058 <_svfiprintf_r>:
 8016058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	461d      	mov	r5, r3
 801605e:	898b      	ldrh	r3, [r1, #12]
 8016060:	061f      	lsls	r7, r3, #24
 8016062:	b09d      	sub	sp, #116	; 0x74
 8016064:	4680      	mov	r8, r0
 8016066:	460c      	mov	r4, r1
 8016068:	4616      	mov	r6, r2
 801606a:	d50f      	bpl.n	801608c <_svfiprintf_r+0x34>
 801606c:	690b      	ldr	r3, [r1, #16]
 801606e:	b96b      	cbnz	r3, 801608c <_svfiprintf_r+0x34>
 8016070:	2140      	movs	r1, #64	; 0x40
 8016072:	f7ff ff3d 	bl	8015ef0 <_malloc_r>
 8016076:	6020      	str	r0, [r4, #0]
 8016078:	6120      	str	r0, [r4, #16]
 801607a:	b928      	cbnz	r0, 8016088 <_svfiprintf_r+0x30>
 801607c:	230c      	movs	r3, #12
 801607e:	f8c8 3000 	str.w	r3, [r8]
 8016082:	f04f 30ff 	mov.w	r0, #4294967295
 8016086:	e0c8      	b.n	801621a <_svfiprintf_r+0x1c2>
 8016088:	2340      	movs	r3, #64	; 0x40
 801608a:	6163      	str	r3, [r4, #20]
 801608c:	2300      	movs	r3, #0
 801608e:	9309      	str	r3, [sp, #36]	; 0x24
 8016090:	2320      	movs	r3, #32
 8016092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016096:	2330      	movs	r3, #48	; 0x30
 8016098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801609c:	9503      	str	r5, [sp, #12]
 801609e:	f04f 0b01 	mov.w	fp, #1
 80160a2:	4637      	mov	r7, r6
 80160a4:	463d      	mov	r5, r7
 80160a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80160aa:	b10b      	cbz	r3, 80160b0 <_svfiprintf_r+0x58>
 80160ac:	2b25      	cmp	r3, #37	; 0x25
 80160ae:	d13e      	bne.n	801612e <_svfiprintf_r+0xd6>
 80160b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80160b4:	d00b      	beq.n	80160ce <_svfiprintf_r+0x76>
 80160b6:	4653      	mov	r3, sl
 80160b8:	4632      	mov	r2, r6
 80160ba:	4621      	mov	r1, r4
 80160bc:	4640      	mov	r0, r8
 80160be:	f7ff ff71 	bl	8015fa4 <__ssputs_r>
 80160c2:	3001      	adds	r0, #1
 80160c4:	f000 80a4 	beq.w	8016210 <_svfiprintf_r+0x1b8>
 80160c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160ca:	4453      	add	r3, sl
 80160cc:	9309      	str	r3, [sp, #36]	; 0x24
 80160ce:	783b      	ldrb	r3, [r7, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	f000 809d 	beq.w	8016210 <_svfiprintf_r+0x1b8>
 80160d6:	2300      	movs	r3, #0
 80160d8:	f04f 32ff 	mov.w	r2, #4294967295
 80160dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80160e0:	9304      	str	r3, [sp, #16]
 80160e2:	9307      	str	r3, [sp, #28]
 80160e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80160e8:	931a      	str	r3, [sp, #104]	; 0x68
 80160ea:	462f      	mov	r7, r5
 80160ec:	2205      	movs	r2, #5
 80160ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80160f2:	4850      	ldr	r0, [pc, #320]	; (8016234 <_svfiprintf_r+0x1dc>)
 80160f4:	f7ea f874 	bl	80001e0 <memchr>
 80160f8:	9b04      	ldr	r3, [sp, #16]
 80160fa:	b9d0      	cbnz	r0, 8016132 <_svfiprintf_r+0xda>
 80160fc:	06d9      	lsls	r1, r3, #27
 80160fe:	bf44      	itt	mi
 8016100:	2220      	movmi	r2, #32
 8016102:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016106:	071a      	lsls	r2, r3, #28
 8016108:	bf44      	itt	mi
 801610a:	222b      	movmi	r2, #43	; 0x2b
 801610c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016110:	782a      	ldrb	r2, [r5, #0]
 8016112:	2a2a      	cmp	r2, #42	; 0x2a
 8016114:	d015      	beq.n	8016142 <_svfiprintf_r+0xea>
 8016116:	9a07      	ldr	r2, [sp, #28]
 8016118:	462f      	mov	r7, r5
 801611a:	2000      	movs	r0, #0
 801611c:	250a      	movs	r5, #10
 801611e:	4639      	mov	r1, r7
 8016120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016124:	3b30      	subs	r3, #48	; 0x30
 8016126:	2b09      	cmp	r3, #9
 8016128:	d94d      	bls.n	80161c6 <_svfiprintf_r+0x16e>
 801612a:	b1b8      	cbz	r0, 801615c <_svfiprintf_r+0x104>
 801612c:	e00f      	b.n	801614e <_svfiprintf_r+0xf6>
 801612e:	462f      	mov	r7, r5
 8016130:	e7b8      	b.n	80160a4 <_svfiprintf_r+0x4c>
 8016132:	4a40      	ldr	r2, [pc, #256]	; (8016234 <_svfiprintf_r+0x1dc>)
 8016134:	1a80      	subs	r0, r0, r2
 8016136:	fa0b f000 	lsl.w	r0, fp, r0
 801613a:	4318      	orrs	r0, r3
 801613c:	9004      	str	r0, [sp, #16]
 801613e:	463d      	mov	r5, r7
 8016140:	e7d3      	b.n	80160ea <_svfiprintf_r+0x92>
 8016142:	9a03      	ldr	r2, [sp, #12]
 8016144:	1d11      	adds	r1, r2, #4
 8016146:	6812      	ldr	r2, [r2, #0]
 8016148:	9103      	str	r1, [sp, #12]
 801614a:	2a00      	cmp	r2, #0
 801614c:	db01      	blt.n	8016152 <_svfiprintf_r+0xfa>
 801614e:	9207      	str	r2, [sp, #28]
 8016150:	e004      	b.n	801615c <_svfiprintf_r+0x104>
 8016152:	4252      	negs	r2, r2
 8016154:	f043 0302 	orr.w	r3, r3, #2
 8016158:	9207      	str	r2, [sp, #28]
 801615a:	9304      	str	r3, [sp, #16]
 801615c:	783b      	ldrb	r3, [r7, #0]
 801615e:	2b2e      	cmp	r3, #46	; 0x2e
 8016160:	d10c      	bne.n	801617c <_svfiprintf_r+0x124>
 8016162:	787b      	ldrb	r3, [r7, #1]
 8016164:	2b2a      	cmp	r3, #42	; 0x2a
 8016166:	d133      	bne.n	80161d0 <_svfiprintf_r+0x178>
 8016168:	9b03      	ldr	r3, [sp, #12]
 801616a:	1d1a      	adds	r2, r3, #4
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	9203      	str	r2, [sp, #12]
 8016170:	2b00      	cmp	r3, #0
 8016172:	bfb8      	it	lt
 8016174:	f04f 33ff 	movlt.w	r3, #4294967295
 8016178:	3702      	adds	r7, #2
 801617a:	9305      	str	r3, [sp, #20]
 801617c:	4d2e      	ldr	r5, [pc, #184]	; (8016238 <_svfiprintf_r+0x1e0>)
 801617e:	7839      	ldrb	r1, [r7, #0]
 8016180:	2203      	movs	r2, #3
 8016182:	4628      	mov	r0, r5
 8016184:	f7ea f82c 	bl	80001e0 <memchr>
 8016188:	b138      	cbz	r0, 801619a <_svfiprintf_r+0x142>
 801618a:	2340      	movs	r3, #64	; 0x40
 801618c:	1b40      	subs	r0, r0, r5
 801618e:	fa03 f000 	lsl.w	r0, r3, r0
 8016192:	9b04      	ldr	r3, [sp, #16]
 8016194:	4303      	orrs	r3, r0
 8016196:	3701      	adds	r7, #1
 8016198:	9304      	str	r3, [sp, #16]
 801619a:	7839      	ldrb	r1, [r7, #0]
 801619c:	4827      	ldr	r0, [pc, #156]	; (801623c <_svfiprintf_r+0x1e4>)
 801619e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161a2:	2206      	movs	r2, #6
 80161a4:	1c7e      	adds	r6, r7, #1
 80161a6:	f7ea f81b 	bl	80001e0 <memchr>
 80161aa:	2800      	cmp	r0, #0
 80161ac:	d038      	beq.n	8016220 <_svfiprintf_r+0x1c8>
 80161ae:	4b24      	ldr	r3, [pc, #144]	; (8016240 <_svfiprintf_r+0x1e8>)
 80161b0:	bb13      	cbnz	r3, 80161f8 <_svfiprintf_r+0x1a0>
 80161b2:	9b03      	ldr	r3, [sp, #12]
 80161b4:	3307      	adds	r3, #7
 80161b6:	f023 0307 	bic.w	r3, r3, #7
 80161ba:	3308      	adds	r3, #8
 80161bc:	9303      	str	r3, [sp, #12]
 80161be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161c0:	444b      	add	r3, r9
 80161c2:	9309      	str	r3, [sp, #36]	; 0x24
 80161c4:	e76d      	b.n	80160a2 <_svfiprintf_r+0x4a>
 80161c6:	fb05 3202 	mla	r2, r5, r2, r3
 80161ca:	2001      	movs	r0, #1
 80161cc:	460f      	mov	r7, r1
 80161ce:	e7a6      	b.n	801611e <_svfiprintf_r+0xc6>
 80161d0:	2300      	movs	r3, #0
 80161d2:	3701      	adds	r7, #1
 80161d4:	9305      	str	r3, [sp, #20]
 80161d6:	4619      	mov	r1, r3
 80161d8:	250a      	movs	r5, #10
 80161da:	4638      	mov	r0, r7
 80161dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161e0:	3a30      	subs	r2, #48	; 0x30
 80161e2:	2a09      	cmp	r2, #9
 80161e4:	d903      	bls.n	80161ee <_svfiprintf_r+0x196>
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d0c8      	beq.n	801617c <_svfiprintf_r+0x124>
 80161ea:	9105      	str	r1, [sp, #20]
 80161ec:	e7c6      	b.n	801617c <_svfiprintf_r+0x124>
 80161ee:	fb05 2101 	mla	r1, r5, r1, r2
 80161f2:	2301      	movs	r3, #1
 80161f4:	4607      	mov	r7, r0
 80161f6:	e7f0      	b.n	80161da <_svfiprintf_r+0x182>
 80161f8:	ab03      	add	r3, sp, #12
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	4622      	mov	r2, r4
 80161fe:	4b11      	ldr	r3, [pc, #68]	; (8016244 <_svfiprintf_r+0x1ec>)
 8016200:	a904      	add	r1, sp, #16
 8016202:	4640      	mov	r0, r8
 8016204:	f3af 8000 	nop.w
 8016208:	f1b0 3fff 	cmp.w	r0, #4294967295
 801620c:	4681      	mov	r9, r0
 801620e:	d1d6      	bne.n	80161be <_svfiprintf_r+0x166>
 8016210:	89a3      	ldrh	r3, [r4, #12]
 8016212:	065b      	lsls	r3, r3, #25
 8016214:	f53f af35 	bmi.w	8016082 <_svfiprintf_r+0x2a>
 8016218:	9809      	ldr	r0, [sp, #36]	; 0x24
 801621a:	b01d      	add	sp, #116	; 0x74
 801621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016220:	ab03      	add	r3, sp, #12
 8016222:	9300      	str	r3, [sp, #0]
 8016224:	4622      	mov	r2, r4
 8016226:	4b07      	ldr	r3, [pc, #28]	; (8016244 <_svfiprintf_r+0x1ec>)
 8016228:	a904      	add	r1, sp, #16
 801622a:	4640      	mov	r0, r8
 801622c:	f000 f9c2 	bl	80165b4 <_printf_i>
 8016230:	e7ea      	b.n	8016208 <_svfiprintf_r+0x1b0>
 8016232:	bf00      	nop
 8016234:	08018e7a 	.word	0x08018e7a
 8016238:	08018e80 	.word	0x08018e80
 801623c:	08018e84 	.word	0x08018e84
 8016240:	00000000 	.word	0x00000000
 8016244:	08015fa5 	.word	0x08015fa5

08016248 <__sfputc_r>:
 8016248:	6893      	ldr	r3, [r2, #8]
 801624a:	3b01      	subs	r3, #1
 801624c:	2b00      	cmp	r3, #0
 801624e:	b410      	push	{r4}
 8016250:	6093      	str	r3, [r2, #8]
 8016252:	da08      	bge.n	8016266 <__sfputc_r+0x1e>
 8016254:	6994      	ldr	r4, [r2, #24]
 8016256:	42a3      	cmp	r3, r4
 8016258:	db01      	blt.n	801625e <__sfputc_r+0x16>
 801625a:	290a      	cmp	r1, #10
 801625c:	d103      	bne.n	8016266 <__sfputc_r+0x1e>
 801625e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016262:	f7ff bb3b 	b.w	80158dc <__swbuf_r>
 8016266:	6813      	ldr	r3, [r2, #0]
 8016268:	1c58      	adds	r0, r3, #1
 801626a:	6010      	str	r0, [r2, #0]
 801626c:	7019      	strb	r1, [r3, #0]
 801626e:	4608      	mov	r0, r1
 8016270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016274:	4770      	bx	lr

08016276 <__sfputs_r>:
 8016276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016278:	4606      	mov	r6, r0
 801627a:	460f      	mov	r7, r1
 801627c:	4614      	mov	r4, r2
 801627e:	18d5      	adds	r5, r2, r3
 8016280:	42ac      	cmp	r4, r5
 8016282:	d101      	bne.n	8016288 <__sfputs_r+0x12>
 8016284:	2000      	movs	r0, #0
 8016286:	e007      	b.n	8016298 <__sfputs_r+0x22>
 8016288:	463a      	mov	r2, r7
 801628a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801628e:	4630      	mov	r0, r6
 8016290:	f7ff ffda 	bl	8016248 <__sfputc_r>
 8016294:	1c43      	adds	r3, r0, #1
 8016296:	d1f3      	bne.n	8016280 <__sfputs_r+0xa>
 8016298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801629c <_vfiprintf_r>:
 801629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a0:	460c      	mov	r4, r1
 80162a2:	b09d      	sub	sp, #116	; 0x74
 80162a4:	4617      	mov	r7, r2
 80162a6:	461d      	mov	r5, r3
 80162a8:	4606      	mov	r6, r0
 80162aa:	b118      	cbz	r0, 80162b4 <_vfiprintf_r+0x18>
 80162ac:	6983      	ldr	r3, [r0, #24]
 80162ae:	b90b      	cbnz	r3, 80162b4 <_vfiprintf_r+0x18>
 80162b0:	f7ff fcc4 	bl	8015c3c <__sinit>
 80162b4:	4b7c      	ldr	r3, [pc, #496]	; (80164a8 <_vfiprintf_r+0x20c>)
 80162b6:	429c      	cmp	r4, r3
 80162b8:	d158      	bne.n	801636c <_vfiprintf_r+0xd0>
 80162ba:	6874      	ldr	r4, [r6, #4]
 80162bc:	89a3      	ldrh	r3, [r4, #12]
 80162be:	0718      	lsls	r0, r3, #28
 80162c0:	d55e      	bpl.n	8016380 <_vfiprintf_r+0xe4>
 80162c2:	6923      	ldr	r3, [r4, #16]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d05b      	beq.n	8016380 <_vfiprintf_r+0xe4>
 80162c8:	2300      	movs	r3, #0
 80162ca:	9309      	str	r3, [sp, #36]	; 0x24
 80162cc:	2320      	movs	r3, #32
 80162ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162d2:	2330      	movs	r3, #48	; 0x30
 80162d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80162d8:	9503      	str	r5, [sp, #12]
 80162da:	f04f 0b01 	mov.w	fp, #1
 80162de:	46b8      	mov	r8, r7
 80162e0:	4645      	mov	r5, r8
 80162e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80162e6:	b10b      	cbz	r3, 80162ec <_vfiprintf_r+0x50>
 80162e8:	2b25      	cmp	r3, #37	; 0x25
 80162ea:	d154      	bne.n	8016396 <_vfiprintf_r+0xfa>
 80162ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80162f0:	d00b      	beq.n	801630a <_vfiprintf_r+0x6e>
 80162f2:	4653      	mov	r3, sl
 80162f4:	463a      	mov	r2, r7
 80162f6:	4621      	mov	r1, r4
 80162f8:	4630      	mov	r0, r6
 80162fa:	f7ff ffbc 	bl	8016276 <__sfputs_r>
 80162fe:	3001      	adds	r0, #1
 8016300:	f000 80c2 	beq.w	8016488 <_vfiprintf_r+0x1ec>
 8016304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016306:	4453      	add	r3, sl
 8016308:	9309      	str	r3, [sp, #36]	; 0x24
 801630a:	f898 3000 	ldrb.w	r3, [r8]
 801630e:	2b00      	cmp	r3, #0
 8016310:	f000 80ba 	beq.w	8016488 <_vfiprintf_r+0x1ec>
 8016314:	2300      	movs	r3, #0
 8016316:	f04f 32ff 	mov.w	r2, #4294967295
 801631a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801631e:	9304      	str	r3, [sp, #16]
 8016320:	9307      	str	r3, [sp, #28]
 8016322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016326:	931a      	str	r3, [sp, #104]	; 0x68
 8016328:	46a8      	mov	r8, r5
 801632a:	2205      	movs	r2, #5
 801632c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016330:	485e      	ldr	r0, [pc, #376]	; (80164ac <_vfiprintf_r+0x210>)
 8016332:	f7e9 ff55 	bl	80001e0 <memchr>
 8016336:	9b04      	ldr	r3, [sp, #16]
 8016338:	bb78      	cbnz	r0, 801639a <_vfiprintf_r+0xfe>
 801633a:	06d9      	lsls	r1, r3, #27
 801633c:	bf44      	itt	mi
 801633e:	2220      	movmi	r2, #32
 8016340:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016344:	071a      	lsls	r2, r3, #28
 8016346:	bf44      	itt	mi
 8016348:	222b      	movmi	r2, #43	; 0x2b
 801634a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801634e:	782a      	ldrb	r2, [r5, #0]
 8016350:	2a2a      	cmp	r2, #42	; 0x2a
 8016352:	d02a      	beq.n	80163aa <_vfiprintf_r+0x10e>
 8016354:	9a07      	ldr	r2, [sp, #28]
 8016356:	46a8      	mov	r8, r5
 8016358:	2000      	movs	r0, #0
 801635a:	250a      	movs	r5, #10
 801635c:	4641      	mov	r1, r8
 801635e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016362:	3b30      	subs	r3, #48	; 0x30
 8016364:	2b09      	cmp	r3, #9
 8016366:	d969      	bls.n	801643c <_vfiprintf_r+0x1a0>
 8016368:	b360      	cbz	r0, 80163c4 <_vfiprintf_r+0x128>
 801636a:	e024      	b.n	80163b6 <_vfiprintf_r+0x11a>
 801636c:	4b50      	ldr	r3, [pc, #320]	; (80164b0 <_vfiprintf_r+0x214>)
 801636e:	429c      	cmp	r4, r3
 8016370:	d101      	bne.n	8016376 <_vfiprintf_r+0xda>
 8016372:	68b4      	ldr	r4, [r6, #8]
 8016374:	e7a2      	b.n	80162bc <_vfiprintf_r+0x20>
 8016376:	4b4f      	ldr	r3, [pc, #316]	; (80164b4 <_vfiprintf_r+0x218>)
 8016378:	429c      	cmp	r4, r3
 801637a:	bf08      	it	eq
 801637c:	68f4      	ldreq	r4, [r6, #12]
 801637e:	e79d      	b.n	80162bc <_vfiprintf_r+0x20>
 8016380:	4621      	mov	r1, r4
 8016382:	4630      	mov	r0, r6
 8016384:	f7ff fafc 	bl	8015980 <__swsetup_r>
 8016388:	2800      	cmp	r0, #0
 801638a:	d09d      	beq.n	80162c8 <_vfiprintf_r+0x2c>
 801638c:	f04f 30ff 	mov.w	r0, #4294967295
 8016390:	b01d      	add	sp, #116	; 0x74
 8016392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016396:	46a8      	mov	r8, r5
 8016398:	e7a2      	b.n	80162e0 <_vfiprintf_r+0x44>
 801639a:	4a44      	ldr	r2, [pc, #272]	; (80164ac <_vfiprintf_r+0x210>)
 801639c:	1a80      	subs	r0, r0, r2
 801639e:	fa0b f000 	lsl.w	r0, fp, r0
 80163a2:	4318      	orrs	r0, r3
 80163a4:	9004      	str	r0, [sp, #16]
 80163a6:	4645      	mov	r5, r8
 80163a8:	e7be      	b.n	8016328 <_vfiprintf_r+0x8c>
 80163aa:	9a03      	ldr	r2, [sp, #12]
 80163ac:	1d11      	adds	r1, r2, #4
 80163ae:	6812      	ldr	r2, [r2, #0]
 80163b0:	9103      	str	r1, [sp, #12]
 80163b2:	2a00      	cmp	r2, #0
 80163b4:	db01      	blt.n	80163ba <_vfiprintf_r+0x11e>
 80163b6:	9207      	str	r2, [sp, #28]
 80163b8:	e004      	b.n	80163c4 <_vfiprintf_r+0x128>
 80163ba:	4252      	negs	r2, r2
 80163bc:	f043 0302 	orr.w	r3, r3, #2
 80163c0:	9207      	str	r2, [sp, #28]
 80163c2:	9304      	str	r3, [sp, #16]
 80163c4:	f898 3000 	ldrb.w	r3, [r8]
 80163c8:	2b2e      	cmp	r3, #46	; 0x2e
 80163ca:	d10e      	bne.n	80163ea <_vfiprintf_r+0x14e>
 80163cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80163d0:	2b2a      	cmp	r3, #42	; 0x2a
 80163d2:	d138      	bne.n	8016446 <_vfiprintf_r+0x1aa>
 80163d4:	9b03      	ldr	r3, [sp, #12]
 80163d6:	1d1a      	adds	r2, r3, #4
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	9203      	str	r2, [sp, #12]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	bfb8      	it	lt
 80163e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80163e4:	f108 0802 	add.w	r8, r8, #2
 80163e8:	9305      	str	r3, [sp, #20]
 80163ea:	4d33      	ldr	r5, [pc, #204]	; (80164b8 <_vfiprintf_r+0x21c>)
 80163ec:	f898 1000 	ldrb.w	r1, [r8]
 80163f0:	2203      	movs	r2, #3
 80163f2:	4628      	mov	r0, r5
 80163f4:	f7e9 fef4 	bl	80001e0 <memchr>
 80163f8:	b140      	cbz	r0, 801640c <_vfiprintf_r+0x170>
 80163fa:	2340      	movs	r3, #64	; 0x40
 80163fc:	1b40      	subs	r0, r0, r5
 80163fe:	fa03 f000 	lsl.w	r0, r3, r0
 8016402:	9b04      	ldr	r3, [sp, #16]
 8016404:	4303      	orrs	r3, r0
 8016406:	f108 0801 	add.w	r8, r8, #1
 801640a:	9304      	str	r3, [sp, #16]
 801640c:	f898 1000 	ldrb.w	r1, [r8]
 8016410:	482a      	ldr	r0, [pc, #168]	; (80164bc <_vfiprintf_r+0x220>)
 8016412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016416:	2206      	movs	r2, #6
 8016418:	f108 0701 	add.w	r7, r8, #1
 801641c:	f7e9 fee0 	bl	80001e0 <memchr>
 8016420:	2800      	cmp	r0, #0
 8016422:	d037      	beq.n	8016494 <_vfiprintf_r+0x1f8>
 8016424:	4b26      	ldr	r3, [pc, #152]	; (80164c0 <_vfiprintf_r+0x224>)
 8016426:	bb1b      	cbnz	r3, 8016470 <_vfiprintf_r+0x1d4>
 8016428:	9b03      	ldr	r3, [sp, #12]
 801642a:	3307      	adds	r3, #7
 801642c:	f023 0307 	bic.w	r3, r3, #7
 8016430:	3308      	adds	r3, #8
 8016432:	9303      	str	r3, [sp, #12]
 8016434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016436:	444b      	add	r3, r9
 8016438:	9309      	str	r3, [sp, #36]	; 0x24
 801643a:	e750      	b.n	80162de <_vfiprintf_r+0x42>
 801643c:	fb05 3202 	mla	r2, r5, r2, r3
 8016440:	2001      	movs	r0, #1
 8016442:	4688      	mov	r8, r1
 8016444:	e78a      	b.n	801635c <_vfiprintf_r+0xc0>
 8016446:	2300      	movs	r3, #0
 8016448:	f108 0801 	add.w	r8, r8, #1
 801644c:	9305      	str	r3, [sp, #20]
 801644e:	4619      	mov	r1, r3
 8016450:	250a      	movs	r5, #10
 8016452:	4640      	mov	r0, r8
 8016454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016458:	3a30      	subs	r2, #48	; 0x30
 801645a:	2a09      	cmp	r2, #9
 801645c:	d903      	bls.n	8016466 <_vfiprintf_r+0x1ca>
 801645e:	2b00      	cmp	r3, #0
 8016460:	d0c3      	beq.n	80163ea <_vfiprintf_r+0x14e>
 8016462:	9105      	str	r1, [sp, #20]
 8016464:	e7c1      	b.n	80163ea <_vfiprintf_r+0x14e>
 8016466:	fb05 2101 	mla	r1, r5, r1, r2
 801646a:	2301      	movs	r3, #1
 801646c:	4680      	mov	r8, r0
 801646e:	e7f0      	b.n	8016452 <_vfiprintf_r+0x1b6>
 8016470:	ab03      	add	r3, sp, #12
 8016472:	9300      	str	r3, [sp, #0]
 8016474:	4622      	mov	r2, r4
 8016476:	4b13      	ldr	r3, [pc, #76]	; (80164c4 <_vfiprintf_r+0x228>)
 8016478:	a904      	add	r1, sp, #16
 801647a:	4630      	mov	r0, r6
 801647c:	f3af 8000 	nop.w
 8016480:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016484:	4681      	mov	r9, r0
 8016486:	d1d5      	bne.n	8016434 <_vfiprintf_r+0x198>
 8016488:	89a3      	ldrh	r3, [r4, #12]
 801648a:	065b      	lsls	r3, r3, #25
 801648c:	f53f af7e 	bmi.w	801638c <_vfiprintf_r+0xf0>
 8016490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016492:	e77d      	b.n	8016390 <_vfiprintf_r+0xf4>
 8016494:	ab03      	add	r3, sp, #12
 8016496:	9300      	str	r3, [sp, #0]
 8016498:	4622      	mov	r2, r4
 801649a:	4b0a      	ldr	r3, [pc, #40]	; (80164c4 <_vfiprintf_r+0x228>)
 801649c:	a904      	add	r1, sp, #16
 801649e:	4630      	mov	r0, r6
 80164a0:	f000 f888 	bl	80165b4 <_printf_i>
 80164a4:	e7ec      	b.n	8016480 <_vfiprintf_r+0x1e4>
 80164a6:	bf00      	nop
 80164a8:	08018e30 	.word	0x08018e30
 80164ac:	08018e7a 	.word	0x08018e7a
 80164b0:	08018e50 	.word	0x08018e50
 80164b4:	08018e10 	.word	0x08018e10
 80164b8:	08018e80 	.word	0x08018e80
 80164bc:	08018e84 	.word	0x08018e84
 80164c0:	00000000 	.word	0x00000000
 80164c4:	08016277 	.word	0x08016277

080164c8 <_printf_common>:
 80164c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164cc:	4691      	mov	r9, r2
 80164ce:	461f      	mov	r7, r3
 80164d0:	688a      	ldr	r2, [r1, #8]
 80164d2:	690b      	ldr	r3, [r1, #16]
 80164d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80164d8:	4293      	cmp	r3, r2
 80164da:	bfb8      	it	lt
 80164dc:	4613      	movlt	r3, r2
 80164de:	f8c9 3000 	str.w	r3, [r9]
 80164e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80164e6:	4606      	mov	r6, r0
 80164e8:	460c      	mov	r4, r1
 80164ea:	b112      	cbz	r2, 80164f2 <_printf_common+0x2a>
 80164ec:	3301      	adds	r3, #1
 80164ee:	f8c9 3000 	str.w	r3, [r9]
 80164f2:	6823      	ldr	r3, [r4, #0]
 80164f4:	0699      	lsls	r1, r3, #26
 80164f6:	bf42      	ittt	mi
 80164f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80164fc:	3302      	addmi	r3, #2
 80164fe:	f8c9 3000 	strmi.w	r3, [r9]
 8016502:	6825      	ldr	r5, [r4, #0]
 8016504:	f015 0506 	ands.w	r5, r5, #6
 8016508:	d107      	bne.n	801651a <_printf_common+0x52>
 801650a:	f104 0a19 	add.w	sl, r4, #25
 801650e:	68e3      	ldr	r3, [r4, #12]
 8016510:	f8d9 2000 	ldr.w	r2, [r9]
 8016514:	1a9b      	subs	r3, r3, r2
 8016516:	42ab      	cmp	r3, r5
 8016518:	dc28      	bgt.n	801656c <_printf_common+0xa4>
 801651a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801651e:	6822      	ldr	r2, [r4, #0]
 8016520:	3300      	adds	r3, #0
 8016522:	bf18      	it	ne
 8016524:	2301      	movne	r3, #1
 8016526:	0692      	lsls	r2, r2, #26
 8016528:	d42d      	bmi.n	8016586 <_printf_common+0xbe>
 801652a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801652e:	4639      	mov	r1, r7
 8016530:	4630      	mov	r0, r6
 8016532:	47c0      	blx	r8
 8016534:	3001      	adds	r0, #1
 8016536:	d020      	beq.n	801657a <_printf_common+0xb2>
 8016538:	6823      	ldr	r3, [r4, #0]
 801653a:	68e5      	ldr	r5, [r4, #12]
 801653c:	f8d9 2000 	ldr.w	r2, [r9]
 8016540:	f003 0306 	and.w	r3, r3, #6
 8016544:	2b04      	cmp	r3, #4
 8016546:	bf08      	it	eq
 8016548:	1aad      	subeq	r5, r5, r2
 801654a:	68a3      	ldr	r3, [r4, #8]
 801654c:	6922      	ldr	r2, [r4, #16]
 801654e:	bf0c      	ite	eq
 8016550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016554:	2500      	movne	r5, #0
 8016556:	4293      	cmp	r3, r2
 8016558:	bfc4      	itt	gt
 801655a:	1a9b      	subgt	r3, r3, r2
 801655c:	18ed      	addgt	r5, r5, r3
 801655e:	f04f 0900 	mov.w	r9, #0
 8016562:	341a      	adds	r4, #26
 8016564:	454d      	cmp	r5, r9
 8016566:	d11a      	bne.n	801659e <_printf_common+0xd6>
 8016568:	2000      	movs	r0, #0
 801656a:	e008      	b.n	801657e <_printf_common+0xb6>
 801656c:	2301      	movs	r3, #1
 801656e:	4652      	mov	r2, sl
 8016570:	4639      	mov	r1, r7
 8016572:	4630      	mov	r0, r6
 8016574:	47c0      	blx	r8
 8016576:	3001      	adds	r0, #1
 8016578:	d103      	bne.n	8016582 <_printf_common+0xba>
 801657a:	f04f 30ff 	mov.w	r0, #4294967295
 801657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016582:	3501      	adds	r5, #1
 8016584:	e7c3      	b.n	801650e <_printf_common+0x46>
 8016586:	18e1      	adds	r1, r4, r3
 8016588:	1c5a      	adds	r2, r3, #1
 801658a:	2030      	movs	r0, #48	; 0x30
 801658c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016590:	4422      	add	r2, r4
 8016592:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016596:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801659a:	3302      	adds	r3, #2
 801659c:	e7c5      	b.n	801652a <_printf_common+0x62>
 801659e:	2301      	movs	r3, #1
 80165a0:	4622      	mov	r2, r4
 80165a2:	4639      	mov	r1, r7
 80165a4:	4630      	mov	r0, r6
 80165a6:	47c0      	blx	r8
 80165a8:	3001      	adds	r0, #1
 80165aa:	d0e6      	beq.n	801657a <_printf_common+0xb2>
 80165ac:	f109 0901 	add.w	r9, r9, #1
 80165b0:	e7d8      	b.n	8016564 <_printf_common+0x9c>
	...

080165b4 <_printf_i>:
 80165b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80165bc:	460c      	mov	r4, r1
 80165be:	7e09      	ldrb	r1, [r1, #24]
 80165c0:	b085      	sub	sp, #20
 80165c2:	296e      	cmp	r1, #110	; 0x6e
 80165c4:	4617      	mov	r7, r2
 80165c6:	4606      	mov	r6, r0
 80165c8:	4698      	mov	r8, r3
 80165ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80165cc:	f000 80b3 	beq.w	8016736 <_printf_i+0x182>
 80165d0:	d822      	bhi.n	8016618 <_printf_i+0x64>
 80165d2:	2963      	cmp	r1, #99	; 0x63
 80165d4:	d036      	beq.n	8016644 <_printf_i+0x90>
 80165d6:	d80a      	bhi.n	80165ee <_printf_i+0x3a>
 80165d8:	2900      	cmp	r1, #0
 80165da:	f000 80b9 	beq.w	8016750 <_printf_i+0x19c>
 80165de:	2958      	cmp	r1, #88	; 0x58
 80165e0:	f000 8083 	beq.w	80166ea <_printf_i+0x136>
 80165e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80165ec:	e032      	b.n	8016654 <_printf_i+0xa0>
 80165ee:	2964      	cmp	r1, #100	; 0x64
 80165f0:	d001      	beq.n	80165f6 <_printf_i+0x42>
 80165f2:	2969      	cmp	r1, #105	; 0x69
 80165f4:	d1f6      	bne.n	80165e4 <_printf_i+0x30>
 80165f6:	6820      	ldr	r0, [r4, #0]
 80165f8:	6813      	ldr	r3, [r2, #0]
 80165fa:	0605      	lsls	r5, r0, #24
 80165fc:	f103 0104 	add.w	r1, r3, #4
 8016600:	d52a      	bpl.n	8016658 <_printf_i+0xa4>
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	6011      	str	r1, [r2, #0]
 8016606:	2b00      	cmp	r3, #0
 8016608:	da03      	bge.n	8016612 <_printf_i+0x5e>
 801660a:	222d      	movs	r2, #45	; 0x2d
 801660c:	425b      	negs	r3, r3
 801660e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016612:	486f      	ldr	r0, [pc, #444]	; (80167d0 <_printf_i+0x21c>)
 8016614:	220a      	movs	r2, #10
 8016616:	e039      	b.n	801668c <_printf_i+0xd8>
 8016618:	2973      	cmp	r1, #115	; 0x73
 801661a:	f000 809d 	beq.w	8016758 <_printf_i+0x1a4>
 801661e:	d808      	bhi.n	8016632 <_printf_i+0x7e>
 8016620:	296f      	cmp	r1, #111	; 0x6f
 8016622:	d020      	beq.n	8016666 <_printf_i+0xb2>
 8016624:	2970      	cmp	r1, #112	; 0x70
 8016626:	d1dd      	bne.n	80165e4 <_printf_i+0x30>
 8016628:	6823      	ldr	r3, [r4, #0]
 801662a:	f043 0320 	orr.w	r3, r3, #32
 801662e:	6023      	str	r3, [r4, #0]
 8016630:	e003      	b.n	801663a <_printf_i+0x86>
 8016632:	2975      	cmp	r1, #117	; 0x75
 8016634:	d017      	beq.n	8016666 <_printf_i+0xb2>
 8016636:	2978      	cmp	r1, #120	; 0x78
 8016638:	d1d4      	bne.n	80165e4 <_printf_i+0x30>
 801663a:	2378      	movs	r3, #120	; 0x78
 801663c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016640:	4864      	ldr	r0, [pc, #400]	; (80167d4 <_printf_i+0x220>)
 8016642:	e055      	b.n	80166f0 <_printf_i+0x13c>
 8016644:	6813      	ldr	r3, [r2, #0]
 8016646:	1d19      	adds	r1, r3, #4
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	6011      	str	r1, [r2, #0]
 801664c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016654:	2301      	movs	r3, #1
 8016656:	e08c      	b.n	8016772 <_printf_i+0x1be>
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	6011      	str	r1, [r2, #0]
 801665c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016660:	bf18      	it	ne
 8016662:	b21b      	sxthne	r3, r3
 8016664:	e7cf      	b.n	8016606 <_printf_i+0x52>
 8016666:	6813      	ldr	r3, [r2, #0]
 8016668:	6825      	ldr	r5, [r4, #0]
 801666a:	1d18      	adds	r0, r3, #4
 801666c:	6010      	str	r0, [r2, #0]
 801666e:	0628      	lsls	r0, r5, #24
 8016670:	d501      	bpl.n	8016676 <_printf_i+0xc2>
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	e002      	b.n	801667c <_printf_i+0xc8>
 8016676:	0668      	lsls	r0, r5, #25
 8016678:	d5fb      	bpl.n	8016672 <_printf_i+0xbe>
 801667a:	881b      	ldrh	r3, [r3, #0]
 801667c:	4854      	ldr	r0, [pc, #336]	; (80167d0 <_printf_i+0x21c>)
 801667e:	296f      	cmp	r1, #111	; 0x6f
 8016680:	bf14      	ite	ne
 8016682:	220a      	movne	r2, #10
 8016684:	2208      	moveq	r2, #8
 8016686:	2100      	movs	r1, #0
 8016688:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801668c:	6865      	ldr	r5, [r4, #4]
 801668e:	60a5      	str	r5, [r4, #8]
 8016690:	2d00      	cmp	r5, #0
 8016692:	f2c0 8095 	blt.w	80167c0 <_printf_i+0x20c>
 8016696:	6821      	ldr	r1, [r4, #0]
 8016698:	f021 0104 	bic.w	r1, r1, #4
 801669c:	6021      	str	r1, [r4, #0]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d13d      	bne.n	801671e <_printf_i+0x16a>
 80166a2:	2d00      	cmp	r5, #0
 80166a4:	f040 808e 	bne.w	80167c4 <_printf_i+0x210>
 80166a8:	4665      	mov	r5, ip
 80166aa:	2a08      	cmp	r2, #8
 80166ac:	d10b      	bne.n	80166c6 <_printf_i+0x112>
 80166ae:	6823      	ldr	r3, [r4, #0]
 80166b0:	07db      	lsls	r3, r3, #31
 80166b2:	d508      	bpl.n	80166c6 <_printf_i+0x112>
 80166b4:	6923      	ldr	r3, [r4, #16]
 80166b6:	6862      	ldr	r2, [r4, #4]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	bfde      	ittt	le
 80166bc:	2330      	movle	r3, #48	; 0x30
 80166be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80166c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80166c6:	ebac 0305 	sub.w	r3, ip, r5
 80166ca:	6123      	str	r3, [r4, #16]
 80166cc:	f8cd 8000 	str.w	r8, [sp]
 80166d0:	463b      	mov	r3, r7
 80166d2:	aa03      	add	r2, sp, #12
 80166d4:	4621      	mov	r1, r4
 80166d6:	4630      	mov	r0, r6
 80166d8:	f7ff fef6 	bl	80164c8 <_printf_common>
 80166dc:	3001      	adds	r0, #1
 80166de:	d14d      	bne.n	801677c <_printf_i+0x1c8>
 80166e0:	f04f 30ff 	mov.w	r0, #4294967295
 80166e4:	b005      	add	sp, #20
 80166e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166ea:	4839      	ldr	r0, [pc, #228]	; (80167d0 <_printf_i+0x21c>)
 80166ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80166f0:	6813      	ldr	r3, [r2, #0]
 80166f2:	6821      	ldr	r1, [r4, #0]
 80166f4:	1d1d      	adds	r5, r3, #4
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	6015      	str	r5, [r2, #0]
 80166fa:	060a      	lsls	r2, r1, #24
 80166fc:	d50b      	bpl.n	8016716 <_printf_i+0x162>
 80166fe:	07ca      	lsls	r2, r1, #31
 8016700:	bf44      	itt	mi
 8016702:	f041 0120 	orrmi.w	r1, r1, #32
 8016706:	6021      	strmi	r1, [r4, #0]
 8016708:	b91b      	cbnz	r3, 8016712 <_printf_i+0x15e>
 801670a:	6822      	ldr	r2, [r4, #0]
 801670c:	f022 0220 	bic.w	r2, r2, #32
 8016710:	6022      	str	r2, [r4, #0]
 8016712:	2210      	movs	r2, #16
 8016714:	e7b7      	b.n	8016686 <_printf_i+0xd2>
 8016716:	064d      	lsls	r5, r1, #25
 8016718:	bf48      	it	mi
 801671a:	b29b      	uxthmi	r3, r3
 801671c:	e7ef      	b.n	80166fe <_printf_i+0x14a>
 801671e:	4665      	mov	r5, ip
 8016720:	fbb3 f1f2 	udiv	r1, r3, r2
 8016724:	fb02 3311 	mls	r3, r2, r1, r3
 8016728:	5cc3      	ldrb	r3, [r0, r3]
 801672a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801672e:	460b      	mov	r3, r1
 8016730:	2900      	cmp	r1, #0
 8016732:	d1f5      	bne.n	8016720 <_printf_i+0x16c>
 8016734:	e7b9      	b.n	80166aa <_printf_i+0xf6>
 8016736:	6813      	ldr	r3, [r2, #0]
 8016738:	6825      	ldr	r5, [r4, #0]
 801673a:	6961      	ldr	r1, [r4, #20]
 801673c:	1d18      	adds	r0, r3, #4
 801673e:	6010      	str	r0, [r2, #0]
 8016740:	0628      	lsls	r0, r5, #24
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	d501      	bpl.n	801674a <_printf_i+0x196>
 8016746:	6019      	str	r1, [r3, #0]
 8016748:	e002      	b.n	8016750 <_printf_i+0x19c>
 801674a:	066a      	lsls	r2, r5, #25
 801674c:	d5fb      	bpl.n	8016746 <_printf_i+0x192>
 801674e:	8019      	strh	r1, [r3, #0]
 8016750:	2300      	movs	r3, #0
 8016752:	6123      	str	r3, [r4, #16]
 8016754:	4665      	mov	r5, ip
 8016756:	e7b9      	b.n	80166cc <_printf_i+0x118>
 8016758:	6813      	ldr	r3, [r2, #0]
 801675a:	1d19      	adds	r1, r3, #4
 801675c:	6011      	str	r1, [r2, #0]
 801675e:	681d      	ldr	r5, [r3, #0]
 8016760:	6862      	ldr	r2, [r4, #4]
 8016762:	2100      	movs	r1, #0
 8016764:	4628      	mov	r0, r5
 8016766:	f7e9 fd3b 	bl	80001e0 <memchr>
 801676a:	b108      	cbz	r0, 8016770 <_printf_i+0x1bc>
 801676c:	1b40      	subs	r0, r0, r5
 801676e:	6060      	str	r0, [r4, #4]
 8016770:	6863      	ldr	r3, [r4, #4]
 8016772:	6123      	str	r3, [r4, #16]
 8016774:	2300      	movs	r3, #0
 8016776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801677a:	e7a7      	b.n	80166cc <_printf_i+0x118>
 801677c:	6923      	ldr	r3, [r4, #16]
 801677e:	462a      	mov	r2, r5
 8016780:	4639      	mov	r1, r7
 8016782:	4630      	mov	r0, r6
 8016784:	47c0      	blx	r8
 8016786:	3001      	adds	r0, #1
 8016788:	d0aa      	beq.n	80166e0 <_printf_i+0x12c>
 801678a:	6823      	ldr	r3, [r4, #0]
 801678c:	079b      	lsls	r3, r3, #30
 801678e:	d413      	bmi.n	80167b8 <_printf_i+0x204>
 8016790:	68e0      	ldr	r0, [r4, #12]
 8016792:	9b03      	ldr	r3, [sp, #12]
 8016794:	4298      	cmp	r0, r3
 8016796:	bfb8      	it	lt
 8016798:	4618      	movlt	r0, r3
 801679a:	e7a3      	b.n	80166e4 <_printf_i+0x130>
 801679c:	2301      	movs	r3, #1
 801679e:	464a      	mov	r2, r9
 80167a0:	4639      	mov	r1, r7
 80167a2:	4630      	mov	r0, r6
 80167a4:	47c0      	blx	r8
 80167a6:	3001      	adds	r0, #1
 80167a8:	d09a      	beq.n	80166e0 <_printf_i+0x12c>
 80167aa:	3501      	adds	r5, #1
 80167ac:	68e3      	ldr	r3, [r4, #12]
 80167ae:	9a03      	ldr	r2, [sp, #12]
 80167b0:	1a9b      	subs	r3, r3, r2
 80167b2:	42ab      	cmp	r3, r5
 80167b4:	dcf2      	bgt.n	801679c <_printf_i+0x1e8>
 80167b6:	e7eb      	b.n	8016790 <_printf_i+0x1dc>
 80167b8:	2500      	movs	r5, #0
 80167ba:	f104 0919 	add.w	r9, r4, #25
 80167be:	e7f5      	b.n	80167ac <_printf_i+0x1f8>
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d1ac      	bne.n	801671e <_printf_i+0x16a>
 80167c4:	7803      	ldrb	r3, [r0, #0]
 80167c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167ce:	e76c      	b.n	80166aa <_printf_i+0xf6>
 80167d0:	08018e8b 	.word	0x08018e8b
 80167d4:	08018e9c 	.word	0x08018e9c

080167d8 <_sbrk_r>:
 80167d8:	b538      	push	{r3, r4, r5, lr}
 80167da:	4c06      	ldr	r4, [pc, #24]	; (80167f4 <_sbrk_r+0x1c>)
 80167dc:	2300      	movs	r3, #0
 80167de:	4605      	mov	r5, r0
 80167e0:	4608      	mov	r0, r1
 80167e2:	6023      	str	r3, [r4, #0]
 80167e4:	f7ea fd38 	bl	8001258 <_sbrk>
 80167e8:	1c43      	adds	r3, r0, #1
 80167ea:	d102      	bne.n	80167f2 <_sbrk_r+0x1a>
 80167ec:	6823      	ldr	r3, [r4, #0]
 80167ee:	b103      	cbz	r3, 80167f2 <_sbrk_r+0x1a>
 80167f0:	602b      	str	r3, [r5, #0]
 80167f2:	bd38      	pop	{r3, r4, r5, pc}
 80167f4:	200176b8 	.word	0x200176b8

080167f8 <__sread>:
 80167f8:	b510      	push	{r4, lr}
 80167fa:	460c      	mov	r4, r1
 80167fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016800:	f000 f8e2 	bl	80169c8 <_read_r>
 8016804:	2800      	cmp	r0, #0
 8016806:	bfab      	itete	ge
 8016808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801680a:	89a3      	ldrhlt	r3, [r4, #12]
 801680c:	181b      	addge	r3, r3, r0
 801680e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016812:	bfac      	ite	ge
 8016814:	6563      	strge	r3, [r4, #84]	; 0x54
 8016816:	81a3      	strhlt	r3, [r4, #12]
 8016818:	bd10      	pop	{r4, pc}

0801681a <__swrite>:
 801681a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801681e:	461f      	mov	r7, r3
 8016820:	898b      	ldrh	r3, [r1, #12]
 8016822:	05db      	lsls	r3, r3, #23
 8016824:	4605      	mov	r5, r0
 8016826:	460c      	mov	r4, r1
 8016828:	4616      	mov	r6, r2
 801682a:	d505      	bpl.n	8016838 <__swrite+0x1e>
 801682c:	2302      	movs	r3, #2
 801682e:	2200      	movs	r2, #0
 8016830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016834:	f000 f874 	bl	8016920 <_lseek_r>
 8016838:	89a3      	ldrh	r3, [r4, #12]
 801683a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801683e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016842:	81a3      	strh	r3, [r4, #12]
 8016844:	4632      	mov	r2, r6
 8016846:	463b      	mov	r3, r7
 8016848:	4628      	mov	r0, r5
 801684a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801684e:	f000 b823 	b.w	8016898 <_write_r>

08016852 <__sseek>:
 8016852:	b510      	push	{r4, lr}
 8016854:	460c      	mov	r4, r1
 8016856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801685a:	f000 f861 	bl	8016920 <_lseek_r>
 801685e:	1c43      	adds	r3, r0, #1
 8016860:	89a3      	ldrh	r3, [r4, #12]
 8016862:	bf15      	itete	ne
 8016864:	6560      	strne	r0, [r4, #84]	; 0x54
 8016866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801686a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801686e:	81a3      	strheq	r3, [r4, #12]
 8016870:	bf18      	it	ne
 8016872:	81a3      	strhne	r3, [r4, #12]
 8016874:	bd10      	pop	{r4, pc}

08016876 <__sclose>:
 8016876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801687a:	f000 b81f 	b.w	80168bc <_close_r>

0801687e <__ascii_wctomb>:
 801687e:	b149      	cbz	r1, 8016894 <__ascii_wctomb+0x16>
 8016880:	2aff      	cmp	r2, #255	; 0xff
 8016882:	bf85      	ittet	hi
 8016884:	238a      	movhi	r3, #138	; 0x8a
 8016886:	6003      	strhi	r3, [r0, #0]
 8016888:	700a      	strbls	r2, [r1, #0]
 801688a:	f04f 30ff 	movhi.w	r0, #4294967295
 801688e:	bf98      	it	ls
 8016890:	2001      	movls	r0, #1
 8016892:	4770      	bx	lr
 8016894:	4608      	mov	r0, r1
 8016896:	4770      	bx	lr

08016898 <_write_r>:
 8016898:	b538      	push	{r3, r4, r5, lr}
 801689a:	4c07      	ldr	r4, [pc, #28]	; (80168b8 <_write_r+0x20>)
 801689c:	4605      	mov	r5, r0
 801689e:	4608      	mov	r0, r1
 80168a0:	4611      	mov	r1, r2
 80168a2:	2200      	movs	r2, #0
 80168a4:	6022      	str	r2, [r4, #0]
 80168a6:	461a      	mov	r2, r3
 80168a8:	f7ea fc85 	bl	80011b6 <_write>
 80168ac:	1c43      	adds	r3, r0, #1
 80168ae:	d102      	bne.n	80168b6 <_write_r+0x1e>
 80168b0:	6823      	ldr	r3, [r4, #0]
 80168b2:	b103      	cbz	r3, 80168b6 <_write_r+0x1e>
 80168b4:	602b      	str	r3, [r5, #0]
 80168b6:	bd38      	pop	{r3, r4, r5, pc}
 80168b8:	200176b8 	.word	0x200176b8

080168bc <_close_r>:
 80168bc:	b538      	push	{r3, r4, r5, lr}
 80168be:	4c06      	ldr	r4, [pc, #24]	; (80168d8 <_close_r+0x1c>)
 80168c0:	2300      	movs	r3, #0
 80168c2:	4605      	mov	r5, r0
 80168c4:	4608      	mov	r0, r1
 80168c6:	6023      	str	r3, [r4, #0]
 80168c8:	f7ea fc91 	bl	80011ee <_close>
 80168cc:	1c43      	adds	r3, r0, #1
 80168ce:	d102      	bne.n	80168d6 <_close_r+0x1a>
 80168d0:	6823      	ldr	r3, [r4, #0]
 80168d2:	b103      	cbz	r3, 80168d6 <_close_r+0x1a>
 80168d4:	602b      	str	r3, [r5, #0]
 80168d6:	bd38      	pop	{r3, r4, r5, pc}
 80168d8:	200176b8 	.word	0x200176b8

080168dc <_fstat_r>:
 80168dc:	b538      	push	{r3, r4, r5, lr}
 80168de:	4c07      	ldr	r4, [pc, #28]	; (80168fc <_fstat_r+0x20>)
 80168e0:	2300      	movs	r3, #0
 80168e2:	4605      	mov	r5, r0
 80168e4:	4608      	mov	r0, r1
 80168e6:	4611      	mov	r1, r2
 80168e8:	6023      	str	r3, [r4, #0]
 80168ea:	f7ea fc8c 	bl	8001206 <_fstat>
 80168ee:	1c43      	adds	r3, r0, #1
 80168f0:	d102      	bne.n	80168f8 <_fstat_r+0x1c>
 80168f2:	6823      	ldr	r3, [r4, #0]
 80168f4:	b103      	cbz	r3, 80168f8 <_fstat_r+0x1c>
 80168f6:	602b      	str	r3, [r5, #0]
 80168f8:	bd38      	pop	{r3, r4, r5, pc}
 80168fa:	bf00      	nop
 80168fc:	200176b8 	.word	0x200176b8

08016900 <_isatty_r>:
 8016900:	b538      	push	{r3, r4, r5, lr}
 8016902:	4c06      	ldr	r4, [pc, #24]	; (801691c <_isatty_r+0x1c>)
 8016904:	2300      	movs	r3, #0
 8016906:	4605      	mov	r5, r0
 8016908:	4608      	mov	r0, r1
 801690a:	6023      	str	r3, [r4, #0]
 801690c:	f7ea fc8b 	bl	8001226 <_isatty>
 8016910:	1c43      	adds	r3, r0, #1
 8016912:	d102      	bne.n	801691a <_isatty_r+0x1a>
 8016914:	6823      	ldr	r3, [r4, #0]
 8016916:	b103      	cbz	r3, 801691a <_isatty_r+0x1a>
 8016918:	602b      	str	r3, [r5, #0]
 801691a:	bd38      	pop	{r3, r4, r5, pc}
 801691c:	200176b8 	.word	0x200176b8

08016920 <_lseek_r>:
 8016920:	b538      	push	{r3, r4, r5, lr}
 8016922:	4c07      	ldr	r4, [pc, #28]	; (8016940 <_lseek_r+0x20>)
 8016924:	4605      	mov	r5, r0
 8016926:	4608      	mov	r0, r1
 8016928:	4611      	mov	r1, r2
 801692a:	2200      	movs	r2, #0
 801692c:	6022      	str	r2, [r4, #0]
 801692e:	461a      	mov	r2, r3
 8016930:	f7ea fc84 	bl	800123c <_lseek>
 8016934:	1c43      	adds	r3, r0, #1
 8016936:	d102      	bne.n	801693e <_lseek_r+0x1e>
 8016938:	6823      	ldr	r3, [r4, #0]
 801693a:	b103      	cbz	r3, 801693e <_lseek_r+0x1e>
 801693c:	602b      	str	r3, [r5, #0]
 801693e:	bd38      	pop	{r3, r4, r5, pc}
 8016940:	200176b8 	.word	0x200176b8

08016944 <memmove>:
 8016944:	4288      	cmp	r0, r1
 8016946:	b510      	push	{r4, lr}
 8016948:	eb01 0302 	add.w	r3, r1, r2
 801694c:	d807      	bhi.n	801695e <memmove+0x1a>
 801694e:	1e42      	subs	r2, r0, #1
 8016950:	4299      	cmp	r1, r3
 8016952:	d00a      	beq.n	801696a <memmove+0x26>
 8016954:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016958:	f802 4f01 	strb.w	r4, [r2, #1]!
 801695c:	e7f8      	b.n	8016950 <memmove+0xc>
 801695e:	4283      	cmp	r3, r0
 8016960:	d9f5      	bls.n	801694e <memmove+0xa>
 8016962:	1881      	adds	r1, r0, r2
 8016964:	1ad2      	subs	r2, r2, r3
 8016966:	42d3      	cmn	r3, r2
 8016968:	d100      	bne.n	801696c <memmove+0x28>
 801696a:	bd10      	pop	{r4, pc}
 801696c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016970:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016974:	e7f7      	b.n	8016966 <memmove+0x22>

08016976 <__malloc_lock>:
 8016976:	4770      	bx	lr

08016978 <__malloc_unlock>:
 8016978:	4770      	bx	lr

0801697a <_realloc_r>:
 801697a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801697c:	4607      	mov	r7, r0
 801697e:	4614      	mov	r4, r2
 8016980:	460e      	mov	r6, r1
 8016982:	b921      	cbnz	r1, 801698e <_realloc_r+0x14>
 8016984:	4611      	mov	r1, r2
 8016986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801698a:	f7ff bab1 	b.w	8015ef0 <_malloc_r>
 801698e:	b922      	cbnz	r2, 801699a <_realloc_r+0x20>
 8016990:	f7ff fa60 	bl	8015e54 <_free_r>
 8016994:	4625      	mov	r5, r4
 8016996:	4628      	mov	r0, r5
 8016998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801699a:	f000 f827 	bl	80169ec <_malloc_usable_size_r>
 801699e:	42a0      	cmp	r0, r4
 80169a0:	d20f      	bcs.n	80169c2 <_realloc_r+0x48>
 80169a2:	4621      	mov	r1, r4
 80169a4:	4638      	mov	r0, r7
 80169a6:	f7ff faa3 	bl	8015ef0 <_malloc_r>
 80169aa:	4605      	mov	r5, r0
 80169ac:	2800      	cmp	r0, #0
 80169ae:	d0f2      	beq.n	8016996 <_realloc_r+0x1c>
 80169b0:	4631      	mov	r1, r6
 80169b2:	4622      	mov	r2, r4
 80169b4:	f7fe fe39 	bl	801562a <memcpy>
 80169b8:	4631      	mov	r1, r6
 80169ba:	4638      	mov	r0, r7
 80169bc:	f7ff fa4a 	bl	8015e54 <_free_r>
 80169c0:	e7e9      	b.n	8016996 <_realloc_r+0x1c>
 80169c2:	4635      	mov	r5, r6
 80169c4:	e7e7      	b.n	8016996 <_realloc_r+0x1c>
	...

080169c8 <_read_r>:
 80169c8:	b538      	push	{r3, r4, r5, lr}
 80169ca:	4c07      	ldr	r4, [pc, #28]	; (80169e8 <_read_r+0x20>)
 80169cc:	4605      	mov	r5, r0
 80169ce:	4608      	mov	r0, r1
 80169d0:	4611      	mov	r1, r2
 80169d2:	2200      	movs	r2, #0
 80169d4:	6022      	str	r2, [r4, #0]
 80169d6:	461a      	mov	r2, r3
 80169d8:	f7ea fbd0 	bl	800117c <_read>
 80169dc:	1c43      	adds	r3, r0, #1
 80169de:	d102      	bne.n	80169e6 <_read_r+0x1e>
 80169e0:	6823      	ldr	r3, [r4, #0]
 80169e2:	b103      	cbz	r3, 80169e6 <_read_r+0x1e>
 80169e4:	602b      	str	r3, [r5, #0]
 80169e6:	bd38      	pop	{r3, r4, r5, pc}
 80169e8:	200176b8 	.word	0x200176b8

080169ec <_malloc_usable_size_r>:
 80169ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169f0:	1f18      	subs	r0, r3, #4
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	bfbc      	itt	lt
 80169f6:	580b      	ldrlt	r3, [r1, r0]
 80169f8:	18c0      	addlt	r0, r0, r3
 80169fa:	4770      	bx	lr

080169fc <_init>:
 80169fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169fe:	bf00      	nop
 8016a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a02:	bc08      	pop	{r3}
 8016a04:	469e      	mov	lr, r3
 8016a06:	4770      	bx	lr

08016a08 <_fini>:
 8016a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a0a:	bf00      	nop
 8016a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a0e:	bc08      	pop	{r3}
 8016a10:	469e      	mov	lr, r3
 8016a12:	4770      	bx	lr
